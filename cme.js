var z5 = Object.defineProperty;
var F5 = (n, e, t) => e in n ? z5(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var Yr = (n, e, t) => F5(n, typeof e != "symbol" ? e + "" : e, t);
(function() {
  const e = document.createElement("link").relList;
  if (e && e.supports && e.supports("modulepreload"))
    return;
  for (const i of document.querySelectorAll('link[rel="modulepreload"]'))
    r(i);
  new MutationObserver((i) => {
    for (const s of i)
      if (s.type === "childList")
        for (const l of s.addedNodes)
          l.tagName === "LINK" && l.rel === "modulepreload" && r(l);
  }).observe(document, { childList: !0, subtree: !0 });
  function t(i) {
    const s = {};
    return i.integrity && (s.integrity = i.integrity), i.referrerPolicy && (s.referrerPolicy = i.referrerPolicy), i.crossOrigin === "use-credentials" ? s.credentials = "include" : i.crossOrigin === "anonymous" ? s.credentials = "omit" : s.credentials = "same-origin", s;
  }
  function r(i) {
    if (i.ep)
      return;
    i.ep = !0;
    const s = t(i);
    fetch(i.href, s);
  }
})();
function mc(n) {
  if (n)
    throw n;
}
function Dm(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var _a, gc;
function B5() {
  if (gc) return _a;
  gc = 1;
  var n = Object.prototype.hasOwnProperty, e = Object.prototype.toString, t = Object.defineProperty, r = Object.getOwnPropertyDescriptor, i = function(u) {
    return typeof Array.isArray == "function" ? Array.isArray(u) : e.call(u) === "[object Array]";
  }, s = function(u) {
    if (!u || e.call(u) !== "[object Object]")
      return !1;
    var h = n.call(u, "constructor"), c = u.constructor && u.constructor.prototype && n.call(u.constructor.prototype, "isPrototypeOf");
    if (u.constructor && !h && !c)
      return !1;
    var f;
    for (f in u)
      ;
    return typeof f > "u" || n.call(u, f);
  }, l = function(u, h) {
    t && h.name === "__proto__" ? t(u, h.name, {
      enumerable: !0,
      configurable: !0,
      value: h.newValue,
      writable: !0
    }) : u[h.name] = h.newValue;
  }, a = function(u, h) {
    if (h === "__proto__")
      if (n.call(u, h)) {
        if (r)
          return r(u, h).value;
      } else return;
    return u[h];
  };
  return _a = function o() {
    var u, h, c, f, d, m, O = arguments[0], x = 1, b = arguments.length, w = !1;
    for (typeof O == "boolean" && (w = O, O = arguments[1] || {}, x = 2), (O == null || typeof O != "object" && typeof O != "function") && (O = {}); x < b; ++x)
      if (u = arguments[x], u != null)
        for (h in u)
          c = a(O, h), f = a(u, h), O !== f && (w && f && (s(f) || (d = i(f))) ? (d ? (d = !1, m = c && i(c) ? c : []) : m = c && s(c) ? c : {}, l(O, { name: h, newValue: o(w, m, f) })) : typeof f < "u" && l(O, { name: h, newValue: f }));
    return O;
  }, _a;
}
var L5 = B5();
const Ua = /* @__PURE__ */ Dm(L5);
function Au(n) {
  if (typeof n != "object" || n === null)
    return !1;
  const e = Object.getPrototypeOf(n);
  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(Symbol.toStringTag in n) && !(Symbol.iterator in n);
}
function q5() {
  const n = [], e = { run: t, use: r };
  return e;
  function t(...i) {
    let s = -1;
    const l = i.pop();
    if (typeof l != "function")
      throw new TypeError("Expected function as last argument, not " + l);
    a(null, ...i);
    function a(o, ...u) {
      const h = n[++s];
      let c = -1;
      if (o) {
        l(o);
        return;
      }
      for (; ++c < i.length; )
        (u[c] === null || u[c] === void 0) && (u[c] = i[c]);
      i = u, h ? X5(h, a)(...u) : l(null, ...u);
    }
  }
  function r(i) {
    if (typeof i != "function")
      throw new TypeError(
        "Expected `middelware` to be a function, not " + i
      );
    return n.push(i), e;
  }
}
function X5(n, e) {
  let t;
  return r;
  function r(...l) {
    const a = n.length > l.length;
    let o;
    a && l.push(i);
    try {
      o = n.apply(this, l);
    } catch (u) {
      const h = (
        /** @type {Error} */
        u
      );
      if (a && t)
        throw h;
      return i(h);
    }
    a || (o && o.then && typeof o.then == "function" ? o.then(s, i) : o instanceof Error ? i(o) : s(o));
  }
  function i(l, ...a) {
    t || (t = !0, e(l, ...a));
  }
  function s(l) {
    i(null, l);
  }
}
function Ji(n) {
  return !n || typeof n != "object" ? "" : "position" in n || "type" in n ? Oc(n.position) : "start" in n || "end" in n ? Oc(n) : "line" in n || "column" in n ? $u(n) : "";
}
function $u(n) {
  return yc(n && n.line) + ":" + yc(n && n.column);
}
function Oc(n) {
  return $u(n && n.start) + "-" + $u(n && n.end);
}
function yc(n) {
  return n && typeof n == "number" ? n : 1;
}
class $t extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(e, t, r) {
    super(), typeof t == "string" && (r = t, t = void 0);
    let i = "", s = {}, l = !1;
    if (t && ("line" in t && "column" in t ? s = { place: t } : "start" in t && "end" in t ? s = { place: t } : "type" in t ? s = {
      ancestors: [t],
      place: t.position
    } : s = { ...t }), typeof e == "string" ? i = e : !s.cause && e && (l = !0, i = e.message, s.cause = e), !s.ruleId && !s.source && typeof r == "string") {
      const o = r.indexOf(":");
      o === -1 ? s.ruleId = r : (s.source = r.slice(0, o), s.ruleId = r.slice(o + 1));
    }
    if (!s.place && s.ancestors && s.ancestors) {
      const o = s.ancestors[s.ancestors.length - 1];
      o && (s.place = o.position);
    }
    const a = s.place && "start" in s.place ? s.place.start : s.place;
    this.ancestors = s.ancestors || void 0, this.cause = s.cause || void 0, this.column = a ? a.column : void 0, this.fatal = void 0, this.file, this.message = i, this.line = a ? a.line : void 0, this.name = Ji(s.place) || "1:1", this.place = s.place || void 0, this.reason = this.message, this.ruleId = s.ruleId || void 0, this.source = s.source || void 0, this.stack = l && s.cause && typeof s.cause.stack == "string" ? s.cause.stack : "", this.actual, this.expected, this.note, this.url;
  }
}
$t.prototype.file = "";
$t.prototype.name = "";
$t.prototype.reason = "";
$t.prototype.message = "";
$t.prototype.stack = "";
$t.prototype.column = void 0;
$t.prototype.line = void 0;
$t.prototype.ancestors = void 0;
$t.prototype.cause = void 0;
$t.prototype.fatal = void 0;
$t.prototype.place = void 0;
$t.prototype.ruleId = void 0;
$t.prototype.source = void 0;
const On = { basename: I5, dirname: N5, extname: V5, join: j5, sep: "/" };
function I5(n, e) {
  if (e !== void 0 && typeof e != "string")
    throw new TypeError('"ext" argument must be a string');
  Ms(n);
  let t = 0, r = -1, i = n.length, s;
  if (e === void 0 || e.length === 0 || e.length > n.length) {
    for (; i--; )
      if (n.codePointAt(i) === 47) {
        if (s) {
          t = i + 1;
          break;
        }
      } else r < 0 && (s = !0, r = i + 1);
    return r < 0 ? "" : n.slice(t, r);
  }
  if (e === n)
    return "";
  let l = -1, a = e.length - 1;
  for (; i--; )
    if (n.codePointAt(i) === 47) {
      if (s) {
        t = i + 1;
        break;
      }
    } else
      l < 0 && (s = !0, l = i + 1), a > -1 && (n.codePointAt(i) === e.codePointAt(a--) ? a < 0 && (r = i) : (a = -1, r = l));
  return t === r ? r = l : r < 0 && (r = n.length), n.slice(t, r);
}
function N5(n) {
  if (Ms(n), n.length === 0)
    return ".";
  let e = -1, t = n.length, r;
  for (; --t; )
    if (n.codePointAt(t) === 47) {
      if (r) {
        e = t;
        break;
      }
    } else r || (r = !0);
  return e < 0 ? n.codePointAt(0) === 47 ? "/" : "." : e === 1 && n.codePointAt(0) === 47 ? "//" : n.slice(0, e);
}
function V5(n) {
  Ms(n);
  let e = n.length, t = -1, r = 0, i = -1, s = 0, l;
  for (; e--; ) {
    const a = n.codePointAt(e);
    if (a === 47) {
      if (l) {
        r = e + 1;
        break;
      }
      continue;
    }
    t < 0 && (l = !0, t = e + 1), a === 46 ? i < 0 ? i = e : s !== 1 && (s = 1) : i > -1 && (s = -1);
  }
  return i < 0 || t < 0 || // We saw a non-dot character immediately before the dot.
  s === 0 || // The (right-most) trimmed path component is exactly `..`.
  s === 1 && i === t - 1 && i === r + 1 ? "" : n.slice(i, t);
}
function j5(...n) {
  let e = -1, t;
  for (; ++e < n.length; )
    Ms(n[e]), n[e] && (t = t === void 0 ? n[e] : t + "/" + n[e]);
  return t === void 0 ? "." : _5(t);
}
function _5(n) {
  Ms(n);
  const e = n.codePointAt(0) === 47;
  let t = U5(n, !e);
  return t.length === 0 && !e && (t = "."), t.length > 0 && n.codePointAt(n.length - 1) === 47 && (t += "/"), e ? "/" + t : t;
}
function U5(n, e) {
  let t = "", r = 0, i = -1, s = 0, l = -1, a, o;
  for (; ++l <= n.length; ) {
    if (l < n.length)
      a = n.codePointAt(l);
    else {
      if (a === 47)
        break;
      a = 47;
    }
    if (a === 47) {
      if (!(i === l - 1 || s === 1)) if (i !== l - 1 && s === 2) {
        if (t.length < 2 || r !== 2 || t.codePointAt(t.length - 1) !== 46 || t.codePointAt(t.length - 2) !== 46) {
          if (t.length > 2) {
            if (o = t.lastIndexOf("/"), o !== t.length - 1) {
              o < 0 ? (t = "", r = 0) : (t = t.slice(0, o), r = t.length - 1 - t.lastIndexOf("/")), i = l, s = 0;
              continue;
            }
          } else if (t.length > 0) {
            t = "", r = 0, i = l, s = 0;
            continue;
          }
        }
        e && (t = t.length > 0 ? t + "/.." : "..", r = 2);
      } else
        t.length > 0 ? t += "/" + n.slice(i + 1, l) : t = n.slice(i + 1, l), r = l - i - 1;
      i = l, s = 0;
    } else a === 46 && s > -1 ? s++ : s = -1;
  }
  return t;
}
function Ms(n) {
  if (typeof n != "string")
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(n)
    );
}
const W5 = { cwd: Y5 };
function Y5() {
  return "/";
}
function Du(n) {
  return !!(n !== null && typeof n == "object" && "href" in n && n.href && "protocol" in n && n.protocol && // @ts-expect-error: indexing is fine.
  n.auth === void 0);
}
function G5(n) {
  if (typeof n == "string")
    n = new URL(n);
  else if (!Du(n)) {
    const e = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + n + "`"
    );
    throw e.code = "ERR_INVALID_ARG_TYPE", e;
  }
  if (n.protocol !== "file:") {
    const e = new TypeError("The URL must be of scheme file");
    throw e.code = "ERR_INVALID_URL_SCHEME", e;
  }
  return H5(n);
}
function H5(n) {
  if (n.hostname !== "") {
    const r = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    throw r.code = "ERR_INVALID_FILE_URL_HOST", r;
  }
  const e = n.pathname;
  let t = -1;
  for (; ++t < e.length; )
    if (e.codePointAt(t) === 37 && e.codePointAt(t + 1) === 50) {
      const r = e.codePointAt(t + 2);
      if (r === 70 || r === 102) {
        const i = new TypeError(
          "File URL path must not include encoded / characters"
        );
        throw i.code = "ERR_INVALID_FILE_URL_PATH", i;
      }
    }
  return decodeURIComponent(e);
}
const Wa = (
  /** @type {const} */
  [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
  ]
);
class K5 {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(e) {
    let t;
    e ? Du(e) ? t = { path: e } : typeof e == "string" || J5(e) ? t = { value: e } : t = e : t = {}, this.cwd = "cwd" in t ? "" : W5.cwd(), this.data = {}, this.history = [], this.messages = [], this.value, this.map, this.result, this.stored;
    let r = -1;
    for (; ++r < Wa.length; ) {
      const s = Wa[r];
      s in t && t[s] !== void 0 && t[s] !== null && (this[s] = s === "history" ? [...t[s]] : t[s]);
    }
    let i;
    for (i in t)
      Wa.includes(i) || (this[i] = t[i]);
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path == "string" ? On.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(e) {
    Ga(e, "basename"), Ya(e, "basename"), this.path = On.join(this.dirname || "", e);
  }
  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path == "string" ? On.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(e) {
    bc(this.basename, "dirname"), this.path = On.join(e || "", this.basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path == "string" ? On.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(e) {
    if (Ya(e, "extname"), bc(this.dirname, "extname"), e) {
      if (e.codePointAt(0) !== 46)
        throw new Error("`extname` must start with `.`");
      if (e.includes(".", 1))
        throw new Error("`extname` cannot contain multiple dots");
    }
    this.path = On.join(this.dirname, this.stem + (e || ""));
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(e) {
    Du(e) && (e = G5(e)), Ga(e, "path"), this.path !== e && this.history.push(e);
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path == "string" ? On.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(e) {
    Ga(e, "stem"), Ya(e, "stem"), this.path = On.join(this.dirname || "", e + (this.extname || ""));
  }
  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(e, t, r) {
    const i = this.message(e, t, r);
    throw i.fatal = !0, i;
  }
  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(e, t, r) {
    const i = this.message(e, t, r);
    return i.fatal = void 0, i;
  }
  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(e, t, r) {
    const i = new $t(
      // @ts-expect-error: the overloads are fine.
      e,
      t,
      r
    );
    return this.path && (i.name = this.path + ":" + i.name, i.file = this.path), i.fatal = !1, this.messages.push(i), i;
  }
  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(e) {
    return this.value === void 0 ? "" : typeof this.value == "string" ? this.value : new TextDecoder(e || void 0).decode(this.value);
  }
}
function Ya(n, e) {
  if (n && n.includes(On.sep))
    throw new Error(
      "`" + e + "` cannot be a path: did not expect `" + On.sep + "`"
    );
}
function Ga(n, e) {
  if (!n)
    throw new Error("`" + e + "` cannot be empty");
}
function bc(n, e) {
  if (!n)
    throw new Error("Setting `" + e + "` requires `path` to be set too");
}
function J5(n) {
  return !!(n && typeof n == "object" && "byteLength" in n && "byteOffset" in n);
}
const e3 = (
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  /** @type {unknown} */
  /**
   * @this {Function}
   * @param {string | symbol} property
   * @returns {(...parameters: Array<unknown>) => unknown}
   */
  function(n) {
    const r = (
      /** @type {Record<string | symbol, Function>} */
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      this.constructor.prototype
    ), i = r[n], s = function() {
      return i.apply(s, arguments);
    };
    return Object.setPrototypeOf(s, r), s;
  }
), t3 = {}.hasOwnProperty;
class Y0 extends e3 {
  /**
   * Create a processor.
   */
  constructor() {
    super("copy"), this.Compiler = void 0, this.Parser = void 0, this.attachers = [], this.compiler = void 0, this.freezeIndex = -1, this.frozen = void 0, this.namespace = {}, this.parser = void 0, this.transformers = q5();
  }
  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    const e = (
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
      new Y0()
    );
    let t = -1;
    for (; ++t < this.attachers.length; ) {
      const r = this.attachers[t];
      e.use(...r);
    }
    return e.data(Ua(!0, {}, this.namespace)), e;
  }
  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(e, t) {
    return typeof e == "string" ? arguments.length === 2 ? (Ja("data", this.frozen), this.namespace[e] = t, this) : t3.call(this.namespace, e) && this.namespace[e] || void 0 : e ? (Ja("data", this.frozen), this.namespace = e, this) : this.namespace;
  }
  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen)
      return this;
    const e = (
      /** @type {Processor} */
      /** @type {unknown} */
      this
    );
    for (; ++this.freezeIndex < this.attachers.length; ) {
      const [t, ...r] = this.attachers[this.freezeIndex];
      if (r[0] === !1)
        continue;
      r[0] === !0 && (r[0] = void 0);
      const i = t.call(e, ...r);
      typeof i == "function" && this.transformers.use(i);
    }
    return this.frozen = !0, this.freezeIndex = Number.POSITIVE_INFINITY, this;
  }
  /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(e) {
    this.freeze();
    const t = Hs(e), r = this.parser || this.Parser;
    return Ha("parse", r), r(String(t), t);
  }
  /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(e, t) {
    const r = this;
    return this.freeze(), Ha("process", this.parser || this.Parser), Ka("process", this.compiler || this.Compiler), t ? i(void 0, t) : new Promise(i);
    function i(s, l) {
      const a = Hs(e), o = (
        /** @type {HeadTree extends undefined ? Node : HeadTree} */
        /** @type {unknown} */
        r.parse(a)
      );
      r.run(o, a, function(h, c, f) {
        if (h || !c || !f)
          return u(h);
        const d = (
          /** @type {CompileTree extends undefined ? Node : CompileTree} */
          /** @type {unknown} */
          c
        ), m = r.stringify(d, f);
        i3(m) ? f.value = m : f.result = m, u(
          h,
          /** @type {VFileWithOutput<CompileResult>} */
          f
        );
      });
      function u(h, c) {
        h || !c ? l(h) : s ? s(c) : t(void 0, c);
      }
    }
  }
  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(e) {
    let t = !1, r;
    return this.freeze(), Ha("processSync", this.parser || this.Parser), Ka("processSync", this.compiler || this.Compiler), this.process(e, i), vc("processSync", "process", t), r;
    function i(s, l) {
      t = !0, mc(s), r = l;
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(e, t, r) {
    xc(e), this.freeze();
    const i = this.transformers;
    return !r && typeof t == "function" && (r = t, t = void 0), r ? s(void 0, r) : new Promise(s);
    function s(l, a) {
      const o = Hs(t);
      i.run(e, o, u);
      function u(h, c, f) {
        const d = (
          /** @type {TailTree extends undefined ? Node : TailTree} */
          c || e
        );
        h ? a(h) : l ? l(d) : r(void 0, d, f);
      }
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(e, t) {
    let r = !1, i;
    return this.run(e, t, s), vc("runSync", "run", r), i;
    function s(l, a) {
      mc(l), i = a, r = !0;
    }
  }
  /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(e, t) {
    this.freeze();
    const r = Hs(t), i = this.compiler || this.Compiler;
    return Ka("stringify", i), xc(e), i(e, r);
  }
  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(e, ...t) {
    const r = this.attachers, i = this.namespace;
    if (Ja("use", this.frozen), e != null) if (typeof e == "function")
      o(e, t);
    else if (typeof e == "object")
      Array.isArray(e) ? a(e) : l(e);
    else
      throw new TypeError("Expected usable value, not `" + e + "`");
    return this;
    function s(u) {
      if (typeof u == "function")
        o(u, []);
      else if (typeof u == "object")
        if (Array.isArray(u)) {
          const [h, ...c] = (
            /** @type {PluginTuple<Array<unknown>>} */
            u
          );
          o(h, c);
        } else
          l(u);
      else
        throw new TypeError("Expected usable value, not `" + u + "`");
    }
    function l(u) {
      if (!("plugins" in u) && !("settings" in u))
        throw new Error(
          "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
        );
      a(u.plugins), u.settings && (i.settings = Ua(!0, i.settings, u.settings));
    }
    function a(u) {
      let h = -1;
      if (u != null) if (Array.isArray(u))
        for (; ++h < u.length; ) {
          const c = u[h];
          s(c);
        }
      else
        throw new TypeError("Expected a list of plugins, not `" + u + "`");
    }
    function o(u, h) {
      let c = -1, f = -1;
      for (; ++c < r.length; )
        if (r[c][0] === u) {
          f = c;
          break;
        }
      if (f === -1)
        r.push([u, ...h]);
      else if (h.length > 0) {
        let [d, ...m] = h;
        const O = r[f][1];
        Au(O) && Au(d) && (d = Ua(!0, O, d)), r[f] = [u, d, ...m];
      }
    }
  }
}
const n3 = new Y0().freeze();
function Ha(n, e) {
  if (typeof e != "function")
    throw new TypeError("Cannot `" + n + "` without `parser`");
}
function Ka(n, e) {
  if (typeof e != "function")
    throw new TypeError("Cannot `" + n + "` without `compiler`");
}
function Ja(n, e) {
  if (e)
    throw new Error(
      "Cannot call `" + n + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
}
function xc(n) {
  if (!Au(n) || typeof n.type != "string")
    throw new TypeError("Expected node, got `" + n + "`");
}
function vc(n, e, t) {
  if (!t)
    throw new Error(
      "`" + n + "` finished async. Use `" + e + "` instead"
    );
}
function Hs(n) {
  return r3(n) ? n : new K5(n);
}
function r3(n) {
  return !!(n && typeof n == "object" && "message" in n && "messages" in n);
}
function i3(n) {
  return typeof n == "string" || s3(n);
}
function s3(n) {
  return !!(n && typeof n == "object" && "byteLength" in n && "byteOffset" in n);
}
const l3 = {};
function G0(n, e) {
  const t = l3, r = typeof t.includeImageAlt == "boolean" ? t.includeImageAlt : !0, i = typeof t.includeHtml == "boolean" ? t.includeHtml : !0;
  return Tm(n, r, i);
}
function Tm(n, e, t) {
  if (a3(n)) {
    if ("value" in n)
      return n.type === "html" && !t ? "" : n.value;
    if (e && "alt" in n && n.alt)
      return n.alt;
    if ("children" in n)
      return wc(n.children, e, t);
  }
  return Array.isArray(n) ? wc(n, e, t) : "";
}
function wc(n, e, t) {
  const r = [];
  let i = -1;
  for (; ++i < n.length; )
    r[i] = Tm(n[i], e, t);
  return r.join("");
}
function a3(n) {
  return !!(n && typeof n == "object");
}
const kc = document.createElement("i");
function H0(n) {
  const e = "&" + n + ";";
  kc.innerHTML = e;
  const t = kc.textContent;
  return t.charCodeAt(t.length - 1) === 59 && n !== "semi" || t === e ? !1 : t;
}
function It(n, e, t, r) {
  const i = n.length;
  let s = 0, l;
  if (e < 0 ? e = -e > i ? 0 : i + e : e = e > i ? i : e, t = t > 0 ? t : 0, r.length < 1e4)
    l = Array.from(r), l.unshift(e, t), n.splice(...l);
  else
    for (t && n.splice(e, t); s < r.length; )
      l = r.slice(s, s + 1e4), l.unshift(e, 0), n.splice(...l), s += 1e4, e += 1e4;
}
function _t(n, e) {
  return n.length > 0 ? (It(n, n.length, 0, e), n) : e;
}
const Sc = {}.hasOwnProperty;
function Mm(n) {
  const e = {};
  let t = -1;
  for (; ++t < n.length; )
    o3(e, n[t]);
  return e;
}
function o3(n, e) {
  let t;
  for (t in e) {
    const i = (Sc.call(n, t) ? n[t] : void 0) || (n[t] = {}), s = e[t];
    let l;
    if (s)
      for (l in s) {
        Sc.call(i, l) || (i[l] = []);
        const a = s[l];
        u3(
          // @ts-expect-error Looks like a list.
          i[l],
          Array.isArray(a) ? a : a ? [a] : []
        );
      }
  }
}
function u3(n, e) {
  let t = -1;
  const r = [];
  for (; ++t < e.length; )
    (e[t].add === "after" ? n : r).push(e[t]);
  It(n, 0, 0, r);
}
function Em(n, e) {
  const t = Number.parseInt(n, e);
  return (
    // C0 except for HT, LF, FF, CR, space.
    t < 9 || t === 11 || t > 13 && t < 32 || // Control character (DEL) of C0, and C1 controls.
    t > 126 && t < 160 || // Lone high surrogates and low surrogates.
    t > 55295 && t < 57344 || // Noncharacters.
    t > 64975 && t < 65008 || /* eslint-disable no-bitwise */
    (t & 65535) === 65535 || (t & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    t > 1114111 ? "�" : String.fromCodePoint(t)
  );
}
function hn(n) {
  return n.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}
const yt = vr(/[A-Za-z]/), dt = vr(/[\dA-Za-z]/), h3 = vr(/[#-'*+\--9=?A-Z^-~]/);
function Ul(n) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    n !== null && (n < 32 || n === 127)
  );
}
const Tu = vr(/\d/), c3 = vr(/[\dA-Fa-f]/), f3 = vr(/[!-/:-@[-`{-~]/);
function ie(n) {
  return n !== null && n < -2;
}
function Ee(n) {
  return n !== null && (n < 0 || n === 32);
}
function xe(n) {
  return n === -2 || n === -1 || n === 32;
}
const ka = vr(new RegExp("\\p{P}|\\p{S}", "u")), Fr = vr(/\s/);
function vr(n) {
  return e;
  function e(t) {
    return t !== null && t > -1 && n.test(String.fromCharCode(t));
  }
}
function ki(n) {
  const e = [];
  let t = -1, r = 0, i = 0;
  for (; ++t < n.length; ) {
    const s = n.charCodeAt(t);
    let l = "";
    if (s === 37 && dt(n.charCodeAt(t + 1)) && dt(n.charCodeAt(t + 2)))
      i = 2;
    else if (s < 128)
      /[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(s)) || (l = String.fromCharCode(s));
    else if (s > 55295 && s < 57344) {
      const a = n.charCodeAt(t + 1);
      s < 56320 && a > 56319 && a < 57344 ? (l = String.fromCharCode(s, a), i = 1) : l = "�";
    } else
      l = String.fromCharCode(s);
    l && (e.push(n.slice(r, t), encodeURIComponent(l)), r = t + i + 1, l = ""), i && (t += i, i = 0);
  }
  return e.join("") + n.slice(r);
}
function be(n, e, t, r) {
  const i = r ? r - 1 : Number.POSITIVE_INFINITY;
  let s = 0;
  return l;
  function l(o) {
    return xe(o) ? (n.enter(t), a(o)) : e(o);
  }
  function a(o) {
    return xe(o) && s++ < i ? (n.consume(o), a) : (n.exit(t), e(o));
  }
}
const d3 = {
  tokenize: p3
};
function p3(n) {
  const e = n.attempt(this.parser.constructs.contentInitial, r, i);
  let t;
  return e;
  function r(a) {
    if (a === null) {
      n.consume(a);
      return;
    }
    return n.enter("lineEnding"), n.consume(a), n.exit("lineEnding"), be(n, e, "linePrefix");
  }
  function i(a) {
    return n.enter("paragraph"), s(a);
  }
  function s(a) {
    const o = n.enter("chunkText", {
      contentType: "text",
      previous: t
    });
    return t && (t.next = o), t = o, l(a);
  }
  function l(a) {
    if (a === null) {
      n.exit("chunkText"), n.exit("paragraph"), n.consume(a);
      return;
    }
    return ie(a) ? (n.consume(a), n.exit("chunkText"), s) : (n.consume(a), l);
  }
}
const m3 = {
  tokenize: g3
}, Qc = {
  tokenize: O3
};
function g3(n) {
  const e = this, t = [];
  let r = 0, i, s, l;
  return a;
  function a(C) {
    if (r < t.length) {
      const Z = t[r];
      return e.containerState = Z[1], n.attempt(Z[0].continuation, o, u)(C);
    }
    return u(C);
  }
  function o(C) {
    if (r++, e.containerState._closeFlow) {
      e.containerState._closeFlow = void 0, i && w();
      const Z = e.events.length;
      let T = Z, S;
      for (; T--; )
        if (e.events[T][0] === "exit" && e.events[T][1].type === "chunkFlow") {
          S = e.events[T][1].end;
          break;
        }
      b(r);
      let E = Z;
      for (; E < e.events.length; )
        e.events[E][1].end = {
          ...S
        }, E++;
      return It(e.events, T + 1, 0, e.events.slice(Z)), e.events.length = E, u(C);
    }
    return a(C);
  }
  function u(C) {
    if (r === t.length) {
      if (!i)
        return f(C);
      if (i.currentConstruct && i.currentConstruct.concrete)
        return m(C);
      e.interrupt = !!(i.currentConstruct && !i._gfmTableDynamicInterruptHack);
    }
    return e.containerState = {}, n.check(Qc, h, c)(C);
  }
  function h(C) {
    return i && w(), b(r), f(C);
  }
  function c(C) {
    return e.parser.lazy[e.now().line] = r !== t.length, l = e.now().offset, m(C);
  }
  function f(C) {
    return e.containerState = {}, n.attempt(Qc, d, m)(C);
  }
  function d(C) {
    return r++, t.push([e.currentConstruct, e.containerState]), f(C);
  }
  function m(C) {
    if (C === null) {
      i && w(), b(0), n.consume(C);
      return;
    }
    return i = i || e.parser.flow(e.now()), n.enter("chunkFlow", {
      _tokenizer: i,
      contentType: "flow",
      previous: s
    }), O(C);
  }
  function O(C) {
    if (C === null) {
      x(n.exit("chunkFlow"), !0), b(0), n.consume(C);
      return;
    }
    return ie(C) ? (n.consume(C), x(n.exit("chunkFlow")), r = 0, e.interrupt = void 0, a) : (n.consume(C), O);
  }
  function x(C, Z) {
    const T = e.sliceStream(C);
    if (Z && T.push(null), C.previous = s, s && (s.next = C), s = C, i.defineSkip(C.start), i.write(T), e.parser.lazy[C.start.line]) {
      let S = i.events.length;
      for (; S--; )
        if (
          // The token starts before the line ending…
          i.events[S][1].start.offset < l && // …and either is not ended yet…
          (!i.events[S][1].end || // …or ends after it.
          i.events[S][1].end.offset > l)
        )
          return;
      const E = e.events.length;
      let N = E, z, M;
      for (; N--; )
        if (e.events[N][0] === "exit" && e.events[N][1].type === "chunkFlow") {
          if (z) {
            M = e.events[N][1].end;
            break;
          }
          z = !0;
        }
      for (b(r), S = E; S < e.events.length; )
        e.events[S][1].end = {
          ...M
        }, S++;
      It(e.events, N + 1, 0, e.events.slice(E)), e.events.length = S;
    }
  }
  function b(C) {
    let Z = t.length;
    for (; Z-- > C; ) {
      const T = t[Z];
      e.containerState = T[1], T[0].exit.call(e, n);
    }
    t.length = C;
  }
  function w() {
    i.write([null]), s = void 0, i = void 0, e.containerState._closeFlow = void 0;
  }
}
function O3(n, e, t) {
  return be(n, n.attempt(this.parser.constructs.document, e, t), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4);
}
function ui(n) {
  if (n === null || Ee(n) || Fr(n))
    return 1;
  if (ka(n))
    return 2;
}
function Sa(n, e, t) {
  const r = [];
  let i = -1;
  for (; ++i < n.length; ) {
    const s = n[i].resolveAll;
    s && !r.includes(s) && (e = s(e, t), r.push(s));
  }
  return e;
}
const Mu = {
  name: "attention",
  resolveAll: y3,
  tokenize: b3
};
function y3(n, e) {
  let t = -1, r, i, s, l, a, o, u, h;
  for (; ++t < n.length; )
    if (n[t][0] === "enter" && n[t][1].type === "attentionSequence" && n[t][1]._close) {
      for (r = t; r--; )
        if (n[r][0] === "exit" && n[r][1].type === "attentionSequence" && n[r][1]._open && // If the markers are the same:
        e.sliceSerialize(n[r][1]).charCodeAt(0) === e.sliceSerialize(n[t][1]).charCodeAt(0)) {
          if ((n[r][1]._close || n[t][1]._open) && (n[t][1].end.offset - n[t][1].start.offset) % 3 && !((n[r][1].end.offset - n[r][1].start.offset + n[t][1].end.offset - n[t][1].start.offset) % 3))
            continue;
          o = n[r][1].end.offset - n[r][1].start.offset > 1 && n[t][1].end.offset - n[t][1].start.offset > 1 ? 2 : 1;
          const c = {
            ...n[r][1].end
          }, f = {
            ...n[t][1].start
          };
          Pc(c, -o), Pc(f, o), l = {
            type: o > 1 ? "strongSequence" : "emphasisSequence",
            start: c,
            end: {
              ...n[r][1].end
            }
          }, a = {
            type: o > 1 ? "strongSequence" : "emphasisSequence",
            start: {
              ...n[t][1].start
            },
            end: f
          }, s = {
            type: o > 1 ? "strongText" : "emphasisText",
            start: {
              ...n[r][1].end
            },
            end: {
              ...n[t][1].start
            }
          }, i = {
            type: o > 1 ? "strong" : "emphasis",
            start: {
              ...l.start
            },
            end: {
              ...a.end
            }
          }, n[r][1].end = {
            ...l.start
          }, n[t][1].start = {
            ...a.end
          }, u = [], n[r][1].end.offset - n[r][1].start.offset && (u = _t(u, [["enter", n[r][1], e], ["exit", n[r][1], e]])), u = _t(u, [["enter", i, e], ["enter", l, e], ["exit", l, e], ["enter", s, e]]), u = _t(u, Sa(e.parser.constructs.insideSpan.null, n.slice(r + 1, t), e)), u = _t(u, [["exit", s, e], ["enter", a, e], ["exit", a, e], ["exit", i, e]]), n[t][1].end.offset - n[t][1].start.offset ? (h = 2, u = _t(u, [["enter", n[t][1], e], ["exit", n[t][1], e]])) : h = 0, It(n, r - 1, t - r + 3, u), t = r + u.length - h - 2;
          break;
        }
    }
  for (t = -1; ++t < n.length; )
    n[t][1].type === "attentionSequence" && (n[t][1].type = "data");
  return n;
}
function b3(n, e) {
  const t = this.parser.constructs.attentionMarkers.null, r = this.previous, i = ui(r);
  let s;
  return l;
  function l(o) {
    return s = o, n.enter("attentionSequence"), a(o);
  }
  function a(o) {
    if (o === s)
      return n.consume(o), a;
    const u = n.exit("attentionSequence"), h = ui(o), c = !h || h === 2 && i || t.includes(o), f = !i || i === 2 && h || t.includes(r);
    return u._open = !!(s === 42 ? c : c && (i || !f)), u._close = !!(s === 42 ? f : f && (h || !c)), e(o);
  }
}
function Pc(n, e) {
  n.column += e, n.offset += e, n._bufferIndex += e;
}
const x3 = {
  name: "autolink",
  tokenize: v3
};
function v3(n, e, t) {
  let r = 0;
  return i;
  function i(d) {
    return n.enter("autolink"), n.enter("autolinkMarker"), n.consume(d), n.exit("autolinkMarker"), n.enter("autolinkProtocol"), s;
  }
  function s(d) {
    return yt(d) ? (n.consume(d), l) : d === 64 ? t(d) : u(d);
  }
  function l(d) {
    return d === 43 || d === 45 || d === 46 || dt(d) ? (r = 1, a(d)) : u(d);
  }
  function a(d) {
    return d === 58 ? (n.consume(d), r = 0, o) : (d === 43 || d === 45 || d === 46 || dt(d)) && r++ < 32 ? (n.consume(d), a) : (r = 0, u(d));
  }
  function o(d) {
    return d === 62 ? (n.exit("autolinkProtocol"), n.enter("autolinkMarker"), n.consume(d), n.exit("autolinkMarker"), n.exit("autolink"), e) : d === null || d === 32 || d === 60 || Ul(d) ? t(d) : (n.consume(d), o);
  }
  function u(d) {
    return d === 64 ? (n.consume(d), h) : h3(d) ? (n.consume(d), u) : t(d);
  }
  function h(d) {
    return dt(d) ? c(d) : t(d);
  }
  function c(d) {
    return d === 46 ? (n.consume(d), r = 0, h) : d === 62 ? (n.exit("autolinkProtocol").type = "autolinkEmail", n.enter("autolinkMarker"), n.consume(d), n.exit("autolinkMarker"), n.exit("autolink"), e) : f(d);
  }
  function f(d) {
    if ((d === 45 || dt(d)) && r++ < 63) {
      const m = d === 45 ? f : c;
      return n.consume(d), m;
    }
    return t(d);
  }
}
const Es = {
  partial: !0,
  tokenize: w3
};
function w3(n, e, t) {
  return r;
  function r(s) {
    return xe(s) ? be(n, i, "linePrefix")(s) : i(s);
  }
  function i(s) {
    return s === null || ie(s) ? e(s) : t(s);
  }
}
const Rm = {
  continuation: {
    tokenize: S3
  },
  exit: Q3,
  name: "blockQuote",
  tokenize: k3
};
function k3(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    if (l === 62) {
      const a = r.containerState;
      return a.open || (n.enter("blockQuote", {
        _container: !0
      }), a.open = !0), n.enter("blockQuotePrefix"), n.enter("blockQuoteMarker"), n.consume(l), n.exit("blockQuoteMarker"), s;
    }
    return t(l);
  }
  function s(l) {
    return xe(l) ? (n.enter("blockQuotePrefixWhitespace"), n.consume(l), n.exit("blockQuotePrefixWhitespace"), n.exit("blockQuotePrefix"), e) : (n.exit("blockQuotePrefix"), e(l));
  }
}
function S3(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return xe(l) ? be(n, s, "linePrefix", r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(l) : s(l);
  }
  function s(l) {
    return n.attempt(Rm, e, t)(l);
  }
}
function Q3(n) {
  n.exit("blockQuote");
}
const Zm = {
  name: "characterEscape",
  tokenize: P3
};
function P3(n, e, t) {
  return r;
  function r(s) {
    return n.enter("characterEscape"), n.enter("escapeMarker"), n.consume(s), n.exit("escapeMarker"), i;
  }
  function i(s) {
    return f3(s) ? (n.enter("characterEscapeValue"), n.consume(s), n.exit("characterEscapeValue"), n.exit("characterEscape"), e) : t(s);
  }
}
const zm = {
  name: "characterReference",
  tokenize: C3
};
function C3(n, e, t) {
  const r = this;
  let i = 0, s, l;
  return a;
  function a(c) {
    return n.enter("characterReference"), n.enter("characterReferenceMarker"), n.consume(c), n.exit("characterReferenceMarker"), o;
  }
  function o(c) {
    return c === 35 ? (n.enter("characterReferenceMarkerNumeric"), n.consume(c), n.exit("characterReferenceMarkerNumeric"), u) : (n.enter("characterReferenceValue"), s = 31, l = dt, h(c));
  }
  function u(c) {
    return c === 88 || c === 120 ? (n.enter("characterReferenceMarkerHexadecimal"), n.consume(c), n.exit("characterReferenceMarkerHexadecimal"), n.enter("characterReferenceValue"), s = 6, l = c3, h) : (n.enter("characterReferenceValue"), s = 7, l = Tu, h(c));
  }
  function h(c) {
    if (c === 59 && i) {
      const f = n.exit("characterReferenceValue");
      return l === dt && !H0(r.sliceSerialize(f)) ? t(c) : (n.enter("characterReferenceMarker"), n.consume(c), n.exit("characterReferenceMarker"), n.exit("characterReference"), e);
    }
    return l(c) && i++ < s ? (n.consume(c), h) : t(c);
  }
}
const Cc = {
  partial: !0,
  tokenize: $3
}, Ac = {
  concrete: !0,
  name: "codeFenced",
  tokenize: A3
};
function A3(n, e, t) {
  const r = this, i = {
    partial: !0,
    tokenize: T
  };
  let s = 0, l = 0, a;
  return o;
  function o(S) {
    return u(S);
  }
  function u(S) {
    const E = r.events[r.events.length - 1];
    return s = E && E[1].type === "linePrefix" ? E[2].sliceSerialize(E[1], !0).length : 0, a = S, n.enter("codeFenced"), n.enter("codeFencedFence"), n.enter("codeFencedFenceSequence"), h(S);
  }
  function h(S) {
    return S === a ? (l++, n.consume(S), h) : l < 3 ? t(S) : (n.exit("codeFencedFenceSequence"), xe(S) ? be(n, c, "whitespace")(S) : c(S));
  }
  function c(S) {
    return S === null || ie(S) ? (n.exit("codeFencedFence"), r.interrupt ? e(S) : n.check(Cc, O, Z)(S)) : (n.enter("codeFencedFenceInfo"), n.enter("chunkString", {
      contentType: "string"
    }), f(S));
  }
  function f(S) {
    return S === null || ie(S) ? (n.exit("chunkString"), n.exit("codeFencedFenceInfo"), c(S)) : xe(S) ? (n.exit("chunkString"), n.exit("codeFencedFenceInfo"), be(n, d, "whitespace")(S)) : S === 96 && S === a ? t(S) : (n.consume(S), f);
  }
  function d(S) {
    return S === null || ie(S) ? c(S) : (n.enter("codeFencedFenceMeta"), n.enter("chunkString", {
      contentType: "string"
    }), m(S));
  }
  function m(S) {
    return S === null || ie(S) ? (n.exit("chunkString"), n.exit("codeFencedFenceMeta"), c(S)) : S === 96 && S === a ? t(S) : (n.consume(S), m);
  }
  function O(S) {
    return n.attempt(i, Z, x)(S);
  }
  function x(S) {
    return n.enter("lineEnding"), n.consume(S), n.exit("lineEnding"), b;
  }
  function b(S) {
    return s > 0 && xe(S) ? be(n, w, "linePrefix", s + 1)(S) : w(S);
  }
  function w(S) {
    return S === null || ie(S) ? n.check(Cc, O, Z)(S) : (n.enter("codeFlowValue"), C(S));
  }
  function C(S) {
    return S === null || ie(S) ? (n.exit("codeFlowValue"), w(S)) : (n.consume(S), C);
  }
  function Z(S) {
    return n.exit("codeFenced"), e(S);
  }
  function T(S, E, N) {
    let z = 0;
    return M;
    function M(K) {
      return S.enter("lineEnding"), S.consume(K), S.exit("lineEnding"), L;
    }
    function L(K) {
      return S.enter("codeFencedFence"), xe(K) ? be(S, F, "linePrefix", r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(K) : F(K);
    }
    function F(K) {
      return K === a ? (S.enter("codeFencedFenceSequence"), ne(K)) : N(K);
    }
    function ne(K) {
      return K === a ? (z++, S.consume(K), ne) : z >= l ? (S.exit("codeFencedFenceSequence"), xe(K) ? be(S, J, "whitespace")(K) : J(K)) : N(K);
    }
    function J(K) {
      return K === null || ie(K) ? (S.exit("codeFencedFence"), E(K)) : N(K);
    }
  }
}
function $3(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return l === null ? t(l) : (n.enter("lineEnding"), n.consume(l), n.exit("lineEnding"), s);
  }
  function s(l) {
    return r.parser.lazy[r.now().line] ? t(l) : e(l);
  }
}
const eo = {
  name: "codeIndented",
  tokenize: T3
}, D3 = {
  partial: !0,
  tokenize: M3
};
function T3(n, e, t) {
  const r = this;
  return i;
  function i(u) {
    return n.enter("codeIndented"), be(n, s, "linePrefix", 5)(u);
  }
  function s(u) {
    const h = r.events[r.events.length - 1];
    return h && h[1].type === "linePrefix" && h[2].sliceSerialize(h[1], !0).length >= 4 ? l(u) : t(u);
  }
  function l(u) {
    return u === null ? o(u) : ie(u) ? n.attempt(D3, l, o)(u) : (n.enter("codeFlowValue"), a(u));
  }
  function a(u) {
    return u === null || ie(u) ? (n.exit("codeFlowValue"), l(u)) : (n.consume(u), a);
  }
  function o(u) {
    return n.exit("codeIndented"), e(u);
  }
}
function M3(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return r.parser.lazy[r.now().line] ? t(l) : ie(l) ? (n.enter("lineEnding"), n.consume(l), n.exit("lineEnding"), i) : be(n, s, "linePrefix", 5)(l);
  }
  function s(l) {
    const a = r.events[r.events.length - 1];
    return a && a[1].type === "linePrefix" && a[2].sliceSerialize(a[1], !0).length >= 4 ? e(l) : ie(l) ? i(l) : t(l);
  }
}
const E3 = {
  name: "codeText",
  previous: Z3,
  resolve: R3,
  tokenize: z3
};
function R3(n) {
  let e = n.length - 4, t = 3, r, i;
  if ((n[t][1].type === "lineEnding" || n[t][1].type === "space") && (n[e][1].type === "lineEnding" || n[e][1].type === "space")) {
    for (r = t; ++r < e; )
      if (n[r][1].type === "codeTextData") {
        n[t][1].type = "codeTextPadding", n[e][1].type = "codeTextPadding", t += 2, e -= 2;
        break;
      }
  }
  for (r = t - 1, e++; ++r <= e; )
    i === void 0 ? r !== e && n[r][1].type !== "lineEnding" && (i = r) : (r === e || n[r][1].type === "lineEnding") && (n[i][1].type = "codeTextData", r !== i + 2 && (n[i][1].end = n[r - 1][1].end, n.splice(i + 2, r - i - 2), e -= r - i - 2, r = i + 2), i = void 0);
  return n;
}
function Z3(n) {
  return n !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function z3(n, e, t) {
  let r = 0, i, s;
  return l;
  function l(c) {
    return n.enter("codeText"), n.enter("codeTextSequence"), a(c);
  }
  function a(c) {
    return c === 96 ? (n.consume(c), r++, a) : (n.exit("codeTextSequence"), o(c));
  }
  function o(c) {
    return c === null ? t(c) : c === 32 ? (n.enter("space"), n.consume(c), n.exit("space"), o) : c === 96 ? (s = n.enter("codeTextSequence"), i = 0, h(c)) : ie(c) ? (n.enter("lineEnding"), n.consume(c), n.exit("lineEnding"), o) : (n.enter("codeTextData"), u(c));
  }
  function u(c) {
    return c === null || c === 32 || c === 96 || ie(c) ? (n.exit("codeTextData"), o(c)) : (n.consume(c), u);
  }
  function h(c) {
    return c === 96 ? (n.consume(c), i++, h) : i === r ? (n.exit("codeTextSequence"), n.exit("codeText"), e(c)) : (s.type = "codeTextData", u(c));
  }
}
class F3 {
  /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */
  constructor(e) {
    this.left = e ? [...e] : [], this.right = [];
  }
  /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */
  get(e) {
    if (e < 0 || e >= this.left.length + this.right.length)
      throw new RangeError("Cannot access index `" + e + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
    return e < this.left.length ? this.left[e] : this.right[this.right.length - e + this.left.length - 1];
  }
  /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */
  get length() {
    return this.left.length + this.right.length;
  }
  /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  shift() {
    return this.setCursor(0), this.right.pop();
  }
  /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */
  slice(e, t) {
    const r = t ?? Number.POSITIVE_INFINITY;
    return r < this.left.length ? this.left.slice(e, r) : e > this.left.length ? this.right.slice(this.right.length - r + this.left.length, this.right.length - e + this.left.length).reverse() : this.left.slice(e).concat(this.right.slice(this.right.length - r + this.left.length).reverse());
  }
  /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */
  splice(e, t, r) {
    const i = t || 0;
    this.setCursor(Math.trunc(e));
    const s = this.right.splice(this.right.length - i, Number.POSITIVE_INFINITY);
    return r && zi(this.left, r), s.reverse();
  }
  /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  pop() {
    return this.setCursor(Number.POSITIVE_INFINITY), this.left.pop();
  }
  /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  push(e) {
    this.setCursor(Number.POSITIVE_INFINITY), this.left.push(e);
  }
  /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  pushMany(e) {
    this.setCursor(Number.POSITIVE_INFINITY), zi(this.left, e);
  }
  /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  unshift(e) {
    this.setCursor(0), this.right.push(e);
  }
  /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  unshiftMany(e) {
    this.setCursor(0), zi(this.right, e.reverse());
  }
  /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */
  setCursor(e) {
    if (!(e === this.left.length || e > this.left.length && this.right.length === 0 || e < 0 && this.left.length === 0))
      if (e < this.left.length) {
        const t = this.left.splice(e, Number.POSITIVE_INFINITY);
        zi(this.right, t.reverse());
      } else {
        const t = this.right.splice(this.left.length + this.right.length - e, Number.POSITIVE_INFINITY);
        zi(this.left, t.reverse());
      }
  }
}
function zi(n, e) {
  let t = 0;
  if (e.length < 1e4)
    n.push(...e);
  else
    for (; t < e.length; )
      n.push(...e.slice(t, t + 1e4)), t += 1e4;
}
function Fm(n) {
  const e = {};
  let t = -1, r, i, s, l, a, o, u;
  const h = new F3(n);
  for (; ++t < h.length; ) {
    for (; t in e; )
      t = e[t];
    if (r = h.get(t), t && r[1].type === "chunkFlow" && h.get(t - 1)[1].type === "listItemPrefix" && (o = r[1]._tokenizer.events, s = 0, s < o.length && o[s][1].type === "lineEndingBlank" && (s += 2), s < o.length && o[s][1].type === "content"))
      for (; ++s < o.length && o[s][1].type !== "content"; )
        o[s][1].type === "chunkText" && (o[s][1]._isInFirstContentOfListItem = !0, s++);
    if (r[0] === "enter")
      r[1].contentType && (Object.assign(e, B3(h, t)), t = e[t], u = !0);
    else if (r[1]._container) {
      for (s = t, i = void 0; s--; )
        if (l = h.get(s), l[1].type === "lineEnding" || l[1].type === "lineEndingBlank")
          l[0] === "enter" && (i && (h.get(i)[1].type = "lineEndingBlank"), l[1].type = "lineEnding", i = s);
        else if (l[1].type !== "linePrefix") break;
      i && (r[1].end = {
        ...h.get(i)[1].start
      }, a = h.slice(i, t), a.unshift(r), h.splice(i, t - i + 1, a));
    }
  }
  return It(n, 0, Number.POSITIVE_INFINITY, h.slice(0)), !u;
}
function B3(n, e) {
  const t = n.get(e)[1], r = n.get(e)[2];
  let i = e - 1;
  const s = [], l = t._tokenizer || r.parser[t.contentType](t.start), a = l.events, o = [], u = {};
  let h, c, f = -1, d = t, m = 0, O = 0;
  const x = [O];
  for (; d; ) {
    for (; n.get(++i)[1] !== d; )
      ;
    s.push(i), d._tokenizer || (h = r.sliceStream(d), d.next || h.push(null), c && l.defineSkip(d.start), d._isInFirstContentOfListItem && (l._gfmTasklistFirstContentOfListItem = !0), l.write(h), d._isInFirstContentOfListItem && (l._gfmTasklistFirstContentOfListItem = void 0)), c = d, d = d.next;
  }
  for (d = t; ++f < a.length; )
    // Find a void token that includes a break.
    a[f][0] === "exit" && a[f - 1][0] === "enter" && a[f][1].type === a[f - 1][1].type && a[f][1].start.line !== a[f][1].end.line && (O = f + 1, x.push(O), d._tokenizer = void 0, d.previous = void 0, d = d.next);
  for (l.events = [], d ? (d._tokenizer = void 0, d.previous = void 0) : x.pop(), f = x.length; f--; ) {
    const b = a.slice(x[f], x[f + 1]), w = s.pop();
    o.push([w, w + b.length - 1]), n.splice(w, 2, b);
  }
  for (o.reverse(), f = -1; ++f < o.length; )
    u[m + o[f][0]] = m + o[f][1], m += o[f][1] - o[f][0] - 1;
  return u;
}
const L3 = {
  resolve: X3,
  tokenize: I3
}, q3 = {
  partial: !0,
  tokenize: N3
};
function X3(n) {
  return Fm(n), n;
}
function I3(n, e) {
  let t;
  return r;
  function r(a) {
    return n.enter("content"), t = n.enter("chunkContent", {
      contentType: "content"
    }), i(a);
  }
  function i(a) {
    return a === null ? s(a) : ie(a) ? n.check(q3, l, s)(a) : (n.consume(a), i);
  }
  function s(a) {
    return n.exit("chunkContent"), n.exit("content"), e(a);
  }
  function l(a) {
    return n.consume(a), n.exit("chunkContent"), t.next = n.enter("chunkContent", {
      contentType: "content",
      previous: t
    }), t = t.next, i;
  }
}
function N3(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return n.exit("chunkContent"), n.enter("lineEnding"), n.consume(l), n.exit("lineEnding"), be(n, s, "linePrefix");
  }
  function s(l) {
    if (l === null || ie(l))
      return t(l);
    const a = r.events[r.events.length - 1];
    return !r.parser.constructs.disable.null.includes("codeIndented") && a && a[1].type === "linePrefix" && a[2].sliceSerialize(a[1], !0).length >= 4 ? e(l) : n.interrupt(r.parser.constructs.flow, t, e)(l);
  }
}
function Bm(n, e, t, r, i, s, l, a, o) {
  const u = o || Number.POSITIVE_INFINITY;
  let h = 0;
  return c;
  function c(b) {
    return b === 60 ? (n.enter(r), n.enter(i), n.enter(s), n.consume(b), n.exit(s), f) : b === null || b === 32 || b === 41 || Ul(b) ? t(b) : (n.enter(r), n.enter(l), n.enter(a), n.enter("chunkString", {
      contentType: "string"
    }), O(b));
  }
  function f(b) {
    return b === 62 ? (n.enter(s), n.consume(b), n.exit(s), n.exit(i), n.exit(r), e) : (n.enter(a), n.enter("chunkString", {
      contentType: "string"
    }), d(b));
  }
  function d(b) {
    return b === 62 ? (n.exit("chunkString"), n.exit(a), f(b)) : b === null || b === 60 || ie(b) ? t(b) : (n.consume(b), b === 92 ? m : d);
  }
  function m(b) {
    return b === 60 || b === 62 || b === 92 ? (n.consume(b), d) : d(b);
  }
  function O(b) {
    return !h && (b === null || b === 41 || Ee(b)) ? (n.exit("chunkString"), n.exit(a), n.exit(l), n.exit(r), e(b)) : h < u && b === 40 ? (n.consume(b), h++, O) : b === 41 ? (n.consume(b), h--, O) : b === null || b === 32 || b === 40 || Ul(b) ? t(b) : (n.consume(b), b === 92 ? x : O);
  }
  function x(b) {
    return b === 40 || b === 41 || b === 92 ? (n.consume(b), O) : O(b);
  }
}
function Lm(n, e, t, r, i, s) {
  const l = this;
  let a = 0, o;
  return u;
  function u(d) {
    return n.enter(r), n.enter(i), n.consume(d), n.exit(i), n.enter(s), h;
  }
  function h(d) {
    return a > 999 || d === null || d === 91 || d === 93 && !o || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    d === 94 && !a && "_hiddenFootnoteSupport" in l.parser.constructs ? t(d) : d === 93 ? (n.exit(s), n.enter(i), n.consume(d), n.exit(i), n.exit(r), e) : ie(d) ? (n.enter("lineEnding"), n.consume(d), n.exit("lineEnding"), h) : (n.enter("chunkString", {
      contentType: "string"
    }), c(d));
  }
  function c(d) {
    return d === null || d === 91 || d === 93 || ie(d) || a++ > 999 ? (n.exit("chunkString"), h(d)) : (n.consume(d), o || (o = !xe(d)), d === 92 ? f : c);
  }
  function f(d) {
    return d === 91 || d === 92 || d === 93 ? (n.consume(d), a++, c) : c(d);
  }
}
function qm(n, e, t, r, i, s) {
  let l;
  return a;
  function a(f) {
    return f === 34 || f === 39 || f === 40 ? (n.enter(r), n.enter(i), n.consume(f), n.exit(i), l = f === 40 ? 41 : f, o) : t(f);
  }
  function o(f) {
    return f === l ? (n.enter(i), n.consume(f), n.exit(i), n.exit(r), e) : (n.enter(s), u(f));
  }
  function u(f) {
    return f === l ? (n.exit(s), o(l)) : f === null ? t(f) : ie(f) ? (n.enter("lineEnding"), n.consume(f), n.exit("lineEnding"), be(n, u, "linePrefix")) : (n.enter("chunkString", {
      contentType: "string"
    }), h(f));
  }
  function h(f) {
    return f === l || f === null || ie(f) ? (n.exit("chunkString"), u(f)) : (n.consume(f), f === 92 ? c : h);
  }
  function c(f) {
    return f === l || f === 92 ? (n.consume(f), h) : h(f);
  }
}
function es(n, e) {
  let t;
  return r;
  function r(i) {
    return ie(i) ? (n.enter("lineEnding"), n.consume(i), n.exit("lineEnding"), t = !0, r) : xe(i) ? be(n, r, t ? "linePrefix" : "lineSuffix")(i) : e(i);
  }
}
const V3 = {
  name: "definition",
  tokenize: _3
}, j3 = {
  partial: !0,
  tokenize: U3
};
function _3(n, e, t) {
  const r = this;
  let i;
  return s;
  function s(d) {
    return n.enter("definition"), l(d);
  }
  function l(d) {
    return Lm.call(
      r,
      n,
      a,
      // Note: we don’t need to reset the way `markdown-rs` does.
      t,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(d);
  }
  function a(d) {
    return i = hn(r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1)), d === 58 ? (n.enter("definitionMarker"), n.consume(d), n.exit("definitionMarker"), o) : t(d);
  }
  function o(d) {
    return Ee(d) ? es(n, u)(d) : u(d);
  }
  function u(d) {
    return Bm(
      n,
      h,
      // Note: we don’t need to reset the way `markdown-rs` does.
      t,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(d);
  }
  function h(d) {
    return n.attempt(j3, c, c)(d);
  }
  function c(d) {
    return xe(d) ? be(n, f, "whitespace")(d) : f(d);
  }
  function f(d) {
    return d === null || ie(d) ? (n.exit("definition"), r.parser.defined.push(i), e(d)) : t(d);
  }
}
function U3(n, e, t) {
  return r;
  function r(a) {
    return Ee(a) ? es(n, i)(a) : t(a);
  }
  function i(a) {
    return qm(n, s, t, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(a);
  }
  function s(a) {
    return xe(a) ? be(n, l, "whitespace")(a) : l(a);
  }
  function l(a) {
    return a === null || ie(a) ? e(a) : t(a);
  }
}
const W3 = {
  name: "hardBreakEscape",
  tokenize: Y3
};
function Y3(n, e, t) {
  return r;
  function r(s) {
    return n.enter("hardBreakEscape"), n.consume(s), i;
  }
  function i(s) {
    return ie(s) ? (n.exit("hardBreakEscape"), e(s)) : t(s);
  }
}
const G3 = {
  name: "headingAtx",
  resolve: H3,
  tokenize: K3
};
function H3(n, e) {
  let t = n.length - 2, r = 3, i, s;
  return n[r][1].type === "whitespace" && (r += 2), t - 2 > r && n[t][1].type === "whitespace" && (t -= 2), n[t][1].type === "atxHeadingSequence" && (r === t - 1 || t - 4 > r && n[t - 2][1].type === "whitespace") && (t -= r + 1 === t ? 2 : 4), t > r && (i = {
    type: "atxHeadingText",
    start: n[r][1].start,
    end: n[t][1].end
  }, s = {
    type: "chunkText",
    start: n[r][1].start,
    end: n[t][1].end,
    contentType: "text"
  }, It(n, r, t - r + 1, [["enter", i, e], ["enter", s, e], ["exit", s, e], ["exit", i, e]])), n;
}
function K3(n, e, t) {
  let r = 0;
  return i;
  function i(h) {
    return n.enter("atxHeading"), s(h);
  }
  function s(h) {
    return n.enter("atxHeadingSequence"), l(h);
  }
  function l(h) {
    return h === 35 && r++ < 6 ? (n.consume(h), l) : h === null || Ee(h) ? (n.exit("atxHeadingSequence"), a(h)) : t(h);
  }
  function a(h) {
    return h === 35 ? (n.enter("atxHeadingSequence"), o(h)) : h === null || ie(h) ? (n.exit("atxHeading"), e(h)) : xe(h) ? be(n, a, "whitespace")(h) : (n.enter("atxHeadingText"), u(h));
  }
  function o(h) {
    return h === 35 ? (n.consume(h), o) : (n.exit("atxHeadingSequence"), a(h));
  }
  function u(h) {
    return h === null || h === 35 || Ee(h) ? (n.exit("atxHeadingText"), a(h)) : (n.consume(h), u);
  }
}
const J3 = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], $c = ["pre", "script", "style", "textarea"], e7 = {
  concrete: !0,
  name: "htmlFlow",
  resolveTo: r7,
  tokenize: i7
}, t7 = {
  partial: !0,
  tokenize: l7
}, n7 = {
  partial: !0,
  tokenize: s7
};
function r7(n) {
  let e = n.length;
  for (; e-- && !(n[e][0] === "enter" && n[e][1].type === "htmlFlow"); )
    ;
  return e > 1 && n[e - 2][1].type === "linePrefix" && (n[e][1].start = n[e - 2][1].start, n[e + 1][1].start = n[e - 2][1].start, n.splice(e - 2, 2)), n;
}
function i7(n, e, t) {
  const r = this;
  let i, s, l, a, o;
  return u;
  function u(A) {
    return h(A);
  }
  function h(A) {
    return n.enter("htmlFlow"), n.enter("htmlFlowData"), n.consume(A), c;
  }
  function c(A) {
    return A === 33 ? (n.consume(A), f) : A === 47 ? (n.consume(A), s = !0, O) : A === 63 ? (n.consume(A), i = 3, r.interrupt ? e : P) : yt(A) ? (n.consume(A), l = String.fromCharCode(A), x) : t(A);
  }
  function f(A) {
    return A === 45 ? (n.consume(A), i = 2, d) : A === 91 ? (n.consume(A), i = 5, a = 0, m) : yt(A) ? (n.consume(A), i = 4, r.interrupt ? e : P) : t(A);
  }
  function d(A) {
    return A === 45 ? (n.consume(A), r.interrupt ? e : P) : t(A);
  }
  function m(A) {
    const Ve = "CDATA[";
    return A === Ve.charCodeAt(a++) ? (n.consume(A), a === Ve.length ? r.interrupt ? e : F : m) : t(A);
  }
  function O(A) {
    return yt(A) ? (n.consume(A), l = String.fromCharCode(A), x) : t(A);
  }
  function x(A) {
    if (A === null || A === 47 || A === 62 || Ee(A)) {
      const Ve = A === 47, Ye = l.toLowerCase();
      return !Ve && !s && $c.includes(Ye) ? (i = 1, r.interrupt ? e(A) : F(A)) : J3.includes(l.toLowerCase()) ? (i = 6, Ve ? (n.consume(A), b) : r.interrupt ? e(A) : F(A)) : (i = 7, r.interrupt && !r.parser.lazy[r.now().line] ? t(A) : s ? w(A) : C(A));
    }
    return A === 45 || dt(A) ? (n.consume(A), l += String.fromCharCode(A), x) : t(A);
  }
  function b(A) {
    return A === 62 ? (n.consume(A), r.interrupt ? e : F) : t(A);
  }
  function w(A) {
    return xe(A) ? (n.consume(A), w) : M(A);
  }
  function C(A) {
    return A === 47 ? (n.consume(A), M) : A === 58 || A === 95 || yt(A) ? (n.consume(A), Z) : xe(A) ? (n.consume(A), C) : M(A);
  }
  function Z(A) {
    return A === 45 || A === 46 || A === 58 || A === 95 || dt(A) ? (n.consume(A), Z) : T(A);
  }
  function T(A) {
    return A === 61 ? (n.consume(A), S) : xe(A) ? (n.consume(A), T) : C(A);
  }
  function S(A) {
    return A === null || A === 60 || A === 61 || A === 62 || A === 96 ? t(A) : A === 34 || A === 39 ? (n.consume(A), o = A, E) : xe(A) ? (n.consume(A), S) : N(A);
  }
  function E(A) {
    return A === o ? (n.consume(A), o = null, z) : A === null || ie(A) ? t(A) : (n.consume(A), E);
  }
  function N(A) {
    return A === null || A === 34 || A === 39 || A === 47 || A === 60 || A === 61 || A === 62 || A === 96 || Ee(A) ? T(A) : (n.consume(A), N);
  }
  function z(A) {
    return A === 47 || A === 62 || xe(A) ? C(A) : t(A);
  }
  function M(A) {
    return A === 62 ? (n.consume(A), L) : t(A);
  }
  function L(A) {
    return A === null || ie(A) ? F(A) : xe(A) ? (n.consume(A), L) : t(A);
  }
  function F(A) {
    return A === 45 && i === 2 ? (n.consume(A), me) : A === 60 && i === 1 ? (n.consume(A), Oe) : A === 62 && i === 4 ? (n.consume(A), Ce) : A === 63 && i === 3 ? (n.consume(A), P) : A === 93 && i === 5 ? (n.consume(A), Qe) : ie(A) && (i === 6 || i === 7) ? (n.exit("htmlFlowData"), n.check(t7, ve, ne)(A)) : A === null || ie(A) ? (n.exit("htmlFlowData"), ne(A)) : (n.consume(A), F);
  }
  function ne(A) {
    return n.check(n7, J, ve)(A);
  }
  function J(A) {
    return n.enter("lineEnding"), n.consume(A), n.exit("lineEnding"), K;
  }
  function K(A) {
    return A === null || ie(A) ? ne(A) : (n.enter("htmlFlowData"), F(A));
  }
  function me(A) {
    return A === 45 ? (n.consume(A), P) : F(A);
  }
  function Oe(A) {
    return A === 47 ? (n.consume(A), l = "", $e) : F(A);
  }
  function $e(A) {
    if (A === 62) {
      const Ve = l.toLowerCase();
      return $c.includes(Ve) ? (n.consume(A), Ce) : F(A);
    }
    return yt(A) && l.length < 8 ? (n.consume(A), l += String.fromCharCode(A), $e) : F(A);
  }
  function Qe(A) {
    return A === 93 ? (n.consume(A), P) : F(A);
  }
  function P(A) {
    return A === 62 ? (n.consume(A), Ce) : A === 45 && i === 2 ? (n.consume(A), P) : F(A);
  }
  function Ce(A) {
    return A === null || ie(A) ? (n.exit("htmlFlowData"), ve(A)) : (n.consume(A), Ce);
  }
  function ve(A) {
    return n.exit("htmlFlow"), e(A);
  }
}
function s7(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return ie(l) ? (n.enter("lineEnding"), n.consume(l), n.exit("lineEnding"), s) : t(l);
  }
  function s(l) {
    return r.parser.lazy[r.now().line] ? t(l) : e(l);
  }
}
function l7(n, e, t) {
  return r;
  function r(i) {
    return n.enter("lineEnding"), n.consume(i), n.exit("lineEnding"), n.attempt(Es, e, t);
  }
}
const a7 = {
  name: "htmlText",
  tokenize: o7
};
function o7(n, e, t) {
  const r = this;
  let i, s, l;
  return a;
  function a(P) {
    return n.enter("htmlText"), n.enter("htmlTextData"), n.consume(P), o;
  }
  function o(P) {
    return P === 33 ? (n.consume(P), u) : P === 47 ? (n.consume(P), T) : P === 63 ? (n.consume(P), C) : yt(P) ? (n.consume(P), N) : t(P);
  }
  function u(P) {
    return P === 45 ? (n.consume(P), h) : P === 91 ? (n.consume(P), s = 0, m) : yt(P) ? (n.consume(P), w) : t(P);
  }
  function h(P) {
    return P === 45 ? (n.consume(P), d) : t(P);
  }
  function c(P) {
    return P === null ? t(P) : P === 45 ? (n.consume(P), f) : ie(P) ? (l = c, Oe(P)) : (n.consume(P), c);
  }
  function f(P) {
    return P === 45 ? (n.consume(P), d) : c(P);
  }
  function d(P) {
    return P === 62 ? me(P) : P === 45 ? f(P) : c(P);
  }
  function m(P) {
    const Ce = "CDATA[";
    return P === Ce.charCodeAt(s++) ? (n.consume(P), s === Ce.length ? O : m) : t(P);
  }
  function O(P) {
    return P === null ? t(P) : P === 93 ? (n.consume(P), x) : ie(P) ? (l = O, Oe(P)) : (n.consume(P), O);
  }
  function x(P) {
    return P === 93 ? (n.consume(P), b) : O(P);
  }
  function b(P) {
    return P === 62 ? me(P) : P === 93 ? (n.consume(P), b) : O(P);
  }
  function w(P) {
    return P === null || P === 62 ? me(P) : ie(P) ? (l = w, Oe(P)) : (n.consume(P), w);
  }
  function C(P) {
    return P === null ? t(P) : P === 63 ? (n.consume(P), Z) : ie(P) ? (l = C, Oe(P)) : (n.consume(P), C);
  }
  function Z(P) {
    return P === 62 ? me(P) : C(P);
  }
  function T(P) {
    return yt(P) ? (n.consume(P), S) : t(P);
  }
  function S(P) {
    return P === 45 || dt(P) ? (n.consume(P), S) : E(P);
  }
  function E(P) {
    return ie(P) ? (l = E, Oe(P)) : xe(P) ? (n.consume(P), E) : me(P);
  }
  function N(P) {
    return P === 45 || dt(P) ? (n.consume(P), N) : P === 47 || P === 62 || Ee(P) ? z(P) : t(P);
  }
  function z(P) {
    return P === 47 ? (n.consume(P), me) : P === 58 || P === 95 || yt(P) ? (n.consume(P), M) : ie(P) ? (l = z, Oe(P)) : xe(P) ? (n.consume(P), z) : me(P);
  }
  function M(P) {
    return P === 45 || P === 46 || P === 58 || P === 95 || dt(P) ? (n.consume(P), M) : L(P);
  }
  function L(P) {
    return P === 61 ? (n.consume(P), F) : ie(P) ? (l = L, Oe(P)) : xe(P) ? (n.consume(P), L) : z(P);
  }
  function F(P) {
    return P === null || P === 60 || P === 61 || P === 62 || P === 96 ? t(P) : P === 34 || P === 39 ? (n.consume(P), i = P, ne) : ie(P) ? (l = F, Oe(P)) : xe(P) ? (n.consume(P), F) : (n.consume(P), J);
  }
  function ne(P) {
    return P === i ? (n.consume(P), i = void 0, K) : P === null ? t(P) : ie(P) ? (l = ne, Oe(P)) : (n.consume(P), ne);
  }
  function J(P) {
    return P === null || P === 34 || P === 39 || P === 60 || P === 61 || P === 96 ? t(P) : P === 47 || P === 62 || Ee(P) ? z(P) : (n.consume(P), J);
  }
  function K(P) {
    return P === 47 || P === 62 || Ee(P) ? z(P) : t(P);
  }
  function me(P) {
    return P === 62 ? (n.consume(P), n.exit("htmlTextData"), n.exit("htmlText"), e) : t(P);
  }
  function Oe(P) {
    return n.exit("htmlTextData"), n.enter("lineEnding"), n.consume(P), n.exit("lineEnding"), $e;
  }
  function $e(P) {
    return xe(P) ? be(n, Qe, "linePrefix", r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(P) : Qe(P);
  }
  function Qe(P) {
    return n.enter("htmlTextData"), l(P);
  }
}
const K0 = {
  name: "labelEnd",
  resolveAll: f7,
  resolveTo: d7,
  tokenize: p7
}, u7 = {
  tokenize: m7
}, h7 = {
  tokenize: g7
}, c7 = {
  tokenize: O7
};
function f7(n) {
  let e = -1;
  const t = [];
  for (; ++e < n.length; ) {
    const r = n[e][1];
    if (t.push(n[e]), r.type === "labelImage" || r.type === "labelLink" || r.type === "labelEnd") {
      const i = r.type === "labelImage" ? 4 : 2;
      r.type = "data", e += i;
    }
  }
  return n.length !== t.length && It(n, 0, n.length, t), n;
}
function d7(n, e) {
  let t = n.length, r = 0, i, s, l, a;
  for (; t--; )
    if (i = n[t][1], s) {
      if (i.type === "link" || i.type === "labelLink" && i._inactive)
        break;
      n[t][0] === "enter" && i.type === "labelLink" && (i._inactive = !0);
    } else if (l) {
      if (n[t][0] === "enter" && (i.type === "labelImage" || i.type === "labelLink") && !i._balanced && (s = t, i.type !== "labelLink")) {
        r = 2;
        break;
      }
    } else i.type === "labelEnd" && (l = t);
  const o = {
    type: n[s][1].type === "labelLink" ? "link" : "image",
    start: {
      ...n[s][1].start
    },
    end: {
      ...n[n.length - 1][1].end
    }
  }, u = {
    type: "label",
    start: {
      ...n[s][1].start
    },
    end: {
      ...n[l][1].end
    }
  }, h = {
    type: "labelText",
    start: {
      ...n[s + r + 2][1].end
    },
    end: {
      ...n[l - 2][1].start
    }
  };
  return a = [["enter", o, e], ["enter", u, e]], a = _t(a, n.slice(s + 1, s + r + 3)), a = _t(a, [["enter", h, e]]), a = _t(a, Sa(e.parser.constructs.insideSpan.null, n.slice(s + r + 4, l - 3), e)), a = _t(a, [["exit", h, e], n[l - 2], n[l - 1], ["exit", u, e]]), a = _t(a, n.slice(l + 1)), a = _t(a, [["exit", o, e]]), It(n, s, n.length, a), n;
}
function p7(n, e, t) {
  const r = this;
  let i = r.events.length, s, l;
  for (; i--; )
    if ((r.events[i][1].type === "labelImage" || r.events[i][1].type === "labelLink") && !r.events[i][1]._balanced) {
      s = r.events[i][1];
      break;
    }
  return a;
  function a(f) {
    return s ? s._inactive ? c(f) : (l = r.parser.defined.includes(hn(r.sliceSerialize({
      start: s.end,
      end: r.now()
    }))), n.enter("labelEnd"), n.enter("labelMarker"), n.consume(f), n.exit("labelMarker"), n.exit("labelEnd"), o) : t(f);
  }
  function o(f) {
    return f === 40 ? n.attempt(u7, h, l ? h : c)(f) : f === 91 ? n.attempt(h7, h, l ? u : c)(f) : l ? h(f) : c(f);
  }
  function u(f) {
    return n.attempt(c7, h, c)(f);
  }
  function h(f) {
    return e(f);
  }
  function c(f) {
    return s._balanced = !0, t(f);
  }
}
function m7(n, e, t) {
  return r;
  function r(c) {
    return n.enter("resource"), n.enter("resourceMarker"), n.consume(c), n.exit("resourceMarker"), i;
  }
  function i(c) {
    return Ee(c) ? es(n, s)(c) : s(c);
  }
  function s(c) {
    return c === 41 ? h(c) : Bm(n, l, a, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(c);
  }
  function l(c) {
    return Ee(c) ? es(n, o)(c) : h(c);
  }
  function a(c) {
    return t(c);
  }
  function o(c) {
    return c === 34 || c === 39 || c === 40 ? qm(n, u, t, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(c) : h(c);
  }
  function u(c) {
    return Ee(c) ? es(n, h)(c) : h(c);
  }
  function h(c) {
    return c === 41 ? (n.enter("resourceMarker"), n.consume(c), n.exit("resourceMarker"), n.exit("resource"), e) : t(c);
  }
}
function g7(n, e, t) {
  const r = this;
  return i;
  function i(a) {
    return Lm.call(r, n, s, l, "reference", "referenceMarker", "referenceString")(a);
  }
  function s(a) {
    return r.parser.defined.includes(hn(r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1))) ? e(a) : t(a);
  }
  function l(a) {
    return t(a);
  }
}
function O7(n, e, t) {
  return r;
  function r(s) {
    return n.enter("reference"), n.enter("referenceMarker"), n.consume(s), n.exit("referenceMarker"), i;
  }
  function i(s) {
    return s === 93 ? (n.enter("referenceMarker"), n.consume(s), n.exit("referenceMarker"), n.exit("reference"), e) : t(s);
  }
}
const y7 = {
  name: "labelStartImage",
  resolveAll: K0.resolveAll,
  tokenize: b7
};
function b7(n, e, t) {
  const r = this;
  return i;
  function i(a) {
    return n.enter("labelImage"), n.enter("labelImageMarker"), n.consume(a), n.exit("labelImageMarker"), s;
  }
  function s(a) {
    return a === 91 ? (n.enter("labelMarker"), n.consume(a), n.exit("labelMarker"), n.exit("labelImage"), l) : t(a);
  }
  function l(a) {
    return a === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? t(a) : e(a);
  }
}
const x7 = {
  name: "labelStartLink",
  resolveAll: K0.resolveAll,
  tokenize: v7
};
function v7(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return n.enter("labelLink"), n.enter("labelMarker"), n.consume(l), n.exit("labelMarker"), n.exit("labelLink"), s;
  }
  function s(l) {
    return l === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? t(l) : e(l);
  }
}
const to = {
  name: "lineEnding",
  tokenize: w7
};
function w7(n, e) {
  return t;
  function t(r) {
    return n.enter("lineEnding"), n.consume(r), n.exit("lineEnding"), be(n, e, "linePrefix");
  }
}
const El = {
  name: "thematicBreak",
  tokenize: k7
};
function k7(n, e, t) {
  let r = 0, i;
  return s;
  function s(u) {
    return n.enter("thematicBreak"), l(u);
  }
  function l(u) {
    return i = u, a(u);
  }
  function a(u) {
    return u === i ? (n.enter("thematicBreakSequence"), o(u)) : r >= 3 && (u === null || ie(u)) ? (n.exit("thematicBreak"), e(u)) : t(u);
  }
  function o(u) {
    return u === i ? (n.consume(u), r++, o) : (n.exit("thematicBreakSequence"), xe(u) ? be(n, a, "whitespace")(u) : a(u));
  }
}
const St = {
  continuation: {
    tokenize: C7
  },
  exit: $7,
  name: "list",
  tokenize: P7
}, S7 = {
  partial: !0,
  tokenize: D7
}, Q7 = {
  partial: !0,
  tokenize: A7
};
function P7(n, e, t) {
  const r = this, i = r.events[r.events.length - 1];
  let s = i && i[1].type === "linePrefix" ? i[2].sliceSerialize(i[1], !0).length : 0, l = 0;
  return a;
  function a(d) {
    const m = r.containerState.type || (d === 42 || d === 43 || d === 45 ? "listUnordered" : "listOrdered");
    if (m === "listUnordered" ? !r.containerState.marker || d === r.containerState.marker : Tu(d)) {
      if (r.containerState.type || (r.containerState.type = m, n.enter(m, {
        _container: !0
      })), m === "listUnordered")
        return n.enter("listItemPrefix"), d === 42 || d === 45 ? n.check(El, t, u)(d) : u(d);
      if (!r.interrupt || d === 49)
        return n.enter("listItemPrefix"), n.enter("listItemValue"), o(d);
    }
    return t(d);
  }
  function o(d) {
    return Tu(d) && ++l < 10 ? (n.consume(d), o) : (!r.interrupt || l < 2) && (r.containerState.marker ? d === r.containerState.marker : d === 41 || d === 46) ? (n.exit("listItemValue"), u(d)) : t(d);
  }
  function u(d) {
    return n.enter("listItemMarker"), n.consume(d), n.exit("listItemMarker"), r.containerState.marker = r.containerState.marker || d, n.check(
      Es,
      // Can’t be empty when interrupting.
      r.interrupt ? t : h,
      n.attempt(S7, f, c)
    );
  }
  function h(d) {
    return r.containerState.initialBlankLine = !0, s++, f(d);
  }
  function c(d) {
    return xe(d) ? (n.enter("listItemPrefixWhitespace"), n.consume(d), n.exit("listItemPrefixWhitespace"), f) : t(d);
  }
  function f(d) {
    return r.containerState.size = s + r.sliceSerialize(n.exit("listItemPrefix"), !0).length, e(d);
  }
}
function C7(n, e, t) {
  const r = this;
  return r.containerState._closeFlow = void 0, n.check(Es, i, s);
  function i(a) {
    return r.containerState.furtherBlankLines = r.containerState.furtherBlankLines || r.containerState.initialBlankLine, be(n, e, "listItemIndent", r.containerState.size + 1)(a);
  }
  function s(a) {
    return r.containerState.furtherBlankLines || !xe(a) ? (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, l(a)) : (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, n.attempt(Q7, e, l)(a));
  }
  function l(a) {
    return r.containerState._closeFlow = !0, r.interrupt = void 0, be(n, n.attempt(St, e, t), "linePrefix", r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(a);
  }
}
function A7(n, e, t) {
  const r = this;
  return be(n, i, "listItemIndent", r.containerState.size + 1);
  function i(s) {
    const l = r.events[r.events.length - 1];
    return l && l[1].type === "listItemIndent" && l[2].sliceSerialize(l[1], !0).length === r.containerState.size ? e(s) : t(s);
  }
}
function $7(n) {
  n.exit(this.containerState.type);
}
function D7(n, e, t) {
  const r = this;
  return be(n, i, "listItemPrefixWhitespace", r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 5);
  function i(s) {
    const l = r.events[r.events.length - 1];
    return !xe(s) && l && l[1].type === "listItemPrefixWhitespace" ? e(s) : t(s);
  }
}
const Dc = {
  name: "setextUnderline",
  resolveTo: T7,
  tokenize: M7
};
function T7(n, e) {
  let t = n.length, r, i, s;
  for (; t--; )
    if (n[t][0] === "enter") {
      if (n[t][1].type === "content") {
        r = t;
        break;
      }
      n[t][1].type === "paragraph" && (i = t);
    } else
      n[t][1].type === "content" && n.splice(t, 1), !s && n[t][1].type === "definition" && (s = t);
  const l = {
    type: "setextHeading",
    start: {
      ...n[i][1].start
    },
    end: {
      ...n[n.length - 1][1].end
    }
  };
  return n[i][1].type = "setextHeadingText", s ? (n.splice(i, 0, ["enter", l, e]), n.splice(s + 1, 0, ["exit", n[r][1], e]), n[r][1].end = {
    ...n[s][1].end
  }) : n[r][1] = l, n.push(["exit", l, e]), n;
}
function M7(n, e, t) {
  const r = this;
  let i;
  return s;
  function s(u) {
    let h = r.events.length, c;
    for (; h--; )
      if (r.events[h][1].type !== "lineEnding" && r.events[h][1].type !== "linePrefix" && r.events[h][1].type !== "content") {
        c = r.events[h][1].type === "paragraph";
        break;
      }
    return !r.parser.lazy[r.now().line] && (r.interrupt || c) ? (n.enter("setextHeadingLine"), i = u, l(u)) : t(u);
  }
  function l(u) {
    return n.enter("setextHeadingLineSequence"), a(u);
  }
  function a(u) {
    return u === i ? (n.consume(u), a) : (n.exit("setextHeadingLineSequence"), xe(u) ? be(n, o, "lineSuffix")(u) : o(u));
  }
  function o(u) {
    return u === null || ie(u) ? (n.exit("setextHeadingLine"), e(u)) : t(u);
  }
}
const E7 = {
  tokenize: R7
};
function R7(n) {
  const e = this, t = n.attempt(
    // Try to parse a blank line.
    Es,
    r,
    // Try to parse initial flow (essentially, only code).
    n.attempt(this.parser.constructs.flowInitial, i, be(n, n.attempt(this.parser.constructs.flow, i, n.attempt(L3, i)), "linePrefix"))
  );
  return t;
  function r(s) {
    if (s === null) {
      n.consume(s);
      return;
    }
    return n.enter("lineEndingBlank"), n.consume(s), n.exit("lineEndingBlank"), e.currentConstruct = void 0, t;
  }
  function i(s) {
    if (s === null) {
      n.consume(s);
      return;
    }
    return n.enter("lineEnding"), n.consume(s), n.exit("lineEnding"), e.currentConstruct = void 0, t;
  }
}
const Z7 = {
  resolveAll: Im()
}, z7 = Xm("string"), F7 = Xm("text");
function Xm(n) {
  return {
    resolveAll: Im(n === "text" ? B7 : void 0),
    tokenize: e
  };
  function e(t) {
    const r = this, i = this.parser.constructs[n], s = t.attempt(i, l, a);
    return l;
    function l(h) {
      return u(h) ? s(h) : a(h);
    }
    function a(h) {
      if (h === null) {
        t.consume(h);
        return;
      }
      return t.enter("data"), t.consume(h), o;
    }
    function o(h) {
      return u(h) ? (t.exit("data"), s(h)) : (t.consume(h), o);
    }
    function u(h) {
      if (h === null)
        return !0;
      const c = i[h];
      let f = -1;
      if (c)
        for (; ++f < c.length; ) {
          const d = c[f];
          if (!d.previous || d.previous.call(r, r.previous))
            return !0;
        }
      return !1;
    }
  }
}
function Im(n) {
  return e;
  function e(t, r) {
    let i = -1, s;
    for (; ++i <= t.length; )
      s === void 0 ? t[i] && t[i][1].type === "data" && (s = i, i++) : (!t[i] || t[i][1].type !== "data") && (i !== s + 2 && (t[s][1].end = t[i - 1][1].end, t.splice(s + 2, i - s - 2), i = s + 2), s = void 0);
    return n ? n(t, r) : t;
  }
}
function B7(n, e) {
  let t = 0;
  for (; ++t <= n.length; )
    if ((t === n.length || n[t][1].type === "lineEnding") && n[t - 1][1].type === "data") {
      const r = n[t - 1][1], i = e.sliceStream(r);
      let s = i.length, l = -1, a = 0, o;
      for (; s--; ) {
        const u = i[s];
        if (typeof u == "string") {
          for (l = u.length; u.charCodeAt(l - 1) === 32; )
            a++, l--;
          if (l) break;
          l = -1;
        } else if (u === -2)
          o = !0, a++;
        else if (u !== -1) {
          s++;
          break;
        }
      }
      if (a) {
        const u = {
          type: t === n.length || o || a < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            _bufferIndex: s ? l : r.start._bufferIndex + l,
            _index: r.start._index + s,
            line: r.end.line,
            column: r.end.column - a,
            offset: r.end.offset - a
          },
          end: {
            ...r.end
          }
        };
        r.end = {
          ...u.start
        }, r.start.offset === r.end.offset ? Object.assign(r, u) : (n.splice(t, 0, ["enter", u, e], ["exit", u, e]), t += 2);
      }
      t++;
    }
  return n;
}
const L7 = {
  42: St,
  43: St,
  45: St,
  48: St,
  49: St,
  50: St,
  51: St,
  52: St,
  53: St,
  54: St,
  55: St,
  56: St,
  57: St,
  62: Rm
}, q7 = {
  91: V3
}, X7 = {
  [-2]: eo,
  [-1]: eo,
  32: eo
}, I7 = {
  35: G3,
  42: El,
  45: [Dc, El],
  60: e7,
  61: Dc,
  95: El,
  96: Ac,
  126: Ac
}, N7 = {
  38: zm,
  92: Zm
}, V7 = {
  [-5]: to,
  [-4]: to,
  [-3]: to,
  33: y7,
  38: zm,
  42: Mu,
  60: [x3, a7],
  91: x7,
  92: [W3, Zm],
  93: K0,
  95: Mu,
  96: E3
}, j7 = {
  null: [Mu, Z7]
}, _7 = {
  null: [42, 95]
}, U7 = {
  null: []
}, W7 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  attentionMarkers: _7,
  contentInitial: q7,
  disable: U7,
  document: L7,
  flow: I7,
  flowInitial: X7,
  insideSpan: j7,
  string: N7,
  text: V7
}, Symbol.toStringTag, { value: "Module" }));
function Y7(n, e, t) {
  let r = {
    _bufferIndex: -1,
    _index: 0,
    line: t && t.line || 1,
    column: t && t.column || 1,
    offset: t && t.offset || 0
  };
  const i = {}, s = [];
  let l = [], a = [];
  const o = {
    attempt: E(T),
    check: E(S),
    consume: w,
    enter: C,
    exit: Z,
    interrupt: E(S, {
      interrupt: !0
    })
  }, u = {
    code: null,
    containerState: {},
    defineSkip: O,
    events: [],
    now: m,
    parser: n,
    previous: null,
    sliceSerialize: f,
    sliceStream: d,
    write: c
  };
  let h = e.tokenize.call(u, o);
  return e.resolveAll && s.push(e), u;
  function c(L) {
    return l = _t(l, L), x(), l[l.length - 1] !== null ? [] : (N(e, 0), u.events = Sa(s, u.events, u), u.events);
  }
  function f(L, F) {
    return H7(d(L), F);
  }
  function d(L) {
    return G7(l, L);
  }
  function m() {
    const {
      _bufferIndex: L,
      _index: F,
      line: ne,
      column: J,
      offset: K
    } = r;
    return {
      _bufferIndex: L,
      _index: F,
      line: ne,
      column: J,
      offset: K
    };
  }
  function O(L) {
    i[L.line] = L.column, M();
  }
  function x() {
    let L;
    for (; r._index < l.length; ) {
      const F = l[r._index];
      if (typeof F == "string")
        for (L = r._index, r._bufferIndex < 0 && (r._bufferIndex = 0); r._index === L && r._bufferIndex < F.length; )
          b(F.charCodeAt(r._bufferIndex));
      else
        b(F);
    }
  }
  function b(L) {
    h = h(L);
  }
  function w(L) {
    ie(L) ? (r.line++, r.column = 1, r.offset += L === -3 ? 2 : 1, M()) : L !== -1 && (r.column++, r.offset++), r._bufferIndex < 0 ? r._index++ : (r._bufferIndex++, r._bufferIndex === // Points w/ non-negative `_bufferIndex` reference
    // strings.
    /** @type {string} */
    l[r._index].length && (r._bufferIndex = -1, r._index++)), u.previous = L;
  }
  function C(L, F) {
    const ne = F || {};
    return ne.type = L, ne.start = m(), u.events.push(["enter", ne, u]), a.push(ne), ne;
  }
  function Z(L) {
    const F = a.pop();
    return F.end = m(), u.events.push(["exit", F, u]), F;
  }
  function T(L, F) {
    N(L, F.from);
  }
  function S(L, F) {
    F.restore();
  }
  function E(L, F) {
    return ne;
    function ne(J, K, me) {
      let Oe, $e, Qe, P;
      return Array.isArray(J) ? (
        /* c8 ignore next 1 */
        ve(J)
      ) : "tokenize" in J ? (
        // Looks like a construct.
        ve([
          /** @type {Construct} */
          J
        ])
      ) : Ce(J);
      function Ce(Le) {
        return mt;
        function mt(gt) {
          const ln = gt !== null && Le[gt], an = gt !== null && Le.null, jr = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(ln) ? ln : ln ? [ln] : [],
            ...Array.isArray(an) ? an : an ? [an] : []
          ];
          return ve(jr)(gt);
        }
      }
      function ve(Le) {
        return Oe = Le, $e = 0, Le.length === 0 ? me : A(Le[$e]);
      }
      function A(Le) {
        return mt;
        function mt(gt) {
          return P = z(), Qe = Le, Le.partial || (u.currentConstruct = Le), Le.name && u.parser.constructs.disable.null.includes(Le.name) ? Ye() : Le.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            F ? Object.assign(Object.create(u), F) : u,
            o,
            Ve,
            Ye
          )(gt);
        }
      }
      function Ve(Le) {
        return L(Qe, P), K;
      }
      function Ye(Le) {
        return P.restore(), ++$e < Oe.length ? A(Oe[$e]) : me;
      }
    }
  }
  function N(L, F) {
    L.resolveAll && !s.includes(L) && s.push(L), L.resolve && It(u.events, F, u.events.length - F, L.resolve(u.events.slice(F), u)), L.resolveTo && (u.events = L.resolveTo(u.events, u));
  }
  function z() {
    const L = m(), F = u.previous, ne = u.currentConstruct, J = u.events.length, K = Array.from(a);
    return {
      from: J,
      restore: me
    };
    function me() {
      r = L, u.previous = F, u.currentConstruct = ne, u.events.length = J, a = K, M();
    }
  }
  function M() {
    r.line in i && r.column < 2 && (r.column = i[r.line], r.offset += i[r.line] - 1);
  }
}
function G7(n, e) {
  const t = e.start._index, r = e.start._bufferIndex, i = e.end._index, s = e.end._bufferIndex;
  let l;
  if (t === i)
    l = [n[t].slice(r, s)];
  else {
    if (l = n.slice(t, i), r > -1) {
      const a = l[0];
      typeof a == "string" ? l[0] = a.slice(r) : l.shift();
    }
    s > 0 && l.push(n[i].slice(0, s));
  }
  return l;
}
function H7(n, e) {
  let t = -1;
  const r = [];
  let i;
  for (; ++t < n.length; ) {
    const s = n[t];
    let l;
    if (typeof s == "string")
      l = s;
    else switch (s) {
      case -5: {
        l = "\r";
        break;
      }
      case -4: {
        l = `
`;
        break;
      }
      case -3: {
        l = `\r
`;
        break;
      }
      case -2: {
        l = e ? " " : "	";
        break;
      }
      case -1: {
        if (!e && i) continue;
        l = " ";
        break;
      }
      default:
        l = String.fromCharCode(s);
    }
    i = s === -2, r.push(l);
  }
  return r.join("");
}
function K7(n) {
  const r = {
    constructs: (
      /** @type {FullNormalizedExtension} */
      Mm([W7, ...(n || {}).extensions || []])
    ),
    content: i(d3),
    defined: [],
    document: i(m3),
    flow: i(E7),
    lazy: {},
    string: i(z7),
    text: i(F7)
  };
  return r;
  function i(s) {
    return l;
    function l(a) {
      return Y7(r, s, a);
    }
  }
}
function J7(n) {
  for (; !Fm(n); )
    ;
  return n;
}
const Tc = /[\0\t\n\r]/g;
function e6() {
  let n = 1, e = "", t = !0, r;
  return i;
  function i(s, l, a) {
    const o = [];
    let u, h, c, f, d;
    for (s = e + (typeof s == "string" ? s.toString() : new TextDecoder(l || void 0).decode(s)), c = 0, e = "", t && (s.charCodeAt(0) === 65279 && c++, t = void 0); c < s.length; ) {
      if (Tc.lastIndex = c, u = Tc.exec(s), f = u && u.index !== void 0 ? u.index : s.length, d = s.charCodeAt(f), !u) {
        e = s.slice(c);
        break;
      }
      if (d === 10 && c === f && r)
        o.push(-3), r = void 0;
      else
        switch (r && (o.push(-5), r = void 0), c < f && (o.push(s.slice(c, f)), n += f - c), d) {
          case 0: {
            o.push(65533), n++;
            break;
          }
          case 9: {
            for (h = Math.ceil(n / 4) * 4, o.push(-2); n++ < h; ) o.push(-1);
            break;
          }
          case 10: {
            o.push(-4), n = 1;
            break;
          }
          default:
            r = !0, n = 1;
        }
      c = f + 1;
    }
    return a && (r && o.push(-5), e && o.push(e), o.push(null)), o;
  }
}
const t6 = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function n6(n) {
  return n.replace(t6, r6);
}
function r6(n, e, t) {
  if (e)
    return e;
  if (t.charCodeAt(0) === 35) {
    const i = t.charCodeAt(1), s = i === 120 || i === 88;
    return Em(t.slice(s ? 2 : 1), s ? 16 : 10);
  }
  return H0(t) || n;
}
const Nm = {}.hasOwnProperty;
function i6(n, e, t) {
  return typeof e != "string" && (t = e, e = void 0), s6(t)(J7(K7(t).document().write(e6()(n, e, !0))));
}
function s6(n) {
  const e = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: s(Qr),
      autolinkProtocol: z,
      autolinkEmail: z,
      atxHeading: s(Mi),
      blockQuote: s(an),
      characterEscape: z,
      characterReference: z,
      codeFenced: s(jr),
      codeFencedFenceInfo: l,
      codeFencedFenceMeta: l,
      codeIndented: s(jr, l),
      codeText: s(Va, l),
      codeTextData: z,
      data: z,
      codeFlowValue: z,
      definition: s(ja),
      definitionDestinationString: l,
      definitionLabelString: l,
      definitionTitleString: l,
      emphasis: s(Ti),
      hardBreakEscape: s(Ei),
      hardBreakTrailing: s(Ei),
      htmlFlow: s(_r, l),
      htmlFlowData: z,
      htmlText: s(_r, l),
      htmlTextData: z,
      image: s(Ur),
      label: l,
      link: s(Qr),
      listItem: s(T5),
      listItemValue: f,
      listOrdered: s(pc, c),
      listUnordered: s(pc),
      paragraph: s(M5),
      reference: A,
      referenceString: l,
      resourceDestinationString: l,
      resourceTitleString: l,
      setextHeading: s(Mi),
      strong: s(E5),
      thematicBreak: s(Z5)
    },
    exit: {
      atxHeading: o(),
      atxHeadingSequence: T,
      autolink: o(),
      autolinkEmail: ln,
      autolinkProtocol: gt,
      blockQuote: o(),
      characterEscapeValue: M,
      characterReferenceMarkerHexadecimal: Ye,
      characterReferenceMarkerNumeric: Ye,
      characterReferenceValue: Le,
      characterReference: mt,
      codeFenced: o(x),
      codeFencedFence: O,
      codeFencedFenceInfo: d,
      codeFencedFenceMeta: m,
      codeFlowValue: M,
      codeIndented: o(b),
      codeText: o(K),
      codeTextData: M,
      data: M,
      definition: o(),
      definitionDestinationString: Z,
      definitionLabelString: w,
      definitionTitleString: C,
      emphasis: o(),
      hardBreakEscape: o(F),
      hardBreakTrailing: o(F),
      htmlFlow: o(ne),
      htmlFlowData: M,
      htmlText: o(J),
      htmlTextData: M,
      image: o(Oe),
      label: Qe,
      labelText: $e,
      lineEnding: L,
      link: o(me),
      listItem: o(),
      listOrdered: o(),
      listUnordered: o(),
      paragraph: o(),
      referenceString: Ve,
      resourceDestinationString: P,
      resourceTitleString: Ce,
      resource: ve,
      setextHeading: o(N),
      setextHeadingLineSequence: E,
      setextHeadingText: S,
      strong: o(),
      thematicBreak: o()
    }
  };
  Vm(e, (n || {}).mdastExtensions || []);
  const t = {};
  return r;
  function r(B) {
    let Y = {
      type: "root",
      children: []
    };
    const ce = {
      stack: [Y],
      tokenStack: [],
      config: e,
      enter: a,
      exit: u,
      buffer: l,
      resume: h,
      data: t
    }, we = [];
    let De = -1;
    for (; ++De < B.length; )
      if (B[De][1].type === "listOrdered" || B[De][1].type === "listUnordered")
        if (B[De][0] === "enter")
          we.push(De);
        else {
          const on = we.pop();
          De = i(B, on, De);
        }
    for (De = -1; ++De < B.length; ) {
      const on = e[B[De][0]];
      Nm.call(on, B[De][1].type) && on[B[De][1].type].call(Object.assign({
        sliceSerialize: B[De][2].sliceSerialize
      }, ce), B[De][1]);
    }
    if (ce.tokenStack.length > 0) {
      const on = ce.tokenStack[ce.tokenStack.length - 1];
      (on[1] || Mc).call(ce, void 0, on[0]);
    }
    for (Y.position = {
      start: ir(B.length > 0 ? B[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: ir(B.length > 0 ? B[B.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    }, De = -1; ++De < e.transforms.length; )
      Y = e.transforms[De](Y) || Y;
    return Y;
  }
  function i(B, Y, ce) {
    let we = Y - 1, De = -1, on = !1, Pr, zn, Ri, Zi;
    for (; ++we <= ce; ) {
      const Et = B[we];
      switch (Et[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote": {
          Et[0] === "enter" ? De++ : De--, Zi = void 0;
          break;
        }
        case "lineEndingBlank": {
          Et[0] === "enter" && (Pr && !Zi && !De && !Ri && (Ri = we), Zi = void 0);
          break;
        }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace":
          break;
        default:
          Zi = void 0;
      }
      if (!De && Et[0] === "enter" && Et[1].type === "listItemPrefix" || De === -1 && Et[0] === "exit" && (Et[1].type === "listUnordered" || Et[1].type === "listOrdered")) {
        if (Pr) {
          let Wr = we;
          for (zn = void 0; Wr--; ) {
            const Fn = B[Wr];
            if (Fn[1].type === "lineEnding" || Fn[1].type === "lineEndingBlank") {
              if (Fn[0] === "exit") continue;
              zn && (B[zn][1].type = "lineEndingBlank", on = !0), Fn[1].type = "lineEnding", zn = Wr;
            } else if (!(Fn[1].type === "linePrefix" || Fn[1].type === "blockQuotePrefix" || Fn[1].type === "blockQuotePrefixWhitespace" || Fn[1].type === "blockQuoteMarker" || Fn[1].type === "listItemIndent")) break;
          }
          Ri && (!zn || Ri < zn) && (Pr._spread = !0), Pr.end = Object.assign({}, zn ? B[zn][1].start : Et[1].end), B.splice(zn || we, 0, ["exit", Pr, Et[2]]), we++, ce++;
        }
        if (Et[1].type === "listItemPrefix") {
          const Wr = {
            type: "listItem",
            _spread: !1,
            start: Object.assign({}, Et[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          Pr = Wr, B.splice(we, 0, ["enter", Wr, Et[2]]), we++, ce++, Ri = void 0, Zi = !0;
        }
      }
    }
    return B[Y][1]._spread = on, ce;
  }
  function s(B, Y) {
    return ce;
    function ce(we) {
      a.call(this, B(we), we), Y && Y.call(this, we);
    }
  }
  function l() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function a(B, Y, ce) {
    this.stack[this.stack.length - 1].children.push(B), this.stack.push(B), this.tokenStack.push([Y, ce || void 0]), B.position = {
      start: ir(Y.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function o(B) {
    return Y;
    function Y(ce) {
      B && B.call(this, ce), u.call(this, ce);
    }
  }
  function u(B, Y) {
    const ce = this.stack.pop(), we = this.tokenStack.pop();
    if (we)
      we[0].type !== B.type && (Y ? Y.call(this, B, we[0]) : (we[1] || Mc).call(this, B, we[0]));
    else throw new Error("Cannot close `" + B.type + "` (" + Ji({
      start: B.start,
      end: B.end
    }) + "): it’s not open");
    ce.position.end = ir(B.end);
  }
  function h() {
    return G0(this.stack.pop());
  }
  function c() {
    this.data.expectingFirstListItemValue = !0;
  }
  function f(B) {
    if (this.data.expectingFirstListItemValue) {
      const Y = this.stack[this.stack.length - 2];
      Y.start = Number.parseInt(this.sliceSerialize(B), 10), this.data.expectingFirstListItemValue = void 0;
    }
  }
  function d() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.lang = B;
  }
  function m() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.meta = B;
  }
  function O() {
    this.data.flowCodeInside || (this.buffer(), this.data.flowCodeInside = !0);
  }
  function x() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.value = B.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, ""), this.data.flowCodeInside = void 0;
  }
  function b() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.value = B.replace(/(\r?\n|\r)$/g, "");
  }
  function w(B) {
    const Y = this.resume(), ce = this.stack[this.stack.length - 1];
    ce.label = Y, ce.identifier = hn(this.sliceSerialize(B)).toLowerCase();
  }
  function C() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.title = B;
  }
  function Z() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.url = B;
  }
  function T(B) {
    const Y = this.stack[this.stack.length - 1];
    if (!Y.depth) {
      const ce = this.sliceSerialize(B).length;
      Y.depth = ce;
    }
  }
  function S() {
    this.data.setextHeadingSlurpLineEnding = !0;
  }
  function E(B) {
    const Y = this.stack[this.stack.length - 1];
    Y.depth = this.sliceSerialize(B).codePointAt(0) === 61 ? 1 : 2;
  }
  function N() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function z(B) {
    const ce = this.stack[this.stack.length - 1].children;
    let we = ce[ce.length - 1];
    (!we || we.type !== "text") && (we = R5(), we.position = {
      start: ir(B.start),
      // @ts-expect-error: we’ll add `end` later.
      end: void 0
    }, ce.push(we)), this.stack.push(we);
  }
  function M(B) {
    const Y = this.stack.pop();
    Y.value += this.sliceSerialize(B), Y.position.end = ir(B.end);
  }
  function L(B) {
    const Y = this.stack[this.stack.length - 1];
    if (this.data.atHardBreak) {
      const ce = Y.children[Y.children.length - 1];
      ce.position.end = ir(B.end), this.data.atHardBreak = void 0;
      return;
    }
    !this.data.setextHeadingSlurpLineEnding && e.canContainEols.includes(Y.type) && (z.call(this, B), M.call(this, B));
  }
  function F() {
    this.data.atHardBreak = !0;
  }
  function ne() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.value = B;
  }
  function J() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.value = B;
  }
  function K() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.value = B;
  }
  function me() {
    const B = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const Y = this.data.referenceType || "shortcut";
      B.type += "Reference", B.referenceType = Y, delete B.url, delete B.title;
    } else
      delete B.identifier, delete B.label;
    this.data.referenceType = void 0;
  }
  function Oe() {
    const B = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const Y = this.data.referenceType || "shortcut";
      B.type += "Reference", B.referenceType = Y, delete B.url, delete B.title;
    } else
      delete B.identifier, delete B.label;
    this.data.referenceType = void 0;
  }
  function $e(B) {
    const Y = this.sliceSerialize(B), ce = this.stack[this.stack.length - 2];
    ce.label = n6(Y), ce.identifier = hn(Y).toLowerCase();
  }
  function Qe() {
    const B = this.stack[this.stack.length - 1], Y = this.resume(), ce = this.stack[this.stack.length - 1];
    if (this.data.inReference = !0, ce.type === "link") {
      const we = B.children;
      ce.children = we;
    } else
      ce.alt = Y;
  }
  function P() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.url = B;
  }
  function Ce() {
    const B = this.resume(), Y = this.stack[this.stack.length - 1];
    Y.title = B;
  }
  function ve() {
    this.data.inReference = void 0;
  }
  function A() {
    this.data.referenceType = "collapsed";
  }
  function Ve(B) {
    const Y = this.resume(), ce = this.stack[this.stack.length - 1];
    ce.label = Y, ce.identifier = hn(this.sliceSerialize(B)).toLowerCase(), this.data.referenceType = "full";
  }
  function Ye(B) {
    this.data.characterReferenceType = B.type;
  }
  function Le(B) {
    const Y = this.sliceSerialize(B), ce = this.data.characterReferenceType;
    let we;
    ce ? (we = Em(Y, ce === "characterReferenceMarkerNumeric" ? 10 : 16), this.data.characterReferenceType = void 0) : we = H0(Y);
    const De = this.stack[this.stack.length - 1];
    De.value += we;
  }
  function mt(B) {
    const Y = this.stack.pop();
    Y.position.end = ir(B.end);
  }
  function gt(B) {
    M.call(this, B);
    const Y = this.stack[this.stack.length - 1];
    Y.url = this.sliceSerialize(B);
  }
  function ln(B) {
    M.call(this, B);
    const Y = this.stack[this.stack.length - 1];
    Y.url = "mailto:" + this.sliceSerialize(B);
  }
  function an() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function jr() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function Va() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function ja() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function Ti() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function Mi() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function Ei() {
    return {
      type: "break"
    };
  }
  function _r() {
    return {
      type: "html",
      value: ""
    };
  }
  function Ur() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function Qr() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function pc(B) {
    return {
      type: "list",
      ordered: B.type === "listOrdered",
      start: null,
      spread: B._spread,
      children: []
    };
  }
  function T5(B) {
    return {
      type: "listItem",
      spread: B._spread,
      checked: null,
      children: []
    };
  }
  function M5() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function E5() {
    return {
      type: "strong",
      children: []
    };
  }
  function R5() {
    return {
      type: "text",
      value: ""
    };
  }
  function Z5() {
    return {
      type: "thematicBreak"
    };
  }
}
function ir(n) {
  return {
    line: n.line,
    column: n.column,
    offset: n.offset
  };
}
function Vm(n, e) {
  let t = -1;
  for (; ++t < e.length; ) {
    const r = e[t];
    Array.isArray(r) ? Vm(n, r) : l6(n, r);
  }
}
function l6(n, e) {
  let t;
  for (t in e)
    if (Nm.call(e, t))
      switch (t) {
        case "canContainEols": {
          const r = e[t];
          r && n[t].push(...r);
          break;
        }
        case "transforms": {
          const r = e[t];
          r && n[t].push(...r);
          break;
        }
        case "enter":
        case "exit": {
          const r = e[t];
          r && Object.assign(n[t], r);
          break;
        }
      }
}
function Mc(n, e) {
  throw n ? new Error("Cannot close `" + n.type + "` (" + Ji({
    start: n.start,
    end: n.end
  }) + "): a different token (`" + e.type + "`, " + Ji({
    start: e.start,
    end: e.end
  }) + ") is open") : new Error("Cannot close document, a token (`" + e.type + "`, " + Ji({
    start: e.start,
    end: e.end
  }) + ") is still open");
}
function a6(n) {
  const e = this;
  e.parser = t;
  function t(r) {
    return i6(r, {
      ...e.data("settings"),
      ...n,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: e.data("micromarkExtensions") || [],
      mdastExtensions: e.data("fromMarkdownExtensions") || []
    });
  }
}
function Wl(n, e) {
  const t = String(n);
  if (typeof e != "string")
    throw new TypeError("Expected character");
  let r = 0, i = t.indexOf(e);
  for (; i !== -1; )
    r++, i = t.indexOf(e, i + e.length);
  return r;
}
function o6(n) {
  if (typeof n != "string")
    throw new TypeError("Expected a string");
  return n.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
const Rs = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(n) {
    if (n == null)
      return f6;
    if (typeof n == "function")
      return Qa(n);
    if (typeof n == "object")
      return Array.isArray(n) ? u6(n) : h6(n);
    if (typeof n == "string")
      return c6(n);
    throw new Error("Expected function, string, or object as test");
  }
);
function u6(n) {
  const e = [];
  let t = -1;
  for (; ++t < n.length; )
    e[t] = Rs(n[t]);
  return Qa(r);
  function r(...i) {
    let s = -1;
    for (; ++s < e.length; )
      if (e[s].apply(this, i)) return !0;
    return !1;
  }
}
function h6(n) {
  const e = (
    /** @type {Record<string, unknown>} */
    n
  );
  return Qa(t);
  function t(r) {
    const i = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      r
    );
    let s;
    for (s in n)
      if (i[s] !== e[s]) return !1;
    return !0;
  }
}
function c6(n) {
  return Qa(e);
  function e(t) {
    return t && t.type === n;
  }
}
function Qa(n) {
  return e;
  function e(t, r, i) {
    return !!(d6(t) && n.call(
      this,
      t,
      typeof r == "number" ? r : void 0,
      i || void 0
    ));
  }
}
function f6() {
  return !0;
}
function d6(n) {
  return n !== null && typeof n == "object" && "type" in n;
}
const jm = [], p6 = !0, Eu = !1, _m = "skip";
function J0(n, e, t, r) {
  let i;
  typeof e == "function" && typeof t != "function" ? (r = t, t = e) : i = e;
  const s = Rs(i), l = r ? -1 : 1;
  a(n, void 0, [])();
  function a(o, u, h) {
    const c = (
      /** @type {Record<string, unknown>} */
      o && typeof o == "object" ? o : {}
    );
    if (typeof c.type == "string") {
      const d = (
        // `hast`
        typeof c.tagName == "string" ? c.tagName : (
          // `xast`
          typeof c.name == "string" ? c.name : void 0
        )
      );
      Object.defineProperty(f, "name", {
        value: "node (" + (o.type + (d ? "<" + d + ">" : "")) + ")"
      });
    }
    return f;
    function f() {
      let d = jm, m, O, x;
      if ((!e || s(o, u, h[h.length - 1] || void 0)) && (d = m6(t(o, h)), d[0] === Eu))
        return d;
      if ("children" in o && o.children) {
        const b = (
          /** @type {UnistParent} */
          o
        );
        if (b.children && d[0] !== _m)
          for (O = (r ? b.children.length : -1) + l, x = h.concat(b); O > -1 && O < b.children.length; ) {
            const w = b.children[O];
            if (m = a(w, O, x)(), m[0] === Eu)
              return m;
            O = typeof m[1] == "number" ? m[1] : O + l;
          }
      }
      return d;
    }
  }
}
function m6(n) {
  return Array.isArray(n) ? n : typeof n == "number" ? [p6, n] : n == null ? jm : [n];
}
function Um(n, e, t) {
  const i = Rs((t || {}).ignore || []), s = g6(e);
  let l = -1;
  for (; ++l < s.length; )
    J0(n, "text", a);
  function a(u, h) {
    let c = -1, f;
    for (; ++c < h.length; ) {
      const d = h[c], m = f ? f.children : void 0;
      if (i(
        d,
        m ? m.indexOf(d) : void 0,
        f
      ))
        return;
      f = d;
    }
    if (f)
      return o(u, h);
  }
  function o(u, h) {
    const c = h[h.length - 1], f = s[l][0], d = s[l][1];
    let m = 0;
    const x = c.children.indexOf(u);
    let b = !1, w = [];
    f.lastIndex = 0;
    let C = f.exec(u.value);
    for (; C; ) {
      const Z = C.index, T = {
        index: C.index,
        input: C.input,
        stack: [...h, u]
      };
      let S = d(...C, T);
      if (typeof S == "string" && (S = S.length > 0 ? { type: "text", value: S } : void 0), S === !1 ? f.lastIndex = Z + 1 : (m !== Z && w.push({
        type: "text",
        value: u.value.slice(m, Z)
      }), Array.isArray(S) ? w.push(...S) : S && w.push(S), m = Z + C[0].length, b = !0), !f.global)
        break;
      C = f.exec(u.value);
    }
    return b ? (m < u.value.length && w.push({ type: "text", value: u.value.slice(m) }), c.children.splice(x, 1, ...w)) : w = [u], x + w.length;
  }
}
function g6(n) {
  const e = [];
  if (!Array.isArray(n))
    throw new TypeError("Expected find and replace tuple or list of tuples");
  const t = !n[0] || Array.isArray(n[0]) ? n : [n];
  let r = -1;
  for (; ++r < t.length; ) {
    const i = t[r];
    e.push([O6(i[0]), y6(i[1])]);
  }
  return e;
}
function O6(n) {
  return typeof n == "string" ? new RegExp(o6(n), "g") : n;
}
function y6(n) {
  return typeof n == "function" ? n : function() {
    return n;
  };
}
const no = "phrasing", ro = ["autolink", "link", "image", "label"];
function b6() {
  return {
    transforms: [P6],
    enter: {
      literalAutolink: v6,
      literalAutolinkEmail: io,
      literalAutolinkHttp: io,
      literalAutolinkWww: io
    },
    exit: {
      literalAutolink: Q6,
      literalAutolinkEmail: S6,
      literalAutolinkHttp: w6,
      literalAutolinkWww: k6
    }
  };
}
function x6() {
  return {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct: no,
        notInConstruct: ro
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct: no,
        notInConstruct: ro
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct: no,
        notInConstruct: ro
      }
    ]
  };
}
function v6(n) {
  this.enter({ type: "link", title: null, url: "", children: [] }, n);
}
function io(n) {
  this.config.enter.autolinkProtocol.call(this, n);
}
function w6(n) {
  this.config.exit.autolinkProtocol.call(this, n);
}
function k6(n) {
  this.config.exit.data.call(this, n);
  const e = this.stack[this.stack.length - 1];
  e.type, e.url = "http://" + this.sliceSerialize(n);
}
function S6(n) {
  this.config.exit.autolinkEmail.call(this, n);
}
function Q6(n) {
  this.exit(n);
}
function P6(n) {
  Um(
    n,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, C6],
      [new RegExp("(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)", "gu"), A6]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function C6(n, e, t, r, i) {
  let s = "";
  if (!Wm(i) || (/^w/i.test(e) && (t = e + t, e = "", s = "http://"), !$6(t)))
    return !1;
  const l = D6(t + r);
  if (!l[0]) return !1;
  const a = {
    type: "link",
    title: null,
    url: s + e + l[0],
    children: [{ type: "text", value: e + l[0] }]
  };
  return l[1] ? [a, { type: "text", value: l[1] }] : a;
}
function A6(n, e, t, r) {
  return (
    // Not an expected previous character.
    !Wm(r, !0) || // Label ends in not allowed character.
    /[-\d_]$/.test(t) ? !1 : {
      type: "link",
      title: null,
      url: "mailto:" + e + "@" + t,
      children: [{ type: "text", value: e + "@" + t }]
    }
  );
}
function $6(n) {
  const e = n.split(".");
  return !(e.length < 2 || e[e.length - 1] && (/_/.test(e[e.length - 1]) || !/[a-zA-Z\d]/.test(e[e.length - 1])) || e[e.length - 2] && (/_/.test(e[e.length - 2]) || !/[a-zA-Z\d]/.test(e[e.length - 2])));
}
function D6(n) {
  const e = /[!"&'),.:;<>?\]}]+$/.exec(n);
  if (!e)
    return [n, void 0];
  n = n.slice(0, e.index);
  let t = e[0], r = t.indexOf(")");
  const i = Wl(n, "(");
  let s = Wl(n, ")");
  for (; r !== -1 && i > s; )
    n += t.slice(0, r + 1), t = t.slice(r + 1), r = t.indexOf(")"), s++;
  return [n, t];
}
function Wm(n, e) {
  const t = n.input.charCodeAt(n.index - 1);
  return (n.index === 0 || Fr(t) || ka(t)) && // If it’s an email, the previous character should not be a slash.
  (!e || t !== 47);
}
Ym.peek = L6;
function T6() {
  this.buffer();
}
function M6(n) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, n);
}
function E6() {
  this.buffer();
}
function R6(n) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    n
  );
}
function Z6(n) {
  const e = this.resume(), t = this.stack[this.stack.length - 1];
  t.type, t.identifier = hn(
    this.sliceSerialize(n)
  ).toLowerCase(), t.label = e;
}
function z6(n) {
  this.exit(n);
}
function F6(n) {
  const e = this.resume(), t = this.stack[this.stack.length - 1];
  t.type, t.identifier = hn(
    this.sliceSerialize(n)
  ).toLowerCase(), t.label = e;
}
function B6(n) {
  this.exit(n);
}
function L6() {
  return "[";
}
function Ym(n, e, t, r) {
  const i = t.createTracker(r);
  let s = i.move("[^");
  const l = t.enter("footnoteReference"), a = t.enter("reference");
  return s += i.move(
    t.safe(t.associationId(n), { after: "]", before: s })
  ), a(), l(), s += i.move("]"), s;
}
function q6() {
  return {
    enter: {
      gfmFootnoteCallString: T6,
      gfmFootnoteCall: M6,
      gfmFootnoteDefinitionLabelString: E6,
      gfmFootnoteDefinition: R6
    },
    exit: {
      gfmFootnoteCallString: Z6,
      gfmFootnoteCall: z6,
      gfmFootnoteDefinitionLabelString: F6,
      gfmFootnoteDefinition: B6
    }
  };
}
function X6(n) {
  let e = !1;
  return n && n.firstLineBlank && (e = !0), {
    handlers: { footnoteDefinition: t, footnoteReference: Ym },
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["label", "phrasing", "reference"] }]
  };
  function t(r, i, s, l) {
    const a = s.createTracker(l);
    let o = a.move("[^");
    const u = s.enter("footnoteDefinition"), h = s.enter("label");
    return o += a.move(
      s.safe(s.associationId(r), { before: o, after: "]" })
    ), h(), o += a.move("]:"), r.children && r.children.length > 0 && (a.shift(4), o += a.move(
      (e ? `
` : " ") + s.indentLines(
        s.containerFlow(r, a.current()),
        e ? Gm : I6
      )
    )), u(), o;
  }
}
function I6(n, e, t) {
  return e === 0 ? n : Gm(n, e, t);
}
function Gm(n, e, t) {
  return (t ? "" : "    ") + n;
}
const N6 = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
Hm.peek = W6;
function V6() {
  return {
    canContainEols: ["delete"],
    enter: { strikethrough: _6 },
    exit: { strikethrough: U6 }
  };
}
function j6() {
  return {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: N6
      }
    ],
    handlers: { delete: Hm }
  };
}
function _6(n) {
  this.enter({ type: "delete", children: [] }, n);
}
function U6(n) {
  this.exit(n);
}
function Hm(n, e, t, r) {
  const i = t.createTracker(r), s = t.enter("strikethrough");
  let l = i.move("~~");
  return l += t.containerPhrasing(n, {
    ...i.current(),
    before: l,
    after: "~"
  }), l += i.move("~~"), s(), l;
}
function W6() {
  return "~";
}
function Y6(n) {
  return n.length;
}
function G6(n, e) {
  const t = e || {}, r = (t.align || []).concat(), i = t.stringLength || Y6, s = [], l = [], a = [], o = [];
  let u = 0, h = -1;
  for (; ++h < n.length; ) {
    const O = [], x = [];
    let b = -1;
    for (n[h].length > u && (u = n[h].length); ++b < n[h].length; ) {
      const w = H6(n[h][b]);
      if (t.alignDelimiters !== !1) {
        const C = i(w);
        x[b] = C, (o[b] === void 0 || C > o[b]) && (o[b] = C);
      }
      O.push(w);
    }
    l[h] = O, a[h] = x;
  }
  let c = -1;
  if (typeof r == "object" && "length" in r)
    for (; ++c < u; )
      s[c] = Ec(r[c]);
  else {
    const O = Ec(r);
    for (; ++c < u; )
      s[c] = O;
  }
  c = -1;
  const f = [], d = [];
  for (; ++c < u; ) {
    const O = s[c];
    let x = "", b = "";
    O === 99 ? (x = ":", b = ":") : O === 108 ? x = ":" : O === 114 && (b = ":");
    let w = t.alignDelimiters === !1 ? 1 : Math.max(
      1,
      o[c] - x.length - b.length
    );
    const C = x + "-".repeat(w) + b;
    t.alignDelimiters !== !1 && (w = x.length + w + b.length, w > o[c] && (o[c] = w), d[c] = w), f[c] = C;
  }
  l.splice(1, 0, f), a.splice(1, 0, d), h = -1;
  const m = [];
  for (; ++h < l.length; ) {
    const O = l[h], x = a[h];
    c = -1;
    const b = [];
    for (; ++c < u; ) {
      const w = O[c] || "";
      let C = "", Z = "";
      if (t.alignDelimiters !== !1) {
        const T = o[c] - (x[c] || 0), S = s[c];
        S === 114 ? C = " ".repeat(T) : S === 99 ? T % 2 ? (C = " ".repeat(T / 2 + 0.5), Z = " ".repeat(T / 2 - 0.5)) : (C = " ".repeat(T / 2), Z = C) : Z = " ".repeat(T);
      }
      t.delimiterStart !== !1 && !c && b.push("|"), t.padding !== !1 && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(t.alignDelimiters === !1 && w === "") && (t.delimiterStart !== !1 || c) && b.push(" "), t.alignDelimiters !== !1 && b.push(C), b.push(w), t.alignDelimiters !== !1 && b.push(Z), t.padding !== !1 && b.push(" "), (t.delimiterEnd !== !1 || c !== u - 1) && b.push("|");
    }
    m.push(
      t.delimiterEnd === !1 ? b.join("").replace(/ +$/, "") : b.join("")
    );
  }
  return m.join(`
`);
}
function H6(n) {
  return n == null ? "" : String(n);
}
function Ec(n) {
  const e = typeof n == "string" ? n.codePointAt(0) : 0;
  return e === 67 || e === 99 ? 99 : e === 76 || e === 108 ? 108 : e === 82 || e === 114 ? 114 : 0;
}
const Rc = {}.hasOwnProperty;
function K6(n, e) {
  const t = e || {};
  function r(i, ...s) {
    let l = r.invalid;
    const a = r.handlers;
    if (i && Rc.call(i, n)) {
      const o = String(i[n]);
      l = Rc.call(a, o) ? a[o] : r.unknown;
    }
    if (l)
      return l.call(this, i, ...s);
  }
  return r.handlers = t.handlers || {}, r.invalid = t.invalid, r.unknown = t.unknown, r;
}
function J6(n, e, t, r) {
  const i = t.enter("blockquote"), s = t.createTracker(r);
  s.move("> "), s.shift(2);
  const l = t.indentLines(
    t.containerFlow(n, s.current()),
    ey
  );
  return i(), l;
}
function ey(n, e, t) {
  return ">" + (t ? "" : " ") + n;
}
function ty(n, e) {
  return Zc(n, e.inConstruct, !0) && !Zc(n, e.notInConstruct, !1);
}
function Zc(n, e, t) {
  if (typeof e == "string" && (e = [e]), !e || e.length === 0)
    return t;
  let r = -1;
  for (; ++r < e.length; )
    if (n.includes(e[r]))
      return !0;
  return !1;
}
function zc(n, e, t, r) {
  let i = -1;
  for (; ++i < t.unsafe.length; )
    if (t.unsafe[i].character === `
` && ty(t.stack, t.unsafe[i]))
      return /[ \t]/.test(r.before) ? "" : " ";
  return `\\
`;
}
function Km(n, e) {
  const t = String(n);
  let r = t.indexOf(e), i = r, s = 0, l = 0;
  if (typeof e != "string")
    throw new TypeError("Expected substring");
  for (; r !== -1; )
    r === i ? ++s > l && (l = s) : s = 1, i = r + e.length, r = t.indexOf(e, i);
  return l;
}
function ny(n, e) {
  return !!(e.options.fences === !1 && n.value && // If there’s no info…
  !n.lang && // And there’s a non-whitespace character…
  /[^ \r\n]/.test(n.value) && // And the value doesn’t start or end in a blank…
  !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(n.value));
}
function ry(n) {
  const e = n.options.fence || "`";
  if (e !== "`" && e !== "~")
    throw new Error(
      "Cannot serialize code with `" + e + "` for `options.fence`, expected `` ` `` or `~`"
    );
  return e;
}
function iy(n, e, t, r) {
  const i = ry(t), s = n.value || "", l = i === "`" ? "GraveAccent" : "Tilde";
  if (ny(n, t)) {
    const c = t.enter("codeIndented"), f = t.indentLines(s, sy);
    return c(), f;
  }
  const a = t.createTracker(r), o = i.repeat(Math.max(Km(s, i) + 1, 3)), u = t.enter("codeFenced");
  let h = a.move(o);
  if (n.lang) {
    const c = t.enter(`codeFencedLang${l}`);
    h += a.move(
      t.safe(n.lang, {
        before: h,
        after: " ",
        encode: ["`"],
        ...a.current()
      })
    ), c();
  }
  if (n.lang && n.meta) {
    const c = t.enter(`codeFencedMeta${l}`);
    h += a.move(" "), h += a.move(
      t.safe(n.meta, {
        before: h,
        after: `
`,
        encode: ["`"],
        ...a.current()
      })
    ), c();
  }
  return h += a.move(`
`), s && (h += a.move(s + `
`)), h += a.move(o), u(), h;
}
function sy(n, e, t) {
  return (t ? "" : "    ") + n;
}
function eh(n) {
  const e = n.options.quote || '"';
  if (e !== '"' && e !== "'")
    throw new Error(
      "Cannot serialize title with `" + e + "` for `options.quote`, expected `\"`, or `'`"
    );
  return e;
}
function ly(n, e, t, r) {
  const i = eh(t), s = i === '"' ? "Quote" : "Apostrophe", l = t.enter("definition");
  let a = t.enter("label");
  const o = t.createTracker(r);
  let u = o.move("[");
  return u += o.move(
    t.safe(t.associationId(n), {
      before: u,
      after: "]",
      ...o.current()
    })
  ), u += o.move("]: "), a(), // If there’s no url, or…
  !n.url || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(n.url) ? (a = t.enter("destinationLiteral"), u += o.move("<"), u += o.move(
    t.safe(n.url, { before: u, after: ">", ...o.current() })
  ), u += o.move(">")) : (a = t.enter("destinationRaw"), u += o.move(
    t.safe(n.url, {
      before: u,
      after: n.title ? " " : `
`,
      ...o.current()
    })
  )), a(), n.title && (a = t.enter(`title${s}`), u += o.move(" " + i), u += o.move(
    t.safe(n.title, {
      before: u,
      after: i,
      ...o.current()
    })
  ), u += o.move(i), a()), l(), u;
}
function ay(n) {
  const e = n.options.emphasis || "*";
  if (e !== "*" && e !== "_")
    throw new Error(
      "Cannot serialize emphasis with `" + e + "` for `options.emphasis`, expected `*`, or `_`"
    );
  return e;
}
function hs(n) {
  return "&#x" + n.toString(16).toUpperCase() + ";";
}
function Yl(n, e, t) {
  const r = ui(n), i = ui(e);
  return r === void 0 ? i === void 0 ? (
    // Letter inside:
    // we have to encode *both* letters for `_` as it is looser.
    // it already forms for `*` (and GFMs `~`).
    t === "_" ? { inside: !0, outside: !0 } : { inside: !1, outside: !1 }
  ) : i === 1 ? (
    // Whitespace inside: encode both (letter, whitespace).
    { inside: !0, outside: !0 }
  ) : (
    // Punctuation inside: encode outer (letter)
    { inside: !1, outside: !0 }
  ) : r === 1 ? i === void 0 ? (
    // Letter inside: already forms.
    { inside: !1, outside: !1 }
  ) : i === 1 ? (
    // Whitespace inside: encode both (whitespace).
    { inside: !0, outside: !0 }
  ) : (
    // Punctuation inside: already forms.
    { inside: !1, outside: !1 }
  ) : i === void 0 ? (
    // Letter inside: already forms.
    { inside: !1, outside: !1 }
  ) : i === 1 ? (
    // Whitespace inside: encode inner (whitespace).
    { inside: !0, outside: !1 }
  ) : (
    // Punctuation inside: already forms.
    { inside: !1, outside: !1 }
  );
}
Jm.peek = oy;
function Jm(n, e, t, r) {
  const i = ay(t), s = t.enter("emphasis"), l = t.createTracker(r), a = l.move(i);
  let o = l.move(
    t.containerPhrasing(n, {
      after: i,
      before: a,
      ...l.current()
    })
  );
  const u = o.charCodeAt(0), h = Yl(
    r.before.charCodeAt(r.before.length - 1),
    u,
    i
  );
  h.inside && (o = hs(u) + o.slice(1));
  const c = o.charCodeAt(o.length - 1), f = Yl(r.after.charCodeAt(0), c, i);
  f.inside && (o = o.slice(0, -1) + hs(c));
  const d = l.move(i);
  return s(), t.attentionEncodeSurroundingInfo = {
    after: f.outside,
    before: h.outside
  }, a + o + d;
}
function oy(n, e, t) {
  return t.options.emphasis || "*";
}
function Pa(n, e, t, r) {
  let i, s, l;
  typeof e == "function" && typeof t != "function" ? (s = void 0, l = e, i = t) : (s = e, l = t, i = r), J0(n, s, a, i);
  function a(o, u) {
    const h = u[u.length - 1], c = h ? h.children.indexOf(o) : void 0;
    return l(o, c, h);
  }
}
function uy(n, e) {
  let t = !1;
  return Pa(n, function(r) {
    if ("value" in r && /\r?\n|\r/.test(r.value) || r.type === "break")
      return t = !0, Eu;
  }), !!((!n.depth || n.depth < 3) && G0(n) && (e.options.setext || t));
}
function hy(n, e, t, r) {
  const i = Math.max(Math.min(6, n.depth || 1), 1), s = t.createTracker(r);
  if (uy(n, t)) {
    const h = t.enter("headingSetext"), c = t.enter("phrasing"), f = t.containerPhrasing(n, {
      ...s.current(),
      before: `
`,
      after: `
`
    });
    return c(), h(), f + `
` + (i === 1 ? "=" : "-").repeat(
      // The whole size…
      f.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(f.lastIndexOf("\r"), f.lastIndexOf(`
`)) + 1)
    );
  }
  const l = "#".repeat(i), a = t.enter("headingAtx"), o = t.enter("phrasing");
  s.move(l + " ");
  let u = t.containerPhrasing(n, {
    before: "# ",
    after: `
`,
    ...s.current()
  });
  return /^[\t ]/.test(u) && (u = hs(u.charCodeAt(0)) + u.slice(1)), u = u ? l + " " + u : l, t.options.closeAtx && (u += " " + l), o(), a(), u;
}
e1.peek = cy;
function e1(n) {
  return n.value || "";
}
function cy() {
  return "<";
}
t1.peek = fy;
function t1(n, e, t, r) {
  const i = eh(t), s = i === '"' ? "Quote" : "Apostrophe", l = t.enter("image");
  let a = t.enter("label");
  const o = t.createTracker(r);
  let u = o.move("![");
  return u += o.move(
    t.safe(n.alt, { before: u, after: "]", ...o.current() })
  ), u += o.move("]("), a(), // If there’s no url but there is a title…
  !n.url && n.title || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(n.url) ? (a = t.enter("destinationLiteral"), u += o.move("<"), u += o.move(
    t.safe(n.url, { before: u, after: ">", ...o.current() })
  ), u += o.move(">")) : (a = t.enter("destinationRaw"), u += o.move(
    t.safe(n.url, {
      before: u,
      after: n.title ? " " : ")",
      ...o.current()
    })
  )), a(), n.title && (a = t.enter(`title${s}`), u += o.move(" " + i), u += o.move(
    t.safe(n.title, {
      before: u,
      after: i,
      ...o.current()
    })
  ), u += o.move(i), a()), u += o.move(")"), l(), u;
}
function fy() {
  return "!";
}
n1.peek = dy;
function n1(n, e, t, r) {
  const i = n.referenceType, s = t.enter("imageReference");
  let l = t.enter("label");
  const a = t.createTracker(r);
  let o = a.move("![");
  const u = t.safe(n.alt, {
    before: o,
    after: "]",
    ...a.current()
  });
  o += a.move(u + "]["), l();
  const h = t.stack;
  t.stack = [], l = t.enter("reference");
  const c = t.safe(t.associationId(n), {
    before: o,
    after: "]",
    ...a.current()
  });
  return l(), t.stack = h, s(), i === "full" || !u || u !== c ? o += a.move(c + "]") : i === "shortcut" ? o = o.slice(0, -1) : o += a.move("]"), o;
}
function dy() {
  return "!";
}
r1.peek = py;
function r1(n, e, t) {
  let r = n.value || "", i = "`", s = -1;
  for (; new RegExp("(^|[^`])" + i + "([^`]|$)").test(r); )
    i += "`";
  for (/[^ \r\n]/.test(r) && (/^[ \r\n]/.test(r) && /[ \r\n]$/.test(r) || /^`|`$/.test(r)) && (r = " " + r + " "); ++s < t.unsafe.length; ) {
    const l = t.unsafe[s], a = t.compilePattern(l);
    let o;
    if (l.atBreak)
      for (; o = a.exec(r); ) {
        let u = o.index;
        r.charCodeAt(u) === 10 && r.charCodeAt(u - 1) === 13 && u--, r = r.slice(0, u) + " " + r.slice(o.index + 1);
      }
  }
  return i + r + i;
}
function py() {
  return "`";
}
function i1(n, e) {
  const t = G0(n);
  return !!(!e.options.resourceLink && // If there’s a url…
  n.url && // And there’s a no title…
  !n.title && // And the content of `node` is a single text node…
  n.children && n.children.length === 1 && n.children[0].type === "text" && // And if the url is the same as the content…
  (t === n.url || "mailto:" + t === n.url) && // And that starts w/ a protocol…
  /^[a-z][a-z+.-]+:/i.test(n.url) && // And that doesn’t contain ASCII control codes (character escapes and
  // references don’t work), space, or angle brackets…
  !/[\0- <>\u007F]/.test(n.url));
}
s1.peek = my;
function s1(n, e, t, r) {
  const i = eh(t), s = i === '"' ? "Quote" : "Apostrophe", l = t.createTracker(r);
  let a, o;
  if (i1(n, t)) {
    const h = t.stack;
    t.stack = [], a = t.enter("autolink");
    let c = l.move("<");
    return c += l.move(
      t.containerPhrasing(n, {
        before: c,
        after: ">",
        ...l.current()
      })
    ), c += l.move(">"), a(), t.stack = h, c;
  }
  a = t.enter("link"), o = t.enter("label");
  let u = l.move("[");
  return u += l.move(
    t.containerPhrasing(n, {
      before: u,
      after: "](",
      ...l.current()
    })
  ), u += l.move("]("), o(), // If there’s no url but there is a title…
  !n.url && n.title || // If there are control characters or whitespace.
  /[\0- \u007F]/.test(n.url) ? (o = t.enter("destinationLiteral"), u += l.move("<"), u += l.move(
    t.safe(n.url, { before: u, after: ">", ...l.current() })
  ), u += l.move(">")) : (o = t.enter("destinationRaw"), u += l.move(
    t.safe(n.url, {
      before: u,
      after: n.title ? " " : ")",
      ...l.current()
    })
  )), o(), n.title && (o = t.enter(`title${s}`), u += l.move(" " + i), u += l.move(
    t.safe(n.title, {
      before: u,
      after: i,
      ...l.current()
    })
  ), u += l.move(i), o()), u += l.move(")"), a(), u;
}
function my(n, e, t) {
  return i1(n, t) ? "<" : "[";
}
l1.peek = gy;
function l1(n, e, t, r) {
  const i = n.referenceType, s = t.enter("linkReference");
  let l = t.enter("label");
  const a = t.createTracker(r);
  let o = a.move("[");
  const u = t.containerPhrasing(n, {
    before: o,
    after: "]",
    ...a.current()
  });
  o += a.move(u + "]["), l();
  const h = t.stack;
  t.stack = [], l = t.enter("reference");
  const c = t.safe(t.associationId(n), {
    before: o,
    after: "]",
    ...a.current()
  });
  return l(), t.stack = h, s(), i === "full" || !u || u !== c ? o += a.move(c + "]") : i === "shortcut" ? o = o.slice(0, -1) : o += a.move("]"), o;
}
function gy() {
  return "[";
}
function th(n) {
  const e = n.options.bullet || "*";
  if (e !== "*" && e !== "+" && e !== "-")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  return e;
}
function Oy(n) {
  const e = th(n), t = n.options.bulletOther;
  if (!t)
    return e === "*" ? "-" : "*";
  if (t !== "*" && t !== "+" && t !== "-")
    throw new Error(
      "Cannot serialize items with `" + t + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  if (t === e)
    throw new Error(
      "Expected `bullet` (`" + e + "`) and `bulletOther` (`" + t + "`) to be different"
    );
  return t;
}
function yy(n) {
  const e = n.options.bulletOrdered || ".";
  if (e !== "." && e !== ")")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  return e;
}
function a1(n) {
  const e = n.options.rule || "*";
  if (e !== "*" && e !== "-" && e !== "_")
    throw new Error(
      "Cannot serialize rules with `" + e + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  return e;
}
function by(n, e, t, r) {
  const i = t.enter("list"), s = t.bulletCurrent;
  let l = n.ordered ? yy(t) : th(t);
  const a = n.ordered ? l === "." ? ")" : "." : Oy(t);
  let o = e && t.bulletLastUsed ? l === t.bulletLastUsed : !1;
  if (!n.ordered) {
    const h = n.children ? n.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (l === "*" || l === "-") && // Empty first list item:
      h && (!h.children || !h.children[0]) && // Directly in two other list items:
      t.stack[t.stack.length - 1] === "list" && t.stack[t.stack.length - 2] === "listItem" && t.stack[t.stack.length - 3] === "list" && t.stack[t.stack.length - 4] === "listItem" && // That are each the first child.
      t.indexStack[t.indexStack.length - 1] === 0 && t.indexStack[t.indexStack.length - 2] === 0 && t.indexStack[t.indexStack.length - 3] === 0 && (o = !0), a1(t) === l && h
    ) {
      let c = -1;
      for (; ++c < n.children.length; ) {
        const f = n.children[c];
        if (f && f.type === "listItem" && f.children && f.children[0] && f.children[0].type === "thematicBreak") {
          o = !0;
          break;
        }
      }
    }
  }
  o && (l = a), t.bulletCurrent = l;
  const u = t.containerFlow(n, r);
  return t.bulletLastUsed = l, t.bulletCurrent = s, i(), u;
}
function xy(n) {
  const e = n.options.listItemIndent || "one";
  if (e !== "tab" && e !== "one" && e !== "mixed")
    throw new Error(
      "Cannot serialize items with `" + e + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  return e;
}
function vy(n, e, t, r) {
  const i = xy(t);
  let s = t.bulletCurrent || th(t);
  e && e.type === "list" && e.ordered && (s = (typeof e.start == "number" && e.start > -1 ? e.start : 1) + (t.options.incrementListMarker === !1 ? 0 : e.children.indexOf(n)) + s);
  let l = s.length + 1;
  (i === "tab" || i === "mixed" && (e && e.type === "list" && e.spread || n.spread)) && (l = Math.ceil(l / 4) * 4);
  const a = t.createTracker(r);
  a.move(s + " ".repeat(l - s.length)), a.shift(l);
  const o = t.enter("listItem"), u = t.indentLines(
    t.containerFlow(n, a.current()),
    h
  );
  return o(), u;
  function h(c, f, d) {
    return f ? (d ? "" : " ".repeat(l)) + c : (d ? s : s + " ".repeat(l - s.length)) + c;
  }
}
function wy(n, e, t, r) {
  const i = t.enter("paragraph"), s = t.enter("phrasing"), l = t.containerPhrasing(n, r);
  return s(), i(), l;
}
const ky = (
  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
  Rs([
    "break",
    "delete",
    "emphasis",
    // To do: next major: removed since footnotes were added to GFM.
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    // Enabled by `mdast-util-math`:
    "inlineMath",
    "link",
    "linkReference",
    // Enabled by `mdast-util-mdx`:
    "mdxJsxTextElement",
    // Enabled by `mdast-util-mdx`:
    "mdxTextExpression",
    "strong",
    "text",
    // Enabled by `mdast-util-directive`:
    "textDirective"
  ])
);
function Sy(n, e, t, r) {
  return (n.children.some(function(l) {
    return ky(l);
  }) ? t.containerPhrasing : t.containerFlow).call(t, n, r);
}
function Qy(n) {
  const e = n.options.strong || "*";
  if (e !== "*" && e !== "_")
    throw new Error(
      "Cannot serialize strong with `" + e + "` for `options.strong`, expected `*`, or `_`"
    );
  return e;
}
o1.peek = Py;
function o1(n, e, t, r) {
  const i = Qy(t), s = t.enter("strong"), l = t.createTracker(r), a = l.move(i + i);
  let o = l.move(
    t.containerPhrasing(n, {
      after: i,
      before: a,
      ...l.current()
    })
  );
  const u = o.charCodeAt(0), h = Yl(
    r.before.charCodeAt(r.before.length - 1),
    u,
    i
  );
  h.inside && (o = hs(u) + o.slice(1));
  const c = o.charCodeAt(o.length - 1), f = Yl(r.after.charCodeAt(0), c, i);
  f.inside && (o = o.slice(0, -1) + hs(c));
  const d = l.move(i + i);
  return s(), t.attentionEncodeSurroundingInfo = {
    after: f.outside,
    before: h.outside
  }, a + o + d;
}
function Py(n, e, t) {
  return t.options.strong || "*";
}
function Cy(n, e, t, r) {
  return t.safe(n.value, r);
}
function Ay(n) {
  const e = n.options.ruleRepetition || 3;
  if (e < 3)
    throw new Error(
      "Cannot serialize rules with repetition `" + e + "` for `options.ruleRepetition`, expected `3` or more"
    );
  return e;
}
function $y(n, e, t) {
  const r = (a1(t) + (t.options.ruleSpaces ? " " : "")).repeat(Ay(t));
  return t.options.ruleSpaces ? r.slice(0, -1) : r;
}
const u1 = {
  blockquote: J6,
  break: zc,
  code: iy,
  definition: ly,
  emphasis: Jm,
  hardBreak: zc,
  heading: hy,
  html: e1,
  image: t1,
  imageReference: n1,
  inlineCode: r1,
  link: s1,
  linkReference: l1,
  list: by,
  listItem: vy,
  paragraph: wy,
  root: Sy,
  strong: o1,
  text: Cy,
  thematicBreak: $y
};
function Dy() {
  return {
    enter: {
      table: Ty,
      tableData: Fc,
      tableHeader: Fc,
      tableRow: Ey
    },
    exit: {
      codeText: Ry,
      table: My,
      tableData: so,
      tableHeader: so,
      tableRow: so
    }
  };
}
function Ty(n) {
  const e = n._align;
  this.enter(
    {
      type: "table",
      align: e.map(function(t) {
        return t === "none" ? null : t;
      }),
      children: []
    },
    n
  ), this.data.inTable = !0;
}
function My(n) {
  this.exit(n), this.data.inTable = void 0;
}
function Ey(n) {
  this.enter({ type: "tableRow", children: [] }, n);
}
function so(n) {
  this.exit(n);
}
function Fc(n) {
  this.enter({ type: "tableCell", children: [] }, n);
}
function Ry(n) {
  let e = this.resume();
  this.data.inTable && (e = e.replace(/\\([\\|])/g, Zy));
  const t = this.stack[this.stack.length - 1];
  t.type, t.value = e, this.exit(n);
}
function Zy(n, e) {
  return e === "|" ? e : n;
}
function zy(n) {
  const e = n || {}, t = e.tableCellPadding, r = e.tablePipeAlign, i = e.stringLength, s = t ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: `
`, inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: !0, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: !0, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: !0, character: "-", after: "[:|-]" }
    ],
    handlers: {
      inlineCode: f,
      table: l,
      tableCell: o,
      tableRow: a
    }
  };
  function l(d, m, O, x) {
    return u(h(d, O, x), d.align);
  }
  function a(d, m, O, x) {
    const b = c(d, O, x), w = u([b]);
    return w.slice(0, w.indexOf(`
`));
  }
  function o(d, m, O, x) {
    const b = O.enter("tableCell"), w = O.enter("phrasing"), C = O.containerPhrasing(d, {
      ...x,
      before: s,
      after: s
    });
    return w(), b(), C;
  }
  function u(d, m) {
    return G6(d, {
      align: m,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters: r,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding: t,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength: i
    });
  }
  function h(d, m, O) {
    const x = d.children;
    let b = -1;
    const w = [], C = m.enter("table");
    for (; ++b < x.length; )
      w[b] = c(x[b], m, O);
    return C(), w;
  }
  function c(d, m, O) {
    const x = d.children;
    let b = -1;
    const w = [], C = m.enter("tableRow");
    for (; ++b < x.length; )
      w[b] = o(x[b], d, m, O);
    return C(), w;
  }
  function f(d, m, O) {
    let x = u1.inlineCode(d, m, O);
    return O.stack.includes("tableCell") && (x = x.replace(/\|/g, "\\$&")), x;
  }
}
function Fy() {
  return {
    exit: {
      taskListCheckValueChecked: Bc,
      taskListCheckValueUnchecked: Bc,
      paragraph: Ly
    }
  };
}
function By() {
  return {
    unsafe: [{ atBreak: !0, character: "-", after: "[:|-]" }],
    handlers: { listItem: qy }
  };
}
function Bc(n) {
  const e = this.stack[this.stack.length - 2];
  e.type, e.checked = n.type === "taskListCheckValueChecked";
}
function Ly(n) {
  const e = this.stack[this.stack.length - 2];
  if (e && e.type === "listItem" && typeof e.checked == "boolean") {
    const t = this.stack[this.stack.length - 1];
    t.type;
    const r = t.children[0];
    if (r && r.type === "text") {
      const i = e.children;
      let s = -1, l;
      for (; ++s < i.length; ) {
        const a = i[s];
        if (a.type === "paragraph") {
          l = a;
          break;
        }
      }
      l === t && (r.value = r.value.slice(1), r.value.length === 0 ? t.children.shift() : t.position && r.position && typeof r.position.start.offset == "number" && (r.position.start.column++, r.position.start.offset++, t.position.start = Object.assign({}, r.position.start)));
    }
  }
  this.exit(n);
}
function qy(n, e, t, r) {
  const i = n.children[0], s = typeof n.checked == "boolean" && i && i.type === "paragraph", l = "[" + (n.checked ? "x" : " ") + "] ", a = t.createTracker(r);
  s && a.move(l);
  let o = u1.listItem(n, e, t, {
    ...r,
    ...a.current()
  });
  return s && (o = o.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, u)), o;
  function u(h) {
    return h + l;
  }
}
function Xy() {
  return [
    b6(),
    q6(),
    V6(),
    Dy(),
    Fy()
  ];
}
function Iy(n) {
  return {
    extensions: [
      x6(),
      X6(n),
      j6(),
      zy(n),
      By()
    ]
  };
}
const Ny = {
  tokenize: Yy,
  partial: !0
}, h1 = {
  tokenize: Gy,
  partial: !0
}, c1 = {
  tokenize: Hy,
  partial: !0
}, f1 = {
  tokenize: Ky,
  partial: !0
}, Vy = {
  tokenize: Jy,
  partial: !0
}, d1 = {
  name: "wwwAutolink",
  tokenize: Uy,
  previous: m1
}, p1 = {
  name: "protocolAutolink",
  tokenize: Wy,
  previous: g1
}, er = {
  name: "emailAutolink",
  tokenize: _y,
  previous: O1
}, Dn = {};
function jy() {
  return {
    text: Dn
  };
}
let Cr = 48;
for (; Cr < 123; )
  Dn[Cr] = er, Cr++, Cr === 58 ? Cr = 65 : Cr === 91 && (Cr = 97);
Dn[43] = er;
Dn[45] = er;
Dn[46] = er;
Dn[95] = er;
Dn[72] = [er, p1];
Dn[104] = [er, p1];
Dn[87] = [er, d1];
Dn[119] = [er, d1];
function _y(n, e, t) {
  const r = this;
  let i, s;
  return l;
  function l(c) {
    return !Ru(c) || !O1.call(r, r.previous) || nh(r.events) ? t(c) : (n.enter("literalAutolink"), n.enter("literalAutolinkEmail"), a(c));
  }
  function a(c) {
    return Ru(c) ? (n.consume(c), a) : c === 64 ? (n.consume(c), o) : t(c);
  }
  function o(c) {
    return c === 46 ? n.check(Vy, h, u)(c) : c === 45 || c === 95 || dt(c) ? (s = !0, n.consume(c), o) : h(c);
  }
  function u(c) {
    return n.consume(c), i = !0, o;
  }
  function h(c) {
    return s && i && yt(r.previous) ? (n.exit("literalAutolinkEmail"), n.exit("literalAutolink"), e(c)) : t(c);
  }
}
function Uy(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return l !== 87 && l !== 119 || !m1.call(r, r.previous) || nh(r.events) ? t(l) : (n.enter("literalAutolink"), n.enter("literalAutolinkWww"), n.check(Ny, n.attempt(h1, n.attempt(c1, s), t), t)(l));
  }
  function s(l) {
    return n.exit("literalAutolinkWww"), n.exit("literalAutolink"), e(l);
  }
}
function Wy(n, e, t) {
  const r = this;
  let i = "", s = !1;
  return l;
  function l(c) {
    return (c === 72 || c === 104) && g1.call(r, r.previous) && !nh(r.events) ? (n.enter("literalAutolink"), n.enter("literalAutolinkHttp"), i += String.fromCodePoint(c), n.consume(c), a) : t(c);
  }
  function a(c) {
    if (yt(c) && i.length < 5)
      return i += String.fromCodePoint(c), n.consume(c), a;
    if (c === 58) {
      const f = i.toLowerCase();
      if (f === "http" || f === "https")
        return n.consume(c), o;
    }
    return t(c);
  }
  function o(c) {
    return c === 47 ? (n.consume(c), s ? u : (s = !0, o)) : t(c);
  }
  function u(c) {
    return c === null || Ul(c) || Ee(c) || Fr(c) || ka(c) ? t(c) : n.attempt(h1, n.attempt(c1, h), t)(c);
  }
  function h(c) {
    return n.exit("literalAutolinkHttp"), n.exit("literalAutolink"), e(c);
  }
}
function Yy(n, e, t) {
  let r = 0;
  return i;
  function i(l) {
    return (l === 87 || l === 119) && r < 3 ? (r++, n.consume(l), i) : l === 46 && r === 3 ? (n.consume(l), s) : t(l);
  }
  function s(l) {
    return l === null ? t(l) : e(l);
  }
}
function Gy(n, e, t) {
  let r, i, s;
  return l;
  function l(u) {
    return u === 46 || u === 95 ? n.check(f1, o, a)(u) : u === null || Ee(u) || Fr(u) || u !== 45 && ka(u) ? o(u) : (s = !0, n.consume(u), l);
  }
  function a(u) {
    return u === 95 ? r = !0 : (i = r, r = void 0), n.consume(u), l;
  }
  function o(u) {
    return i || r || !s ? t(u) : e(u);
  }
}
function Hy(n, e) {
  let t = 0, r = 0;
  return i;
  function i(l) {
    return l === 40 ? (t++, n.consume(l), i) : l === 41 && r < t ? s(l) : l === 33 || l === 34 || l === 38 || l === 39 || l === 41 || l === 42 || l === 44 || l === 46 || l === 58 || l === 59 || l === 60 || l === 63 || l === 93 || l === 95 || l === 126 ? n.check(f1, e, s)(l) : l === null || Ee(l) || Fr(l) ? e(l) : (n.consume(l), i);
  }
  function s(l) {
    return l === 41 && r++, n.consume(l), i;
  }
}
function Ky(n, e, t) {
  return r;
  function r(a) {
    return a === 33 || a === 34 || a === 39 || a === 41 || a === 42 || a === 44 || a === 46 || a === 58 || a === 59 || a === 63 || a === 95 || a === 126 ? (n.consume(a), r) : a === 38 ? (n.consume(a), s) : a === 93 ? (n.consume(a), i) : (
      // `<` is an end.
      a === 60 || // So is whitespace.
      a === null || Ee(a) || Fr(a) ? e(a) : t(a)
    );
  }
  function i(a) {
    return a === null || a === 40 || a === 91 || Ee(a) || Fr(a) ? e(a) : r(a);
  }
  function s(a) {
    return yt(a) ? l(a) : t(a);
  }
  function l(a) {
    return a === 59 ? (n.consume(a), r) : yt(a) ? (n.consume(a), l) : t(a);
  }
}
function Jy(n, e, t) {
  return r;
  function r(s) {
    return n.consume(s), i;
  }
  function i(s) {
    return dt(s) ? t(s) : e(s);
  }
}
function m1(n) {
  return n === null || n === 40 || n === 42 || n === 95 || n === 91 || n === 93 || n === 126 || Ee(n);
}
function g1(n) {
  return !yt(n);
}
function O1(n) {
  return !(n === 47 || Ru(n));
}
function Ru(n) {
  return n === 43 || n === 45 || n === 46 || n === 95 || dt(n);
}
function nh(n) {
  let e = n.length, t = !1;
  for (; e--; ) {
    const r = n[e][1];
    if ((r.type === "labelLink" || r.type === "labelImage") && !r._balanced) {
      t = !0;
      break;
    }
    if (r._gfmAutolinkLiteralWalkedInto) {
      t = !1;
      break;
    }
  }
  return n.length > 0 && !t && (n[n.length - 1][1]._gfmAutolinkLiteralWalkedInto = !0), t;
}
const eb = {
  tokenize: ob,
  partial: !0
};
function tb() {
  return {
    document: {
      91: {
        name: "gfmFootnoteDefinition",
        tokenize: sb,
        continuation: {
          tokenize: lb
        },
        exit: ab
      }
    },
    text: {
      91: {
        name: "gfmFootnoteCall",
        tokenize: ib
      },
      93: {
        name: "gfmPotentialFootnoteCall",
        add: "after",
        tokenize: nb,
        resolveTo: rb
      }
    }
  };
}
function nb(n, e, t) {
  const r = this;
  let i = r.events.length;
  const s = r.parser.gfmFootnotes || (r.parser.gfmFootnotes = []);
  let l;
  for (; i--; ) {
    const o = r.events[i][1];
    if (o.type === "labelImage") {
      l = o;
      break;
    }
    if (o.type === "gfmFootnoteCall" || o.type === "labelLink" || o.type === "label" || o.type === "image" || o.type === "link")
      break;
  }
  return a;
  function a(o) {
    if (!l || !l._balanced)
      return t(o);
    const u = hn(r.sliceSerialize({
      start: l.end,
      end: r.now()
    }));
    return u.codePointAt(0) !== 94 || !s.includes(u.slice(1)) ? t(o) : (n.enter("gfmFootnoteCallLabelMarker"), n.consume(o), n.exit("gfmFootnoteCallLabelMarker"), e(o));
  }
}
function rb(n, e) {
  let t = n.length;
  for (; t--; )
    if (n[t][1].type === "labelImage" && n[t][0] === "enter") {
      n[t][1];
      break;
    }
  n[t + 1][1].type = "data", n[t + 3][1].type = "gfmFootnoteCallLabelMarker";
  const r = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, n[t + 3][1].start),
    end: Object.assign({}, n[n.length - 1][1].end)
  }, i = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, n[t + 3][1].end),
    end: Object.assign({}, n[t + 3][1].end)
  };
  i.end.column++, i.end.offset++, i.end._bufferIndex++;
  const s = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, i.end),
    end: Object.assign({}, n[n.length - 1][1].start)
  }, l = {
    type: "chunkString",
    contentType: "string",
    start: Object.assign({}, s.start),
    end: Object.assign({}, s.end)
  }, a = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    n[t + 1],
    n[t + 2],
    ["enter", r, e],
    // The `[`
    n[t + 3],
    n[t + 4],
    // The `^`.
    ["enter", i, e],
    ["exit", i, e],
    // Everything in between.
    ["enter", s, e],
    ["enter", l, e],
    ["exit", l, e],
    ["exit", s, e],
    // The ending (`]`, properly parsed and labelled).
    n[n.length - 2],
    n[n.length - 1],
    ["exit", r, e]
  ];
  return n.splice(t, n.length - t + 1, ...a), n;
}
function ib(n, e, t) {
  const r = this, i = r.parser.gfmFootnotes || (r.parser.gfmFootnotes = []);
  let s = 0, l;
  return a;
  function a(c) {
    return n.enter("gfmFootnoteCall"), n.enter("gfmFootnoteCallLabelMarker"), n.consume(c), n.exit("gfmFootnoteCallLabelMarker"), o;
  }
  function o(c) {
    return c !== 94 ? t(c) : (n.enter("gfmFootnoteCallMarker"), n.consume(c), n.exit("gfmFootnoteCallMarker"), n.enter("gfmFootnoteCallString"), n.enter("chunkString").contentType = "string", u);
  }
  function u(c) {
    if (
      // Too long.
      s > 999 || // Closing brace with nothing.
      c === 93 && !l || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      c === null || c === 91 || Ee(c)
    )
      return t(c);
    if (c === 93) {
      n.exit("chunkString");
      const f = n.exit("gfmFootnoteCallString");
      return i.includes(hn(r.sliceSerialize(f))) ? (n.enter("gfmFootnoteCallLabelMarker"), n.consume(c), n.exit("gfmFootnoteCallLabelMarker"), n.exit("gfmFootnoteCall"), e) : t(c);
    }
    return Ee(c) || (l = !0), s++, n.consume(c), c === 92 ? h : u;
  }
  function h(c) {
    return c === 91 || c === 92 || c === 93 ? (n.consume(c), s++, u) : u(c);
  }
}
function sb(n, e, t) {
  const r = this, i = r.parser.gfmFootnotes || (r.parser.gfmFootnotes = []);
  let s, l = 0, a;
  return o;
  function o(m) {
    return n.enter("gfmFootnoteDefinition")._container = !0, n.enter("gfmFootnoteDefinitionLabel"), n.enter("gfmFootnoteDefinitionLabelMarker"), n.consume(m), n.exit("gfmFootnoteDefinitionLabelMarker"), u;
  }
  function u(m) {
    return m === 94 ? (n.enter("gfmFootnoteDefinitionMarker"), n.consume(m), n.exit("gfmFootnoteDefinitionMarker"), n.enter("gfmFootnoteDefinitionLabelString"), n.enter("chunkString").contentType = "string", h) : t(m);
  }
  function h(m) {
    if (
      // Too long.
      l > 999 || // Closing brace with nothing.
      m === 93 && !a || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      m === null || m === 91 || Ee(m)
    )
      return t(m);
    if (m === 93) {
      n.exit("chunkString");
      const O = n.exit("gfmFootnoteDefinitionLabelString");
      return s = hn(r.sliceSerialize(O)), n.enter("gfmFootnoteDefinitionLabelMarker"), n.consume(m), n.exit("gfmFootnoteDefinitionLabelMarker"), n.exit("gfmFootnoteDefinitionLabel"), f;
    }
    return Ee(m) || (a = !0), l++, n.consume(m), m === 92 ? c : h;
  }
  function c(m) {
    return m === 91 || m === 92 || m === 93 ? (n.consume(m), l++, h) : h(m);
  }
  function f(m) {
    return m === 58 ? (n.enter("definitionMarker"), n.consume(m), n.exit("definitionMarker"), i.includes(s) || i.push(s), be(n, d, "gfmFootnoteDefinitionWhitespace")) : t(m);
  }
  function d(m) {
    return e(m);
  }
}
function lb(n, e, t) {
  return n.check(Es, e, n.attempt(eb, e, t));
}
function ab(n) {
  n.exit("gfmFootnoteDefinition");
}
function ob(n, e, t) {
  const r = this;
  return be(n, i, "gfmFootnoteDefinitionIndent", 5);
  function i(s) {
    const l = r.events[r.events.length - 1];
    return l && l[1].type === "gfmFootnoteDefinitionIndent" && l[2].sliceSerialize(l[1], !0).length === 4 ? e(s) : t(s);
  }
}
function ub(n) {
  let t = (n || {}).singleTilde;
  const r = {
    name: "strikethrough",
    tokenize: s,
    resolveAll: i
  };
  return t == null && (t = !0), {
    text: {
      126: r
    },
    insideSpan: {
      null: [r]
    },
    attentionMarkers: {
      null: [126]
    }
  };
  function i(l, a) {
    let o = -1;
    for (; ++o < l.length; )
      if (l[o][0] === "enter" && l[o][1].type === "strikethroughSequenceTemporary" && l[o][1]._close) {
        let u = o;
        for (; u--; )
          if (l[u][0] === "exit" && l[u][1].type === "strikethroughSequenceTemporary" && l[u][1]._open && // If the sizes are the same:
          l[o][1].end.offset - l[o][1].start.offset === l[u][1].end.offset - l[u][1].start.offset) {
            l[o][1].type = "strikethroughSequence", l[u][1].type = "strikethroughSequence";
            const h = {
              type: "strikethrough",
              start: Object.assign({}, l[u][1].start),
              end: Object.assign({}, l[o][1].end)
            }, c = {
              type: "strikethroughText",
              start: Object.assign({}, l[u][1].end),
              end: Object.assign({}, l[o][1].start)
            }, f = [["enter", h, a], ["enter", l[u][1], a], ["exit", l[u][1], a], ["enter", c, a]], d = a.parser.constructs.insideSpan.null;
            d && It(f, f.length, 0, Sa(d, l.slice(u + 1, o), a)), It(f, f.length, 0, [["exit", c, a], ["enter", l[o][1], a], ["exit", l[o][1], a], ["exit", h, a]]), It(l, u - 1, o - u + 3, f), o = u + f.length - 2;
            break;
          }
      }
    for (o = -1; ++o < l.length; )
      l[o][1].type === "strikethroughSequenceTemporary" && (l[o][1].type = "data");
    return l;
  }
  function s(l, a, o) {
    const u = this.previous, h = this.events;
    let c = 0;
    return f;
    function f(m) {
      return u === 126 && h[h.length - 1][1].type !== "characterEscape" ? o(m) : (l.enter("strikethroughSequenceTemporary"), d(m));
    }
    function d(m) {
      const O = ui(u);
      if (m === 126)
        return c > 1 ? o(m) : (l.consume(m), c++, d);
      if (c < 2 && !t) return o(m);
      const x = l.exit("strikethroughSequenceTemporary"), b = ui(m);
      return x._open = !b || b === 2 && !!O, x._close = !O || O === 2 && !!b, a(m);
    }
  }
}
class hb {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */
  add(e, t, r) {
    cb(this, e, t, r);
  }
  // To do: add this when moving to `micromark`.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {undefined}
  //  */
  // addBefore(index, remove, add) {
  //   addImplementation(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */
  consume(e) {
    if (this.map.sort(function(s, l) {
      return s[0] - l[0];
    }), this.map.length === 0)
      return;
    let t = this.map.length;
    const r = [];
    for (; t > 0; )
      t -= 1, r.push(e.slice(this.map[t][0] + this.map[t][1]), this.map[t][2]), e.length = this.map[t][0];
    r.push(e.slice()), e.length = 0;
    let i = r.pop();
    for (; i; ) {
      for (const s of i)
        e.push(s);
      i = r.pop();
    }
    this.map.length = 0;
  }
}
function cb(n, e, t, r) {
  let i = 0;
  if (!(t === 0 && r.length === 0)) {
    for (; i < n.map.length; ) {
      if (n.map[i][0] === e) {
        n.map[i][1] += t, n.map[i][2].push(...r);
        return;
      }
      i += 1;
    }
    n.map.push([e, t, r]);
  }
}
function fb(n, e) {
  let t = !1;
  const r = [];
  for (; e < n.length; ) {
    const i = n[e];
    if (t) {
      if (i[0] === "enter")
        i[1].type === "tableContent" && r.push(n[e + 1][1].type === "tableDelimiterMarker" ? "left" : "none");
      else if (i[1].type === "tableContent") {
        if (n[e - 1][1].type === "tableDelimiterMarker") {
          const s = r.length - 1;
          r[s] = r[s] === "left" ? "center" : "right";
        }
      } else if (i[1].type === "tableDelimiterRow")
        break;
    } else i[0] === "enter" && i[1].type === "tableDelimiterRow" && (t = !0);
    e += 1;
  }
  return r;
}
function db() {
  return {
    flow: {
      null: {
        name: "table",
        tokenize: pb,
        resolveAll: mb
      }
    }
  };
}
function pb(n, e, t) {
  const r = this;
  let i = 0, s = 0, l;
  return a;
  function a(M) {
    let L = r.events.length - 1;
    for (; L > -1; ) {
      const J = r.events[L][1].type;
      if (J === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      J === "linePrefix") L--;
      else break;
    }
    const F = L > -1 ? r.events[L][1].type : null, ne = F === "tableHead" || F === "tableRow" ? S : o;
    return ne === S && r.parser.lazy[r.now().line] ? t(M) : ne(M);
  }
  function o(M) {
    return n.enter("tableHead"), n.enter("tableRow"), u(M);
  }
  function u(M) {
    return M === 124 || (l = !0, s += 1), h(M);
  }
  function h(M) {
    return M === null ? t(M) : ie(M) ? s > 1 ? (s = 0, r.interrupt = !0, n.exit("tableRow"), n.enter("lineEnding"), n.consume(M), n.exit("lineEnding"), d) : t(M) : xe(M) ? be(n, h, "whitespace")(M) : (s += 1, l && (l = !1, i += 1), M === 124 ? (n.enter("tableCellDivider"), n.consume(M), n.exit("tableCellDivider"), l = !0, h) : (n.enter("data"), c(M)));
  }
  function c(M) {
    return M === null || M === 124 || Ee(M) ? (n.exit("data"), h(M)) : (n.consume(M), M === 92 ? f : c);
  }
  function f(M) {
    return M === 92 || M === 124 ? (n.consume(M), c) : c(M);
  }
  function d(M) {
    return r.interrupt = !1, r.parser.lazy[r.now().line] ? t(M) : (n.enter("tableDelimiterRow"), l = !1, xe(M) ? be(n, m, "linePrefix", r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(M) : m(M));
  }
  function m(M) {
    return M === 45 || M === 58 ? x(M) : M === 124 ? (l = !0, n.enter("tableCellDivider"), n.consume(M), n.exit("tableCellDivider"), O) : T(M);
  }
  function O(M) {
    return xe(M) ? be(n, x, "whitespace")(M) : x(M);
  }
  function x(M) {
    return M === 58 ? (s += 1, l = !0, n.enter("tableDelimiterMarker"), n.consume(M), n.exit("tableDelimiterMarker"), b) : M === 45 ? (s += 1, b(M)) : M === null || ie(M) ? Z(M) : T(M);
  }
  function b(M) {
    return M === 45 ? (n.enter("tableDelimiterFiller"), w(M)) : T(M);
  }
  function w(M) {
    return M === 45 ? (n.consume(M), w) : M === 58 ? (l = !0, n.exit("tableDelimiterFiller"), n.enter("tableDelimiterMarker"), n.consume(M), n.exit("tableDelimiterMarker"), C) : (n.exit("tableDelimiterFiller"), C(M));
  }
  function C(M) {
    return xe(M) ? be(n, Z, "whitespace")(M) : Z(M);
  }
  function Z(M) {
    return M === 124 ? m(M) : M === null || ie(M) ? !l || i !== s ? T(M) : (n.exit("tableDelimiterRow"), n.exit("tableHead"), e(M)) : T(M);
  }
  function T(M) {
    return t(M);
  }
  function S(M) {
    return n.enter("tableRow"), E(M);
  }
  function E(M) {
    return M === 124 ? (n.enter("tableCellDivider"), n.consume(M), n.exit("tableCellDivider"), E) : M === null || ie(M) ? (n.exit("tableRow"), e(M)) : xe(M) ? be(n, E, "whitespace")(M) : (n.enter("data"), N(M));
  }
  function N(M) {
    return M === null || M === 124 || Ee(M) ? (n.exit("data"), E(M)) : (n.consume(M), M === 92 ? z : N);
  }
  function z(M) {
    return M === 92 || M === 124 ? (n.consume(M), N) : N(M);
  }
}
function mb(n, e) {
  let t = -1, r = !0, i = 0, s = [0, 0, 0, 0], l = [0, 0, 0, 0], a = !1, o = 0, u, h, c;
  const f = new hb();
  for (; ++t < n.length; ) {
    const d = n[t], m = d[1];
    d[0] === "enter" ? m.type === "tableHead" ? (a = !1, o !== 0 && (Lc(f, e, o, u, h), h = void 0, o = 0), u = {
      type: "table",
      start: Object.assign({}, m.start),
      // Note: correct end is set later.
      end: Object.assign({}, m.end)
    }, f.add(t, 0, [["enter", u, e]])) : m.type === "tableRow" || m.type === "tableDelimiterRow" ? (r = !0, c = void 0, s = [0, 0, 0, 0], l = [0, t + 1, 0, 0], a && (a = !1, h = {
      type: "tableBody",
      start: Object.assign({}, m.start),
      // Note: correct end is set later.
      end: Object.assign({}, m.end)
    }, f.add(t, 0, [["enter", h, e]])), i = m.type === "tableDelimiterRow" ? 2 : h ? 3 : 1) : i && (m.type === "data" || m.type === "tableDelimiterMarker" || m.type === "tableDelimiterFiller") ? (r = !1, l[2] === 0 && (s[1] !== 0 && (l[0] = l[1], c = Ks(f, e, s, i, void 0, c), s = [0, 0, 0, 0]), l[2] = t)) : m.type === "tableCellDivider" && (r ? r = !1 : (s[1] !== 0 && (l[0] = l[1], c = Ks(f, e, s, i, void 0, c)), s = l, l = [s[1], t, 0, 0])) : m.type === "tableHead" ? (a = !0, o = t) : m.type === "tableRow" || m.type === "tableDelimiterRow" ? (o = t, s[1] !== 0 ? (l[0] = l[1], c = Ks(f, e, s, i, t, c)) : l[1] !== 0 && (c = Ks(f, e, l, i, t, c)), i = 0) : i && (m.type === "data" || m.type === "tableDelimiterMarker" || m.type === "tableDelimiterFiller") && (l[3] = t);
  }
  for (o !== 0 && Lc(f, e, o, u, h), f.consume(e.events), t = -1; ++t < e.events.length; ) {
    const d = e.events[t];
    d[0] === "enter" && d[1].type === "table" && (d[1]._align = fb(e.events, t));
  }
  return n;
}
function Ks(n, e, t, r, i, s) {
  const l = r === 1 ? "tableHeader" : r === 2 ? "tableDelimiter" : "tableData", a = "tableContent";
  t[0] !== 0 && (s.end = Object.assign({}, Jr(e.events, t[0])), n.add(t[0], 0, [["exit", s, e]]));
  const o = Jr(e.events, t[1]);
  if (s = {
    type: l,
    start: Object.assign({}, o),
    // Note: correct end is set later.
    end: Object.assign({}, o)
  }, n.add(t[1], 0, [["enter", s, e]]), t[2] !== 0) {
    const u = Jr(e.events, t[2]), h = Jr(e.events, t[3]), c = {
      type: a,
      start: Object.assign({}, u),
      end: Object.assign({}, h)
    };
    if (n.add(t[2], 0, [["enter", c, e]]), r !== 2) {
      const f = e.events[t[2]], d = e.events[t[3]];
      if (f[1].end = Object.assign({}, d[1].end), f[1].type = "chunkText", f[1].contentType = "text", t[3] > t[2] + 1) {
        const m = t[2] + 1, O = t[3] - t[2] - 1;
        n.add(m, O, []);
      }
    }
    n.add(t[3] + 1, 0, [["exit", c, e]]);
  }
  return i !== void 0 && (s.end = Object.assign({}, Jr(e.events, i)), n.add(i, 0, [["exit", s, e]]), s = void 0), s;
}
function Lc(n, e, t, r, i) {
  const s = [], l = Jr(e.events, t);
  i && (i.end = Object.assign({}, l), s.push(["exit", i, e])), r.end = Object.assign({}, l), s.push(["exit", r, e]), n.add(t + 1, 0, s);
}
function Jr(n, e) {
  const t = n[e], r = t[0] === "enter" ? "start" : "end";
  return t[1][r];
}
const gb = {
  name: "tasklistCheck",
  tokenize: yb
};
function Ob() {
  return {
    text: {
      91: gb
    }
  };
}
function yb(n, e, t) {
  const r = this;
  return i;
  function i(o) {
    return (
      // Exit if there’s stuff before.
      r.previous !== null || // Exit if not in the first content that is the first child of a list
      // item.
      !r._gfmTasklistFirstContentOfListItem ? t(o) : (n.enter("taskListCheck"), n.enter("taskListCheckMarker"), n.consume(o), n.exit("taskListCheckMarker"), s)
    );
  }
  function s(o) {
    return Ee(o) ? (n.enter("taskListCheckValueUnchecked"), n.consume(o), n.exit("taskListCheckValueUnchecked"), l) : o === 88 || o === 120 ? (n.enter("taskListCheckValueChecked"), n.consume(o), n.exit("taskListCheckValueChecked"), l) : t(o);
  }
  function l(o) {
    return o === 93 ? (n.enter("taskListCheckMarker"), n.consume(o), n.exit("taskListCheckMarker"), n.exit("taskListCheck"), a) : t(o);
  }
  function a(o) {
    return ie(o) ? e(o) : xe(o) ? n.check({
      tokenize: bb
    }, e, t)(o) : t(o);
  }
}
function bb(n, e, t) {
  return be(n, r, "whitespace");
  function r(i) {
    return i === null ? t(i) : e(i);
  }
}
function xb(n) {
  return Mm([
    jy(),
    tb(),
    ub(n),
    db(),
    Ob()
  ]);
}
const vb = {};
function wb(n) {
  const e = (
    /** @type {Processor<Root>} */
    this
  ), t = n || vb, r = e.data(), i = r.micromarkExtensions || (r.micromarkExtensions = []), s = r.fromMarkdownExtensions || (r.fromMarkdownExtensions = []), l = r.toMarkdownExtensions || (r.toMarkdownExtensions = []);
  i.push(xb(t)), s.push(Xy()), l.push(Iy(t));
}
function kb(n) {
  Um(n, [/\r?\n|\r/g, Sb]);
}
function Sb() {
  return { type: "break" };
}
function Qb() {
  return function(n) {
    kb(n);
  };
}
function Pb() {
  return {
    enter: {
      mathFlow: n,
      mathFlowFenceMeta: e,
      mathText: s
    },
    exit: {
      mathFlow: i,
      mathFlowFence: r,
      mathFlowFenceMeta: t,
      mathFlowValue: a,
      mathText: l,
      mathTextData: a
    }
  };
  function n(o) {
    const u = {
      type: "element",
      tagName: "code",
      properties: { className: ["language-math", "math-display"] },
      children: []
    };
    this.enter(
      {
        type: "math",
        meta: null,
        value: "",
        data: { hName: "pre", hChildren: [u] }
      },
      o
    );
  }
  function e() {
    this.buffer();
  }
  function t() {
    const o = this.resume(), u = this.stack[this.stack.length - 1];
    u.type, u.meta = o;
  }
  function r() {
    this.data.mathFlowInside || (this.buffer(), this.data.mathFlowInside = !0);
  }
  function i(o) {
    const u = this.resume().replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, ""), h = this.stack[this.stack.length - 1];
    h.type, this.exit(o), h.value = u;
    const c = (
      /** @type {HastElement} */
      h.data.hChildren[0]
    );
    c.type, c.tagName, c.children.push({ type: "text", value: u }), this.data.mathFlowInside = void 0;
  }
  function s(o) {
    this.enter(
      {
        type: "inlineMath",
        value: "",
        data: {
          hName: "code",
          hProperties: { className: ["language-math", "math-inline"] },
          hChildren: []
        }
      },
      o
    ), this.buffer();
  }
  function l(o) {
    const u = this.resume(), h = this.stack[this.stack.length - 1];
    h.type, this.exit(o), h.value = u, /** @type {Array<HastElementContent>} */
    // @ts-expect-error: we defined it in `enterMathFlow`.
    h.data.hChildren.push({ type: "text", value: u });
  }
  function a(o) {
    this.config.enter.data.call(this, o), this.config.exit.data.call(this, o);
  }
}
function Cb(n) {
  let e = (n || {}).singleDollarTextMath;
  return e == null && (e = !0), r.peek = i, {
    unsafe: [
      { character: "\r", inConstruct: "mathFlowMeta" },
      { character: `
`, inConstruct: "mathFlowMeta" },
      {
        character: "$",
        after: e ? void 0 : "\\$",
        inConstruct: "phrasing"
      },
      { character: "$", inConstruct: "mathFlowMeta" },
      { atBreak: !0, character: "$", after: "\\$" }
    ],
    handlers: { math: t, inlineMath: r }
  };
  function t(s, l, a, o) {
    const u = s.value || "", h = a.createTracker(o), c = "$".repeat(Math.max(Km(u, "$") + 1, 2)), f = a.enter("mathFlow");
    let d = h.move(c);
    if (s.meta) {
      const m = a.enter("mathFlowMeta");
      d += h.move(
        a.safe(s.meta, {
          after: `
`,
          before: d,
          encode: ["$"],
          ...h.current()
        })
      ), m();
    }
    return d += h.move(`
`), u && (d += h.move(u + `
`)), d += h.move(c), f(), d;
  }
  function r(s, l, a) {
    let o = s.value || "", u = 1;
    for (e || u++; new RegExp("(^|[^$])" + "\\$".repeat(u) + "([^$]|$)").test(o); )
      u++;
    const h = "$".repeat(u);
    // Contains non-space.
    /[^ \r\n]/.test(o) && // Starts with space and ends with space.
    (/^[ \r\n]/.test(o) && /[ \r\n]$/.test(o) || // Starts or ends with dollar.
    /^\$|\$$/.test(o)) && (o = " " + o + " ");
    let c = -1;
    for (; ++c < a.unsafe.length; ) {
      const f = a.unsafe[c];
      if (!f.atBreak) continue;
      const d = a.compilePattern(f);
      let m;
      for (; m = d.exec(o); ) {
        let O = m.index;
        o.codePointAt(O) === 10 && o.codePointAt(O - 1) === 13 && O--, o = o.slice(0, O) + " " + o.slice(m.index + 1);
      }
    }
    return h + o + h;
  }
  function i() {
    return "$";
  }
}
const Ab = {
  tokenize: $b,
  concrete: !0,
  name: "mathFlow"
}, qc = {
  tokenize: Db,
  partial: !0
};
function $b(n, e, t) {
  const r = this, i = r.events[r.events.length - 1], s = i && i[1].type === "linePrefix" ? i[2].sliceSerialize(i[1], !0).length : 0;
  let l = 0;
  return a;
  function a(w) {
    return n.enter("mathFlow"), n.enter("mathFlowFence"), n.enter("mathFlowFenceSequence"), o(w);
  }
  function o(w) {
    return w === 36 ? (n.consume(w), l++, o) : l < 2 ? t(w) : (n.exit("mathFlowFenceSequence"), be(n, u, "whitespace")(w));
  }
  function u(w) {
    return w === null || ie(w) ? c(w) : (n.enter("mathFlowFenceMeta"), n.enter("chunkString", {
      contentType: "string"
    }), h(w));
  }
  function h(w) {
    return w === null || ie(w) ? (n.exit("chunkString"), n.exit("mathFlowFenceMeta"), c(w)) : w === 36 ? t(w) : (n.consume(w), h);
  }
  function c(w) {
    return n.exit("mathFlowFence"), r.interrupt ? e(w) : n.attempt(qc, f, x)(w);
  }
  function f(w) {
    return n.attempt({
      tokenize: b,
      partial: !0
    }, x, d)(w);
  }
  function d(w) {
    return (s ? be(n, m, "linePrefix", s + 1) : m)(w);
  }
  function m(w) {
    return w === null ? x(w) : ie(w) ? n.attempt(qc, f, x)(w) : (n.enter("mathFlowValue"), O(w));
  }
  function O(w) {
    return w === null || ie(w) ? (n.exit("mathFlowValue"), m(w)) : (n.consume(w), O);
  }
  function x(w) {
    return n.exit("mathFlow"), e(w);
  }
  function b(w, C, Z) {
    let T = 0;
    return be(w, S, "linePrefix", r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4);
    function S(z) {
      return w.enter("mathFlowFence"), w.enter("mathFlowFenceSequence"), E(z);
    }
    function E(z) {
      return z === 36 ? (T++, w.consume(z), E) : T < l ? Z(z) : (w.exit("mathFlowFenceSequence"), be(w, N, "whitespace")(z));
    }
    function N(z) {
      return z === null || ie(z) ? (w.exit("mathFlowFence"), C(z)) : Z(z);
    }
  }
}
function Db(n, e, t) {
  const r = this;
  return i;
  function i(l) {
    return l === null ? e(l) : (n.enter("lineEnding"), n.consume(l), n.exit("lineEnding"), s);
  }
  function s(l) {
    return r.parser.lazy[r.now().line] ? t(l) : e(l);
  }
}
function Tb(n) {
  let t = (n || {}).singleDollarTextMath;
  return t == null && (t = !0), {
    tokenize: r,
    resolve: Mb,
    previous: Eb,
    name: "mathText"
  };
  function r(i, s, l) {
    let a = 0, o, u;
    return h;
    function h(O) {
      return i.enter("mathText"), i.enter("mathTextSequence"), c(O);
    }
    function c(O) {
      return O === 36 ? (i.consume(O), a++, c) : a < 2 && !t ? l(O) : (i.exit("mathTextSequence"), f(O));
    }
    function f(O) {
      return O === null ? l(O) : O === 36 ? (u = i.enter("mathTextSequence"), o = 0, m(O)) : O === 32 ? (i.enter("space"), i.consume(O), i.exit("space"), f) : ie(O) ? (i.enter("lineEnding"), i.consume(O), i.exit("lineEnding"), f) : (i.enter("mathTextData"), d(O));
    }
    function d(O) {
      return O === null || O === 32 || O === 36 || ie(O) ? (i.exit("mathTextData"), f(O)) : (i.consume(O), d);
    }
    function m(O) {
      return O === 36 ? (i.consume(O), o++, m) : o === a ? (i.exit("mathTextSequence"), i.exit("mathText"), s(O)) : (u.type = "mathTextData", d(O));
    }
  }
}
function Mb(n) {
  let e = n.length - 4, t = 3, r, i;
  if ((n[t][1].type === "lineEnding" || n[t][1].type === "space") && (n[e][1].type === "lineEnding" || n[e][1].type === "space")) {
    for (r = t; ++r < e; )
      if (n[r][1].type === "mathTextData") {
        n[e][1].type = "mathTextPadding", n[t][1].type = "mathTextPadding", t += 2, e -= 2;
        break;
      }
  }
  for (r = t - 1, e++; ++r <= e; )
    i === void 0 ? r !== e && n[r][1].type !== "lineEnding" && (i = r) : (r === e || n[r][1].type === "lineEnding") && (n[i][1].type = "mathTextData", r !== i + 2 && (n[i][1].end = n[r - 1][1].end, n.splice(i + 2, r - i - 2), e -= r - i - 2, r = i + 2), i = void 0);
  return n;
}
function Eb(n) {
  return n !== 36 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function Rb(n) {
  return {
    flow: {
      36: Ab
    },
    text: {
      36: Tb(n)
    }
  };
}
class Lt {
  // The + prefix indicates that these fields aren't writeable
  // Lexer holding the input string.
  // Start offset, zero-based inclusive.
  // End offset, zero-based exclusive.
  constructor(e, t, r) {
    this.lexer = void 0, this.start = void 0, this.end = void 0, this.lexer = e, this.start = t, this.end = r;
  }
  /**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */
  static range(e, t) {
    return t ? !e || !e.loc || !t.loc || e.loc.lexer !== t.loc.lexer ? null : new Lt(e.loc.lexer, e.loc.start, t.loc.end) : e && e.loc;
  }
}
class Ht {
  // don't expand the token
  // used in \noexpand
  constructor(e, t) {
    this.text = void 0, this.loc = void 0, this.noexpand = void 0, this.treatAsRelax = void 0, this.text = e, this.loc = t;
  }
  /**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */
  range(e, t) {
    return new Ht(t, Lt.range(this, e));
  }
}
class I {
  // Error start position based on passed-in Token or ParseNode.
  // Length of affected text based on passed-in Token or ParseNode.
  // The underlying error message without any context added.
  constructor(e, t) {
    this.name = void 0, this.position = void 0, this.length = void 0, this.rawMessage = void 0;
    var r = "KaTeX parse error: " + e, i, s, l = t && t.loc;
    if (l && l.start <= l.end) {
      var a = l.lexer.input;
      i = l.start, s = l.end, i === a.length ? r += " at end of input: " : r += " at position " + (i + 1) + ": ";
      var o = a.slice(i, s).replace(/[^]/g, "$&̲"), u;
      i > 15 ? u = "…" + a.slice(i - 15, i) : u = a.slice(0, i);
      var h;
      s + 15 < a.length ? h = a.slice(s, s + 15) + "…" : h = a.slice(s), r += u + o + h;
    }
    var c = new Error(r);
    return c.name = "ParseError", c.__proto__ = I.prototype, c.position = i, i != null && s != null && (c.length = s - i), c.rawMessage = e, c;
  }
}
I.prototype.__proto__ = Error.prototype;
var Zb = function(e, t) {
  return e.indexOf(t) !== -1;
}, zb = function(e, t) {
  return e === void 0 ? t : e;
}, Fb = /([A-Z])/g, Bb = function(e) {
  return e.replace(Fb, "-$1").toLowerCase();
}, Lb = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  '"': "&quot;",
  "'": "&#x27;"
}, qb = /[&><"']/g;
function Xb(n) {
  return String(n).replace(qb, (e) => Lb[e]);
}
var y1 = function n(e) {
  return e.type === "ordgroup" || e.type === "color" ? e.body.length === 1 ? n(e.body[0]) : e : e.type === "font" ? n(e.body) : e;
}, Ib = function(e) {
  var t = y1(e);
  return t.type === "mathord" || t.type === "textord" || t.type === "atom";
}, Nb = function(e) {
  if (!e)
    throw new Error("Expected non-null, but got " + String(e));
  return e;
}, Vb = function(e) {
  var t = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(e);
  return t ? t[2] !== ":" || !/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(t[1]) ? null : t[1].toLowerCase() : "_relative";
}, se = {
  contains: Zb,
  deflt: zb,
  escape: Xb,
  hyphenate: Bb,
  getBaseElem: y1,
  isCharacterBox: Ib,
  protocolFromUrl: Vb
}, ts = {
  displayMode: {
    type: "boolean",
    description: "Render math in display mode, which puts the math in display style (so \\int and \\sum are large, for example), and centers the math on the page on its own line.",
    cli: "-d, --display-mode"
  },
  output: {
    type: {
      enum: ["htmlAndMathml", "html", "mathml"]
    },
    description: "Determines the markup language of the output.",
    cli: "-F, --format <type>"
  },
  leqno: {
    type: "boolean",
    description: "Render display math in leqno style (left-justified tags)."
  },
  fleqn: {
    type: "boolean",
    description: "Render display math flush left."
  },
  throwOnError: {
    type: "boolean",
    default: !0,
    cli: "-t, --no-throw-on-error",
    cliDescription: "Render errors (in the color given by --error-color) instead of throwing a ParseError exception when encountering an error."
  },
  errorColor: {
    type: "string",
    default: "#cc0000",
    cli: "-c, --error-color <color>",
    cliDescription: "A color string given in the format 'rgb' or 'rrggbb' (no #). This option determines the color of errors rendered by the -t option.",
    cliProcessor: (n) => "#" + n
  },
  macros: {
    type: "object",
    cli: "-m, --macro <def>",
    cliDescription: "Define custom macro of the form '\\foo:expansion' (use multiple -m arguments for multiple macros).",
    cliDefault: [],
    cliProcessor: (n, e) => (e.push(n), e)
  },
  minRuleThickness: {
    type: "number",
    description: "Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`.",
    processor: (n) => Math.max(0, n),
    cli: "--min-rule-thickness <size>",
    cliProcessor: parseFloat
  },
  colorIsTextColor: {
    type: "boolean",
    description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, instead of LaTeX's one-argument \\color mode change.",
    cli: "-b, --color-is-text-color"
  },
  strict: {
    type: [{
      enum: ["warn", "ignore", "error"]
    }, "boolean", "function"],
    description: "Turn on strict / LaTeX faithfulness mode, which throws an error if the input uses features that are not supported by LaTeX.",
    cli: "-S, --strict",
    cliDefault: !1
  },
  trust: {
    type: ["boolean", "function"],
    description: "Trust the input, enabling all HTML features such as \\url.",
    cli: "-T, --trust"
  },
  maxSize: {
    type: "number",
    default: 1 / 0,
    description: "If non-zero, all user-specified sizes, e.g. in \\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, elements and spaces can be arbitrarily large",
    processor: (n) => Math.max(0, n),
    cli: "-s, --max-size <n>",
    cliProcessor: parseInt
  },
  maxExpand: {
    type: "number",
    default: 1e3,
    description: "Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity, the macro expander will try to fully expand as in LaTeX.",
    processor: (n) => Math.max(0, n),
    cli: "-e, --max-expand <n>",
    cliProcessor: (n) => n === "Infinity" ? 1 / 0 : parseInt(n)
  },
  globalGroup: {
    type: "boolean",
    cli: !1
  }
};
function jb(n) {
  if (n.default)
    return n.default;
  var e = n.type, t = Array.isArray(e) ? e[0] : e;
  if (typeof t != "string")
    return t.enum[0];
  switch (t) {
    case "boolean":
      return !1;
    case "string":
      return "";
    case "number":
      return 0;
    case "object":
      return {};
  }
}
class rh {
  constructor(e) {
    this.displayMode = void 0, this.output = void 0, this.leqno = void 0, this.fleqn = void 0, this.throwOnError = void 0, this.errorColor = void 0, this.macros = void 0, this.minRuleThickness = void 0, this.colorIsTextColor = void 0, this.strict = void 0, this.trust = void 0, this.maxSize = void 0, this.maxExpand = void 0, this.globalGroup = void 0, e = e || {};
    for (var t in ts)
      if (ts.hasOwnProperty(t)) {
        var r = ts[t];
        this[t] = e[t] !== void 0 ? r.processor ? r.processor(e[t]) : e[t] : jb(r);
      }
  }
  /**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */
  reportNonstrict(e, t, r) {
    var i = this.strict;
    if (typeof i == "function" && (i = i(e, t, r)), !(!i || i === "ignore")) {
      if (i === !0 || i === "error")
        throw new I("LaTeX-incompatible input and strict mode is set to 'error': " + (t + " [" + e + "]"), r);
      i === "warn" ? typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (t + " [" + e + "]")) : typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + i + "': " + t + " [" + e + "]"));
    }
  }
  /**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */
  useStrictBehavior(e, t, r) {
    var i = this.strict;
    if (typeof i == "function")
      try {
        i = i(e, t, r);
      } catch {
        i = "error";
      }
    return !i || i === "ignore" ? !1 : i === !0 || i === "error" ? !0 : i === "warn" ? (typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (t + " [" + e + "]")), !1) : (typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + i + "': " + t + " [" + e + "]")), !1);
  }
  /**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */
  isTrusted(e) {
    if (e.url && !e.protocol) {
      var t = se.protocolFromUrl(e.url);
      if (t == null)
        return !1;
      e.protocol = t;
    }
    var r = typeof this.trust == "function" ? this.trust(e) : this.trust;
    return !!r;
  }
}
class sr {
  constructor(e, t, r) {
    this.id = void 0, this.size = void 0, this.cramped = void 0, this.id = e, this.size = t, this.cramped = r;
  }
  /**
   * Get the style of a superscript given a base in the current style.
   */
  sup() {
    return yn[_b[this.id]];
  }
  /**
   * Get the style of a subscript given a base in the current style.
   */
  sub() {
    return yn[Ub[this.id]];
  }
  /**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */
  fracNum() {
    return yn[Wb[this.id]];
  }
  /**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */
  fracDen() {
    return yn[Yb[this.id]];
  }
  /**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */
  cramp() {
    return yn[Gb[this.id]];
  }
  /**
   * Get a text or display version of this style.
   */
  text() {
    return yn[Hb[this.id]];
  }
  /**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */
  isTight() {
    return this.size >= 2;
  }
}
var ih = 0, Gl = 1, ti = 2, jn = 3, cs = 4, Ut = 5, hi = 6, xt = 7, yn = [new sr(ih, 0, !1), new sr(Gl, 0, !0), new sr(ti, 1, !1), new sr(jn, 1, !0), new sr(cs, 2, !1), new sr(Ut, 2, !0), new sr(hi, 3, !1), new sr(xt, 3, !0)], _b = [cs, Ut, cs, Ut, hi, xt, hi, xt], Ub = [Ut, Ut, Ut, Ut, xt, xt, xt, xt], Wb = [ti, jn, cs, Ut, hi, xt, hi, xt], Yb = [jn, jn, Ut, Ut, xt, xt, xt, xt], Gb = [Gl, Gl, jn, jn, Ut, Ut, xt, xt], Hb = [ih, Gl, ti, jn, ti, jn, ti, jn], ae = {
  DISPLAY: yn[ih],
  TEXT: yn[ti],
  SCRIPT: yn[cs],
  SCRIPTSCRIPT: yn[hi]
}, Zu = [{
  // Latin characters beyond the Latin-1 characters we have metrics for.
  // Needed for Czech, Hungarian and Turkish text, for example.
  name: "latin",
  blocks: [
    [256, 591],
    // Latin Extended-A and Latin Extended-B
    [768, 879]
    // Combining Diacritical marks
  ]
}, {
  // The Cyrillic script used by Russian and related languages.
  // A Cyrillic subset used to be supported as explicitly defined
  // symbols in symbols.js
  name: "cyrillic",
  blocks: [[1024, 1279]]
}, {
  // Armenian
  name: "armenian",
  blocks: [[1328, 1423]]
}, {
  // The Brahmic scripts of South and Southeast Asia
  // Devanagari (0900–097F)
  // Bengali (0980–09FF)
  // Gurmukhi (0A00–0A7F)
  // Gujarati (0A80–0AFF)
  // Oriya (0B00–0B7F)
  // Tamil (0B80–0BFF)
  // Telugu (0C00–0C7F)
  // Kannada (0C80–0CFF)
  // Malayalam (0D00–0D7F)
  // Sinhala (0D80–0DFF)
  // Thai (0E00–0E7F)
  // Lao (0E80–0EFF)
  // Tibetan (0F00–0FFF)
  // Myanmar (1000–109F)
  name: "brahmic",
  blocks: [[2304, 4255]]
}, {
  name: "georgian",
  blocks: [[4256, 4351]]
}, {
  // Chinese and Japanese.
  // The "k" in cjk is for Korean, but we've separated Korean out
  name: "cjk",
  blocks: [
    [12288, 12543],
    // CJK symbols and punctuation, Hiragana, Katakana
    [19968, 40879],
    // CJK ideograms
    [65280, 65376]
    // Fullwidth punctuation
    // TODO: add halfwidth Katakana and Romanji glyphs
  ]
}, {
  // Korean
  name: "hangul",
  blocks: [[44032, 55215]]
}];
function Kb(n) {
  for (var e = 0; e < Zu.length; e++)
    for (var t = Zu[e], r = 0; r < t.blocks.length; r++) {
      var i = t.blocks[r];
      if (n >= i[0] && n <= i[1])
        return t.name;
    }
  return null;
}
var Rl = [];
Zu.forEach((n) => n.blocks.forEach((e) => Rl.push(...e)));
function b1(n) {
  for (var e = 0; e < Rl.length; e += 2)
    if (n >= Rl[e] && n <= Rl[e + 1])
      return !0;
  return !1;
}
var Gr = 80, Jb = function(e, t) {
  return "M95," + (622 + e + t) + `
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l` + e / 2.075 + " -" + e + `
c5.3,-9.3,12,-14,20,-14
H400000v` + (40 + e) + `H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M` + (834 + e) + " " + t + "h400000v" + (40 + e) + "h-400000z";
}, e8 = function(e, t) {
  return "M263," + (601 + e + t) + `c0.7,0,18,39.7,52,119
c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120
c340,-704.7,510.7,-1060.3,512,-1067
l` + e / 2.084 + " -" + e + `
c4.7,-7.3,11,-11,19,-11
H40000v` + (40 + e) + `H1012.3
s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232
c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1
s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26
c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z
M` + (1001 + e) + " " + t + "h400000v" + (40 + e) + "h-400000z";
}, t8 = function(e, t) {
  return "M983 " + (10 + e + t) + `
l` + e / 3.13 + " -" + e + `
c4,-6.7,10,-10,18,-10 H400000v` + (40 + e) + `
H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7
s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744
c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30
c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722
c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5
c53.7,-170.3,84.5,-266.8,92.5,-289.5z
M` + (1001 + e) + " " + t + "h400000v" + (40 + e) + "h-400000z";
}, n8 = function(e, t) {
  return "M424," + (2398 + e + t) + `
c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514
c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20
s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121
s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081
l` + e / 4.223 + " -" + e + `c4,-6.7,10,-10,18,-10 H400000
v` + (40 + e) + `H1014.6
s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185
c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2z M` + (1001 + e) + " " + t + `
h400000v` + (40 + e) + "h-400000z";
}, r8 = function(e, t) {
  return "M473," + (2713 + e + t) + `
c339.3,-1799.3,509.3,-2700,510,-2702 l` + e / 5.298 + " -" + e + `
c3.3,-7.3,9.3,-11,18,-11 H400000v` + (40 + e) + `H1017.7
s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200
c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26
s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,
606zM` + (1001 + e) + " " + t + "h400000v" + (40 + e) + "H1017.7z";
}, i8 = function(e) {
  var t = e / 2;
  return "M400000 " + e + " H0 L" + t + " 0 l65 45 L145 " + (e - 80) + " H400000z";
}, s8 = function(e, t, r) {
  var i = r - 54 - t - e;
  return "M702 " + (e + t) + "H400000" + (40 + e) + `
H742v` + i + `l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1
h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170
c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667
219 661 l218 661zM702 ` + t + "H400000v" + (40 + e) + "H742z";
}, l8 = function(e, t, r) {
  t = 1e3 * t;
  var i = "";
  switch (e) {
    case "sqrtMain":
      i = Jb(t, Gr);
      break;
    case "sqrtSize1":
      i = e8(t, Gr);
      break;
    case "sqrtSize2":
      i = t8(t, Gr);
      break;
    case "sqrtSize3":
      i = n8(t, Gr);
      break;
    case "sqrtSize4":
      i = r8(t, Gr);
      break;
    case "sqrtTall":
      i = s8(t, Gr, r);
  }
  return i;
}, a8 = function(e, t) {
  switch (e) {
    case "⎜":
      return "M291 0 H417 V" + t + " H291z M291 0 H417 V" + t + " H291z";
    case "∣":
      return "M145 0 H188 V" + t + " H145z M145 0 H188 V" + t + " H145z";
    case "∥":
      return "M145 0 H188 V" + t + " H145z M145 0 H188 V" + t + " H145z" + ("M367 0 H410 V" + t + " H367z M367 0 H410 V" + t + " H367z");
    case "⎟":
      return "M457 0 H583 V" + t + " H457z M457 0 H583 V" + t + " H457z";
    case "⎢":
      return "M319 0 H403 V" + t + " H319z M319 0 H403 V" + t + " H319z";
    case "⎥":
      return "M263 0 H347 V" + t + " H263z M263 0 H347 V" + t + " H263z";
    case "⎪":
      return "M384 0 H504 V" + t + " H384z M384 0 H504 V" + t + " H384z";
    case "⏐":
      return "M312 0 H355 V" + t + " H312z M312 0 H355 V" + t + " H312z";
    case "‖":
      return "M257 0 H300 V" + t + " H257z M257 0 H300 V" + t + " H257z" + ("M478 0 H521 V" + t + " H478z M478 0 H521 V" + t + " H478z");
    default:
      return "";
  }
}, Xc = {
  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
  doubleleftarrow: `M262 157
l10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3
 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28
 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5
c2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5
 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87
-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7
-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z
m8 0v40h399730v-40zm0 194v40h399730v-40z`,
  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
  doublerightarrow: `M399738 392l
-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5
 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88
-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68
-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18
-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782
c-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3
-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z`,
  // leftarrow is from glyph U+2190 in font KaTeX Main
  leftarrow: `M400000 241H110l3-3c68.7-52.7 113.7-120
 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8
-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247
c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208
 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3
 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202
 l-3-3h399890zM100 241v40h399900v-40z`,
  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
  leftbrace: `M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117
-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7
 5-6 9-10 13-.7 1-7.3 1-20 1H6z`,
  leftbraceunder: `M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13
 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688
 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7
-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z`,
  // overgroup is from the MnSymbol package (public domain)
  leftgroup: `M400000 80
H435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0
 435 0h399565z`,
  leftgroupunder: `M400000 262
H435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219
 435 219h399565z`,
  // Harpoons are from glyph U+21BD in font KaTeX Main
  leftharpoon: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3
-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5
-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7
-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z`,
  leftharpoonplus: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5
 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3
-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7
-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z
m0 0v40h400000v-40z`,
  leftharpoondown: `M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333
 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5
 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667
-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z`,
  leftharpoondownplus: `M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12
 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7
-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0
v40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z`,
  // hook is from glyph U+21A9 in font KaTeX Main
  lefthook: `M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5
-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3
-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21
 71.5 23h399859zM103 281v-40h399897v40z`,
  leftlinesegment: `M40 281 V428 H0 V94 H40 V241 H400000 v40z
M40 281 V428 H0 V94 H40 V241 H400000 v40z`,
  leftmapsto: `M40 281 V448H0V74H40V241H400000v40z
M40 281 V448H0V74H40V241H400000v40z`,
  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
  leftToFrom: `M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23
-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8
c28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3
 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z`,
  longequal: `M0 50 h400000 v40H0z m0 194h40000v40H0z
M0 50 h400000 v40H0z m0 194h40000v40H0z`,
  midbrace: `M200428 334
c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14
-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7
 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11
 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z`,
  midbraceunder: `M199572 214
c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14
 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3
 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0
-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z`,
  oiintSize1: `M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6
-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z
m368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8
60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z`,
  oiintSize2: `M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8
-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z
m502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2
c0 110 84 276 504 276s502.4-166 502.4-276z`,
  oiiintSize1: `M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6
-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z
m525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0
85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z`,
  oiiintSize2: `M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8
-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z
m770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1
c0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z`,
  rightarrow: `M0 241v40h399891c-47.3 35.3-84 78-110 128
-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20
 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7
 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85
-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
 151.7 139 205zm0 0v40h399900v-40z`,
  rightbrace: `M400000 542l
-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5
s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1
c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z`,
  rightbraceunder: `M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3
 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237
-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z`,
  rightgroup: `M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0
 3-1 3-3v-38c-76-158-257-219-435-219H0z`,
  rightgroupunder: `M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18
 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z`,
  rightharpoon: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3
-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2
-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58
 69.2 92 94.5zm0 0v40h399900v-40z`,
  rightharpoonplus: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11
-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7
 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z
m0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z`,
  rightharpoondown: `M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8
 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5
-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95
-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z`,
  rightharpoondownplus: `M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8
 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3
 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3
-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z
m0-194v40h400000v-40zm0 0v40h400000v-40z`,
  righthook: `M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3
 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0
-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21
 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z`,
  rightlinesegment: `M399960 241 V94 h40 V428 h-40 V281 H0 v-40z
M399960 241 V94 h40 V428 h-40 V281 H0 v-40z`,
  rightToFrom: `M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23
 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32
-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142
-167z M100 147v40h399900v-40zM0 341v40h399900v-40z`,
  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
  twoheadleftarrow: `M0 167c68 40
 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69
-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3
-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19
-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101
 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z`,
  twoheadrightarrow: `M400000 167
c-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3
 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42
 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333
-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70
 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z`,
  // tilde1 is a modified version of a glyph from the MnSymbol package
  tilde1: `M200 55.538c-77 0-168 73.953-177 73.953-3 0-7
-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0
 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0
 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128
-68.267.847-113-73.952-191-73.952z`,
  // ditto tilde2, tilde3, & tilde4
  tilde2: `M344 55.266c-142 0-300.638 81.316-311.5 86.418
-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9
 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114
c1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751
 181.476 676 181.476c-149 0-189-126.21-332-126.21z`,
  tilde3: `M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457
-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0
 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697
 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696
 -338 0-409-156.573-744-156.573z`,
  tilde4: `M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345
-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409
 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9
 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409
 -175.236-744-175.236z`,
  // vec is from glyph U+20D7 in font KaTeX Main
  vec: `M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`,
  // widehat1 is a modified version of a glyph from the MnSymbol package
  widehat1: `M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z`,
  // ditto widehat2, widehat3, & widehat4
  widehat2: `M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  widehat3: `M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  widehat4: `M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  // widecheck paths are all inverted versions of widehat
  widecheck1: `M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,
-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z`,
  widecheck2: `M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  widecheck3: `M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  widecheck4: `M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  // The next ten paths support reaction arrows from the mhchem package.
  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
  // baraboveleftarrow is mostly from glyph U+2190 in font KaTeX Main
  baraboveleftarrow: `M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202
c4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5
c-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130
s-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47
121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6
s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11
c0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z
M100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z`,
  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
  rightarrowabovebar: `M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32
-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0
13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39
-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5
-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z`,
  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
  baraboveshortleftharpoon: `M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17
c2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21
c-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40
c-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z
M0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z`,
  rightharpoonaboveshortbar: `M0,241 l0,40c399126,0,399993,0,399993,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z`,
  shortbaraboveleftharpoon: `M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,
1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,
-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z
M93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z`,
  shortrightharpoonabovebar: `M53,241l0,40c398570,0,399437,0,399437,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z`
}, o8 = function(e, t) {
  switch (e) {
    case "lbrack":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + t + ` v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v` + t + " v1759 h84z";
    case "rbrack":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + t + ` v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v` + t + " v1759 h84z";
    case "vert":
      return "M145 15 v585 v" + t + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -t + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v` + t + " v585 h43z";
    case "doublevert":
      return "M145 15 v585 v" + t + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -t + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v` + t + ` v585 h43z
M367 15 v585 v` + t + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -t + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M410 15 H367 v585 v` + t + " v585 h43z";
    case "lfloor":
      return "M319 602 V0 H403 V602 v" + t + ` v1715 h263 v84 H319z
MM319 602 V0 H403 V602 v` + t + " v1715 H319z";
    case "rfloor":
      return "M319 602 V0 H403 V602 v" + t + ` v1799 H0 v-84 H319z
MM319 602 V0 H403 V602 v` + t + " v1715 H319z";
    case "lceil":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + t + ` v602 h84z
M403 1759 V0 H319 V1759 v` + t + " v602 h84z";
    case "rceil":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + t + ` v602 h84z
M347 1759 V0 h-84 V1759 v` + t + " v602 h84z";
    case "lparen":
      return `M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1
c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,
-36,557 l0,` + (t + 84) + `c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,
949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9
c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,
-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189
l0,-` + (t + 92) + `c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,
-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z`;
    case "rparen":
      return `M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,
63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5
c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,` + (t + 9) + `
c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664
c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11
c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17
c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558
l0,-` + (t + 144) + `c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,
-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z`;
    default:
      throw new Error("Unknown stretchy delimiter.");
  }
};
class Zs {
  // HtmlDomNode
  // Never used; needed for satisfying interface.
  constructor(e) {
    this.children = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, this.children = e, this.classes = [], this.height = 0, this.depth = 0, this.maxFontSize = 0, this.style = {};
  }
  hasClass(e) {
    return se.contains(this.classes, e);
  }
  /** Convert the fragment into a node. */
  toNode() {
    for (var e = document.createDocumentFragment(), t = 0; t < this.children.length; t++)
      e.appendChild(this.children[t].toNode());
    return e;
  }
  /** Convert the fragment into HTML markup. */
  toMarkup() {
    for (var e = "", t = 0; t < this.children.length; t++)
      e += this.children[t].toMarkup();
    return e;
  }
  /**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */
  toText() {
    var e = (t) => t.toText();
    return this.children.map(e).join("");
  }
}
var vn = {
  "AMS-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.68889, 0, 0, 0.72222],
    66: [0, 0.68889, 0, 0, 0.66667],
    67: [0, 0.68889, 0, 0, 0.72222],
    68: [0, 0.68889, 0, 0, 0.72222],
    69: [0, 0.68889, 0, 0, 0.66667],
    70: [0, 0.68889, 0, 0, 0.61111],
    71: [0, 0.68889, 0, 0, 0.77778],
    72: [0, 0.68889, 0, 0, 0.77778],
    73: [0, 0.68889, 0, 0, 0.38889],
    74: [0.16667, 0.68889, 0, 0, 0.5],
    75: [0, 0.68889, 0, 0, 0.77778],
    76: [0, 0.68889, 0, 0, 0.66667],
    77: [0, 0.68889, 0, 0, 0.94445],
    78: [0, 0.68889, 0, 0, 0.72222],
    79: [0.16667, 0.68889, 0, 0, 0.77778],
    80: [0, 0.68889, 0, 0, 0.61111],
    81: [0.16667, 0.68889, 0, 0, 0.77778],
    82: [0, 0.68889, 0, 0, 0.72222],
    83: [0, 0.68889, 0, 0, 0.55556],
    84: [0, 0.68889, 0, 0, 0.66667],
    85: [0, 0.68889, 0, 0, 0.72222],
    86: [0, 0.68889, 0, 0, 0.72222],
    87: [0, 0.68889, 0, 0, 1],
    88: [0, 0.68889, 0, 0, 0.72222],
    89: [0, 0.68889, 0, 0, 0.72222],
    90: [0, 0.68889, 0, 0, 0.66667],
    107: [0, 0.68889, 0, 0, 0.55556],
    160: [0, 0, 0, 0, 0.25],
    165: [0, 0.675, 0.025, 0, 0.75],
    174: [0.15559, 0.69224, 0, 0, 0.94666],
    240: [0, 0.68889, 0, 0, 0.55556],
    295: [0, 0.68889, 0, 0, 0.54028],
    710: [0, 0.825, 0, 0, 2.33334],
    732: [0, 0.9, 0, 0, 2.33334],
    770: [0, 0.825, 0, 0, 2.33334],
    771: [0, 0.9, 0, 0, 2.33334],
    989: [0.08167, 0.58167, 0, 0, 0.77778],
    1008: [0, 0.43056, 0.04028, 0, 0.66667],
    8245: [0, 0.54986, 0, 0, 0.275],
    8463: [0, 0.68889, 0, 0, 0.54028],
    8487: [0, 0.68889, 0, 0, 0.72222],
    8498: [0, 0.68889, 0, 0, 0.55556],
    8502: [0, 0.68889, 0, 0, 0.66667],
    8503: [0, 0.68889, 0, 0, 0.44445],
    8504: [0, 0.68889, 0, 0, 0.66667],
    8513: [0, 0.68889, 0, 0, 0.63889],
    8592: [-0.03598, 0.46402, 0, 0, 0.5],
    8594: [-0.03598, 0.46402, 0, 0, 0.5],
    8602: [-0.13313, 0.36687, 0, 0, 1],
    8603: [-0.13313, 0.36687, 0, 0, 1],
    8606: [0.01354, 0.52239, 0, 0, 1],
    8608: [0.01354, 0.52239, 0, 0, 1],
    8610: [0.01354, 0.52239, 0, 0, 1.11111],
    8611: [0.01354, 0.52239, 0, 0, 1.11111],
    8619: [0, 0.54986, 0, 0, 1],
    8620: [0, 0.54986, 0, 0, 1],
    8621: [-0.13313, 0.37788, 0, 0, 1.38889],
    8622: [-0.13313, 0.36687, 0, 0, 1],
    8624: [0, 0.69224, 0, 0, 0.5],
    8625: [0, 0.69224, 0, 0, 0.5],
    8630: [0, 0.43056, 0, 0, 1],
    8631: [0, 0.43056, 0, 0, 1],
    8634: [0.08198, 0.58198, 0, 0, 0.77778],
    8635: [0.08198, 0.58198, 0, 0, 0.77778],
    8638: [0.19444, 0.69224, 0, 0, 0.41667],
    8639: [0.19444, 0.69224, 0, 0, 0.41667],
    8642: [0.19444, 0.69224, 0, 0, 0.41667],
    8643: [0.19444, 0.69224, 0, 0, 0.41667],
    8644: [0.1808, 0.675, 0, 0, 1],
    8646: [0.1808, 0.675, 0, 0, 1],
    8647: [0.1808, 0.675, 0, 0, 1],
    8648: [0.19444, 0.69224, 0, 0, 0.83334],
    8649: [0.1808, 0.675, 0, 0, 1],
    8650: [0.19444, 0.69224, 0, 0, 0.83334],
    8651: [0.01354, 0.52239, 0, 0, 1],
    8652: [0.01354, 0.52239, 0, 0, 1],
    8653: [-0.13313, 0.36687, 0, 0, 1],
    8654: [-0.13313, 0.36687, 0, 0, 1],
    8655: [-0.13313, 0.36687, 0, 0, 1],
    8666: [0.13667, 0.63667, 0, 0, 1],
    8667: [0.13667, 0.63667, 0, 0, 1],
    8669: [-0.13313, 0.37788, 0, 0, 1],
    8672: [-0.064, 0.437, 0, 0, 1.334],
    8674: [-0.064, 0.437, 0, 0, 1.334],
    8705: [0, 0.825, 0, 0, 0.5],
    8708: [0, 0.68889, 0, 0, 0.55556],
    8709: [0.08167, 0.58167, 0, 0, 0.77778],
    8717: [0, 0.43056, 0, 0, 0.42917],
    8722: [-0.03598, 0.46402, 0, 0, 0.5],
    8724: [0.08198, 0.69224, 0, 0, 0.77778],
    8726: [0.08167, 0.58167, 0, 0, 0.77778],
    8733: [0, 0.69224, 0, 0, 0.77778],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8737: [0, 0.69224, 0, 0, 0.72222],
    8738: [0.03517, 0.52239, 0, 0, 0.72222],
    8739: [0.08167, 0.58167, 0, 0, 0.22222],
    8740: [0.25142, 0.74111, 0, 0, 0.27778],
    8741: [0.08167, 0.58167, 0, 0, 0.38889],
    8742: [0.25142, 0.74111, 0, 0, 0.5],
    8756: [0, 0.69224, 0, 0, 0.66667],
    8757: [0, 0.69224, 0, 0, 0.66667],
    8764: [-0.13313, 0.36687, 0, 0, 0.77778],
    8765: [-0.13313, 0.37788, 0, 0, 0.77778],
    8769: [-0.13313, 0.36687, 0, 0, 0.77778],
    8770: [-0.03625, 0.46375, 0, 0, 0.77778],
    8774: [0.30274, 0.79383, 0, 0, 0.77778],
    8776: [-0.01688, 0.48312, 0, 0, 0.77778],
    8778: [0.08167, 0.58167, 0, 0, 0.77778],
    8782: [0.06062, 0.54986, 0, 0, 0.77778],
    8783: [0.06062, 0.54986, 0, 0, 0.77778],
    8785: [0.08198, 0.58198, 0, 0, 0.77778],
    8786: [0.08198, 0.58198, 0, 0, 0.77778],
    8787: [0.08198, 0.58198, 0, 0, 0.77778],
    8790: [0, 0.69224, 0, 0, 0.77778],
    8791: [0.22958, 0.72958, 0, 0, 0.77778],
    8796: [0.08198, 0.91667, 0, 0, 0.77778],
    8806: [0.25583, 0.75583, 0, 0, 0.77778],
    8807: [0.25583, 0.75583, 0, 0, 0.77778],
    8808: [0.25142, 0.75726, 0, 0, 0.77778],
    8809: [0.25142, 0.75726, 0, 0, 0.77778],
    8812: [0.25583, 0.75583, 0, 0, 0.5],
    8814: [0.20576, 0.70576, 0, 0, 0.77778],
    8815: [0.20576, 0.70576, 0, 0, 0.77778],
    8816: [0.30274, 0.79383, 0, 0, 0.77778],
    8817: [0.30274, 0.79383, 0, 0, 0.77778],
    8818: [0.22958, 0.72958, 0, 0, 0.77778],
    8819: [0.22958, 0.72958, 0, 0, 0.77778],
    8822: [0.1808, 0.675, 0, 0, 0.77778],
    8823: [0.1808, 0.675, 0, 0, 0.77778],
    8828: [0.13667, 0.63667, 0, 0, 0.77778],
    8829: [0.13667, 0.63667, 0, 0, 0.77778],
    8830: [0.22958, 0.72958, 0, 0, 0.77778],
    8831: [0.22958, 0.72958, 0, 0, 0.77778],
    8832: [0.20576, 0.70576, 0, 0, 0.77778],
    8833: [0.20576, 0.70576, 0, 0, 0.77778],
    8840: [0.30274, 0.79383, 0, 0, 0.77778],
    8841: [0.30274, 0.79383, 0, 0, 0.77778],
    8842: [0.13597, 0.63597, 0, 0, 0.77778],
    8843: [0.13597, 0.63597, 0, 0, 0.77778],
    8847: [0.03517, 0.54986, 0, 0, 0.77778],
    8848: [0.03517, 0.54986, 0, 0, 0.77778],
    8858: [0.08198, 0.58198, 0, 0, 0.77778],
    8859: [0.08198, 0.58198, 0, 0, 0.77778],
    8861: [0.08198, 0.58198, 0, 0, 0.77778],
    8862: [0, 0.675, 0, 0, 0.77778],
    8863: [0, 0.675, 0, 0, 0.77778],
    8864: [0, 0.675, 0, 0, 0.77778],
    8865: [0, 0.675, 0, 0, 0.77778],
    8872: [0, 0.69224, 0, 0, 0.61111],
    8873: [0, 0.69224, 0, 0, 0.72222],
    8874: [0, 0.69224, 0, 0, 0.88889],
    8876: [0, 0.68889, 0, 0, 0.61111],
    8877: [0, 0.68889, 0, 0, 0.61111],
    8878: [0, 0.68889, 0, 0, 0.72222],
    8879: [0, 0.68889, 0, 0, 0.72222],
    8882: [0.03517, 0.54986, 0, 0, 0.77778],
    8883: [0.03517, 0.54986, 0, 0, 0.77778],
    8884: [0.13667, 0.63667, 0, 0, 0.77778],
    8885: [0.13667, 0.63667, 0, 0, 0.77778],
    8888: [0, 0.54986, 0, 0, 1.11111],
    8890: [0.19444, 0.43056, 0, 0, 0.55556],
    8891: [0.19444, 0.69224, 0, 0, 0.61111],
    8892: [0.19444, 0.69224, 0, 0, 0.61111],
    8901: [0, 0.54986, 0, 0, 0.27778],
    8903: [0.08167, 0.58167, 0, 0, 0.77778],
    8905: [0.08167, 0.58167, 0, 0, 0.77778],
    8906: [0.08167, 0.58167, 0, 0, 0.77778],
    8907: [0, 0.69224, 0, 0, 0.77778],
    8908: [0, 0.69224, 0, 0, 0.77778],
    8909: [-0.03598, 0.46402, 0, 0, 0.77778],
    8910: [0, 0.54986, 0, 0, 0.76042],
    8911: [0, 0.54986, 0, 0, 0.76042],
    8912: [0.03517, 0.54986, 0, 0, 0.77778],
    8913: [0.03517, 0.54986, 0, 0, 0.77778],
    8914: [0, 0.54986, 0, 0, 0.66667],
    8915: [0, 0.54986, 0, 0, 0.66667],
    8916: [0, 0.69224, 0, 0, 0.66667],
    8918: [0.0391, 0.5391, 0, 0, 0.77778],
    8919: [0.0391, 0.5391, 0, 0, 0.77778],
    8920: [0.03517, 0.54986, 0, 0, 1.33334],
    8921: [0.03517, 0.54986, 0, 0, 1.33334],
    8922: [0.38569, 0.88569, 0, 0, 0.77778],
    8923: [0.38569, 0.88569, 0, 0, 0.77778],
    8926: [0.13667, 0.63667, 0, 0, 0.77778],
    8927: [0.13667, 0.63667, 0, 0, 0.77778],
    8928: [0.30274, 0.79383, 0, 0, 0.77778],
    8929: [0.30274, 0.79383, 0, 0, 0.77778],
    8934: [0.23222, 0.74111, 0, 0, 0.77778],
    8935: [0.23222, 0.74111, 0, 0, 0.77778],
    8936: [0.23222, 0.74111, 0, 0, 0.77778],
    8937: [0.23222, 0.74111, 0, 0, 0.77778],
    8938: [0.20576, 0.70576, 0, 0, 0.77778],
    8939: [0.20576, 0.70576, 0, 0, 0.77778],
    8940: [0.30274, 0.79383, 0, 0, 0.77778],
    8941: [0.30274, 0.79383, 0, 0, 0.77778],
    8994: [0.19444, 0.69224, 0, 0, 0.77778],
    8995: [0.19444, 0.69224, 0, 0, 0.77778],
    9416: [0.15559, 0.69224, 0, 0, 0.90222],
    9484: [0, 0.69224, 0, 0, 0.5],
    9488: [0, 0.69224, 0, 0, 0.5],
    9492: [0, 0.37788, 0, 0, 0.5],
    9496: [0, 0.37788, 0, 0, 0.5],
    9585: [0.19444, 0.68889, 0, 0, 0.88889],
    9586: [0.19444, 0.74111, 0, 0, 0.88889],
    9632: [0, 0.675, 0, 0, 0.77778],
    9633: [0, 0.675, 0, 0, 0.77778],
    9650: [0, 0.54986, 0, 0, 0.72222],
    9651: [0, 0.54986, 0, 0, 0.72222],
    9654: [0.03517, 0.54986, 0, 0, 0.77778],
    9660: [0, 0.54986, 0, 0, 0.72222],
    9661: [0, 0.54986, 0, 0, 0.72222],
    9664: [0.03517, 0.54986, 0, 0, 0.77778],
    9674: [0.11111, 0.69224, 0, 0, 0.66667],
    9733: [0.19444, 0.69224, 0, 0, 0.94445],
    10003: [0, 0.69224, 0, 0, 0.83334],
    10016: [0, 0.69224, 0, 0, 0.83334],
    10731: [0.11111, 0.69224, 0, 0, 0.66667],
    10846: [0.19444, 0.75583, 0, 0, 0.61111],
    10877: [0.13667, 0.63667, 0, 0, 0.77778],
    10878: [0.13667, 0.63667, 0, 0, 0.77778],
    10885: [0.25583, 0.75583, 0, 0, 0.77778],
    10886: [0.25583, 0.75583, 0, 0, 0.77778],
    10887: [0.13597, 0.63597, 0, 0, 0.77778],
    10888: [0.13597, 0.63597, 0, 0, 0.77778],
    10889: [0.26167, 0.75726, 0, 0, 0.77778],
    10890: [0.26167, 0.75726, 0, 0, 0.77778],
    10891: [0.48256, 0.98256, 0, 0, 0.77778],
    10892: [0.48256, 0.98256, 0, 0, 0.77778],
    10901: [0.13667, 0.63667, 0, 0, 0.77778],
    10902: [0.13667, 0.63667, 0, 0, 0.77778],
    10933: [0.25142, 0.75726, 0, 0, 0.77778],
    10934: [0.25142, 0.75726, 0, 0, 0.77778],
    10935: [0.26167, 0.75726, 0, 0, 0.77778],
    10936: [0.26167, 0.75726, 0, 0, 0.77778],
    10937: [0.26167, 0.75726, 0, 0, 0.77778],
    10938: [0.26167, 0.75726, 0, 0, 0.77778],
    10949: [0.25583, 0.75583, 0, 0, 0.77778],
    10950: [0.25583, 0.75583, 0, 0, 0.77778],
    10955: [0.28481, 0.79383, 0, 0, 0.77778],
    10956: [0.28481, 0.79383, 0, 0, 0.77778],
    57350: [0.08167, 0.58167, 0, 0, 0.22222],
    57351: [0.08167, 0.58167, 0, 0, 0.38889],
    57352: [0.08167, 0.58167, 0, 0, 0.77778],
    57353: [0, 0.43056, 0.04028, 0, 0.66667],
    57356: [0.25142, 0.75726, 0, 0, 0.77778],
    57357: [0.25142, 0.75726, 0, 0, 0.77778],
    57358: [0.41951, 0.91951, 0, 0, 0.77778],
    57359: [0.30274, 0.79383, 0, 0, 0.77778],
    57360: [0.30274, 0.79383, 0, 0, 0.77778],
    57361: [0.41951, 0.91951, 0, 0, 0.77778],
    57366: [0.25142, 0.75726, 0, 0, 0.77778],
    57367: [0.25142, 0.75726, 0, 0, 0.77778],
    57368: [0.25142, 0.75726, 0, 0, 0.77778],
    57369: [0.25142, 0.75726, 0, 0, 0.77778],
    57370: [0.13597, 0.63597, 0, 0, 0.77778],
    57371: [0.13597, 0.63597, 0, 0, 0.77778]
  },
  "Caligraphic-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.68333, 0, 0.19445, 0.79847],
    66: [0, 0.68333, 0.03041, 0.13889, 0.65681],
    67: [0, 0.68333, 0.05834, 0.13889, 0.52653],
    68: [0, 0.68333, 0.02778, 0.08334, 0.77139],
    69: [0, 0.68333, 0.08944, 0.11111, 0.52778],
    70: [0, 0.68333, 0.09931, 0.11111, 0.71875],
    71: [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
    72: [0, 0.68333, 965e-5, 0.11111, 0.84452],
    73: [0, 0.68333, 0.07382, 0, 0.54452],
    74: [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
    75: [0, 0.68333, 0.01445, 0.05556, 0.76195],
    76: [0, 0.68333, 0, 0.13889, 0.68972],
    77: [0, 0.68333, 0, 0.13889, 1.2009],
    78: [0, 0.68333, 0.14736, 0.08334, 0.82049],
    79: [0, 0.68333, 0.02778, 0.11111, 0.79611],
    80: [0, 0.68333, 0.08222, 0.08334, 0.69556],
    81: [0.09722, 0.68333, 0, 0.11111, 0.81667],
    82: [0, 0.68333, 0, 0.08334, 0.8475],
    83: [0, 0.68333, 0.075, 0.13889, 0.60556],
    84: [0, 0.68333, 0.25417, 0, 0.54464],
    85: [0, 0.68333, 0.09931, 0.08334, 0.62583],
    86: [0, 0.68333, 0.08222, 0, 0.61278],
    87: [0, 0.68333, 0.08222, 0.08334, 0.98778],
    88: [0, 0.68333, 0.14643, 0.13889, 0.7133],
    89: [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
    90: [0, 0.68333, 0.07944, 0.13889, 0.72473],
    160: [0, 0, 0, 0, 0.25]
  },
  "Fraktur-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69141, 0, 0, 0.29574],
    34: [0, 0.69141, 0, 0, 0.21471],
    38: [0, 0.69141, 0, 0, 0.73786],
    39: [0, 0.69141, 0, 0, 0.21201],
    40: [0.24982, 0.74947, 0, 0, 0.38865],
    41: [0.24982, 0.74947, 0, 0, 0.38865],
    42: [0, 0.62119, 0, 0, 0.27764],
    43: [0.08319, 0.58283, 0, 0, 0.75623],
    44: [0, 0.10803, 0, 0, 0.27764],
    45: [0.08319, 0.58283, 0, 0, 0.75623],
    46: [0, 0.10803, 0, 0, 0.27764],
    47: [0.24982, 0.74947, 0, 0, 0.50181],
    48: [0, 0.47534, 0, 0, 0.50181],
    49: [0, 0.47534, 0, 0, 0.50181],
    50: [0, 0.47534, 0, 0, 0.50181],
    51: [0.18906, 0.47534, 0, 0, 0.50181],
    52: [0.18906, 0.47534, 0, 0, 0.50181],
    53: [0.18906, 0.47534, 0, 0, 0.50181],
    54: [0, 0.69141, 0, 0, 0.50181],
    55: [0.18906, 0.47534, 0, 0, 0.50181],
    56: [0, 0.69141, 0, 0, 0.50181],
    57: [0.18906, 0.47534, 0, 0, 0.50181],
    58: [0, 0.47534, 0, 0, 0.21606],
    59: [0.12604, 0.47534, 0, 0, 0.21606],
    61: [-0.13099, 0.36866, 0, 0, 0.75623],
    63: [0, 0.69141, 0, 0, 0.36245],
    65: [0, 0.69141, 0, 0, 0.7176],
    66: [0, 0.69141, 0, 0, 0.88397],
    67: [0, 0.69141, 0, 0, 0.61254],
    68: [0, 0.69141, 0, 0, 0.83158],
    69: [0, 0.69141, 0, 0, 0.66278],
    70: [0.12604, 0.69141, 0, 0, 0.61119],
    71: [0, 0.69141, 0, 0, 0.78539],
    72: [0.06302, 0.69141, 0, 0, 0.7203],
    73: [0, 0.69141, 0, 0, 0.55448],
    74: [0.12604, 0.69141, 0, 0, 0.55231],
    75: [0, 0.69141, 0, 0, 0.66845],
    76: [0, 0.69141, 0, 0, 0.66602],
    77: [0, 0.69141, 0, 0, 1.04953],
    78: [0, 0.69141, 0, 0, 0.83212],
    79: [0, 0.69141, 0, 0, 0.82699],
    80: [0.18906, 0.69141, 0, 0, 0.82753],
    81: [0.03781, 0.69141, 0, 0, 0.82699],
    82: [0, 0.69141, 0, 0, 0.82807],
    83: [0, 0.69141, 0, 0, 0.82861],
    84: [0, 0.69141, 0, 0, 0.66899],
    85: [0, 0.69141, 0, 0, 0.64576],
    86: [0, 0.69141, 0, 0, 0.83131],
    87: [0, 0.69141, 0, 0, 1.04602],
    88: [0, 0.69141, 0, 0, 0.71922],
    89: [0.18906, 0.69141, 0, 0, 0.83293],
    90: [0.12604, 0.69141, 0, 0, 0.60201],
    91: [0.24982, 0.74947, 0, 0, 0.27764],
    93: [0.24982, 0.74947, 0, 0, 0.27764],
    94: [0, 0.69141, 0, 0, 0.49965],
    97: [0, 0.47534, 0, 0, 0.50046],
    98: [0, 0.69141, 0, 0, 0.51315],
    99: [0, 0.47534, 0, 0, 0.38946],
    100: [0, 0.62119, 0, 0, 0.49857],
    101: [0, 0.47534, 0, 0, 0.40053],
    102: [0.18906, 0.69141, 0, 0, 0.32626],
    103: [0.18906, 0.47534, 0, 0, 0.5037],
    104: [0.18906, 0.69141, 0, 0, 0.52126],
    105: [0, 0.69141, 0, 0, 0.27899],
    106: [0, 0.69141, 0, 0, 0.28088],
    107: [0, 0.69141, 0, 0, 0.38946],
    108: [0, 0.69141, 0, 0, 0.27953],
    109: [0, 0.47534, 0, 0, 0.76676],
    110: [0, 0.47534, 0, 0, 0.52666],
    111: [0, 0.47534, 0, 0, 0.48885],
    112: [0.18906, 0.52396, 0, 0, 0.50046],
    113: [0.18906, 0.47534, 0, 0, 0.48912],
    114: [0, 0.47534, 0, 0, 0.38919],
    115: [0, 0.47534, 0, 0, 0.44266],
    116: [0, 0.62119, 0, 0, 0.33301],
    117: [0, 0.47534, 0, 0, 0.5172],
    118: [0, 0.52396, 0, 0, 0.5118],
    119: [0, 0.52396, 0, 0, 0.77351],
    120: [0.18906, 0.47534, 0, 0, 0.38865],
    121: [0.18906, 0.47534, 0, 0, 0.49884],
    122: [0.18906, 0.47534, 0, 0, 0.39054],
    160: [0, 0, 0, 0, 0.25],
    8216: [0, 0.69141, 0, 0, 0.21471],
    8217: [0, 0.69141, 0, 0, 0.21471],
    58112: [0, 0.62119, 0, 0, 0.49749],
    58113: [0, 0.62119, 0, 0, 0.4983],
    58114: [0.18906, 0.69141, 0, 0, 0.33328],
    58115: [0.18906, 0.69141, 0, 0, 0.32923],
    58116: [0.18906, 0.47534, 0, 0, 0.50343],
    58117: [0, 0.69141, 0, 0, 0.33301],
    58118: [0, 0.62119, 0, 0, 0.33409],
    58119: [0, 0.47534, 0, 0, 0.50073]
  },
  "Main-Bold": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.35],
    34: [0, 0.69444, 0, 0, 0.60278],
    35: [0.19444, 0.69444, 0, 0, 0.95833],
    36: [0.05556, 0.75, 0, 0, 0.575],
    37: [0.05556, 0.75, 0, 0, 0.95833],
    38: [0, 0.69444, 0, 0, 0.89444],
    39: [0, 0.69444, 0, 0, 0.31944],
    40: [0.25, 0.75, 0, 0, 0.44722],
    41: [0.25, 0.75, 0, 0, 0.44722],
    42: [0, 0.75, 0, 0, 0.575],
    43: [0.13333, 0.63333, 0, 0, 0.89444],
    44: [0.19444, 0.15556, 0, 0, 0.31944],
    45: [0, 0.44444, 0, 0, 0.38333],
    46: [0, 0.15556, 0, 0, 0.31944],
    47: [0.25, 0.75, 0, 0, 0.575],
    48: [0, 0.64444, 0, 0, 0.575],
    49: [0, 0.64444, 0, 0, 0.575],
    50: [0, 0.64444, 0, 0, 0.575],
    51: [0, 0.64444, 0, 0, 0.575],
    52: [0, 0.64444, 0, 0, 0.575],
    53: [0, 0.64444, 0, 0, 0.575],
    54: [0, 0.64444, 0, 0, 0.575],
    55: [0, 0.64444, 0, 0, 0.575],
    56: [0, 0.64444, 0, 0, 0.575],
    57: [0, 0.64444, 0, 0, 0.575],
    58: [0, 0.44444, 0, 0, 0.31944],
    59: [0.19444, 0.44444, 0, 0, 0.31944],
    60: [0.08556, 0.58556, 0, 0, 0.89444],
    61: [-0.10889, 0.39111, 0, 0, 0.89444],
    62: [0.08556, 0.58556, 0, 0, 0.89444],
    63: [0, 0.69444, 0, 0, 0.54305],
    64: [0, 0.69444, 0, 0, 0.89444],
    65: [0, 0.68611, 0, 0, 0.86944],
    66: [0, 0.68611, 0, 0, 0.81805],
    67: [0, 0.68611, 0, 0, 0.83055],
    68: [0, 0.68611, 0, 0, 0.88194],
    69: [0, 0.68611, 0, 0, 0.75555],
    70: [0, 0.68611, 0, 0, 0.72361],
    71: [0, 0.68611, 0, 0, 0.90416],
    72: [0, 0.68611, 0, 0, 0.9],
    73: [0, 0.68611, 0, 0, 0.43611],
    74: [0, 0.68611, 0, 0, 0.59444],
    75: [0, 0.68611, 0, 0, 0.90138],
    76: [0, 0.68611, 0, 0, 0.69166],
    77: [0, 0.68611, 0, 0, 1.09166],
    78: [0, 0.68611, 0, 0, 0.9],
    79: [0, 0.68611, 0, 0, 0.86388],
    80: [0, 0.68611, 0, 0, 0.78611],
    81: [0.19444, 0.68611, 0, 0, 0.86388],
    82: [0, 0.68611, 0, 0, 0.8625],
    83: [0, 0.68611, 0, 0, 0.63889],
    84: [0, 0.68611, 0, 0, 0.8],
    85: [0, 0.68611, 0, 0, 0.88472],
    86: [0, 0.68611, 0.01597, 0, 0.86944],
    87: [0, 0.68611, 0.01597, 0, 1.18888],
    88: [0, 0.68611, 0, 0, 0.86944],
    89: [0, 0.68611, 0.02875, 0, 0.86944],
    90: [0, 0.68611, 0, 0, 0.70277],
    91: [0.25, 0.75, 0, 0, 0.31944],
    92: [0.25, 0.75, 0, 0, 0.575],
    93: [0.25, 0.75, 0, 0, 0.31944],
    94: [0, 0.69444, 0, 0, 0.575],
    95: [0.31, 0.13444, 0.03194, 0, 0.575],
    97: [0, 0.44444, 0, 0, 0.55902],
    98: [0, 0.69444, 0, 0, 0.63889],
    99: [0, 0.44444, 0, 0, 0.51111],
    100: [0, 0.69444, 0, 0, 0.63889],
    101: [0, 0.44444, 0, 0, 0.52708],
    102: [0, 0.69444, 0.10903, 0, 0.35139],
    103: [0.19444, 0.44444, 0.01597, 0, 0.575],
    104: [0, 0.69444, 0, 0, 0.63889],
    105: [0, 0.69444, 0, 0, 0.31944],
    106: [0.19444, 0.69444, 0, 0, 0.35139],
    107: [0, 0.69444, 0, 0, 0.60694],
    108: [0, 0.69444, 0, 0, 0.31944],
    109: [0, 0.44444, 0, 0, 0.95833],
    110: [0, 0.44444, 0, 0, 0.63889],
    111: [0, 0.44444, 0, 0, 0.575],
    112: [0.19444, 0.44444, 0, 0, 0.63889],
    113: [0.19444, 0.44444, 0, 0, 0.60694],
    114: [0, 0.44444, 0, 0, 0.47361],
    115: [0, 0.44444, 0, 0, 0.45361],
    116: [0, 0.63492, 0, 0, 0.44722],
    117: [0, 0.44444, 0, 0, 0.63889],
    118: [0, 0.44444, 0.01597, 0, 0.60694],
    119: [0, 0.44444, 0.01597, 0, 0.83055],
    120: [0, 0.44444, 0, 0, 0.60694],
    121: [0.19444, 0.44444, 0.01597, 0, 0.60694],
    122: [0, 0.44444, 0, 0, 0.51111],
    123: [0.25, 0.75, 0, 0, 0.575],
    124: [0.25, 0.75, 0, 0, 0.31944],
    125: [0.25, 0.75, 0, 0, 0.575],
    126: [0.35, 0.34444, 0, 0, 0.575],
    160: [0, 0, 0, 0, 0.25],
    163: [0, 0.69444, 0, 0, 0.86853],
    168: [0, 0.69444, 0, 0, 0.575],
    172: [0, 0.44444, 0, 0, 0.76666],
    176: [0, 0.69444, 0, 0, 0.86944],
    177: [0.13333, 0.63333, 0, 0, 0.89444],
    184: [0.17014, 0, 0, 0, 0.51111],
    198: [0, 0.68611, 0, 0, 1.04166],
    215: [0.13333, 0.63333, 0, 0, 0.89444],
    216: [0.04861, 0.73472, 0, 0, 0.89444],
    223: [0, 0.69444, 0, 0, 0.59722],
    230: [0, 0.44444, 0, 0, 0.83055],
    247: [0.13333, 0.63333, 0, 0, 0.89444],
    248: [0.09722, 0.54167, 0, 0, 0.575],
    305: [0, 0.44444, 0, 0, 0.31944],
    338: [0, 0.68611, 0, 0, 1.16944],
    339: [0, 0.44444, 0, 0, 0.89444],
    567: [0.19444, 0.44444, 0, 0, 0.35139],
    710: [0, 0.69444, 0, 0, 0.575],
    711: [0, 0.63194, 0, 0, 0.575],
    713: [0, 0.59611, 0, 0, 0.575],
    714: [0, 0.69444, 0, 0, 0.575],
    715: [0, 0.69444, 0, 0, 0.575],
    728: [0, 0.69444, 0, 0, 0.575],
    729: [0, 0.69444, 0, 0, 0.31944],
    730: [0, 0.69444, 0, 0, 0.86944],
    732: [0, 0.69444, 0, 0, 0.575],
    733: [0, 0.69444, 0, 0, 0.575],
    915: [0, 0.68611, 0, 0, 0.69166],
    916: [0, 0.68611, 0, 0, 0.95833],
    920: [0, 0.68611, 0, 0, 0.89444],
    923: [0, 0.68611, 0, 0, 0.80555],
    926: [0, 0.68611, 0, 0, 0.76666],
    928: [0, 0.68611, 0, 0, 0.9],
    931: [0, 0.68611, 0, 0, 0.83055],
    933: [0, 0.68611, 0, 0, 0.89444],
    934: [0, 0.68611, 0, 0, 0.83055],
    936: [0, 0.68611, 0, 0, 0.89444],
    937: [0, 0.68611, 0, 0, 0.83055],
    8211: [0, 0.44444, 0.03194, 0, 0.575],
    8212: [0, 0.44444, 0.03194, 0, 1.14999],
    8216: [0, 0.69444, 0, 0, 0.31944],
    8217: [0, 0.69444, 0, 0, 0.31944],
    8220: [0, 0.69444, 0, 0, 0.60278],
    8221: [0, 0.69444, 0, 0, 0.60278],
    8224: [0.19444, 0.69444, 0, 0, 0.51111],
    8225: [0.19444, 0.69444, 0, 0, 0.51111],
    8242: [0, 0.55556, 0, 0, 0.34444],
    8407: [0, 0.72444, 0.15486, 0, 0.575],
    8463: [0, 0.69444, 0, 0, 0.66759],
    8465: [0, 0.69444, 0, 0, 0.83055],
    8467: [0, 0.69444, 0, 0, 0.47361],
    8472: [0.19444, 0.44444, 0, 0, 0.74027],
    8476: [0, 0.69444, 0, 0, 0.83055],
    8501: [0, 0.69444, 0, 0, 0.70277],
    8592: [-0.10889, 0.39111, 0, 0, 1.14999],
    8593: [0.19444, 0.69444, 0, 0, 0.575],
    8594: [-0.10889, 0.39111, 0, 0, 1.14999],
    8595: [0.19444, 0.69444, 0, 0, 0.575],
    8596: [-0.10889, 0.39111, 0, 0, 1.14999],
    8597: [0.25, 0.75, 0, 0, 0.575],
    8598: [0.19444, 0.69444, 0, 0, 1.14999],
    8599: [0.19444, 0.69444, 0, 0, 1.14999],
    8600: [0.19444, 0.69444, 0, 0, 1.14999],
    8601: [0.19444, 0.69444, 0, 0, 1.14999],
    8636: [-0.10889, 0.39111, 0, 0, 1.14999],
    8637: [-0.10889, 0.39111, 0, 0, 1.14999],
    8640: [-0.10889, 0.39111, 0, 0, 1.14999],
    8641: [-0.10889, 0.39111, 0, 0, 1.14999],
    8656: [-0.10889, 0.39111, 0, 0, 1.14999],
    8657: [0.19444, 0.69444, 0, 0, 0.70277],
    8658: [-0.10889, 0.39111, 0, 0, 1.14999],
    8659: [0.19444, 0.69444, 0, 0, 0.70277],
    8660: [-0.10889, 0.39111, 0, 0, 1.14999],
    8661: [0.25, 0.75, 0, 0, 0.70277],
    8704: [0, 0.69444, 0, 0, 0.63889],
    8706: [0, 0.69444, 0.06389, 0, 0.62847],
    8707: [0, 0.69444, 0, 0, 0.63889],
    8709: [0.05556, 0.75, 0, 0, 0.575],
    8711: [0, 0.68611, 0, 0, 0.95833],
    8712: [0.08556, 0.58556, 0, 0, 0.76666],
    8715: [0.08556, 0.58556, 0, 0, 0.76666],
    8722: [0.13333, 0.63333, 0, 0, 0.89444],
    8723: [0.13333, 0.63333, 0, 0, 0.89444],
    8725: [0.25, 0.75, 0, 0, 0.575],
    8726: [0.25, 0.75, 0, 0, 0.575],
    8727: [-0.02778, 0.47222, 0, 0, 0.575],
    8728: [-0.02639, 0.47361, 0, 0, 0.575],
    8729: [-0.02639, 0.47361, 0, 0, 0.575],
    8730: [0.18, 0.82, 0, 0, 0.95833],
    8733: [0, 0.44444, 0, 0, 0.89444],
    8734: [0, 0.44444, 0, 0, 1.14999],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8739: [0.25, 0.75, 0, 0, 0.31944],
    8741: [0.25, 0.75, 0, 0, 0.575],
    8743: [0, 0.55556, 0, 0, 0.76666],
    8744: [0, 0.55556, 0, 0, 0.76666],
    8745: [0, 0.55556, 0, 0, 0.76666],
    8746: [0, 0.55556, 0, 0, 0.76666],
    8747: [0.19444, 0.69444, 0.12778, 0, 0.56875],
    8764: [-0.10889, 0.39111, 0, 0, 0.89444],
    8768: [0.19444, 0.69444, 0, 0, 0.31944],
    8771: [222e-5, 0.50222, 0, 0, 0.89444],
    8773: [0.027, 0.638, 0, 0, 0.894],
    8776: [0.02444, 0.52444, 0, 0, 0.89444],
    8781: [222e-5, 0.50222, 0, 0, 0.89444],
    8801: [222e-5, 0.50222, 0, 0, 0.89444],
    8804: [0.19667, 0.69667, 0, 0, 0.89444],
    8805: [0.19667, 0.69667, 0, 0, 0.89444],
    8810: [0.08556, 0.58556, 0, 0, 1.14999],
    8811: [0.08556, 0.58556, 0, 0, 1.14999],
    8826: [0.08556, 0.58556, 0, 0, 0.89444],
    8827: [0.08556, 0.58556, 0, 0, 0.89444],
    8834: [0.08556, 0.58556, 0, 0, 0.89444],
    8835: [0.08556, 0.58556, 0, 0, 0.89444],
    8838: [0.19667, 0.69667, 0, 0, 0.89444],
    8839: [0.19667, 0.69667, 0, 0, 0.89444],
    8846: [0, 0.55556, 0, 0, 0.76666],
    8849: [0.19667, 0.69667, 0, 0, 0.89444],
    8850: [0.19667, 0.69667, 0, 0, 0.89444],
    8851: [0, 0.55556, 0, 0, 0.76666],
    8852: [0, 0.55556, 0, 0, 0.76666],
    8853: [0.13333, 0.63333, 0, 0, 0.89444],
    8854: [0.13333, 0.63333, 0, 0, 0.89444],
    8855: [0.13333, 0.63333, 0, 0, 0.89444],
    8856: [0.13333, 0.63333, 0, 0, 0.89444],
    8857: [0.13333, 0.63333, 0, 0, 0.89444],
    8866: [0, 0.69444, 0, 0, 0.70277],
    8867: [0, 0.69444, 0, 0, 0.70277],
    8868: [0, 0.69444, 0, 0, 0.89444],
    8869: [0, 0.69444, 0, 0, 0.89444],
    8900: [-0.02639, 0.47361, 0, 0, 0.575],
    8901: [-0.02639, 0.47361, 0, 0, 0.31944],
    8902: [-0.02778, 0.47222, 0, 0, 0.575],
    8968: [0.25, 0.75, 0, 0, 0.51111],
    8969: [0.25, 0.75, 0, 0, 0.51111],
    8970: [0.25, 0.75, 0, 0, 0.51111],
    8971: [0.25, 0.75, 0, 0, 0.51111],
    8994: [-0.13889, 0.36111, 0, 0, 1.14999],
    8995: [-0.13889, 0.36111, 0, 0, 1.14999],
    9651: [0.19444, 0.69444, 0, 0, 1.02222],
    9657: [-0.02778, 0.47222, 0, 0, 0.575],
    9661: [0.19444, 0.69444, 0, 0, 1.02222],
    9667: [-0.02778, 0.47222, 0, 0, 0.575],
    9711: [0.19444, 0.69444, 0, 0, 1.14999],
    9824: [0.12963, 0.69444, 0, 0, 0.89444],
    9825: [0.12963, 0.69444, 0, 0, 0.89444],
    9826: [0.12963, 0.69444, 0, 0, 0.89444],
    9827: [0.12963, 0.69444, 0, 0, 0.89444],
    9837: [0, 0.75, 0, 0, 0.44722],
    9838: [0.19444, 0.69444, 0, 0, 0.44722],
    9839: [0.19444, 0.69444, 0, 0, 0.44722],
    10216: [0.25, 0.75, 0, 0, 0.44722],
    10217: [0.25, 0.75, 0, 0, 0.44722],
    10815: [0, 0.68611, 0, 0, 0.9],
    10927: [0.19667, 0.69667, 0, 0, 0.89444],
    10928: [0.19667, 0.69667, 0, 0, 0.89444],
    57376: [0.19444, 0.69444, 0, 0, 0]
  },
  "Main-BoldItalic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.11417, 0, 0.38611],
    34: [0, 0.69444, 0.07939, 0, 0.62055],
    35: [0.19444, 0.69444, 0.06833, 0, 0.94444],
    37: [0.05556, 0.75, 0.12861, 0, 0.94444],
    38: [0, 0.69444, 0.08528, 0, 0.88555],
    39: [0, 0.69444, 0.12945, 0, 0.35555],
    40: [0.25, 0.75, 0.15806, 0, 0.47333],
    41: [0.25, 0.75, 0.03306, 0, 0.47333],
    42: [0, 0.75, 0.14333, 0, 0.59111],
    43: [0.10333, 0.60333, 0.03306, 0, 0.88555],
    44: [0.19444, 0.14722, 0, 0, 0.35555],
    45: [0, 0.44444, 0.02611, 0, 0.41444],
    46: [0, 0.14722, 0, 0, 0.35555],
    47: [0.25, 0.75, 0.15806, 0, 0.59111],
    48: [0, 0.64444, 0.13167, 0, 0.59111],
    49: [0, 0.64444, 0.13167, 0, 0.59111],
    50: [0, 0.64444, 0.13167, 0, 0.59111],
    51: [0, 0.64444, 0.13167, 0, 0.59111],
    52: [0.19444, 0.64444, 0.13167, 0, 0.59111],
    53: [0, 0.64444, 0.13167, 0, 0.59111],
    54: [0, 0.64444, 0.13167, 0, 0.59111],
    55: [0.19444, 0.64444, 0.13167, 0, 0.59111],
    56: [0, 0.64444, 0.13167, 0, 0.59111],
    57: [0, 0.64444, 0.13167, 0, 0.59111],
    58: [0, 0.44444, 0.06695, 0, 0.35555],
    59: [0.19444, 0.44444, 0.06695, 0, 0.35555],
    61: [-0.10889, 0.39111, 0.06833, 0, 0.88555],
    63: [0, 0.69444, 0.11472, 0, 0.59111],
    64: [0, 0.69444, 0.09208, 0, 0.88555],
    65: [0, 0.68611, 0, 0, 0.86555],
    66: [0, 0.68611, 0.0992, 0, 0.81666],
    67: [0, 0.68611, 0.14208, 0, 0.82666],
    68: [0, 0.68611, 0.09062, 0, 0.87555],
    69: [0, 0.68611, 0.11431, 0, 0.75666],
    70: [0, 0.68611, 0.12903, 0, 0.72722],
    71: [0, 0.68611, 0.07347, 0, 0.89527],
    72: [0, 0.68611, 0.17208, 0, 0.8961],
    73: [0, 0.68611, 0.15681, 0, 0.47166],
    74: [0, 0.68611, 0.145, 0, 0.61055],
    75: [0, 0.68611, 0.14208, 0, 0.89499],
    76: [0, 0.68611, 0, 0, 0.69777],
    77: [0, 0.68611, 0.17208, 0, 1.07277],
    78: [0, 0.68611, 0.17208, 0, 0.8961],
    79: [0, 0.68611, 0.09062, 0, 0.85499],
    80: [0, 0.68611, 0.0992, 0, 0.78721],
    81: [0.19444, 0.68611, 0.09062, 0, 0.85499],
    82: [0, 0.68611, 0.02559, 0, 0.85944],
    83: [0, 0.68611, 0.11264, 0, 0.64999],
    84: [0, 0.68611, 0.12903, 0, 0.7961],
    85: [0, 0.68611, 0.17208, 0, 0.88083],
    86: [0, 0.68611, 0.18625, 0, 0.86555],
    87: [0, 0.68611, 0.18625, 0, 1.15999],
    88: [0, 0.68611, 0.15681, 0, 0.86555],
    89: [0, 0.68611, 0.19803, 0, 0.86555],
    90: [0, 0.68611, 0.14208, 0, 0.70888],
    91: [0.25, 0.75, 0.1875, 0, 0.35611],
    93: [0.25, 0.75, 0.09972, 0, 0.35611],
    94: [0, 0.69444, 0.06709, 0, 0.59111],
    95: [0.31, 0.13444, 0.09811, 0, 0.59111],
    97: [0, 0.44444, 0.09426, 0, 0.59111],
    98: [0, 0.69444, 0.07861, 0, 0.53222],
    99: [0, 0.44444, 0.05222, 0, 0.53222],
    100: [0, 0.69444, 0.10861, 0, 0.59111],
    101: [0, 0.44444, 0.085, 0, 0.53222],
    102: [0.19444, 0.69444, 0.21778, 0, 0.4],
    103: [0.19444, 0.44444, 0.105, 0, 0.53222],
    104: [0, 0.69444, 0.09426, 0, 0.59111],
    105: [0, 0.69326, 0.11387, 0, 0.35555],
    106: [0.19444, 0.69326, 0.1672, 0, 0.35555],
    107: [0, 0.69444, 0.11111, 0, 0.53222],
    108: [0, 0.69444, 0.10861, 0, 0.29666],
    109: [0, 0.44444, 0.09426, 0, 0.94444],
    110: [0, 0.44444, 0.09426, 0, 0.64999],
    111: [0, 0.44444, 0.07861, 0, 0.59111],
    112: [0.19444, 0.44444, 0.07861, 0, 0.59111],
    113: [0.19444, 0.44444, 0.105, 0, 0.53222],
    114: [0, 0.44444, 0.11111, 0, 0.50167],
    115: [0, 0.44444, 0.08167, 0, 0.48694],
    116: [0, 0.63492, 0.09639, 0, 0.385],
    117: [0, 0.44444, 0.09426, 0, 0.62055],
    118: [0, 0.44444, 0.11111, 0, 0.53222],
    119: [0, 0.44444, 0.11111, 0, 0.76777],
    120: [0, 0.44444, 0.12583, 0, 0.56055],
    121: [0.19444, 0.44444, 0.105, 0, 0.56166],
    122: [0, 0.44444, 0.13889, 0, 0.49055],
    126: [0.35, 0.34444, 0.11472, 0, 0.59111],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.69444, 0.11473, 0, 0.59111],
    176: [0, 0.69444, 0, 0, 0.94888],
    184: [0.17014, 0, 0, 0, 0.53222],
    198: [0, 0.68611, 0.11431, 0, 1.02277],
    216: [0.04861, 0.73472, 0.09062, 0, 0.88555],
    223: [0.19444, 0.69444, 0.09736, 0, 0.665],
    230: [0, 0.44444, 0.085, 0, 0.82666],
    248: [0.09722, 0.54167, 0.09458, 0, 0.59111],
    305: [0, 0.44444, 0.09426, 0, 0.35555],
    338: [0, 0.68611, 0.11431, 0, 1.14054],
    339: [0, 0.44444, 0.085, 0, 0.82666],
    567: [0.19444, 0.44444, 0.04611, 0, 0.385],
    710: [0, 0.69444, 0.06709, 0, 0.59111],
    711: [0, 0.63194, 0.08271, 0, 0.59111],
    713: [0, 0.59444, 0.10444, 0, 0.59111],
    714: [0, 0.69444, 0.08528, 0, 0.59111],
    715: [0, 0.69444, 0, 0, 0.59111],
    728: [0, 0.69444, 0.10333, 0, 0.59111],
    729: [0, 0.69444, 0.12945, 0, 0.35555],
    730: [0, 0.69444, 0, 0, 0.94888],
    732: [0, 0.69444, 0.11472, 0, 0.59111],
    733: [0, 0.69444, 0.11472, 0, 0.59111],
    915: [0, 0.68611, 0.12903, 0, 0.69777],
    916: [0, 0.68611, 0, 0, 0.94444],
    920: [0, 0.68611, 0.09062, 0, 0.88555],
    923: [0, 0.68611, 0, 0, 0.80666],
    926: [0, 0.68611, 0.15092, 0, 0.76777],
    928: [0, 0.68611, 0.17208, 0, 0.8961],
    931: [0, 0.68611, 0.11431, 0, 0.82666],
    933: [0, 0.68611, 0.10778, 0, 0.88555],
    934: [0, 0.68611, 0.05632, 0, 0.82666],
    936: [0, 0.68611, 0.10778, 0, 0.88555],
    937: [0, 0.68611, 0.0992, 0, 0.82666],
    8211: [0, 0.44444, 0.09811, 0, 0.59111],
    8212: [0, 0.44444, 0.09811, 0, 1.18221],
    8216: [0, 0.69444, 0.12945, 0, 0.35555],
    8217: [0, 0.69444, 0.12945, 0, 0.35555],
    8220: [0, 0.69444, 0.16772, 0, 0.62055],
    8221: [0, 0.69444, 0.07939, 0, 0.62055]
  },
  "Main-Italic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.12417, 0, 0.30667],
    34: [0, 0.69444, 0.06961, 0, 0.51444],
    35: [0.19444, 0.69444, 0.06616, 0, 0.81777],
    37: [0.05556, 0.75, 0.13639, 0, 0.81777],
    38: [0, 0.69444, 0.09694, 0, 0.76666],
    39: [0, 0.69444, 0.12417, 0, 0.30667],
    40: [0.25, 0.75, 0.16194, 0, 0.40889],
    41: [0.25, 0.75, 0.03694, 0, 0.40889],
    42: [0, 0.75, 0.14917, 0, 0.51111],
    43: [0.05667, 0.56167, 0.03694, 0, 0.76666],
    44: [0.19444, 0.10556, 0, 0, 0.30667],
    45: [0, 0.43056, 0.02826, 0, 0.35778],
    46: [0, 0.10556, 0, 0, 0.30667],
    47: [0.25, 0.75, 0.16194, 0, 0.51111],
    48: [0, 0.64444, 0.13556, 0, 0.51111],
    49: [0, 0.64444, 0.13556, 0, 0.51111],
    50: [0, 0.64444, 0.13556, 0, 0.51111],
    51: [0, 0.64444, 0.13556, 0, 0.51111],
    52: [0.19444, 0.64444, 0.13556, 0, 0.51111],
    53: [0, 0.64444, 0.13556, 0, 0.51111],
    54: [0, 0.64444, 0.13556, 0, 0.51111],
    55: [0.19444, 0.64444, 0.13556, 0, 0.51111],
    56: [0, 0.64444, 0.13556, 0, 0.51111],
    57: [0, 0.64444, 0.13556, 0, 0.51111],
    58: [0, 0.43056, 0.0582, 0, 0.30667],
    59: [0.19444, 0.43056, 0.0582, 0, 0.30667],
    61: [-0.13313, 0.36687, 0.06616, 0, 0.76666],
    63: [0, 0.69444, 0.1225, 0, 0.51111],
    64: [0, 0.69444, 0.09597, 0, 0.76666],
    65: [0, 0.68333, 0, 0, 0.74333],
    66: [0, 0.68333, 0.10257, 0, 0.70389],
    67: [0, 0.68333, 0.14528, 0, 0.71555],
    68: [0, 0.68333, 0.09403, 0, 0.755],
    69: [0, 0.68333, 0.12028, 0, 0.67833],
    70: [0, 0.68333, 0.13305, 0, 0.65277],
    71: [0, 0.68333, 0.08722, 0, 0.77361],
    72: [0, 0.68333, 0.16389, 0, 0.74333],
    73: [0, 0.68333, 0.15806, 0, 0.38555],
    74: [0, 0.68333, 0.14028, 0, 0.525],
    75: [0, 0.68333, 0.14528, 0, 0.76888],
    76: [0, 0.68333, 0, 0, 0.62722],
    77: [0, 0.68333, 0.16389, 0, 0.89666],
    78: [0, 0.68333, 0.16389, 0, 0.74333],
    79: [0, 0.68333, 0.09403, 0, 0.76666],
    80: [0, 0.68333, 0.10257, 0, 0.67833],
    81: [0.19444, 0.68333, 0.09403, 0, 0.76666],
    82: [0, 0.68333, 0.03868, 0, 0.72944],
    83: [0, 0.68333, 0.11972, 0, 0.56222],
    84: [0, 0.68333, 0.13305, 0, 0.71555],
    85: [0, 0.68333, 0.16389, 0, 0.74333],
    86: [0, 0.68333, 0.18361, 0, 0.74333],
    87: [0, 0.68333, 0.18361, 0, 0.99888],
    88: [0, 0.68333, 0.15806, 0, 0.74333],
    89: [0, 0.68333, 0.19383, 0, 0.74333],
    90: [0, 0.68333, 0.14528, 0, 0.61333],
    91: [0.25, 0.75, 0.1875, 0, 0.30667],
    93: [0.25, 0.75, 0.10528, 0, 0.30667],
    94: [0, 0.69444, 0.06646, 0, 0.51111],
    95: [0.31, 0.12056, 0.09208, 0, 0.51111],
    97: [0, 0.43056, 0.07671, 0, 0.51111],
    98: [0, 0.69444, 0.06312, 0, 0.46],
    99: [0, 0.43056, 0.05653, 0, 0.46],
    100: [0, 0.69444, 0.10333, 0, 0.51111],
    101: [0, 0.43056, 0.07514, 0, 0.46],
    102: [0.19444, 0.69444, 0.21194, 0, 0.30667],
    103: [0.19444, 0.43056, 0.08847, 0, 0.46],
    104: [0, 0.69444, 0.07671, 0, 0.51111],
    105: [0, 0.65536, 0.1019, 0, 0.30667],
    106: [0.19444, 0.65536, 0.14467, 0, 0.30667],
    107: [0, 0.69444, 0.10764, 0, 0.46],
    108: [0, 0.69444, 0.10333, 0, 0.25555],
    109: [0, 0.43056, 0.07671, 0, 0.81777],
    110: [0, 0.43056, 0.07671, 0, 0.56222],
    111: [0, 0.43056, 0.06312, 0, 0.51111],
    112: [0.19444, 0.43056, 0.06312, 0, 0.51111],
    113: [0.19444, 0.43056, 0.08847, 0, 0.46],
    114: [0, 0.43056, 0.10764, 0, 0.42166],
    115: [0, 0.43056, 0.08208, 0, 0.40889],
    116: [0, 0.61508, 0.09486, 0, 0.33222],
    117: [0, 0.43056, 0.07671, 0, 0.53666],
    118: [0, 0.43056, 0.10764, 0, 0.46],
    119: [0, 0.43056, 0.10764, 0, 0.66444],
    120: [0, 0.43056, 0.12042, 0, 0.46389],
    121: [0.19444, 0.43056, 0.08847, 0, 0.48555],
    122: [0, 0.43056, 0.12292, 0, 0.40889],
    126: [0.35, 0.31786, 0.11585, 0, 0.51111],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.66786, 0.10474, 0, 0.51111],
    176: [0, 0.69444, 0, 0, 0.83129],
    184: [0.17014, 0, 0, 0, 0.46],
    198: [0, 0.68333, 0.12028, 0, 0.88277],
    216: [0.04861, 0.73194, 0.09403, 0, 0.76666],
    223: [0.19444, 0.69444, 0.10514, 0, 0.53666],
    230: [0, 0.43056, 0.07514, 0, 0.71555],
    248: [0.09722, 0.52778, 0.09194, 0, 0.51111],
    338: [0, 0.68333, 0.12028, 0, 0.98499],
    339: [0, 0.43056, 0.07514, 0, 0.71555],
    710: [0, 0.69444, 0.06646, 0, 0.51111],
    711: [0, 0.62847, 0.08295, 0, 0.51111],
    713: [0, 0.56167, 0.10333, 0, 0.51111],
    714: [0, 0.69444, 0.09694, 0, 0.51111],
    715: [0, 0.69444, 0, 0, 0.51111],
    728: [0, 0.69444, 0.10806, 0, 0.51111],
    729: [0, 0.66786, 0.11752, 0, 0.30667],
    730: [0, 0.69444, 0, 0, 0.83129],
    732: [0, 0.66786, 0.11585, 0, 0.51111],
    733: [0, 0.69444, 0.1225, 0, 0.51111],
    915: [0, 0.68333, 0.13305, 0, 0.62722],
    916: [0, 0.68333, 0, 0, 0.81777],
    920: [0, 0.68333, 0.09403, 0, 0.76666],
    923: [0, 0.68333, 0, 0, 0.69222],
    926: [0, 0.68333, 0.15294, 0, 0.66444],
    928: [0, 0.68333, 0.16389, 0, 0.74333],
    931: [0, 0.68333, 0.12028, 0, 0.71555],
    933: [0, 0.68333, 0.11111, 0, 0.76666],
    934: [0, 0.68333, 0.05986, 0, 0.71555],
    936: [0, 0.68333, 0.11111, 0, 0.76666],
    937: [0, 0.68333, 0.10257, 0, 0.71555],
    8211: [0, 0.43056, 0.09208, 0, 0.51111],
    8212: [0, 0.43056, 0.09208, 0, 1.02222],
    8216: [0, 0.69444, 0.12417, 0, 0.30667],
    8217: [0, 0.69444, 0.12417, 0, 0.30667],
    8220: [0, 0.69444, 0.1685, 0, 0.51444],
    8221: [0, 0.69444, 0.06961, 0, 0.51444],
    8463: [0, 0.68889, 0, 0, 0.54028]
  },
  "Main-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.27778],
    34: [0, 0.69444, 0, 0, 0.5],
    35: [0.19444, 0.69444, 0, 0, 0.83334],
    36: [0.05556, 0.75, 0, 0, 0.5],
    37: [0.05556, 0.75, 0, 0, 0.83334],
    38: [0, 0.69444, 0, 0, 0.77778],
    39: [0, 0.69444, 0, 0, 0.27778],
    40: [0.25, 0.75, 0, 0, 0.38889],
    41: [0.25, 0.75, 0, 0, 0.38889],
    42: [0, 0.75, 0, 0, 0.5],
    43: [0.08333, 0.58333, 0, 0, 0.77778],
    44: [0.19444, 0.10556, 0, 0, 0.27778],
    45: [0, 0.43056, 0, 0, 0.33333],
    46: [0, 0.10556, 0, 0, 0.27778],
    47: [0.25, 0.75, 0, 0, 0.5],
    48: [0, 0.64444, 0, 0, 0.5],
    49: [0, 0.64444, 0, 0, 0.5],
    50: [0, 0.64444, 0, 0, 0.5],
    51: [0, 0.64444, 0, 0, 0.5],
    52: [0, 0.64444, 0, 0, 0.5],
    53: [0, 0.64444, 0, 0, 0.5],
    54: [0, 0.64444, 0, 0, 0.5],
    55: [0, 0.64444, 0, 0, 0.5],
    56: [0, 0.64444, 0, 0, 0.5],
    57: [0, 0.64444, 0, 0, 0.5],
    58: [0, 0.43056, 0, 0, 0.27778],
    59: [0.19444, 0.43056, 0, 0, 0.27778],
    60: [0.0391, 0.5391, 0, 0, 0.77778],
    61: [-0.13313, 0.36687, 0, 0, 0.77778],
    62: [0.0391, 0.5391, 0, 0, 0.77778],
    63: [0, 0.69444, 0, 0, 0.47222],
    64: [0, 0.69444, 0, 0, 0.77778],
    65: [0, 0.68333, 0, 0, 0.75],
    66: [0, 0.68333, 0, 0, 0.70834],
    67: [0, 0.68333, 0, 0, 0.72222],
    68: [0, 0.68333, 0, 0, 0.76389],
    69: [0, 0.68333, 0, 0, 0.68056],
    70: [0, 0.68333, 0, 0, 0.65278],
    71: [0, 0.68333, 0, 0, 0.78472],
    72: [0, 0.68333, 0, 0, 0.75],
    73: [0, 0.68333, 0, 0, 0.36111],
    74: [0, 0.68333, 0, 0, 0.51389],
    75: [0, 0.68333, 0, 0, 0.77778],
    76: [0, 0.68333, 0, 0, 0.625],
    77: [0, 0.68333, 0, 0, 0.91667],
    78: [0, 0.68333, 0, 0, 0.75],
    79: [0, 0.68333, 0, 0, 0.77778],
    80: [0, 0.68333, 0, 0, 0.68056],
    81: [0.19444, 0.68333, 0, 0, 0.77778],
    82: [0, 0.68333, 0, 0, 0.73611],
    83: [0, 0.68333, 0, 0, 0.55556],
    84: [0, 0.68333, 0, 0, 0.72222],
    85: [0, 0.68333, 0, 0, 0.75],
    86: [0, 0.68333, 0.01389, 0, 0.75],
    87: [0, 0.68333, 0.01389, 0, 1.02778],
    88: [0, 0.68333, 0, 0, 0.75],
    89: [0, 0.68333, 0.025, 0, 0.75],
    90: [0, 0.68333, 0, 0, 0.61111],
    91: [0.25, 0.75, 0, 0, 0.27778],
    92: [0.25, 0.75, 0, 0, 0.5],
    93: [0.25, 0.75, 0, 0, 0.27778],
    94: [0, 0.69444, 0, 0, 0.5],
    95: [0.31, 0.12056, 0.02778, 0, 0.5],
    97: [0, 0.43056, 0, 0, 0.5],
    98: [0, 0.69444, 0, 0, 0.55556],
    99: [0, 0.43056, 0, 0, 0.44445],
    100: [0, 0.69444, 0, 0, 0.55556],
    101: [0, 0.43056, 0, 0, 0.44445],
    102: [0, 0.69444, 0.07778, 0, 0.30556],
    103: [0.19444, 0.43056, 0.01389, 0, 0.5],
    104: [0, 0.69444, 0, 0, 0.55556],
    105: [0, 0.66786, 0, 0, 0.27778],
    106: [0.19444, 0.66786, 0, 0, 0.30556],
    107: [0, 0.69444, 0, 0, 0.52778],
    108: [0, 0.69444, 0, 0, 0.27778],
    109: [0, 0.43056, 0, 0, 0.83334],
    110: [0, 0.43056, 0, 0, 0.55556],
    111: [0, 0.43056, 0, 0, 0.5],
    112: [0.19444, 0.43056, 0, 0, 0.55556],
    113: [0.19444, 0.43056, 0, 0, 0.52778],
    114: [0, 0.43056, 0, 0, 0.39167],
    115: [0, 0.43056, 0, 0, 0.39445],
    116: [0, 0.61508, 0, 0, 0.38889],
    117: [0, 0.43056, 0, 0, 0.55556],
    118: [0, 0.43056, 0.01389, 0, 0.52778],
    119: [0, 0.43056, 0.01389, 0, 0.72222],
    120: [0, 0.43056, 0, 0, 0.52778],
    121: [0.19444, 0.43056, 0.01389, 0, 0.52778],
    122: [0, 0.43056, 0, 0, 0.44445],
    123: [0.25, 0.75, 0, 0, 0.5],
    124: [0.25, 0.75, 0, 0, 0.27778],
    125: [0.25, 0.75, 0, 0, 0.5],
    126: [0.35, 0.31786, 0, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    163: [0, 0.69444, 0, 0, 0.76909],
    167: [0.19444, 0.69444, 0, 0, 0.44445],
    168: [0, 0.66786, 0, 0, 0.5],
    172: [0, 0.43056, 0, 0, 0.66667],
    176: [0, 0.69444, 0, 0, 0.75],
    177: [0.08333, 0.58333, 0, 0, 0.77778],
    182: [0.19444, 0.69444, 0, 0, 0.61111],
    184: [0.17014, 0, 0, 0, 0.44445],
    198: [0, 0.68333, 0, 0, 0.90278],
    215: [0.08333, 0.58333, 0, 0, 0.77778],
    216: [0.04861, 0.73194, 0, 0, 0.77778],
    223: [0, 0.69444, 0, 0, 0.5],
    230: [0, 0.43056, 0, 0, 0.72222],
    247: [0.08333, 0.58333, 0, 0, 0.77778],
    248: [0.09722, 0.52778, 0, 0, 0.5],
    305: [0, 0.43056, 0, 0, 0.27778],
    338: [0, 0.68333, 0, 0, 1.01389],
    339: [0, 0.43056, 0, 0, 0.77778],
    567: [0.19444, 0.43056, 0, 0, 0.30556],
    710: [0, 0.69444, 0, 0, 0.5],
    711: [0, 0.62847, 0, 0, 0.5],
    713: [0, 0.56778, 0, 0, 0.5],
    714: [0, 0.69444, 0, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0, 0, 0.5],
    729: [0, 0.66786, 0, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.75],
    732: [0, 0.66786, 0, 0, 0.5],
    733: [0, 0.69444, 0, 0, 0.5],
    915: [0, 0.68333, 0, 0, 0.625],
    916: [0, 0.68333, 0, 0, 0.83334],
    920: [0, 0.68333, 0, 0, 0.77778],
    923: [0, 0.68333, 0, 0, 0.69445],
    926: [0, 0.68333, 0, 0, 0.66667],
    928: [0, 0.68333, 0, 0, 0.75],
    931: [0, 0.68333, 0, 0, 0.72222],
    933: [0, 0.68333, 0, 0, 0.77778],
    934: [0, 0.68333, 0, 0, 0.72222],
    936: [0, 0.68333, 0, 0, 0.77778],
    937: [0, 0.68333, 0, 0, 0.72222],
    8211: [0, 0.43056, 0.02778, 0, 0.5],
    8212: [0, 0.43056, 0.02778, 0, 1],
    8216: [0, 0.69444, 0, 0, 0.27778],
    8217: [0, 0.69444, 0, 0, 0.27778],
    8220: [0, 0.69444, 0, 0, 0.5],
    8221: [0, 0.69444, 0, 0, 0.5],
    8224: [0.19444, 0.69444, 0, 0, 0.44445],
    8225: [0.19444, 0.69444, 0, 0, 0.44445],
    8230: [0, 0.123, 0, 0, 1.172],
    8242: [0, 0.55556, 0, 0, 0.275],
    8407: [0, 0.71444, 0.15382, 0, 0.5],
    8463: [0, 0.68889, 0, 0, 0.54028],
    8465: [0, 0.69444, 0, 0, 0.72222],
    8467: [0, 0.69444, 0, 0.11111, 0.41667],
    8472: [0.19444, 0.43056, 0, 0.11111, 0.63646],
    8476: [0, 0.69444, 0, 0, 0.72222],
    8501: [0, 0.69444, 0, 0, 0.61111],
    8592: [-0.13313, 0.36687, 0, 0, 1],
    8593: [0.19444, 0.69444, 0, 0, 0.5],
    8594: [-0.13313, 0.36687, 0, 0, 1],
    8595: [0.19444, 0.69444, 0, 0, 0.5],
    8596: [-0.13313, 0.36687, 0, 0, 1],
    8597: [0.25, 0.75, 0, 0, 0.5],
    8598: [0.19444, 0.69444, 0, 0, 1],
    8599: [0.19444, 0.69444, 0, 0, 1],
    8600: [0.19444, 0.69444, 0, 0, 1],
    8601: [0.19444, 0.69444, 0, 0, 1],
    8614: [0.011, 0.511, 0, 0, 1],
    8617: [0.011, 0.511, 0, 0, 1.126],
    8618: [0.011, 0.511, 0, 0, 1.126],
    8636: [-0.13313, 0.36687, 0, 0, 1],
    8637: [-0.13313, 0.36687, 0, 0, 1],
    8640: [-0.13313, 0.36687, 0, 0, 1],
    8641: [-0.13313, 0.36687, 0, 0, 1],
    8652: [0.011, 0.671, 0, 0, 1],
    8656: [-0.13313, 0.36687, 0, 0, 1],
    8657: [0.19444, 0.69444, 0, 0, 0.61111],
    8658: [-0.13313, 0.36687, 0, 0, 1],
    8659: [0.19444, 0.69444, 0, 0, 0.61111],
    8660: [-0.13313, 0.36687, 0, 0, 1],
    8661: [0.25, 0.75, 0, 0, 0.61111],
    8704: [0, 0.69444, 0, 0, 0.55556],
    8706: [0, 0.69444, 0.05556, 0.08334, 0.5309],
    8707: [0, 0.69444, 0, 0, 0.55556],
    8709: [0.05556, 0.75, 0, 0, 0.5],
    8711: [0, 0.68333, 0, 0, 0.83334],
    8712: [0.0391, 0.5391, 0, 0, 0.66667],
    8715: [0.0391, 0.5391, 0, 0, 0.66667],
    8722: [0.08333, 0.58333, 0, 0, 0.77778],
    8723: [0.08333, 0.58333, 0, 0, 0.77778],
    8725: [0.25, 0.75, 0, 0, 0.5],
    8726: [0.25, 0.75, 0, 0, 0.5],
    8727: [-0.03472, 0.46528, 0, 0, 0.5],
    8728: [-0.05555, 0.44445, 0, 0, 0.5],
    8729: [-0.05555, 0.44445, 0, 0, 0.5],
    8730: [0.2, 0.8, 0, 0, 0.83334],
    8733: [0, 0.43056, 0, 0, 0.77778],
    8734: [0, 0.43056, 0, 0, 1],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8739: [0.25, 0.75, 0, 0, 0.27778],
    8741: [0.25, 0.75, 0, 0, 0.5],
    8743: [0, 0.55556, 0, 0, 0.66667],
    8744: [0, 0.55556, 0, 0, 0.66667],
    8745: [0, 0.55556, 0, 0, 0.66667],
    8746: [0, 0.55556, 0, 0, 0.66667],
    8747: [0.19444, 0.69444, 0.11111, 0, 0.41667],
    8764: [-0.13313, 0.36687, 0, 0, 0.77778],
    8768: [0.19444, 0.69444, 0, 0, 0.27778],
    8771: [-0.03625, 0.46375, 0, 0, 0.77778],
    8773: [-0.022, 0.589, 0, 0, 0.778],
    8776: [-0.01688, 0.48312, 0, 0, 0.77778],
    8781: [-0.03625, 0.46375, 0, 0, 0.77778],
    8784: [-0.133, 0.673, 0, 0, 0.778],
    8801: [-0.03625, 0.46375, 0, 0, 0.77778],
    8804: [0.13597, 0.63597, 0, 0, 0.77778],
    8805: [0.13597, 0.63597, 0, 0, 0.77778],
    8810: [0.0391, 0.5391, 0, 0, 1],
    8811: [0.0391, 0.5391, 0, 0, 1],
    8826: [0.0391, 0.5391, 0, 0, 0.77778],
    8827: [0.0391, 0.5391, 0, 0, 0.77778],
    8834: [0.0391, 0.5391, 0, 0, 0.77778],
    8835: [0.0391, 0.5391, 0, 0, 0.77778],
    8838: [0.13597, 0.63597, 0, 0, 0.77778],
    8839: [0.13597, 0.63597, 0, 0, 0.77778],
    8846: [0, 0.55556, 0, 0, 0.66667],
    8849: [0.13597, 0.63597, 0, 0, 0.77778],
    8850: [0.13597, 0.63597, 0, 0, 0.77778],
    8851: [0, 0.55556, 0, 0, 0.66667],
    8852: [0, 0.55556, 0, 0, 0.66667],
    8853: [0.08333, 0.58333, 0, 0, 0.77778],
    8854: [0.08333, 0.58333, 0, 0, 0.77778],
    8855: [0.08333, 0.58333, 0, 0, 0.77778],
    8856: [0.08333, 0.58333, 0, 0, 0.77778],
    8857: [0.08333, 0.58333, 0, 0, 0.77778],
    8866: [0, 0.69444, 0, 0, 0.61111],
    8867: [0, 0.69444, 0, 0, 0.61111],
    8868: [0, 0.69444, 0, 0, 0.77778],
    8869: [0, 0.69444, 0, 0, 0.77778],
    8872: [0.249, 0.75, 0, 0, 0.867],
    8900: [-0.05555, 0.44445, 0, 0, 0.5],
    8901: [-0.05555, 0.44445, 0, 0, 0.27778],
    8902: [-0.03472, 0.46528, 0, 0, 0.5],
    8904: [5e-3, 0.505, 0, 0, 0.9],
    8942: [0.03, 0.903, 0, 0, 0.278],
    8943: [-0.19, 0.313, 0, 0, 1.172],
    8945: [-0.1, 0.823, 0, 0, 1.282],
    8968: [0.25, 0.75, 0, 0, 0.44445],
    8969: [0.25, 0.75, 0, 0, 0.44445],
    8970: [0.25, 0.75, 0, 0, 0.44445],
    8971: [0.25, 0.75, 0, 0, 0.44445],
    8994: [-0.14236, 0.35764, 0, 0, 1],
    8995: [-0.14236, 0.35764, 0, 0, 1],
    9136: [0.244, 0.744, 0, 0, 0.412],
    9137: [0.244, 0.745, 0, 0, 0.412],
    9651: [0.19444, 0.69444, 0, 0, 0.88889],
    9657: [-0.03472, 0.46528, 0, 0, 0.5],
    9661: [0.19444, 0.69444, 0, 0, 0.88889],
    9667: [-0.03472, 0.46528, 0, 0, 0.5],
    9711: [0.19444, 0.69444, 0, 0, 1],
    9824: [0.12963, 0.69444, 0, 0, 0.77778],
    9825: [0.12963, 0.69444, 0, 0, 0.77778],
    9826: [0.12963, 0.69444, 0, 0, 0.77778],
    9827: [0.12963, 0.69444, 0, 0, 0.77778],
    9837: [0, 0.75, 0, 0, 0.38889],
    9838: [0.19444, 0.69444, 0, 0, 0.38889],
    9839: [0.19444, 0.69444, 0, 0, 0.38889],
    10216: [0.25, 0.75, 0, 0, 0.38889],
    10217: [0.25, 0.75, 0, 0, 0.38889],
    10222: [0.244, 0.744, 0, 0, 0.412],
    10223: [0.244, 0.745, 0, 0, 0.412],
    10229: [0.011, 0.511, 0, 0, 1.609],
    10230: [0.011, 0.511, 0, 0, 1.638],
    10231: [0.011, 0.511, 0, 0, 1.859],
    10232: [0.024, 0.525, 0, 0, 1.609],
    10233: [0.024, 0.525, 0, 0, 1.638],
    10234: [0.024, 0.525, 0, 0, 1.858],
    10236: [0.011, 0.511, 0, 0, 1.638],
    10815: [0, 0.68333, 0, 0, 0.75],
    10927: [0.13597, 0.63597, 0, 0, 0.77778],
    10928: [0.13597, 0.63597, 0, 0, 0.77778],
    57376: [0.19444, 0.69444, 0, 0, 0]
  },
  "Math-BoldItalic": {
    32: [0, 0, 0, 0, 0.25],
    48: [0, 0.44444, 0, 0, 0.575],
    49: [0, 0.44444, 0, 0, 0.575],
    50: [0, 0.44444, 0, 0, 0.575],
    51: [0.19444, 0.44444, 0, 0, 0.575],
    52: [0.19444, 0.44444, 0, 0, 0.575],
    53: [0.19444, 0.44444, 0, 0, 0.575],
    54: [0, 0.64444, 0, 0, 0.575],
    55: [0.19444, 0.44444, 0, 0, 0.575],
    56: [0, 0.64444, 0, 0, 0.575],
    57: [0.19444, 0.44444, 0, 0, 0.575],
    65: [0, 0.68611, 0, 0, 0.86944],
    66: [0, 0.68611, 0.04835, 0, 0.8664],
    67: [0, 0.68611, 0.06979, 0, 0.81694],
    68: [0, 0.68611, 0.03194, 0, 0.93812],
    69: [0, 0.68611, 0.05451, 0, 0.81007],
    70: [0, 0.68611, 0.15972, 0, 0.68889],
    71: [0, 0.68611, 0, 0, 0.88673],
    72: [0, 0.68611, 0.08229, 0, 0.98229],
    73: [0, 0.68611, 0.07778, 0, 0.51111],
    74: [0, 0.68611, 0.10069, 0, 0.63125],
    75: [0, 0.68611, 0.06979, 0, 0.97118],
    76: [0, 0.68611, 0, 0, 0.75555],
    77: [0, 0.68611, 0.11424, 0, 1.14201],
    78: [0, 0.68611, 0.11424, 0, 0.95034],
    79: [0, 0.68611, 0.03194, 0, 0.83666],
    80: [0, 0.68611, 0.15972, 0, 0.72309],
    81: [0.19444, 0.68611, 0, 0, 0.86861],
    82: [0, 0.68611, 421e-5, 0, 0.87235],
    83: [0, 0.68611, 0.05382, 0, 0.69271],
    84: [0, 0.68611, 0.15972, 0, 0.63663],
    85: [0, 0.68611, 0.11424, 0, 0.80027],
    86: [0, 0.68611, 0.25555, 0, 0.67778],
    87: [0, 0.68611, 0.15972, 0, 1.09305],
    88: [0, 0.68611, 0.07778, 0, 0.94722],
    89: [0, 0.68611, 0.25555, 0, 0.67458],
    90: [0, 0.68611, 0.06979, 0, 0.77257],
    97: [0, 0.44444, 0, 0, 0.63287],
    98: [0, 0.69444, 0, 0, 0.52083],
    99: [0, 0.44444, 0, 0, 0.51342],
    100: [0, 0.69444, 0, 0, 0.60972],
    101: [0, 0.44444, 0, 0, 0.55361],
    102: [0.19444, 0.69444, 0.11042, 0, 0.56806],
    103: [0.19444, 0.44444, 0.03704, 0, 0.5449],
    104: [0, 0.69444, 0, 0, 0.66759],
    105: [0, 0.69326, 0, 0, 0.4048],
    106: [0.19444, 0.69326, 0.0622, 0, 0.47083],
    107: [0, 0.69444, 0.01852, 0, 0.6037],
    108: [0, 0.69444, 88e-4, 0, 0.34815],
    109: [0, 0.44444, 0, 0, 1.0324],
    110: [0, 0.44444, 0, 0, 0.71296],
    111: [0, 0.44444, 0, 0, 0.58472],
    112: [0.19444, 0.44444, 0, 0, 0.60092],
    113: [0.19444, 0.44444, 0.03704, 0, 0.54213],
    114: [0, 0.44444, 0.03194, 0, 0.5287],
    115: [0, 0.44444, 0, 0, 0.53125],
    116: [0, 0.63492, 0, 0, 0.41528],
    117: [0, 0.44444, 0, 0, 0.68102],
    118: [0, 0.44444, 0.03704, 0, 0.56666],
    119: [0, 0.44444, 0.02778, 0, 0.83148],
    120: [0, 0.44444, 0, 0, 0.65903],
    121: [0.19444, 0.44444, 0.03704, 0, 0.59028],
    122: [0, 0.44444, 0.04213, 0, 0.55509],
    160: [0, 0, 0, 0, 0.25],
    915: [0, 0.68611, 0.15972, 0, 0.65694],
    916: [0, 0.68611, 0, 0, 0.95833],
    920: [0, 0.68611, 0.03194, 0, 0.86722],
    923: [0, 0.68611, 0, 0, 0.80555],
    926: [0, 0.68611, 0.07458, 0, 0.84125],
    928: [0, 0.68611, 0.08229, 0, 0.98229],
    931: [0, 0.68611, 0.05451, 0, 0.88507],
    933: [0, 0.68611, 0.15972, 0, 0.67083],
    934: [0, 0.68611, 0, 0, 0.76666],
    936: [0, 0.68611, 0.11653, 0, 0.71402],
    937: [0, 0.68611, 0.04835, 0, 0.8789],
    945: [0, 0.44444, 0, 0, 0.76064],
    946: [0.19444, 0.69444, 0.03403, 0, 0.65972],
    947: [0.19444, 0.44444, 0.06389, 0, 0.59003],
    948: [0, 0.69444, 0.03819, 0, 0.52222],
    949: [0, 0.44444, 0, 0, 0.52882],
    950: [0.19444, 0.69444, 0.06215, 0, 0.50833],
    951: [0.19444, 0.44444, 0.03704, 0, 0.6],
    952: [0, 0.69444, 0.03194, 0, 0.5618],
    953: [0, 0.44444, 0, 0, 0.41204],
    954: [0, 0.44444, 0, 0, 0.66759],
    955: [0, 0.69444, 0, 0, 0.67083],
    956: [0.19444, 0.44444, 0, 0, 0.70787],
    957: [0, 0.44444, 0.06898, 0, 0.57685],
    958: [0.19444, 0.69444, 0.03021, 0, 0.50833],
    959: [0, 0.44444, 0, 0, 0.58472],
    960: [0, 0.44444, 0.03704, 0, 0.68241],
    961: [0.19444, 0.44444, 0, 0, 0.6118],
    962: [0.09722, 0.44444, 0.07917, 0, 0.42361],
    963: [0, 0.44444, 0.03704, 0, 0.68588],
    964: [0, 0.44444, 0.13472, 0, 0.52083],
    965: [0, 0.44444, 0.03704, 0, 0.63055],
    966: [0.19444, 0.44444, 0, 0, 0.74722],
    967: [0.19444, 0.44444, 0, 0, 0.71805],
    968: [0.19444, 0.69444, 0.03704, 0, 0.75833],
    969: [0, 0.44444, 0.03704, 0, 0.71782],
    977: [0, 0.69444, 0, 0, 0.69155],
    981: [0.19444, 0.69444, 0, 0, 0.7125],
    982: [0, 0.44444, 0.03194, 0, 0.975],
    1009: [0.19444, 0.44444, 0, 0, 0.6118],
    1013: [0, 0.44444, 0, 0, 0.48333],
    57649: [0, 0.44444, 0, 0, 0.39352],
    57911: [0.19444, 0.44444, 0, 0, 0.43889]
  },
  "Math-Italic": {
    32: [0, 0, 0, 0, 0.25],
    48: [0, 0.43056, 0, 0, 0.5],
    49: [0, 0.43056, 0, 0, 0.5],
    50: [0, 0.43056, 0, 0, 0.5],
    51: [0.19444, 0.43056, 0, 0, 0.5],
    52: [0.19444, 0.43056, 0, 0, 0.5],
    53: [0.19444, 0.43056, 0, 0, 0.5],
    54: [0, 0.64444, 0, 0, 0.5],
    55: [0.19444, 0.43056, 0, 0, 0.5],
    56: [0, 0.64444, 0, 0, 0.5],
    57: [0.19444, 0.43056, 0, 0, 0.5],
    65: [0, 0.68333, 0, 0.13889, 0.75],
    66: [0, 0.68333, 0.05017, 0.08334, 0.75851],
    67: [0, 0.68333, 0.07153, 0.08334, 0.71472],
    68: [0, 0.68333, 0.02778, 0.05556, 0.82792],
    69: [0, 0.68333, 0.05764, 0.08334, 0.7382],
    70: [0, 0.68333, 0.13889, 0.08334, 0.64306],
    71: [0, 0.68333, 0, 0.08334, 0.78625],
    72: [0, 0.68333, 0.08125, 0.05556, 0.83125],
    73: [0, 0.68333, 0.07847, 0.11111, 0.43958],
    74: [0, 0.68333, 0.09618, 0.16667, 0.55451],
    75: [0, 0.68333, 0.07153, 0.05556, 0.84931],
    76: [0, 0.68333, 0, 0.02778, 0.68056],
    77: [0, 0.68333, 0.10903, 0.08334, 0.97014],
    78: [0, 0.68333, 0.10903, 0.08334, 0.80347],
    79: [0, 0.68333, 0.02778, 0.08334, 0.76278],
    80: [0, 0.68333, 0.13889, 0.08334, 0.64201],
    81: [0.19444, 0.68333, 0, 0.08334, 0.79056],
    82: [0, 0.68333, 773e-5, 0.08334, 0.75929],
    83: [0, 0.68333, 0.05764, 0.08334, 0.6132],
    84: [0, 0.68333, 0.13889, 0.08334, 0.58438],
    85: [0, 0.68333, 0.10903, 0.02778, 0.68278],
    86: [0, 0.68333, 0.22222, 0, 0.58333],
    87: [0, 0.68333, 0.13889, 0, 0.94445],
    88: [0, 0.68333, 0.07847, 0.08334, 0.82847],
    89: [0, 0.68333, 0.22222, 0, 0.58056],
    90: [0, 0.68333, 0.07153, 0.08334, 0.68264],
    97: [0, 0.43056, 0, 0, 0.52859],
    98: [0, 0.69444, 0, 0, 0.42917],
    99: [0, 0.43056, 0, 0.05556, 0.43276],
    100: [0, 0.69444, 0, 0.16667, 0.52049],
    101: [0, 0.43056, 0, 0.05556, 0.46563],
    102: [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
    103: [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
    104: [0, 0.69444, 0, 0, 0.57616],
    105: [0, 0.65952, 0, 0, 0.34451],
    106: [0.19444, 0.65952, 0.05724, 0, 0.41181],
    107: [0, 0.69444, 0.03148, 0, 0.5206],
    108: [0, 0.69444, 0.01968, 0.08334, 0.29838],
    109: [0, 0.43056, 0, 0, 0.87801],
    110: [0, 0.43056, 0, 0, 0.60023],
    111: [0, 0.43056, 0, 0.05556, 0.48472],
    112: [0.19444, 0.43056, 0, 0.08334, 0.50313],
    113: [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
    114: [0, 0.43056, 0.02778, 0.05556, 0.45116],
    115: [0, 0.43056, 0, 0.05556, 0.46875],
    116: [0, 0.61508, 0, 0.08334, 0.36111],
    117: [0, 0.43056, 0, 0.02778, 0.57246],
    118: [0, 0.43056, 0.03588, 0.02778, 0.48472],
    119: [0, 0.43056, 0.02691, 0.08334, 0.71592],
    120: [0, 0.43056, 0, 0.02778, 0.57153],
    121: [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
    122: [0, 0.43056, 0.04398, 0.05556, 0.46505],
    160: [0, 0, 0, 0, 0.25],
    915: [0, 0.68333, 0.13889, 0.08334, 0.61528],
    916: [0, 0.68333, 0, 0.16667, 0.83334],
    920: [0, 0.68333, 0.02778, 0.08334, 0.76278],
    923: [0, 0.68333, 0, 0.16667, 0.69445],
    926: [0, 0.68333, 0.07569, 0.08334, 0.74236],
    928: [0, 0.68333, 0.08125, 0.05556, 0.83125],
    931: [0, 0.68333, 0.05764, 0.08334, 0.77986],
    933: [0, 0.68333, 0.13889, 0.05556, 0.58333],
    934: [0, 0.68333, 0, 0.08334, 0.66667],
    936: [0, 0.68333, 0.11, 0.05556, 0.61222],
    937: [0, 0.68333, 0.05017, 0.08334, 0.7724],
    945: [0, 0.43056, 37e-4, 0.02778, 0.6397],
    946: [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
    947: [0.19444, 0.43056, 0.05556, 0, 0.51773],
    948: [0, 0.69444, 0.03785, 0.05556, 0.44444],
    949: [0, 0.43056, 0, 0.08334, 0.46632],
    950: [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
    951: [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
    952: [0, 0.69444, 0.02778, 0.08334, 0.46944],
    953: [0, 0.43056, 0, 0.05556, 0.35394],
    954: [0, 0.43056, 0, 0, 0.57616],
    955: [0, 0.69444, 0, 0, 0.58334],
    956: [0.19444, 0.43056, 0, 0.02778, 0.60255],
    957: [0, 0.43056, 0.06366, 0.02778, 0.49398],
    958: [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
    959: [0, 0.43056, 0, 0.05556, 0.48472],
    960: [0, 0.43056, 0.03588, 0, 0.57003],
    961: [0.19444, 0.43056, 0, 0.08334, 0.51702],
    962: [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
    963: [0, 0.43056, 0.03588, 0, 0.57141],
    964: [0, 0.43056, 0.1132, 0.02778, 0.43715],
    965: [0, 0.43056, 0.03588, 0.02778, 0.54028],
    966: [0.19444, 0.43056, 0, 0.08334, 0.65417],
    967: [0.19444, 0.43056, 0, 0.05556, 0.62569],
    968: [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
    969: [0, 0.43056, 0.03588, 0, 0.62245],
    977: [0, 0.69444, 0, 0.08334, 0.59144],
    981: [0.19444, 0.69444, 0, 0.08334, 0.59583],
    982: [0, 0.43056, 0.02778, 0, 0.82813],
    1009: [0.19444, 0.43056, 0, 0.08334, 0.51702],
    1013: [0, 0.43056, 0, 0.05556, 0.4059],
    57649: [0, 0.43056, 0, 0.02778, 0.32246],
    57911: [0.19444, 0.43056, 0, 0.08334, 0.38403]
  },
  "SansSerif-Bold": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.36667],
    34: [0, 0.69444, 0, 0, 0.55834],
    35: [0.19444, 0.69444, 0, 0, 0.91667],
    36: [0.05556, 0.75, 0, 0, 0.55],
    37: [0.05556, 0.75, 0, 0, 1.02912],
    38: [0, 0.69444, 0, 0, 0.83056],
    39: [0, 0.69444, 0, 0, 0.30556],
    40: [0.25, 0.75, 0, 0, 0.42778],
    41: [0.25, 0.75, 0, 0, 0.42778],
    42: [0, 0.75, 0, 0, 0.55],
    43: [0.11667, 0.61667, 0, 0, 0.85556],
    44: [0.10556, 0.13056, 0, 0, 0.30556],
    45: [0, 0.45833, 0, 0, 0.36667],
    46: [0, 0.13056, 0, 0, 0.30556],
    47: [0.25, 0.75, 0, 0, 0.55],
    48: [0, 0.69444, 0, 0, 0.55],
    49: [0, 0.69444, 0, 0, 0.55],
    50: [0, 0.69444, 0, 0, 0.55],
    51: [0, 0.69444, 0, 0, 0.55],
    52: [0, 0.69444, 0, 0, 0.55],
    53: [0, 0.69444, 0, 0, 0.55],
    54: [0, 0.69444, 0, 0, 0.55],
    55: [0, 0.69444, 0, 0, 0.55],
    56: [0, 0.69444, 0, 0, 0.55],
    57: [0, 0.69444, 0, 0, 0.55],
    58: [0, 0.45833, 0, 0, 0.30556],
    59: [0.10556, 0.45833, 0, 0, 0.30556],
    61: [-0.09375, 0.40625, 0, 0, 0.85556],
    63: [0, 0.69444, 0, 0, 0.51945],
    64: [0, 0.69444, 0, 0, 0.73334],
    65: [0, 0.69444, 0, 0, 0.73334],
    66: [0, 0.69444, 0, 0, 0.73334],
    67: [0, 0.69444, 0, 0, 0.70278],
    68: [0, 0.69444, 0, 0, 0.79445],
    69: [0, 0.69444, 0, 0, 0.64167],
    70: [0, 0.69444, 0, 0, 0.61111],
    71: [0, 0.69444, 0, 0, 0.73334],
    72: [0, 0.69444, 0, 0, 0.79445],
    73: [0, 0.69444, 0, 0, 0.33056],
    74: [0, 0.69444, 0, 0, 0.51945],
    75: [0, 0.69444, 0, 0, 0.76389],
    76: [0, 0.69444, 0, 0, 0.58056],
    77: [0, 0.69444, 0, 0, 0.97778],
    78: [0, 0.69444, 0, 0, 0.79445],
    79: [0, 0.69444, 0, 0, 0.79445],
    80: [0, 0.69444, 0, 0, 0.70278],
    81: [0.10556, 0.69444, 0, 0, 0.79445],
    82: [0, 0.69444, 0, 0, 0.70278],
    83: [0, 0.69444, 0, 0, 0.61111],
    84: [0, 0.69444, 0, 0, 0.73334],
    85: [0, 0.69444, 0, 0, 0.76389],
    86: [0, 0.69444, 0.01528, 0, 0.73334],
    87: [0, 0.69444, 0.01528, 0, 1.03889],
    88: [0, 0.69444, 0, 0, 0.73334],
    89: [0, 0.69444, 0.0275, 0, 0.73334],
    90: [0, 0.69444, 0, 0, 0.67223],
    91: [0.25, 0.75, 0, 0, 0.34306],
    93: [0.25, 0.75, 0, 0, 0.34306],
    94: [0, 0.69444, 0, 0, 0.55],
    95: [0.35, 0.10833, 0.03056, 0, 0.55],
    97: [0, 0.45833, 0, 0, 0.525],
    98: [0, 0.69444, 0, 0, 0.56111],
    99: [0, 0.45833, 0, 0, 0.48889],
    100: [0, 0.69444, 0, 0, 0.56111],
    101: [0, 0.45833, 0, 0, 0.51111],
    102: [0, 0.69444, 0.07639, 0, 0.33611],
    103: [0.19444, 0.45833, 0.01528, 0, 0.55],
    104: [0, 0.69444, 0, 0, 0.56111],
    105: [0, 0.69444, 0, 0, 0.25556],
    106: [0.19444, 0.69444, 0, 0, 0.28611],
    107: [0, 0.69444, 0, 0, 0.53056],
    108: [0, 0.69444, 0, 0, 0.25556],
    109: [0, 0.45833, 0, 0, 0.86667],
    110: [0, 0.45833, 0, 0, 0.56111],
    111: [0, 0.45833, 0, 0, 0.55],
    112: [0.19444, 0.45833, 0, 0, 0.56111],
    113: [0.19444, 0.45833, 0, 0, 0.56111],
    114: [0, 0.45833, 0.01528, 0, 0.37222],
    115: [0, 0.45833, 0, 0, 0.42167],
    116: [0, 0.58929, 0, 0, 0.40417],
    117: [0, 0.45833, 0, 0, 0.56111],
    118: [0, 0.45833, 0.01528, 0, 0.5],
    119: [0, 0.45833, 0.01528, 0, 0.74445],
    120: [0, 0.45833, 0, 0, 0.5],
    121: [0.19444, 0.45833, 0.01528, 0, 0.5],
    122: [0, 0.45833, 0, 0, 0.47639],
    126: [0.35, 0.34444, 0, 0, 0.55],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.69444, 0, 0, 0.55],
    176: [0, 0.69444, 0, 0, 0.73334],
    180: [0, 0.69444, 0, 0, 0.55],
    184: [0.17014, 0, 0, 0, 0.48889],
    305: [0, 0.45833, 0, 0, 0.25556],
    567: [0.19444, 0.45833, 0, 0, 0.28611],
    710: [0, 0.69444, 0, 0, 0.55],
    711: [0, 0.63542, 0, 0, 0.55],
    713: [0, 0.63778, 0, 0, 0.55],
    728: [0, 0.69444, 0, 0, 0.55],
    729: [0, 0.69444, 0, 0, 0.30556],
    730: [0, 0.69444, 0, 0, 0.73334],
    732: [0, 0.69444, 0, 0, 0.55],
    733: [0, 0.69444, 0, 0, 0.55],
    915: [0, 0.69444, 0, 0, 0.58056],
    916: [0, 0.69444, 0, 0, 0.91667],
    920: [0, 0.69444, 0, 0, 0.85556],
    923: [0, 0.69444, 0, 0, 0.67223],
    926: [0, 0.69444, 0, 0, 0.73334],
    928: [0, 0.69444, 0, 0, 0.79445],
    931: [0, 0.69444, 0, 0, 0.79445],
    933: [0, 0.69444, 0, 0, 0.85556],
    934: [0, 0.69444, 0, 0, 0.79445],
    936: [0, 0.69444, 0, 0, 0.85556],
    937: [0, 0.69444, 0, 0, 0.79445],
    8211: [0, 0.45833, 0.03056, 0, 0.55],
    8212: [0, 0.45833, 0.03056, 0, 1.10001],
    8216: [0, 0.69444, 0, 0, 0.30556],
    8217: [0, 0.69444, 0, 0, 0.30556],
    8220: [0, 0.69444, 0, 0, 0.55834],
    8221: [0, 0.69444, 0, 0, 0.55834]
  },
  "SansSerif-Italic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.05733, 0, 0.31945],
    34: [0, 0.69444, 316e-5, 0, 0.5],
    35: [0.19444, 0.69444, 0.05087, 0, 0.83334],
    36: [0.05556, 0.75, 0.11156, 0, 0.5],
    37: [0.05556, 0.75, 0.03126, 0, 0.83334],
    38: [0, 0.69444, 0.03058, 0, 0.75834],
    39: [0, 0.69444, 0.07816, 0, 0.27778],
    40: [0.25, 0.75, 0.13164, 0, 0.38889],
    41: [0.25, 0.75, 0.02536, 0, 0.38889],
    42: [0, 0.75, 0.11775, 0, 0.5],
    43: [0.08333, 0.58333, 0.02536, 0, 0.77778],
    44: [0.125, 0.08333, 0, 0, 0.27778],
    45: [0, 0.44444, 0.01946, 0, 0.33333],
    46: [0, 0.08333, 0, 0, 0.27778],
    47: [0.25, 0.75, 0.13164, 0, 0.5],
    48: [0, 0.65556, 0.11156, 0, 0.5],
    49: [0, 0.65556, 0.11156, 0, 0.5],
    50: [0, 0.65556, 0.11156, 0, 0.5],
    51: [0, 0.65556, 0.11156, 0, 0.5],
    52: [0, 0.65556, 0.11156, 0, 0.5],
    53: [0, 0.65556, 0.11156, 0, 0.5],
    54: [0, 0.65556, 0.11156, 0, 0.5],
    55: [0, 0.65556, 0.11156, 0, 0.5],
    56: [0, 0.65556, 0.11156, 0, 0.5],
    57: [0, 0.65556, 0.11156, 0, 0.5],
    58: [0, 0.44444, 0.02502, 0, 0.27778],
    59: [0.125, 0.44444, 0.02502, 0, 0.27778],
    61: [-0.13, 0.37, 0.05087, 0, 0.77778],
    63: [0, 0.69444, 0.11809, 0, 0.47222],
    64: [0, 0.69444, 0.07555, 0, 0.66667],
    65: [0, 0.69444, 0, 0, 0.66667],
    66: [0, 0.69444, 0.08293, 0, 0.66667],
    67: [0, 0.69444, 0.11983, 0, 0.63889],
    68: [0, 0.69444, 0.07555, 0, 0.72223],
    69: [0, 0.69444, 0.11983, 0, 0.59722],
    70: [0, 0.69444, 0.13372, 0, 0.56945],
    71: [0, 0.69444, 0.11983, 0, 0.66667],
    72: [0, 0.69444, 0.08094, 0, 0.70834],
    73: [0, 0.69444, 0.13372, 0, 0.27778],
    74: [0, 0.69444, 0.08094, 0, 0.47222],
    75: [0, 0.69444, 0.11983, 0, 0.69445],
    76: [0, 0.69444, 0, 0, 0.54167],
    77: [0, 0.69444, 0.08094, 0, 0.875],
    78: [0, 0.69444, 0.08094, 0, 0.70834],
    79: [0, 0.69444, 0.07555, 0, 0.73611],
    80: [0, 0.69444, 0.08293, 0, 0.63889],
    81: [0.125, 0.69444, 0.07555, 0, 0.73611],
    82: [0, 0.69444, 0.08293, 0, 0.64584],
    83: [0, 0.69444, 0.09205, 0, 0.55556],
    84: [0, 0.69444, 0.13372, 0, 0.68056],
    85: [0, 0.69444, 0.08094, 0, 0.6875],
    86: [0, 0.69444, 0.1615, 0, 0.66667],
    87: [0, 0.69444, 0.1615, 0, 0.94445],
    88: [0, 0.69444, 0.13372, 0, 0.66667],
    89: [0, 0.69444, 0.17261, 0, 0.66667],
    90: [0, 0.69444, 0.11983, 0, 0.61111],
    91: [0.25, 0.75, 0.15942, 0, 0.28889],
    93: [0.25, 0.75, 0.08719, 0, 0.28889],
    94: [0, 0.69444, 0.0799, 0, 0.5],
    95: [0.35, 0.09444, 0.08616, 0, 0.5],
    97: [0, 0.44444, 981e-5, 0, 0.48056],
    98: [0, 0.69444, 0.03057, 0, 0.51667],
    99: [0, 0.44444, 0.08336, 0, 0.44445],
    100: [0, 0.69444, 0.09483, 0, 0.51667],
    101: [0, 0.44444, 0.06778, 0, 0.44445],
    102: [0, 0.69444, 0.21705, 0, 0.30556],
    103: [0.19444, 0.44444, 0.10836, 0, 0.5],
    104: [0, 0.69444, 0.01778, 0, 0.51667],
    105: [0, 0.67937, 0.09718, 0, 0.23889],
    106: [0.19444, 0.67937, 0.09162, 0, 0.26667],
    107: [0, 0.69444, 0.08336, 0, 0.48889],
    108: [0, 0.69444, 0.09483, 0, 0.23889],
    109: [0, 0.44444, 0.01778, 0, 0.79445],
    110: [0, 0.44444, 0.01778, 0, 0.51667],
    111: [0, 0.44444, 0.06613, 0, 0.5],
    112: [0.19444, 0.44444, 0.0389, 0, 0.51667],
    113: [0.19444, 0.44444, 0.04169, 0, 0.51667],
    114: [0, 0.44444, 0.10836, 0, 0.34167],
    115: [0, 0.44444, 0.0778, 0, 0.38333],
    116: [0, 0.57143, 0.07225, 0, 0.36111],
    117: [0, 0.44444, 0.04169, 0, 0.51667],
    118: [0, 0.44444, 0.10836, 0, 0.46111],
    119: [0, 0.44444, 0.10836, 0, 0.68334],
    120: [0, 0.44444, 0.09169, 0, 0.46111],
    121: [0.19444, 0.44444, 0.10836, 0, 0.46111],
    122: [0, 0.44444, 0.08752, 0, 0.43472],
    126: [0.35, 0.32659, 0.08826, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.67937, 0.06385, 0, 0.5],
    176: [0, 0.69444, 0, 0, 0.73752],
    184: [0.17014, 0, 0, 0, 0.44445],
    305: [0, 0.44444, 0.04169, 0, 0.23889],
    567: [0.19444, 0.44444, 0.04169, 0, 0.26667],
    710: [0, 0.69444, 0.0799, 0, 0.5],
    711: [0, 0.63194, 0.08432, 0, 0.5],
    713: [0, 0.60889, 0.08776, 0, 0.5],
    714: [0, 0.69444, 0.09205, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0.09483, 0, 0.5],
    729: [0, 0.67937, 0.07774, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.73752],
    732: [0, 0.67659, 0.08826, 0, 0.5],
    733: [0, 0.69444, 0.09205, 0, 0.5],
    915: [0, 0.69444, 0.13372, 0, 0.54167],
    916: [0, 0.69444, 0, 0, 0.83334],
    920: [0, 0.69444, 0.07555, 0, 0.77778],
    923: [0, 0.69444, 0, 0, 0.61111],
    926: [0, 0.69444, 0.12816, 0, 0.66667],
    928: [0, 0.69444, 0.08094, 0, 0.70834],
    931: [0, 0.69444, 0.11983, 0, 0.72222],
    933: [0, 0.69444, 0.09031, 0, 0.77778],
    934: [0, 0.69444, 0.04603, 0, 0.72222],
    936: [0, 0.69444, 0.09031, 0, 0.77778],
    937: [0, 0.69444, 0.08293, 0, 0.72222],
    8211: [0, 0.44444, 0.08616, 0, 0.5],
    8212: [0, 0.44444, 0.08616, 0, 1],
    8216: [0, 0.69444, 0.07816, 0, 0.27778],
    8217: [0, 0.69444, 0.07816, 0, 0.27778],
    8220: [0, 0.69444, 0.14205, 0, 0.5],
    8221: [0, 0.69444, 316e-5, 0, 0.5]
  },
  "SansSerif-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.31945],
    34: [0, 0.69444, 0, 0, 0.5],
    35: [0.19444, 0.69444, 0, 0, 0.83334],
    36: [0.05556, 0.75, 0, 0, 0.5],
    37: [0.05556, 0.75, 0, 0, 0.83334],
    38: [0, 0.69444, 0, 0, 0.75834],
    39: [0, 0.69444, 0, 0, 0.27778],
    40: [0.25, 0.75, 0, 0, 0.38889],
    41: [0.25, 0.75, 0, 0, 0.38889],
    42: [0, 0.75, 0, 0, 0.5],
    43: [0.08333, 0.58333, 0, 0, 0.77778],
    44: [0.125, 0.08333, 0, 0, 0.27778],
    45: [0, 0.44444, 0, 0, 0.33333],
    46: [0, 0.08333, 0, 0, 0.27778],
    47: [0.25, 0.75, 0, 0, 0.5],
    48: [0, 0.65556, 0, 0, 0.5],
    49: [0, 0.65556, 0, 0, 0.5],
    50: [0, 0.65556, 0, 0, 0.5],
    51: [0, 0.65556, 0, 0, 0.5],
    52: [0, 0.65556, 0, 0, 0.5],
    53: [0, 0.65556, 0, 0, 0.5],
    54: [0, 0.65556, 0, 0, 0.5],
    55: [0, 0.65556, 0, 0, 0.5],
    56: [0, 0.65556, 0, 0, 0.5],
    57: [0, 0.65556, 0, 0, 0.5],
    58: [0, 0.44444, 0, 0, 0.27778],
    59: [0.125, 0.44444, 0, 0, 0.27778],
    61: [-0.13, 0.37, 0, 0, 0.77778],
    63: [0, 0.69444, 0, 0, 0.47222],
    64: [0, 0.69444, 0, 0, 0.66667],
    65: [0, 0.69444, 0, 0, 0.66667],
    66: [0, 0.69444, 0, 0, 0.66667],
    67: [0, 0.69444, 0, 0, 0.63889],
    68: [0, 0.69444, 0, 0, 0.72223],
    69: [0, 0.69444, 0, 0, 0.59722],
    70: [0, 0.69444, 0, 0, 0.56945],
    71: [0, 0.69444, 0, 0, 0.66667],
    72: [0, 0.69444, 0, 0, 0.70834],
    73: [0, 0.69444, 0, 0, 0.27778],
    74: [0, 0.69444, 0, 0, 0.47222],
    75: [0, 0.69444, 0, 0, 0.69445],
    76: [0, 0.69444, 0, 0, 0.54167],
    77: [0, 0.69444, 0, 0, 0.875],
    78: [0, 0.69444, 0, 0, 0.70834],
    79: [0, 0.69444, 0, 0, 0.73611],
    80: [0, 0.69444, 0, 0, 0.63889],
    81: [0.125, 0.69444, 0, 0, 0.73611],
    82: [0, 0.69444, 0, 0, 0.64584],
    83: [0, 0.69444, 0, 0, 0.55556],
    84: [0, 0.69444, 0, 0, 0.68056],
    85: [0, 0.69444, 0, 0, 0.6875],
    86: [0, 0.69444, 0.01389, 0, 0.66667],
    87: [0, 0.69444, 0.01389, 0, 0.94445],
    88: [0, 0.69444, 0, 0, 0.66667],
    89: [0, 0.69444, 0.025, 0, 0.66667],
    90: [0, 0.69444, 0, 0, 0.61111],
    91: [0.25, 0.75, 0, 0, 0.28889],
    93: [0.25, 0.75, 0, 0, 0.28889],
    94: [0, 0.69444, 0, 0, 0.5],
    95: [0.35, 0.09444, 0.02778, 0, 0.5],
    97: [0, 0.44444, 0, 0, 0.48056],
    98: [0, 0.69444, 0, 0, 0.51667],
    99: [0, 0.44444, 0, 0, 0.44445],
    100: [0, 0.69444, 0, 0, 0.51667],
    101: [0, 0.44444, 0, 0, 0.44445],
    102: [0, 0.69444, 0.06944, 0, 0.30556],
    103: [0.19444, 0.44444, 0.01389, 0, 0.5],
    104: [0, 0.69444, 0, 0, 0.51667],
    105: [0, 0.67937, 0, 0, 0.23889],
    106: [0.19444, 0.67937, 0, 0, 0.26667],
    107: [0, 0.69444, 0, 0, 0.48889],
    108: [0, 0.69444, 0, 0, 0.23889],
    109: [0, 0.44444, 0, 0, 0.79445],
    110: [0, 0.44444, 0, 0, 0.51667],
    111: [0, 0.44444, 0, 0, 0.5],
    112: [0.19444, 0.44444, 0, 0, 0.51667],
    113: [0.19444, 0.44444, 0, 0, 0.51667],
    114: [0, 0.44444, 0.01389, 0, 0.34167],
    115: [0, 0.44444, 0, 0, 0.38333],
    116: [0, 0.57143, 0, 0, 0.36111],
    117: [0, 0.44444, 0, 0, 0.51667],
    118: [0, 0.44444, 0.01389, 0, 0.46111],
    119: [0, 0.44444, 0.01389, 0, 0.68334],
    120: [0, 0.44444, 0, 0, 0.46111],
    121: [0.19444, 0.44444, 0.01389, 0, 0.46111],
    122: [0, 0.44444, 0, 0, 0.43472],
    126: [0.35, 0.32659, 0, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.67937, 0, 0, 0.5],
    176: [0, 0.69444, 0, 0, 0.66667],
    184: [0.17014, 0, 0, 0, 0.44445],
    305: [0, 0.44444, 0, 0, 0.23889],
    567: [0.19444, 0.44444, 0, 0, 0.26667],
    710: [0, 0.69444, 0, 0, 0.5],
    711: [0, 0.63194, 0, 0, 0.5],
    713: [0, 0.60889, 0, 0, 0.5],
    714: [0, 0.69444, 0, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0, 0, 0.5],
    729: [0, 0.67937, 0, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.66667],
    732: [0, 0.67659, 0, 0, 0.5],
    733: [0, 0.69444, 0, 0, 0.5],
    915: [0, 0.69444, 0, 0, 0.54167],
    916: [0, 0.69444, 0, 0, 0.83334],
    920: [0, 0.69444, 0, 0, 0.77778],
    923: [0, 0.69444, 0, 0, 0.61111],
    926: [0, 0.69444, 0, 0, 0.66667],
    928: [0, 0.69444, 0, 0, 0.70834],
    931: [0, 0.69444, 0, 0, 0.72222],
    933: [0, 0.69444, 0, 0, 0.77778],
    934: [0, 0.69444, 0, 0, 0.72222],
    936: [0, 0.69444, 0, 0, 0.77778],
    937: [0, 0.69444, 0, 0, 0.72222],
    8211: [0, 0.44444, 0.02778, 0, 0.5],
    8212: [0, 0.44444, 0.02778, 0, 1],
    8216: [0, 0.69444, 0, 0, 0.27778],
    8217: [0, 0.69444, 0, 0, 0.27778],
    8220: [0, 0.69444, 0, 0, 0.5],
    8221: [0, 0.69444, 0, 0, 0.5]
  },
  "Script-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.7, 0.22925, 0, 0.80253],
    66: [0, 0.7, 0.04087, 0, 0.90757],
    67: [0, 0.7, 0.1689, 0, 0.66619],
    68: [0, 0.7, 0.09371, 0, 0.77443],
    69: [0, 0.7, 0.18583, 0, 0.56162],
    70: [0, 0.7, 0.13634, 0, 0.89544],
    71: [0, 0.7, 0.17322, 0, 0.60961],
    72: [0, 0.7, 0.29694, 0, 0.96919],
    73: [0, 0.7, 0.19189, 0, 0.80907],
    74: [0.27778, 0.7, 0.19189, 0, 1.05159],
    75: [0, 0.7, 0.31259, 0, 0.91364],
    76: [0, 0.7, 0.19189, 0, 0.87373],
    77: [0, 0.7, 0.15981, 0, 1.08031],
    78: [0, 0.7, 0.3525, 0, 0.9015],
    79: [0, 0.7, 0.08078, 0, 0.73787],
    80: [0, 0.7, 0.08078, 0, 1.01262],
    81: [0, 0.7, 0.03305, 0, 0.88282],
    82: [0, 0.7, 0.06259, 0, 0.85],
    83: [0, 0.7, 0.19189, 0, 0.86767],
    84: [0, 0.7, 0.29087, 0, 0.74697],
    85: [0, 0.7, 0.25815, 0, 0.79996],
    86: [0, 0.7, 0.27523, 0, 0.62204],
    87: [0, 0.7, 0.27523, 0, 0.80532],
    88: [0, 0.7, 0.26006, 0, 0.94445],
    89: [0, 0.7, 0.2939, 0, 0.70961],
    90: [0, 0.7, 0.24037, 0, 0.8212],
    160: [0, 0, 0, 0, 0.25]
  },
  "Size1-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.35001, 0.85, 0, 0, 0.45834],
    41: [0.35001, 0.85, 0, 0, 0.45834],
    47: [0.35001, 0.85, 0, 0, 0.57778],
    91: [0.35001, 0.85, 0, 0, 0.41667],
    92: [0.35001, 0.85, 0, 0, 0.57778],
    93: [0.35001, 0.85, 0, 0, 0.41667],
    123: [0.35001, 0.85, 0, 0, 0.58334],
    125: [0.35001, 0.85, 0, 0, 0.58334],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.72222, 0, 0, 0.55556],
    732: [0, 0.72222, 0, 0, 0.55556],
    770: [0, 0.72222, 0, 0, 0.55556],
    771: [0, 0.72222, 0, 0, 0.55556],
    8214: [-99e-5, 0.601, 0, 0, 0.77778],
    8593: [1e-5, 0.6, 0, 0, 0.66667],
    8595: [1e-5, 0.6, 0, 0, 0.66667],
    8657: [1e-5, 0.6, 0, 0, 0.77778],
    8659: [1e-5, 0.6, 0, 0, 0.77778],
    8719: [0.25001, 0.75, 0, 0, 0.94445],
    8720: [0.25001, 0.75, 0, 0, 0.94445],
    8721: [0.25001, 0.75, 0, 0, 1.05556],
    8730: [0.35001, 0.85, 0, 0, 1],
    8739: [-599e-5, 0.606, 0, 0, 0.33333],
    8741: [-599e-5, 0.606, 0, 0, 0.55556],
    8747: [0.30612, 0.805, 0.19445, 0, 0.47222],
    8748: [0.306, 0.805, 0.19445, 0, 0.47222],
    8749: [0.306, 0.805, 0.19445, 0, 0.47222],
    8750: [0.30612, 0.805, 0.19445, 0, 0.47222],
    8896: [0.25001, 0.75, 0, 0, 0.83334],
    8897: [0.25001, 0.75, 0, 0, 0.83334],
    8898: [0.25001, 0.75, 0, 0, 0.83334],
    8899: [0.25001, 0.75, 0, 0, 0.83334],
    8968: [0.35001, 0.85, 0, 0, 0.47222],
    8969: [0.35001, 0.85, 0, 0, 0.47222],
    8970: [0.35001, 0.85, 0, 0, 0.47222],
    8971: [0.35001, 0.85, 0, 0, 0.47222],
    9168: [-99e-5, 0.601, 0, 0, 0.66667],
    10216: [0.35001, 0.85, 0, 0, 0.47222],
    10217: [0.35001, 0.85, 0, 0, 0.47222],
    10752: [0.25001, 0.75, 0, 0, 1.11111],
    10753: [0.25001, 0.75, 0, 0, 1.11111],
    10754: [0.25001, 0.75, 0, 0, 1.11111],
    10756: [0.25001, 0.75, 0, 0, 0.83334],
    10758: [0.25001, 0.75, 0, 0, 0.83334]
  },
  "Size2-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.65002, 1.15, 0, 0, 0.59722],
    41: [0.65002, 1.15, 0, 0, 0.59722],
    47: [0.65002, 1.15, 0, 0, 0.81111],
    91: [0.65002, 1.15, 0, 0, 0.47222],
    92: [0.65002, 1.15, 0, 0, 0.81111],
    93: [0.65002, 1.15, 0, 0, 0.47222],
    123: [0.65002, 1.15, 0, 0, 0.66667],
    125: [0.65002, 1.15, 0, 0, 0.66667],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.75, 0, 0, 1],
    732: [0, 0.75, 0, 0, 1],
    770: [0, 0.75, 0, 0, 1],
    771: [0, 0.75, 0, 0, 1],
    8719: [0.55001, 1.05, 0, 0, 1.27778],
    8720: [0.55001, 1.05, 0, 0, 1.27778],
    8721: [0.55001, 1.05, 0, 0, 1.44445],
    8730: [0.65002, 1.15, 0, 0, 1],
    8747: [0.86225, 1.36, 0.44445, 0, 0.55556],
    8748: [0.862, 1.36, 0.44445, 0, 0.55556],
    8749: [0.862, 1.36, 0.44445, 0, 0.55556],
    8750: [0.86225, 1.36, 0.44445, 0, 0.55556],
    8896: [0.55001, 1.05, 0, 0, 1.11111],
    8897: [0.55001, 1.05, 0, 0, 1.11111],
    8898: [0.55001, 1.05, 0, 0, 1.11111],
    8899: [0.55001, 1.05, 0, 0, 1.11111],
    8968: [0.65002, 1.15, 0, 0, 0.52778],
    8969: [0.65002, 1.15, 0, 0, 0.52778],
    8970: [0.65002, 1.15, 0, 0, 0.52778],
    8971: [0.65002, 1.15, 0, 0, 0.52778],
    10216: [0.65002, 1.15, 0, 0, 0.61111],
    10217: [0.65002, 1.15, 0, 0, 0.61111],
    10752: [0.55001, 1.05, 0, 0, 1.51112],
    10753: [0.55001, 1.05, 0, 0, 1.51112],
    10754: [0.55001, 1.05, 0, 0, 1.51112],
    10756: [0.55001, 1.05, 0, 0, 1.11111],
    10758: [0.55001, 1.05, 0, 0, 1.11111]
  },
  "Size3-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.95003, 1.45, 0, 0, 0.73611],
    41: [0.95003, 1.45, 0, 0, 0.73611],
    47: [0.95003, 1.45, 0, 0, 1.04445],
    91: [0.95003, 1.45, 0, 0, 0.52778],
    92: [0.95003, 1.45, 0, 0, 1.04445],
    93: [0.95003, 1.45, 0, 0, 0.52778],
    123: [0.95003, 1.45, 0, 0, 0.75],
    125: [0.95003, 1.45, 0, 0, 0.75],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.75, 0, 0, 1.44445],
    732: [0, 0.75, 0, 0, 1.44445],
    770: [0, 0.75, 0, 0, 1.44445],
    771: [0, 0.75, 0, 0, 1.44445],
    8730: [0.95003, 1.45, 0, 0, 1],
    8968: [0.95003, 1.45, 0, 0, 0.58334],
    8969: [0.95003, 1.45, 0, 0, 0.58334],
    8970: [0.95003, 1.45, 0, 0, 0.58334],
    8971: [0.95003, 1.45, 0, 0, 0.58334],
    10216: [0.95003, 1.45, 0, 0, 0.75],
    10217: [0.95003, 1.45, 0, 0, 0.75]
  },
  "Size4-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [1.25003, 1.75, 0, 0, 0.79167],
    41: [1.25003, 1.75, 0, 0, 0.79167],
    47: [1.25003, 1.75, 0, 0, 1.27778],
    91: [1.25003, 1.75, 0, 0, 0.58334],
    92: [1.25003, 1.75, 0, 0, 1.27778],
    93: [1.25003, 1.75, 0, 0, 0.58334],
    123: [1.25003, 1.75, 0, 0, 0.80556],
    125: [1.25003, 1.75, 0, 0, 0.80556],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.825, 0, 0, 1.8889],
    732: [0, 0.825, 0, 0, 1.8889],
    770: [0, 0.825, 0, 0, 1.8889],
    771: [0, 0.825, 0, 0, 1.8889],
    8730: [1.25003, 1.75, 0, 0, 1],
    8968: [1.25003, 1.75, 0, 0, 0.63889],
    8969: [1.25003, 1.75, 0, 0, 0.63889],
    8970: [1.25003, 1.75, 0, 0, 0.63889],
    8971: [1.25003, 1.75, 0, 0, 0.63889],
    9115: [0.64502, 1.155, 0, 0, 0.875],
    9116: [1e-5, 0.6, 0, 0, 0.875],
    9117: [0.64502, 1.155, 0, 0, 0.875],
    9118: [0.64502, 1.155, 0, 0, 0.875],
    9119: [1e-5, 0.6, 0, 0, 0.875],
    9120: [0.64502, 1.155, 0, 0, 0.875],
    9121: [0.64502, 1.155, 0, 0, 0.66667],
    9122: [-99e-5, 0.601, 0, 0, 0.66667],
    9123: [0.64502, 1.155, 0, 0, 0.66667],
    9124: [0.64502, 1.155, 0, 0, 0.66667],
    9125: [-99e-5, 0.601, 0, 0, 0.66667],
    9126: [0.64502, 1.155, 0, 0, 0.66667],
    9127: [1e-5, 0.9, 0, 0, 0.88889],
    9128: [0.65002, 1.15, 0, 0, 0.88889],
    9129: [0.90001, 0, 0, 0, 0.88889],
    9130: [0, 0.3, 0, 0, 0.88889],
    9131: [1e-5, 0.9, 0, 0, 0.88889],
    9132: [0.65002, 1.15, 0, 0, 0.88889],
    9133: [0.90001, 0, 0, 0, 0.88889],
    9143: [0.88502, 0.915, 0, 0, 1.05556],
    10216: [1.25003, 1.75, 0, 0, 0.80556],
    10217: [1.25003, 1.75, 0, 0, 0.80556],
    57344: [-499e-5, 0.605, 0, 0, 1.05556],
    57345: [-499e-5, 0.605, 0, 0, 1.05556],
    57680: [0, 0.12, 0, 0, 0.45],
    57681: [0, 0.12, 0, 0, 0.45],
    57682: [0, 0.12, 0, 0, 0.45],
    57683: [0, 0.12, 0, 0, 0.45]
  },
  "Typewriter-Regular": {
    32: [0, 0, 0, 0, 0.525],
    33: [0, 0.61111, 0, 0, 0.525],
    34: [0, 0.61111, 0, 0, 0.525],
    35: [0, 0.61111, 0, 0, 0.525],
    36: [0.08333, 0.69444, 0, 0, 0.525],
    37: [0.08333, 0.69444, 0, 0, 0.525],
    38: [0, 0.61111, 0, 0, 0.525],
    39: [0, 0.61111, 0, 0, 0.525],
    40: [0.08333, 0.69444, 0, 0, 0.525],
    41: [0.08333, 0.69444, 0, 0, 0.525],
    42: [0, 0.52083, 0, 0, 0.525],
    43: [-0.08056, 0.53055, 0, 0, 0.525],
    44: [0.13889, 0.125, 0, 0, 0.525],
    45: [-0.08056, 0.53055, 0, 0, 0.525],
    46: [0, 0.125, 0, 0, 0.525],
    47: [0.08333, 0.69444, 0, 0, 0.525],
    48: [0, 0.61111, 0, 0, 0.525],
    49: [0, 0.61111, 0, 0, 0.525],
    50: [0, 0.61111, 0, 0, 0.525],
    51: [0, 0.61111, 0, 0, 0.525],
    52: [0, 0.61111, 0, 0, 0.525],
    53: [0, 0.61111, 0, 0, 0.525],
    54: [0, 0.61111, 0, 0, 0.525],
    55: [0, 0.61111, 0, 0, 0.525],
    56: [0, 0.61111, 0, 0, 0.525],
    57: [0, 0.61111, 0, 0, 0.525],
    58: [0, 0.43056, 0, 0, 0.525],
    59: [0.13889, 0.43056, 0, 0, 0.525],
    60: [-0.05556, 0.55556, 0, 0, 0.525],
    61: [-0.19549, 0.41562, 0, 0, 0.525],
    62: [-0.05556, 0.55556, 0, 0, 0.525],
    63: [0, 0.61111, 0, 0, 0.525],
    64: [0, 0.61111, 0, 0, 0.525],
    65: [0, 0.61111, 0, 0, 0.525],
    66: [0, 0.61111, 0, 0, 0.525],
    67: [0, 0.61111, 0, 0, 0.525],
    68: [0, 0.61111, 0, 0, 0.525],
    69: [0, 0.61111, 0, 0, 0.525],
    70: [0, 0.61111, 0, 0, 0.525],
    71: [0, 0.61111, 0, 0, 0.525],
    72: [0, 0.61111, 0, 0, 0.525],
    73: [0, 0.61111, 0, 0, 0.525],
    74: [0, 0.61111, 0, 0, 0.525],
    75: [0, 0.61111, 0, 0, 0.525],
    76: [0, 0.61111, 0, 0, 0.525],
    77: [0, 0.61111, 0, 0, 0.525],
    78: [0, 0.61111, 0, 0, 0.525],
    79: [0, 0.61111, 0, 0, 0.525],
    80: [0, 0.61111, 0, 0, 0.525],
    81: [0.13889, 0.61111, 0, 0, 0.525],
    82: [0, 0.61111, 0, 0, 0.525],
    83: [0, 0.61111, 0, 0, 0.525],
    84: [0, 0.61111, 0, 0, 0.525],
    85: [0, 0.61111, 0, 0, 0.525],
    86: [0, 0.61111, 0, 0, 0.525],
    87: [0, 0.61111, 0, 0, 0.525],
    88: [0, 0.61111, 0, 0, 0.525],
    89: [0, 0.61111, 0, 0, 0.525],
    90: [0, 0.61111, 0, 0, 0.525],
    91: [0.08333, 0.69444, 0, 0, 0.525],
    92: [0.08333, 0.69444, 0, 0, 0.525],
    93: [0.08333, 0.69444, 0, 0, 0.525],
    94: [0, 0.61111, 0, 0, 0.525],
    95: [0.09514, 0, 0, 0, 0.525],
    96: [0, 0.61111, 0, 0, 0.525],
    97: [0, 0.43056, 0, 0, 0.525],
    98: [0, 0.61111, 0, 0, 0.525],
    99: [0, 0.43056, 0, 0, 0.525],
    100: [0, 0.61111, 0, 0, 0.525],
    101: [0, 0.43056, 0, 0, 0.525],
    102: [0, 0.61111, 0, 0, 0.525],
    103: [0.22222, 0.43056, 0, 0, 0.525],
    104: [0, 0.61111, 0, 0, 0.525],
    105: [0, 0.61111, 0, 0, 0.525],
    106: [0.22222, 0.61111, 0, 0, 0.525],
    107: [0, 0.61111, 0, 0, 0.525],
    108: [0, 0.61111, 0, 0, 0.525],
    109: [0, 0.43056, 0, 0, 0.525],
    110: [0, 0.43056, 0, 0, 0.525],
    111: [0, 0.43056, 0, 0, 0.525],
    112: [0.22222, 0.43056, 0, 0, 0.525],
    113: [0.22222, 0.43056, 0, 0, 0.525],
    114: [0, 0.43056, 0, 0, 0.525],
    115: [0, 0.43056, 0, 0, 0.525],
    116: [0, 0.55358, 0, 0, 0.525],
    117: [0, 0.43056, 0, 0, 0.525],
    118: [0, 0.43056, 0, 0, 0.525],
    119: [0, 0.43056, 0, 0, 0.525],
    120: [0, 0.43056, 0, 0, 0.525],
    121: [0.22222, 0.43056, 0, 0, 0.525],
    122: [0, 0.43056, 0, 0, 0.525],
    123: [0.08333, 0.69444, 0, 0, 0.525],
    124: [0.08333, 0.69444, 0, 0, 0.525],
    125: [0.08333, 0.69444, 0, 0, 0.525],
    126: [0, 0.61111, 0, 0, 0.525],
    127: [0, 0.61111, 0, 0, 0.525],
    160: [0, 0, 0, 0, 0.525],
    176: [0, 0.61111, 0, 0, 0.525],
    184: [0.19445, 0, 0, 0, 0.525],
    305: [0, 0.43056, 0, 0, 0.525],
    567: [0.22222, 0.43056, 0, 0, 0.525],
    711: [0, 0.56597, 0, 0, 0.525],
    713: [0, 0.56555, 0, 0, 0.525],
    714: [0, 0.61111, 0, 0, 0.525],
    715: [0, 0.61111, 0, 0, 0.525],
    728: [0, 0.61111, 0, 0, 0.525],
    730: [0, 0.61111, 0, 0, 0.525],
    770: [0, 0.61111, 0, 0, 0.525],
    771: [0, 0.61111, 0, 0, 0.525],
    776: [0, 0.61111, 0, 0, 0.525],
    915: [0, 0.61111, 0, 0, 0.525],
    916: [0, 0.61111, 0, 0, 0.525],
    920: [0, 0.61111, 0, 0, 0.525],
    923: [0, 0.61111, 0, 0, 0.525],
    926: [0, 0.61111, 0, 0, 0.525],
    928: [0, 0.61111, 0, 0, 0.525],
    931: [0, 0.61111, 0, 0, 0.525],
    933: [0, 0.61111, 0, 0, 0.525],
    934: [0, 0.61111, 0, 0, 0.525],
    936: [0, 0.61111, 0, 0, 0.525],
    937: [0, 0.61111, 0, 0, 0.525],
    8216: [0, 0.61111, 0, 0, 0.525],
    8217: [0, 0.61111, 0, 0, 0.525],
    8242: [0, 0.61111, 0, 0, 0.525],
    9251: [0.11111, 0.21944, 0, 0, 0.525]
  }
}, Js = {
  slant: [0.25, 0.25, 0.25],
  // sigma1
  space: [0, 0, 0],
  // sigma2
  stretch: [0, 0, 0],
  // sigma3
  shrink: [0, 0, 0],
  // sigma4
  xHeight: [0.431, 0.431, 0.431],
  // sigma5
  quad: [1, 1.171, 1.472],
  // sigma6
  extraSpace: [0, 0, 0],
  // sigma7
  num1: [0.677, 0.732, 0.925],
  // sigma8
  num2: [0.394, 0.384, 0.387],
  // sigma9
  num3: [0.444, 0.471, 0.504],
  // sigma10
  denom1: [0.686, 0.752, 1.025],
  // sigma11
  denom2: [0.345, 0.344, 0.532],
  // sigma12
  sup1: [0.413, 0.503, 0.504],
  // sigma13
  sup2: [0.363, 0.431, 0.404],
  // sigma14
  sup3: [0.289, 0.286, 0.294],
  // sigma15
  sub1: [0.15, 0.143, 0.2],
  // sigma16
  sub2: [0.247, 0.286, 0.4],
  // sigma17
  supDrop: [0.386, 0.353, 0.494],
  // sigma18
  subDrop: [0.05, 0.071, 0.1],
  // sigma19
  delim1: [2.39, 1.7, 1.98],
  // sigma20
  delim2: [1.01, 1.157, 1.42],
  // sigma21
  axisHeight: [0.25, 0.25, 0.25],
  // sigma22
  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
  // they correspond to the font parameters of the extension fonts (family 3).
  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
  // values.
  defaultRuleThickness: [0.04, 0.049, 0.049],
  // xi8; cmex7: 0.049
  bigOpSpacing1: [0.111, 0.111, 0.111],
  // xi9
  bigOpSpacing2: [0.166, 0.166, 0.166],
  // xi10
  bigOpSpacing3: [0.2, 0.2, 0.2],
  // xi11
  bigOpSpacing4: [0.6, 0.611, 0.611],
  // xi12; cmex7: 0.611
  bigOpSpacing5: [0.1, 0.143, 0.143],
  // xi13; cmex7: 0.143
  // The \sqrt rule width is taken from the height of the surd character.
  // Since we use the same font at all sizes, this thickness doesn't scale.
  sqrtRuleThickness: [0.04, 0.04, 0.04],
  // This value determines how large a pt is, for metrics which are defined
  // in terms of pts.
  // This value is also used in katex.scss; if you change it make sure the
  // values match.
  ptPerEm: [10, 10, 10],
  // The space between adjacent `|` columns in an array definition. From
  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
  doubleRuleSep: [0.2, 0.2, 0.2],
  // The width of separator lines in {array} environments. From
  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
  arrayRuleWidth: [0.04, 0.04, 0.04],
  // Two values from LaTeX source2e:
  fboxsep: [0.3, 0.3, 0.3],
  //        3 pt / ptPerEm
  fboxrule: [0.04, 0.04, 0.04]
  // 0.4 pt / ptPerEm
}, Ic = {
  // Latin-1
  Å: "A",
  Ð: "D",
  Þ: "o",
  å: "a",
  ð: "d",
  þ: "o",
  // Cyrillic
  А: "A",
  Б: "B",
  В: "B",
  Г: "F",
  Д: "A",
  Е: "E",
  Ж: "K",
  З: "3",
  И: "N",
  Й: "N",
  К: "K",
  Л: "N",
  М: "M",
  Н: "H",
  О: "O",
  П: "N",
  Р: "P",
  С: "C",
  Т: "T",
  У: "y",
  Ф: "O",
  Х: "X",
  Ц: "U",
  Ч: "h",
  Ш: "W",
  Щ: "W",
  Ъ: "B",
  Ы: "X",
  Ь: "B",
  Э: "3",
  Ю: "X",
  Я: "R",
  а: "a",
  б: "b",
  в: "a",
  г: "r",
  д: "y",
  е: "e",
  ж: "m",
  з: "e",
  и: "n",
  й: "n",
  к: "n",
  л: "n",
  м: "m",
  н: "n",
  о: "o",
  п: "n",
  р: "p",
  с: "c",
  т: "o",
  у: "y",
  ф: "b",
  х: "x",
  ц: "n",
  ч: "n",
  ш: "w",
  щ: "w",
  ъ: "a",
  ы: "m",
  ь: "a",
  э: "e",
  ю: "m",
  я: "r"
};
function x1(n, e) {
  vn[n] = e;
}
function sh(n, e, t) {
  if (!vn[e])
    throw new Error("Font metrics not found for font: " + e + ".");
  var r = n.charCodeAt(0), i = vn[e][r];
  if (!i && n[0] in Ic && (r = Ic[n[0]].charCodeAt(0), i = vn[e][r]), !i && t === "text" && b1(r) && (i = vn[e][77]), i)
    return {
      depth: i[0],
      height: i[1],
      italic: i[2],
      skew: i[3],
      width: i[4]
    };
}
var lo = {};
function u8(n) {
  var e;
  if (n >= 5 ? e = 0 : n >= 3 ? e = 1 : e = 2, !lo[e]) {
    var t = lo[e] = {
      cssEmPerMu: Js.quad[e] / 18
    };
    for (var r in Js)
      Js.hasOwnProperty(r) && (t[r] = Js[r][e]);
  }
  return lo[e];
}
var h8 = [
  // Each element contains [textsize, scriptsize, scriptscriptsize].
  // The size mappings are taken from TeX with \normalsize=10pt.
  [1, 1, 1],
  // size1: [5, 5, 5]              \tiny
  [2, 1, 1],
  // size2: [6, 5, 5]
  [3, 1, 1],
  // size3: [7, 5, 5]              \scriptsize
  [4, 2, 1],
  // size4: [8, 6, 5]              \footnotesize
  [5, 2, 1],
  // size5: [9, 6, 5]              \small
  [6, 3, 1],
  // size6: [10, 7, 5]             \normalsize
  [7, 4, 2],
  // size7: [12, 8, 6]             \large
  [8, 6, 3],
  // size8: [14.4, 10, 7]          \Large
  [9, 7, 6],
  // size9: [17.28, 12, 10]        \LARGE
  [10, 8, 7],
  // size10: [20.74, 14.4, 12]     \huge
  [11, 10, 9]
  // size11: [24.88, 20.74, 17.28] \HUGE
], Nc = [
  // fontMetrics.js:getGlobalMetrics also uses size indexes, so if
  // you change size indexes, change that function.
  0.5,
  0.6,
  0.7,
  0.8,
  0.9,
  1,
  1.2,
  1.44,
  1.728,
  2.074,
  2.488
], Vc = function(e, t) {
  return t.size < 2 ? e : h8[e - 1][t.size - 1];
};
class Xn {
  // A font family applies to a group of fonts (i.e. SansSerif), while a font
  // represents a specific font (i.e. SansSerif Bold).
  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm
  /**
   * The base size index.
   */
  constructor(e) {
    this.style = void 0, this.color = void 0, this.size = void 0, this.textSize = void 0, this.phantom = void 0, this.font = void 0, this.fontFamily = void 0, this.fontWeight = void 0, this.fontShape = void 0, this.sizeMultiplier = void 0, this.maxSize = void 0, this.minRuleThickness = void 0, this._fontMetrics = void 0, this.style = e.style, this.color = e.color, this.size = e.size || Xn.BASESIZE, this.textSize = e.textSize || this.size, this.phantom = !!e.phantom, this.font = e.font || "", this.fontFamily = e.fontFamily || "", this.fontWeight = e.fontWeight || "", this.fontShape = e.fontShape || "", this.sizeMultiplier = Nc[this.size - 1], this.maxSize = e.maxSize, this.minRuleThickness = e.minRuleThickness, this._fontMetrics = void 0;
  }
  /**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */
  extend(e) {
    var t = {
      style: this.style,
      size: this.size,
      textSize: this.textSize,
      color: this.color,
      phantom: this.phantom,
      font: this.font,
      fontFamily: this.fontFamily,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize,
      minRuleThickness: this.minRuleThickness
    };
    for (var r in e)
      e.hasOwnProperty(r) && (t[r] = e[r]);
    return new Xn(t);
  }
  /**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */
  havingStyle(e) {
    return this.style === e ? this : this.extend({
      style: e,
      size: Vc(this.textSize, e)
    });
  }
  /**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */
  havingCrampedStyle() {
    return this.havingStyle(this.style.cramp());
  }
  /**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */
  havingSize(e) {
    return this.size === e && this.textSize === e ? this : this.extend({
      style: this.style.text(),
      size: e,
      textSize: e,
      sizeMultiplier: Nc[e - 1]
    });
  }
  /**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */
  havingBaseStyle(e) {
    e = e || this.style.text();
    var t = Vc(Xn.BASESIZE, e);
    return this.size === t && this.textSize === Xn.BASESIZE && this.style === e ? this : this.extend({
      style: e,
      size: t
    });
  }
  /**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */
  havingBaseSizing() {
    var e;
    switch (this.style.id) {
      case 4:
      case 5:
        e = 3;
        break;
      case 6:
      case 7:
        e = 1;
        break;
      default:
        e = 6;
    }
    return this.extend({
      style: this.style.text(),
      size: e
    });
  }
  /**
   * Create a new options object with the given color.
   */
  withColor(e) {
    return this.extend({
      color: e
    });
  }
  /**
   * Create a new options object with "phantom" set to true.
   */
  withPhantom() {
    return this.extend({
      phantom: !0
    });
  }
  /**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */
  withFont(e) {
    return this.extend({
      font: e
    });
  }
  /**
   * Create a new options objects with the given fontFamily.
   */
  withTextFontFamily(e) {
    return this.extend({
      fontFamily: e,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontWeight(e) {
    return this.extend({
      fontWeight: e,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontShape(e) {
    return this.extend({
      fontShape: e,
      font: ""
    });
  }
  /**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */
  sizingClasses(e) {
    return e.size !== this.size ? ["sizing", "reset-size" + e.size, "size" + this.size] : [];
  }
  /**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */
  baseSizingClasses() {
    return this.size !== Xn.BASESIZE ? ["sizing", "reset-size" + this.size, "size" + Xn.BASESIZE] : [];
  }
  /**
   * Return the font metrics for this size.
   */
  fontMetrics() {
    return this._fontMetrics || (this._fontMetrics = u8(this.size)), this._fontMetrics;
  }
  /**
   * Gets the CSS color of the current options object
   */
  getColor() {
    return this.phantom ? "transparent" : this.color;
  }
}
Xn.BASESIZE = 6;
var zu = {
  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  pt: 1,
  // TeX point
  mm: 7227 / 2540,
  // millimeter
  cm: 7227 / 254,
  // centimeter
  in: 72.27,
  // inch
  bp: 803 / 800,
  // big (PostScript) points
  pc: 12,
  // pica
  dd: 1238 / 1157,
  // didot
  cc: 14856 / 1157,
  // cicero (12 didot)
  nd: 685 / 642,
  // new didot
  nc: 1370 / 107,
  // new cicero (12 new didot)
  sp: 1 / 65536,
  // scaled point (TeX's internal smallest unit)
  // https://tex.stackexchange.com/a/41371
  px: 803 / 800
  // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
}, c8 = {
  ex: !0,
  em: !0,
  mu: !0
}, v1 = function(e) {
  return typeof e != "string" && (e = e.unit), e in zu || e in c8 || e === "ex";
}, _e = function(e, t) {
  var r;
  if (e.unit in zu)
    r = zu[e.unit] / t.fontMetrics().ptPerEm / t.sizeMultiplier;
  else if (e.unit === "mu")
    r = t.fontMetrics().cssEmPerMu;
  else {
    var i;
    if (t.style.isTight() ? i = t.havingStyle(t.style.text()) : i = t, e.unit === "ex")
      r = i.fontMetrics().xHeight;
    else if (e.unit === "em")
      r = i.fontMetrics().quad;
    else
      throw new I("Invalid unit: '" + e.unit + "'");
    i !== t && (r *= i.sizeMultiplier / t.sizeMultiplier);
  }
  return Math.min(e.number * r, t.maxSize);
}, W = function(e) {
  return +e.toFixed(4) + "em";
}, dr = function(e) {
  return e.filter((t) => t).join(" ");
}, w1 = function(e, t, r) {
  if (this.classes = e || [], this.attributes = {}, this.height = 0, this.depth = 0, this.maxFontSize = 0, this.style = r || {}, t) {
    t.style.isTight() && this.classes.push("mtight");
    var i = t.getColor();
    i && (this.style.color = i);
  }
}, k1 = function(e) {
  var t = document.createElement(e);
  t.className = dr(this.classes);
  for (var r in this.style)
    this.style.hasOwnProperty(r) && (t.style[r] = this.style[r]);
  for (var i in this.attributes)
    this.attributes.hasOwnProperty(i) && t.setAttribute(i, this.attributes[i]);
  for (var s = 0; s < this.children.length; s++)
    t.appendChild(this.children[s].toNode());
  return t;
}, f8 = /[\s"'>/=\x00-\x1f]/, S1 = function(e) {
  var t = "<" + e;
  this.classes.length && (t += ' class="' + se.escape(dr(this.classes)) + '"');
  var r = "";
  for (var i in this.style)
    this.style.hasOwnProperty(i) && (r += se.hyphenate(i) + ":" + this.style[i] + ";");
  r && (t += ' style="' + se.escape(r) + '"');
  for (var s in this.attributes)
    if (this.attributes.hasOwnProperty(s)) {
      if (f8.test(s))
        throw new I("Invalid attribute name '" + s + "'");
      t += " " + s + '="' + se.escape(this.attributes[s]) + '"';
    }
  t += ">";
  for (var l = 0; l < this.children.length; l++)
    t += this.children[l].toMarkup();
  return t += "</" + e + ">", t;
};
class zs {
  constructor(e, t, r, i) {
    this.children = void 0, this.attributes = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.width = void 0, this.maxFontSize = void 0, this.style = void 0, w1.call(this, e, r, i), this.children = t || [];
  }
  /**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */
  setAttribute(e, t) {
    this.attributes[e] = t;
  }
  hasClass(e) {
    return se.contains(this.classes, e);
  }
  toNode() {
    return k1.call(this, "span");
  }
  toMarkup() {
    return S1.call(this, "span");
  }
}
class lh {
  constructor(e, t, r, i) {
    this.children = void 0, this.attributes = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, w1.call(this, t, i), this.children = r || [], this.setAttribute("href", e);
  }
  setAttribute(e, t) {
    this.attributes[e] = t;
  }
  hasClass(e) {
    return se.contains(this.classes, e);
  }
  toNode() {
    return k1.call(this, "a");
  }
  toMarkup() {
    return S1.call(this, "a");
  }
}
class d8 {
  constructor(e, t, r) {
    this.src = void 0, this.alt = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, this.alt = t, this.src = e, this.classes = ["mord"], this.style = r;
  }
  hasClass(e) {
    return se.contains(this.classes, e);
  }
  toNode() {
    var e = document.createElement("img");
    e.src = this.src, e.alt = this.alt, e.className = "mord";
    for (var t in this.style)
      this.style.hasOwnProperty(t) && (e.style[t] = this.style[t]);
    return e;
  }
  toMarkup() {
    var e = '<img src="' + se.escape(this.src) + '"' + (' alt="' + se.escape(this.alt) + '"'), t = "";
    for (var r in this.style)
      this.style.hasOwnProperty(r) && (t += se.hyphenate(r) + ":" + this.style[r] + ";");
    return t && (e += ' style="' + se.escape(t) + '"'), e += "'/>", e;
  }
}
var p8 = {
  î: "ı̂",
  ï: "ı̈",
  í: "ı́",
  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
  ì: "ı̀"
};
class Jt {
  constructor(e, t, r, i, s, l, a, o) {
    this.text = void 0, this.height = void 0, this.depth = void 0, this.italic = void 0, this.skew = void 0, this.width = void 0, this.maxFontSize = void 0, this.classes = void 0, this.style = void 0, this.text = e, this.height = t || 0, this.depth = r || 0, this.italic = i || 0, this.skew = s || 0, this.width = l || 0, this.classes = a || [], this.style = o || {}, this.maxFontSize = 0;
    var u = Kb(this.text.charCodeAt(0));
    u && this.classes.push(u + "_fallback"), /[îïíì]/.test(this.text) && (this.text = p8[this.text]);
  }
  hasClass(e) {
    return se.contains(this.classes, e);
  }
  /**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */
  toNode() {
    var e = document.createTextNode(this.text), t = null;
    this.italic > 0 && (t = document.createElement("span"), t.style.marginRight = W(this.italic)), this.classes.length > 0 && (t = t || document.createElement("span"), t.className = dr(this.classes));
    for (var r in this.style)
      this.style.hasOwnProperty(r) && (t = t || document.createElement("span"), t.style[r] = this.style[r]);
    return t ? (t.appendChild(e), t) : e;
  }
  /**
   * Creates markup for a symbol node.
   */
  toMarkup() {
    var e = !1, t = "<span";
    this.classes.length && (e = !0, t += ' class="', t += se.escape(dr(this.classes)), t += '"');
    var r = "";
    this.italic > 0 && (r += "margin-right:" + this.italic + "em;");
    for (var i in this.style)
      this.style.hasOwnProperty(i) && (r += se.hyphenate(i) + ":" + this.style[i] + ";");
    r && (e = !0, t += ' style="' + se.escape(r) + '"');
    var s = se.escape(this.text);
    return e ? (t += ">", t += s, t += "</span>", t) : s;
  }
}
class Yn {
  constructor(e, t) {
    this.children = void 0, this.attributes = void 0, this.children = e || [], this.attributes = t || {};
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", t = document.createElementNS(e, "svg");
    for (var r in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r) && t.setAttribute(r, this.attributes[r]);
    for (var i = 0; i < this.children.length; i++)
      t.appendChild(this.children[i].toNode());
    return t;
  }
  toMarkup() {
    var e = '<svg xmlns="http://www.w3.org/2000/svg"';
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && (e += " " + t + '="' + se.escape(this.attributes[t]) + '"');
    e += ">";
    for (var r = 0; r < this.children.length; r++)
      e += this.children[r].toMarkup();
    return e += "</svg>", e;
  }
}
class pr {
  constructor(e, t) {
    this.pathName = void 0, this.alternate = void 0, this.pathName = e, this.alternate = t;
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", t = document.createElementNS(e, "path");
    return this.alternate ? t.setAttribute("d", this.alternate) : t.setAttribute("d", Xc[this.pathName]), t;
  }
  toMarkup() {
    return this.alternate ? '<path d="' + se.escape(this.alternate) + '"/>' : '<path d="' + se.escape(Xc[this.pathName]) + '"/>';
  }
}
class Fu {
  constructor(e) {
    this.attributes = void 0, this.attributes = e || {};
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", t = document.createElementNS(e, "line");
    for (var r in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r) && t.setAttribute(r, this.attributes[r]);
    return t;
  }
  toMarkup() {
    var e = "<line";
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && (e += " " + t + '="' + se.escape(this.attributes[t]) + '"');
    return e += "/>", e;
  }
}
function jc(n) {
  if (n instanceof Jt)
    return n;
  throw new Error("Expected symbolNode but got " + String(n) + ".");
}
function m8(n) {
  if (n instanceof zs)
    return n;
  throw new Error("Expected span<HtmlDomNode> but got " + String(n) + ".");
}
var g8 = {
  bin: 1,
  close: 1,
  inner: 1,
  open: 1,
  punct: 1,
  rel: 1
}, O8 = {
  "accent-token": 1,
  mathord: 1,
  "op-token": 1,
  spacing: 1,
  textord: 1
}, Be = {
  math: {},
  text: {}
};
function p(n, e, t, r, i, s) {
  Be[n][i] = {
    font: e,
    group: t,
    replace: r
  }, s && r && (Be[n][r] = Be[n][i]);
}
var g = "math", q = "text", y = "main", k = "ams", Ne = "accent-token", te = "bin", kt = "close", Si = "inner", le = "mathord", rt = "op-token", Vt = "open", Ca = "punct", Q = "rel", tr = "spacing", D = "textord";
p(g, y, Q, "≡", "\\equiv", !0);
p(g, y, Q, "≺", "\\prec", !0);
p(g, y, Q, "≻", "\\succ", !0);
p(g, y, Q, "∼", "\\sim", !0);
p(g, y, Q, "⊥", "\\perp");
p(g, y, Q, "⪯", "\\preceq", !0);
p(g, y, Q, "⪰", "\\succeq", !0);
p(g, y, Q, "≃", "\\simeq", !0);
p(g, y, Q, "∣", "\\mid", !0);
p(g, y, Q, "≪", "\\ll", !0);
p(g, y, Q, "≫", "\\gg", !0);
p(g, y, Q, "≍", "\\asymp", !0);
p(g, y, Q, "∥", "\\parallel");
p(g, y, Q, "⋈", "\\bowtie", !0);
p(g, y, Q, "⌣", "\\smile", !0);
p(g, y, Q, "⊑", "\\sqsubseteq", !0);
p(g, y, Q, "⊒", "\\sqsupseteq", !0);
p(g, y, Q, "≐", "\\doteq", !0);
p(g, y, Q, "⌢", "\\frown", !0);
p(g, y, Q, "∋", "\\ni", !0);
p(g, y, Q, "∝", "\\propto", !0);
p(g, y, Q, "⊢", "\\vdash", !0);
p(g, y, Q, "⊣", "\\dashv", !0);
p(g, y, Q, "∋", "\\owns");
p(g, y, Ca, ".", "\\ldotp");
p(g, y, Ca, "⋅", "\\cdotp");
p(g, y, D, "#", "\\#");
p(q, y, D, "#", "\\#");
p(g, y, D, "&", "\\&");
p(q, y, D, "&", "\\&");
p(g, y, D, "ℵ", "\\aleph", !0);
p(g, y, D, "∀", "\\forall", !0);
p(g, y, D, "ℏ", "\\hbar", !0);
p(g, y, D, "∃", "\\exists", !0);
p(g, y, D, "∇", "\\nabla", !0);
p(g, y, D, "♭", "\\flat", !0);
p(g, y, D, "ℓ", "\\ell", !0);
p(g, y, D, "♮", "\\natural", !0);
p(g, y, D, "♣", "\\clubsuit", !0);
p(g, y, D, "℘", "\\wp", !0);
p(g, y, D, "♯", "\\sharp", !0);
p(g, y, D, "♢", "\\diamondsuit", !0);
p(g, y, D, "ℜ", "\\Re", !0);
p(g, y, D, "♡", "\\heartsuit", !0);
p(g, y, D, "ℑ", "\\Im", !0);
p(g, y, D, "♠", "\\spadesuit", !0);
p(g, y, D, "§", "\\S", !0);
p(q, y, D, "§", "\\S");
p(g, y, D, "¶", "\\P", !0);
p(q, y, D, "¶", "\\P");
p(g, y, D, "†", "\\dag");
p(q, y, D, "†", "\\dag");
p(q, y, D, "†", "\\textdagger");
p(g, y, D, "‡", "\\ddag");
p(q, y, D, "‡", "\\ddag");
p(q, y, D, "‡", "\\textdaggerdbl");
p(g, y, kt, "⎱", "\\rmoustache", !0);
p(g, y, Vt, "⎰", "\\lmoustache", !0);
p(g, y, kt, "⟯", "\\rgroup", !0);
p(g, y, Vt, "⟮", "\\lgroup", !0);
p(g, y, te, "∓", "\\mp", !0);
p(g, y, te, "⊖", "\\ominus", !0);
p(g, y, te, "⊎", "\\uplus", !0);
p(g, y, te, "⊓", "\\sqcap", !0);
p(g, y, te, "∗", "\\ast");
p(g, y, te, "⊔", "\\sqcup", !0);
p(g, y, te, "◯", "\\bigcirc", !0);
p(g, y, te, "∙", "\\bullet", !0);
p(g, y, te, "‡", "\\ddagger");
p(g, y, te, "≀", "\\wr", !0);
p(g, y, te, "⨿", "\\amalg");
p(g, y, te, "&", "\\And");
p(g, y, Q, "⟵", "\\longleftarrow", !0);
p(g, y, Q, "⇐", "\\Leftarrow", !0);
p(g, y, Q, "⟸", "\\Longleftarrow", !0);
p(g, y, Q, "⟶", "\\longrightarrow", !0);
p(g, y, Q, "⇒", "\\Rightarrow", !0);
p(g, y, Q, "⟹", "\\Longrightarrow", !0);
p(g, y, Q, "↔", "\\leftrightarrow", !0);
p(g, y, Q, "⟷", "\\longleftrightarrow", !0);
p(g, y, Q, "⇔", "\\Leftrightarrow", !0);
p(g, y, Q, "⟺", "\\Longleftrightarrow", !0);
p(g, y, Q, "↦", "\\mapsto", !0);
p(g, y, Q, "⟼", "\\longmapsto", !0);
p(g, y, Q, "↗", "\\nearrow", !0);
p(g, y, Q, "↩", "\\hookleftarrow", !0);
p(g, y, Q, "↪", "\\hookrightarrow", !0);
p(g, y, Q, "↘", "\\searrow", !0);
p(g, y, Q, "↼", "\\leftharpoonup", !0);
p(g, y, Q, "⇀", "\\rightharpoonup", !0);
p(g, y, Q, "↙", "\\swarrow", !0);
p(g, y, Q, "↽", "\\leftharpoondown", !0);
p(g, y, Q, "⇁", "\\rightharpoondown", !0);
p(g, y, Q, "↖", "\\nwarrow", !0);
p(g, y, Q, "⇌", "\\rightleftharpoons", !0);
p(g, k, Q, "≮", "\\nless", !0);
p(g, k, Q, "", "\\@nleqslant");
p(g, k, Q, "", "\\@nleqq");
p(g, k, Q, "⪇", "\\lneq", !0);
p(g, k, Q, "≨", "\\lneqq", !0);
p(g, k, Q, "", "\\@lvertneqq");
p(g, k, Q, "⋦", "\\lnsim", !0);
p(g, k, Q, "⪉", "\\lnapprox", !0);
p(g, k, Q, "⊀", "\\nprec", !0);
p(g, k, Q, "⋠", "\\npreceq", !0);
p(g, k, Q, "⋨", "\\precnsim", !0);
p(g, k, Q, "⪹", "\\precnapprox", !0);
p(g, k, Q, "≁", "\\nsim", !0);
p(g, k, Q, "", "\\@nshortmid");
p(g, k, Q, "∤", "\\nmid", !0);
p(g, k, Q, "⊬", "\\nvdash", !0);
p(g, k, Q, "⊭", "\\nvDash", !0);
p(g, k, Q, "⋪", "\\ntriangleleft");
p(g, k, Q, "⋬", "\\ntrianglelefteq", !0);
p(g, k, Q, "⊊", "\\subsetneq", !0);
p(g, k, Q, "", "\\@varsubsetneq");
p(g, k, Q, "⫋", "\\subsetneqq", !0);
p(g, k, Q, "", "\\@varsubsetneqq");
p(g, k, Q, "≯", "\\ngtr", !0);
p(g, k, Q, "", "\\@ngeqslant");
p(g, k, Q, "", "\\@ngeqq");
p(g, k, Q, "⪈", "\\gneq", !0);
p(g, k, Q, "≩", "\\gneqq", !0);
p(g, k, Q, "", "\\@gvertneqq");
p(g, k, Q, "⋧", "\\gnsim", !0);
p(g, k, Q, "⪊", "\\gnapprox", !0);
p(g, k, Q, "⊁", "\\nsucc", !0);
p(g, k, Q, "⋡", "\\nsucceq", !0);
p(g, k, Q, "⋩", "\\succnsim", !0);
p(g, k, Q, "⪺", "\\succnapprox", !0);
p(g, k, Q, "≆", "\\ncong", !0);
p(g, k, Q, "", "\\@nshortparallel");
p(g, k, Q, "∦", "\\nparallel", !0);
p(g, k, Q, "⊯", "\\nVDash", !0);
p(g, k, Q, "⋫", "\\ntriangleright");
p(g, k, Q, "⋭", "\\ntrianglerighteq", !0);
p(g, k, Q, "", "\\@nsupseteqq");
p(g, k, Q, "⊋", "\\supsetneq", !0);
p(g, k, Q, "", "\\@varsupsetneq");
p(g, k, Q, "⫌", "\\supsetneqq", !0);
p(g, k, Q, "", "\\@varsupsetneqq");
p(g, k, Q, "⊮", "\\nVdash", !0);
p(g, k, Q, "⪵", "\\precneqq", !0);
p(g, k, Q, "⪶", "\\succneqq", !0);
p(g, k, Q, "", "\\@nsubseteqq");
p(g, k, te, "⊴", "\\unlhd");
p(g, k, te, "⊵", "\\unrhd");
p(g, k, Q, "↚", "\\nleftarrow", !0);
p(g, k, Q, "↛", "\\nrightarrow", !0);
p(g, k, Q, "⇍", "\\nLeftarrow", !0);
p(g, k, Q, "⇏", "\\nRightarrow", !0);
p(g, k, Q, "↮", "\\nleftrightarrow", !0);
p(g, k, Q, "⇎", "\\nLeftrightarrow", !0);
p(g, k, Q, "△", "\\vartriangle");
p(g, k, D, "ℏ", "\\hslash");
p(g, k, D, "▽", "\\triangledown");
p(g, k, D, "◊", "\\lozenge");
p(g, k, D, "Ⓢ", "\\circledS");
p(g, k, D, "®", "\\circledR");
p(q, k, D, "®", "\\circledR");
p(g, k, D, "∡", "\\measuredangle", !0);
p(g, k, D, "∄", "\\nexists");
p(g, k, D, "℧", "\\mho");
p(g, k, D, "Ⅎ", "\\Finv", !0);
p(g, k, D, "⅁", "\\Game", !0);
p(g, k, D, "‵", "\\backprime");
p(g, k, D, "▲", "\\blacktriangle");
p(g, k, D, "▼", "\\blacktriangledown");
p(g, k, D, "■", "\\blacksquare");
p(g, k, D, "⧫", "\\blacklozenge");
p(g, k, D, "★", "\\bigstar");
p(g, k, D, "∢", "\\sphericalangle", !0);
p(g, k, D, "∁", "\\complement", !0);
p(g, k, D, "ð", "\\eth", !0);
p(q, y, D, "ð", "ð");
p(g, k, D, "╱", "\\diagup");
p(g, k, D, "╲", "\\diagdown");
p(g, k, D, "□", "\\square");
p(g, k, D, "□", "\\Box");
p(g, k, D, "◊", "\\Diamond");
p(g, k, D, "¥", "\\yen", !0);
p(q, k, D, "¥", "\\yen", !0);
p(g, k, D, "✓", "\\checkmark", !0);
p(q, k, D, "✓", "\\checkmark");
p(g, k, D, "ℶ", "\\beth", !0);
p(g, k, D, "ℸ", "\\daleth", !0);
p(g, k, D, "ℷ", "\\gimel", !0);
p(g, k, D, "ϝ", "\\digamma", !0);
p(g, k, D, "ϰ", "\\varkappa");
p(g, k, Vt, "┌", "\\@ulcorner", !0);
p(g, k, kt, "┐", "\\@urcorner", !0);
p(g, k, Vt, "└", "\\@llcorner", !0);
p(g, k, kt, "┘", "\\@lrcorner", !0);
p(g, k, Q, "≦", "\\leqq", !0);
p(g, k, Q, "⩽", "\\leqslant", !0);
p(g, k, Q, "⪕", "\\eqslantless", !0);
p(g, k, Q, "≲", "\\lesssim", !0);
p(g, k, Q, "⪅", "\\lessapprox", !0);
p(g, k, Q, "≊", "\\approxeq", !0);
p(g, k, te, "⋖", "\\lessdot");
p(g, k, Q, "⋘", "\\lll", !0);
p(g, k, Q, "≶", "\\lessgtr", !0);
p(g, k, Q, "⋚", "\\lesseqgtr", !0);
p(g, k, Q, "⪋", "\\lesseqqgtr", !0);
p(g, k, Q, "≑", "\\doteqdot");
p(g, k, Q, "≓", "\\risingdotseq", !0);
p(g, k, Q, "≒", "\\fallingdotseq", !0);
p(g, k, Q, "∽", "\\backsim", !0);
p(g, k, Q, "⋍", "\\backsimeq", !0);
p(g, k, Q, "⫅", "\\subseteqq", !0);
p(g, k, Q, "⋐", "\\Subset", !0);
p(g, k, Q, "⊏", "\\sqsubset", !0);
p(g, k, Q, "≼", "\\preccurlyeq", !0);
p(g, k, Q, "⋞", "\\curlyeqprec", !0);
p(g, k, Q, "≾", "\\precsim", !0);
p(g, k, Q, "⪷", "\\precapprox", !0);
p(g, k, Q, "⊲", "\\vartriangleleft");
p(g, k, Q, "⊴", "\\trianglelefteq");
p(g, k, Q, "⊨", "\\vDash", !0);
p(g, k, Q, "⊪", "\\Vvdash", !0);
p(g, k, Q, "⌣", "\\smallsmile");
p(g, k, Q, "⌢", "\\smallfrown");
p(g, k, Q, "≏", "\\bumpeq", !0);
p(g, k, Q, "≎", "\\Bumpeq", !0);
p(g, k, Q, "≧", "\\geqq", !0);
p(g, k, Q, "⩾", "\\geqslant", !0);
p(g, k, Q, "⪖", "\\eqslantgtr", !0);
p(g, k, Q, "≳", "\\gtrsim", !0);
p(g, k, Q, "⪆", "\\gtrapprox", !0);
p(g, k, te, "⋗", "\\gtrdot");
p(g, k, Q, "⋙", "\\ggg", !0);
p(g, k, Q, "≷", "\\gtrless", !0);
p(g, k, Q, "⋛", "\\gtreqless", !0);
p(g, k, Q, "⪌", "\\gtreqqless", !0);
p(g, k, Q, "≖", "\\eqcirc", !0);
p(g, k, Q, "≗", "\\circeq", !0);
p(g, k, Q, "≜", "\\triangleq", !0);
p(g, k, Q, "∼", "\\thicksim");
p(g, k, Q, "≈", "\\thickapprox");
p(g, k, Q, "⫆", "\\supseteqq", !0);
p(g, k, Q, "⋑", "\\Supset", !0);
p(g, k, Q, "⊐", "\\sqsupset", !0);
p(g, k, Q, "≽", "\\succcurlyeq", !0);
p(g, k, Q, "⋟", "\\curlyeqsucc", !0);
p(g, k, Q, "≿", "\\succsim", !0);
p(g, k, Q, "⪸", "\\succapprox", !0);
p(g, k, Q, "⊳", "\\vartriangleright");
p(g, k, Q, "⊵", "\\trianglerighteq");
p(g, k, Q, "⊩", "\\Vdash", !0);
p(g, k, Q, "∣", "\\shortmid");
p(g, k, Q, "∥", "\\shortparallel");
p(g, k, Q, "≬", "\\between", !0);
p(g, k, Q, "⋔", "\\pitchfork", !0);
p(g, k, Q, "∝", "\\varpropto");
p(g, k, Q, "◀", "\\blacktriangleleft");
p(g, k, Q, "∴", "\\therefore", !0);
p(g, k, Q, "∍", "\\backepsilon");
p(g, k, Q, "▶", "\\blacktriangleright");
p(g, k, Q, "∵", "\\because", !0);
p(g, k, Q, "⋘", "\\llless");
p(g, k, Q, "⋙", "\\gggtr");
p(g, k, te, "⊲", "\\lhd");
p(g, k, te, "⊳", "\\rhd");
p(g, k, Q, "≂", "\\eqsim", !0);
p(g, y, Q, "⋈", "\\Join");
p(g, k, Q, "≑", "\\Doteq", !0);
p(g, k, te, "∔", "\\dotplus", !0);
p(g, k, te, "∖", "\\smallsetminus");
p(g, k, te, "⋒", "\\Cap", !0);
p(g, k, te, "⋓", "\\Cup", !0);
p(g, k, te, "⩞", "\\doublebarwedge", !0);
p(g, k, te, "⊟", "\\boxminus", !0);
p(g, k, te, "⊞", "\\boxplus", !0);
p(g, k, te, "⋇", "\\divideontimes", !0);
p(g, k, te, "⋉", "\\ltimes", !0);
p(g, k, te, "⋊", "\\rtimes", !0);
p(g, k, te, "⋋", "\\leftthreetimes", !0);
p(g, k, te, "⋌", "\\rightthreetimes", !0);
p(g, k, te, "⋏", "\\curlywedge", !0);
p(g, k, te, "⋎", "\\curlyvee", !0);
p(g, k, te, "⊝", "\\circleddash", !0);
p(g, k, te, "⊛", "\\circledast", !0);
p(g, k, te, "⋅", "\\centerdot");
p(g, k, te, "⊺", "\\intercal", !0);
p(g, k, te, "⋒", "\\doublecap");
p(g, k, te, "⋓", "\\doublecup");
p(g, k, te, "⊠", "\\boxtimes", !0);
p(g, k, Q, "⇢", "\\dashrightarrow", !0);
p(g, k, Q, "⇠", "\\dashleftarrow", !0);
p(g, k, Q, "⇇", "\\leftleftarrows", !0);
p(g, k, Q, "⇆", "\\leftrightarrows", !0);
p(g, k, Q, "⇚", "\\Lleftarrow", !0);
p(g, k, Q, "↞", "\\twoheadleftarrow", !0);
p(g, k, Q, "↢", "\\leftarrowtail", !0);
p(g, k, Q, "↫", "\\looparrowleft", !0);
p(g, k, Q, "⇋", "\\leftrightharpoons", !0);
p(g, k, Q, "↶", "\\curvearrowleft", !0);
p(g, k, Q, "↺", "\\circlearrowleft", !0);
p(g, k, Q, "↰", "\\Lsh", !0);
p(g, k, Q, "⇈", "\\upuparrows", !0);
p(g, k, Q, "↿", "\\upharpoonleft", !0);
p(g, k, Q, "⇃", "\\downharpoonleft", !0);
p(g, y, Q, "⊶", "\\origof", !0);
p(g, y, Q, "⊷", "\\imageof", !0);
p(g, k, Q, "⊸", "\\multimap", !0);
p(g, k, Q, "↭", "\\leftrightsquigarrow", !0);
p(g, k, Q, "⇉", "\\rightrightarrows", !0);
p(g, k, Q, "⇄", "\\rightleftarrows", !0);
p(g, k, Q, "↠", "\\twoheadrightarrow", !0);
p(g, k, Q, "↣", "\\rightarrowtail", !0);
p(g, k, Q, "↬", "\\looparrowright", !0);
p(g, k, Q, "↷", "\\curvearrowright", !0);
p(g, k, Q, "↻", "\\circlearrowright", !0);
p(g, k, Q, "↱", "\\Rsh", !0);
p(g, k, Q, "⇊", "\\downdownarrows", !0);
p(g, k, Q, "↾", "\\upharpoonright", !0);
p(g, k, Q, "⇂", "\\downharpoonright", !0);
p(g, k, Q, "⇝", "\\rightsquigarrow", !0);
p(g, k, Q, "⇝", "\\leadsto");
p(g, k, Q, "⇛", "\\Rrightarrow", !0);
p(g, k, Q, "↾", "\\restriction");
p(g, y, D, "‘", "`");
p(g, y, D, "$", "\\$");
p(q, y, D, "$", "\\$");
p(q, y, D, "$", "\\textdollar");
p(g, y, D, "%", "\\%");
p(q, y, D, "%", "\\%");
p(g, y, D, "_", "\\_");
p(q, y, D, "_", "\\_");
p(q, y, D, "_", "\\textunderscore");
p(g, y, D, "∠", "\\angle", !0);
p(g, y, D, "∞", "\\infty", !0);
p(g, y, D, "′", "\\prime");
p(g, y, D, "△", "\\triangle");
p(g, y, D, "Γ", "\\Gamma", !0);
p(g, y, D, "Δ", "\\Delta", !0);
p(g, y, D, "Θ", "\\Theta", !0);
p(g, y, D, "Λ", "\\Lambda", !0);
p(g, y, D, "Ξ", "\\Xi", !0);
p(g, y, D, "Π", "\\Pi", !0);
p(g, y, D, "Σ", "\\Sigma", !0);
p(g, y, D, "Υ", "\\Upsilon", !0);
p(g, y, D, "Φ", "\\Phi", !0);
p(g, y, D, "Ψ", "\\Psi", !0);
p(g, y, D, "Ω", "\\Omega", !0);
p(g, y, D, "A", "Α");
p(g, y, D, "B", "Β");
p(g, y, D, "E", "Ε");
p(g, y, D, "Z", "Ζ");
p(g, y, D, "H", "Η");
p(g, y, D, "I", "Ι");
p(g, y, D, "K", "Κ");
p(g, y, D, "M", "Μ");
p(g, y, D, "N", "Ν");
p(g, y, D, "O", "Ο");
p(g, y, D, "P", "Ρ");
p(g, y, D, "T", "Τ");
p(g, y, D, "X", "Χ");
p(g, y, D, "¬", "\\neg", !0);
p(g, y, D, "¬", "\\lnot");
p(g, y, D, "⊤", "\\top");
p(g, y, D, "⊥", "\\bot");
p(g, y, D, "∅", "\\emptyset");
p(g, k, D, "∅", "\\varnothing");
p(g, y, le, "α", "\\alpha", !0);
p(g, y, le, "β", "\\beta", !0);
p(g, y, le, "γ", "\\gamma", !0);
p(g, y, le, "δ", "\\delta", !0);
p(g, y, le, "ϵ", "\\epsilon", !0);
p(g, y, le, "ζ", "\\zeta", !0);
p(g, y, le, "η", "\\eta", !0);
p(g, y, le, "θ", "\\theta", !0);
p(g, y, le, "ι", "\\iota", !0);
p(g, y, le, "κ", "\\kappa", !0);
p(g, y, le, "λ", "\\lambda", !0);
p(g, y, le, "μ", "\\mu", !0);
p(g, y, le, "ν", "\\nu", !0);
p(g, y, le, "ξ", "\\xi", !0);
p(g, y, le, "ο", "\\omicron", !0);
p(g, y, le, "π", "\\pi", !0);
p(g, y, le, "ρ", "\\rho", !0);
p(g, y, le, "σ", "\\sigma", !0);
p(g, y, le, "τ", "\\tau", !0);
p(g, y, le, "υ", "\\upsilon", !0);
p(g, y, le, "ϕ", "\\phi", !0);
p(g, y, le, "χ", "\\chi", !0);
p(g, y, le, "ψ", "\\psi", !0);
p(g, y, le, "ω", "\\omega", !0);
p(g, y, le, "ε", "\\varepsilon", !0);
p(g, y, le, "ϑ", "\\vartheta", !0);
p(g, y, le, "ϖ", "\\varpi", !0);
p(g, y, le, "ϱ", "\\varrho", !0);
p(g, y, le, "ς", "\\varsigma", !0);
p(g, y, le, "φ", "\\varphi", !0);
p(g, y, te, "∗", "*", !0);
p(g, y, te, "+", "+");
p(g, y, te, "−", "-", !0);
p(g, y, te, "⋅", "\\cdot", !0);
p(g, y, te, "∘", "\\circ", !0);
p(g, y, te, "÷", "\\div", !0);
p(g, y, te, "±", "\\pm", !0);
p(g, y, te, "×", "\\times", !0);
p(g, y, te, "∩", "\\cap", !0);
p(g, y, te, "∪", "\\cup", !0);
p(g, y, te, "∖", "\\setminus", !0);
p(g, y, te, "∧", "\\land");
p(g, y, te, "∨", "\\lor");
p(g, y, te, "∧", "\\wedge", !0);
p(g, y, te, "∨", "\\vee", !0);
p(g, y, D, "√", "\\surd");
p(g, y, Vt, "⟨", "\\langle", !0);
p(g, y, Vt, "∣", "\\lvert");
p(g, y, Vt, "∥", "\\lVert");
p(g, y, kt, "?", "?");
p(g, y, kt, "!", "!");
p(g, y, kt, "⟩", "\\rangle", !0);
p(g, y, kt, "∣", "\\rvert");
p(g, y, kt, "∥", "\\rVert");
p(g, y, Q, "=", "=");
p(g, y, Q, ":", ":");
p(g, y, Q, "≈", "\\approx", !0);
p(g, y, Q, "≅", "\\cong", !0);
p(g, y, Q, "≥", "\\ge");
p(g, y, Q, "≥", "\\geq", !0);
p(g, y, Q, "←", "\\gets");
p(g, y, Q, ">", "\\gt", !0);
p(g, y, Q, "∈", "\\in", !0);
p(g, y, Q, "", "\\@not");
p(g, y, Q, "⊂", "\\subset", !0);
p(g, y, Q, "⊃", "\\supset", !0);
p(g, y, Q, "⊆", "\\subseteq", !0);
p(g, y, Q, "⊇", "\\supseteq", !0);
p(g, k, Q, "⊈", "\\nsubseteq", !0);
p(g, k, Q, "⊉", "\\nsupseteq", !0);
p(g, y, Q, "⊨", "\\models");
p(g, y, Q, "←", "\\leftarrow", !0);
p(g, y, Q, "≤", "\\le");
p(g, y, Q, "≤", "\\leq", !0);
p(g, y, Q, "<", "\\lt", !0);
p(g, y, Q, "→", "\\rightarrow", !0);
p(g, y, Q, "→", "\\to");
p(g, k, Q, "≱", "\\ngeq", !0);
p(g, k, Q, "≰", "\\nleq", !0);
p(g, y, tr, " ", "\\ ");
p(g, y, tr, " ", "\\space");
p(g, y, tr, " ", "\\nobreakspace");
p(q, y, tr, " ", "\\ ");
p(q, y, tr, " ", " ");
p(q, y, tr, " ", "\\space");
p(q, y, tr, " ", "\\nobreakspace");
p(g, y, tr, null, "\\nobreak");
p(g, y, tr, null, "\\allowbreak");
p(g, y, Ca, ",", ",");
p(g, y, Ca, ";", ";");
p(g, k, te, "⊼", "\\barwedge", !0);
p(g, k, te, "⊻", "\\veebar", !0);
p(g, y, te, "⊙", "\\odot", !0);
p(g, y, te, "⊕", "\\oplus", !0);
p(g, y, te, "⊗", "\\otimes", !0);
p(g, y, D, "∂", "\\partial", !0);
p(g, y, te, "⊘", "\\oslash", !0);
p(g, k, te, "⊚", "\\circledcirc", !0);
p(g, k, te, "⊡", "\\boxdot", !0);
p(g, y, te, "△", "\\bigtriangleup");
p(g, y, te, "▽", "\\bigtriangledown");
p(g, y, te, "†", "\\dagger");
p(g, y, te, "⋄", "\\diamond");
p(g, y, te, "⋆", "\\star");
p(g, y, te, "◃", "\\triangleleft");
p(g, y, te, "▹", "\\triangleright");
p(g, y, Vt, "{", "\\{");
p(q, y, D, "{", "\\{");
p(q, y, D, "{", "\\textbraceleft");
p(g, y, kt, "}", "\\}");
p(q, y, D, "}", "\\}");
p(q, y, D, "}", "\\textbraceright");
p(g, y, Vt, "{", "\\lbrace");
p(g, y, kt, "}", "\\rbrace");
p(g, y, Vt, "[", "\\lbrack", !0);
p(q, y, D, "[", "\\lbrack", !0);
p(g, y, kt, "]", "\\rbrack", !0);
p(q, y, D, "]", "\\rbrack", !0);
p(g, y, Vt, "(", "\\lparen", !0);
p(g, y, kt, ")", "\\rparen", !0);
p(q, y, D, "<", "\\textless", !0);
p(q, y, D, ">", "\\textgreater", !0);
p(g, y, Vt, "⌊", "\\lfloor", !0);
p(g, y, kt, "⌋", "\\rfloor", !0);
p(g, y, Vt, "⌈", "\\lceil", !0);
p(g, y, kt, "⌉", "\\rceil", !0);
p(g, y, D, "\\", "\\backslash");
p(g, y, D, "∣", "|");
p(g, y, D, "∣", "\\vert");
p(q, y, D, "|", "\\textbar", !0);
p(g, y, D, "∥", "\\|");
p(g, y, D, "∥", "\\Vert");
p(q, y, D, "∥", "\\textbardbl");
p(q, y, D, "~", "\\textasciitilde");
p(q, y, D, "\\", "\\textbackslash");
p(q, y, D, "^", "\\textasciicircum");
p(g, y, Q, "↑", "\\uparrow", !0);
p(g, y, Q, "⇑", "\\Uparrow", !0);
p(g, y, Q, "↓", "\\downarrow", !0);
p(g, y, Q, "⇓", "\\Downarrow", !0);
p(g, y, Q, "↕", "\\updownarrow", !0);
p(g, y, Q, "⇕", "\\Updownarrow", !0);
p(g, y, rt, "∐", "\\coprod");
p(g, y, rt, "⋁", "\\bigvee");
p(g, y, rt, "⋀", "\\bigwedge");
p(g, y, rt, "⨄", "\\biguplus");
p(g, y, rt, "⋂", "\\bigcap");
p(g, y, rt, "⋃", "\\bigcup");
p(g, y, rt, "∫", "\\int");
p(g, y, rt, "∫", "\\intop");
p(g, y, rt, "∬", "\\iint");
p(g, y, rt, "∭", "\\iiint");
p(g, y, rt, "∏", "\\prod");
p(g, y, rt, "∑", "\\sum");
p(g, y, rt, "⨂", "\\bigotimes");
p(g, y, rt, "⨁", "\\bigoplus");
p(g, y, rt, "⨀", "\\bigodot");
p(g, y, rt, "∮", "\\oint");
p(g, y, rt, "∯", "\\oiint");
p(g, y, rt, "∰", "\\oiiint");
p(g, y, rt, "⨆", "\\bigsqcup");
p(g, y, rt, "∫", "\\smallint");
p(q, y, Si, "…", "\\textellipsis");
p(g, y, Si, "…", "\\mathellipsis");
p(q, y, Si, "…", "\\ldots", !0);
p(g, y, Si, "…", "\\ldots", !0);
p(g, y, Si, "⋯", "\\@cdots", !0);
p(g, y, Si, "⋱", "\\ddots", !0);
p(g, y, D, "⋮", "\\varvdots");
p(q, y, D, "⋮", "\\varvdots");
p(g, y, Ne, "ˊ", "\\acute");
p(g, y, Ne, "ˋ", "\\grave");
p(g, y, Ne, "¨", "\\ddot");
p(g, y, Ne, "~", "\\tilde");
p(g, y, Ne, "ˉ", "\\bar");
p(g, y, Ne, "˘", "\\breve");
p(g, y, Ne, "ˇ", "\\check");
p(g, y, Ne, "^", "\\hat");
p(g, y, Ne, "⃗", "\\vec");
p(g, y, Ne, "˙", "\\dot");
p(g, y, Ne, "˚", "\\mathring");
p(g, y, le, "", "\\@imath");
p(g, y, le, "", "\\@jmath");
p(g, y, D, "ı", "ı");
p(g, y, D, "ȷ", "ȷ");
p(q, y, D, "ı", "\\i", !0);
p(q, y, D, "ȷ", "\\j", !0);
p(q, y, D, "ß", "\\ss", !0);
p(q, y, D, "æ", "\\ae", !0);
p(q, y, D, "œ", "\\oe", !0);
p(q, y, D, "ø", "\\o", !0);
p(q, y, D, "Æ", "\\AE", !0);
p(q, y, D, "Œ", "\\OE", !0);
p(q, y, D, "Ø", "\\O", !0);
p(q, y, Ne, "ˊ", "\\'");
p(q, y, Ne, "ˋ", "\\`");
p(q, y, Ne, "ˆ", "\\^");
p(q, y, Ne, "˜", "\\~");
p(q, y, Ne, "ˉ", "\\=");
p(q, y, Ne, "˘", "\\u");
p(q, y, Ne, "˙", "\\.");
p(q, y, Ne, "¸", "\\c");
p(q, y, Ne, "˚", "\\r");
p(q, y, Ne, "ˇ", "\\v");
p(q, y, Ne, "¨", '\\"');
p(q, y, Ne, "˝", "\\H");
p(q, y, Ne, "◯", "\\textcircled");
var Q1 = {
  "--": !0,
  "---": !0,
  "``": !0,
  "''": !0
};
p(q, y, D, "–", "--", !0);
p(q, y, D, "–", "\\textendash");
p(q, y, D, "—", "---", !0);
p(q, y, D, "—", "\\textemdash");
p(q, y, D, "‘", "`", !0);
p(q, y, D, "‘", "\\textquoteleft");
p(q, y, D, "’", "'", !0);
p(q, y, D, "’", "\\textquoteright");
p(q, y, D, "“", "``", !0);
p(q, y, D, "“", "\\textquotedblleft");
p(q, y, D, "”", "''", !0);
p(q, y, D, "”", "\\textquotedblright");
p(g, y, D, "°", "\\degree", !0);
p(q, y, D, "°", "\\degree");
p(q, y, D, "°", "\\textdegree", !0);
p(g, y, D, "£", "\\pounds");
p(g, y, D, "£", "\\mathsterling", !0);
p(q, y, D, "£", "\\pounds");
p(q, y, D, "£", "\\textsterling", !0);
p(g, k, D, "✠", "\\maltese");
p(q, k, D, "✠", "\\maltese");
var _c = '0123456789/@."';
for (var ao = 0; ao < _c.length; ao++) {
  var Uc = _c.charAt(ao);
  p(g, y, D, Uc, Uc);
}
var Wc = '0123456789!@*()-=+";:?/.,';
for (var oo = 0; oo < Wc.length; oo++) {
  var Yc = Wc.charAt(oo);
  p(q, y, D, Yc, Yc);
}
var Hl = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
for (var uo = 0; uo < Hl.length; uo++) {
  var el = Hl.charAt(uo);
  p(g, y, le, el, el), p(q, y, D, el, el);
}
p(g, k, D, "C", "ℂ");
p(q, k, D, "C", "ℂ");
p(g, k, D, "H", "ℍ");
p(q, k, D, "H", "ℍ");
p(g, k, D, "N", "ℕ");
p(q, k, D, "N", "ℕ");
p(g, k, D, "P", "ℙ");
p(q, k, D, "P", "ℙ");
p(g, k, D, "Q", "ℚ");
p(q, k, D, "Q", "ℚ");
p(g, k, D, "R", "ℝ");
p(q, k, D, "R", "ℝ");
p(g, k, D, "Z", "ℤ");
p(q, k, D, "Z", "ℤ");
p(g, y, le, "h", "ℎ");
p(q, y, le, "h", "ℎ");
var ue = "";
for (var Ot = 0; Ot < Hl.length; Ot++) {
  var We = Hl.charAt(Ot);
  ue = String.fromCharCode(55349, 56320 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56372 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56424 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56580 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56684 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56736 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56788 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56840 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56944 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), Ot < 26 && (ue = String.fromCharCode(55349, 56632 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue), ue = String.fromCharCode(55349, 56476 + Ot), p(g, y, le, We, ue), p(q, y, D, We, ue));
}
ue = "𝕜";
p(g, y, le, "k", ue);
p(q, y, D, "k", ue);
for (var Ar = 0; Ar < 10; Ar++) {
  var lr = Ar.toString();
  ue = String.fromCharCode(55349, 57294 + Ar), p(g, y, le, lr, ue), p(q, y, D, lr, ue), ue = String.fromCharCode(55349, 57314 + Ar), p(g, y, le, lr, ue), p(q, y, D, lr, ue), ue = String.fromCharCode(55349, 57324 + Ar), p(g, y, le, lr, ue), p(q, y, D, lr, ue), ue = String.fromCharCode(55349, 57334 + Ar), p(g, y, le, lr, ue), p(q, y, D, lr, ue);
}
var Bu = "ÐÞþ";
for (var ho = 0; ho < Bu.length; ho++) {
  var tl = Bu.charAt(ho);
  p(g, y, le, tl, tl), p(q, y, D, tl, tl);
}
var nl = [
  ["mathbf", "textbf", "Main-Bold"],
  // A-Z bold upright
  ["mathbf", "textbf", "Main-Bold"],
  // a-z bold upright
  ["mathnormal", "textit", "Math-Italic"],
  // A-Z italic
  ["mathnormal", "textit", "Math-Italic"],
  // a-z italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // A-Z bold italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // a-z bold italic
  // Map fancy A-Z letters to script, not calligraphic.
  // This aligns with unicode-math and math fonts (except Cambria Math).
  ["mathscr", "textscr", "Script-Regular"],
  // A-Z script
  ["", "", ""],
  // a-z script.  No font
  ["", "", ""],
  // A-Z bold script. No font
  ["", "", ""],
  // a-z bold script. No font
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // A-Z Fraktur
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // a-z Fraktur
  ["mathbb", "textbb", "AMS-Regular"],
  // A-Z double-struck
  ["mathbb", "textbb", "AMS-Regular"],
  // k double-struck
  // Note that we are using a bold font, but font metrics for regular Fraktur.
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // A-Z bold Fraktur
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // a-z bold Fraktur
  ["mathsf", "textsf", "SansSerif-Regular"],
  // A-Z sans-serif
  ["mathsf", "textsf", "SansSerif-Regular"],
  // a-z sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // A-Z bold sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // a-z bold sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // A-Z italic sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // a-z italic sans-serif
  ["", "", ""],
  // A-Z bold italic sans. No font
  ["", "", ""],
  // a-z bold italic sans. No font
  ["mathtt", "texttt", "Typewriter-Regular"],
  // A-Z monospace
  ["mathtt", "texttt", "Typewriter-Regular"]
  // a-z monospace
], Gc = [
  ["mathbf", "textbf", "Main-Bold"],
  // 0-9 bold
  ["", "", ""],
  // 0-9 double-struck. No KaTeX font.
  ["mathsf", "textsf", "SansSerif-Regular"],
  // 0-9 sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // 0-9 bold sans-serif
  ["mathtt", "texttt", "Typewriter-Regular"]
  // 0-9 monospace
], y8 = function(e, t) {
  var r = e.charCodeAt(0), i = e.charCodeAt(1), s = (r - 55296) * 1024 + (i - 56320) + 65536, l = t === "math" ? 0 : 1;
  if (119808 <= s && s < 120484) {
    var a = Math.floor((s - 119808) / 26);
    return [nl[a][2], nl[a][l]];
  } else if (120782 <= s && s <= 120831) {
    var o = Math.floor((s - 120782) / 10);
    return [Gc[o][2], Gc[o][l]];
  } else {
    if (s === 120485 || s === 120486)
      return [nl[0][2], nl[0][l]];
    if (120486 < s && s < 120782)
      return ["", ""];
    throw new I("Unsupported character: " + e);
  }
}, Aa = function(e, t, r) {
  return Be[r][e] && Be[r][e].replace && (e = Be[r][e].replace), {
    value: e,
    metrics: sh(e, t, r)
  };
}, un = function(e, t, r, i, s) {
  var l = Aa(e, t, r), a = l.metrics;
  e = l.value;
  var o;
  if (a) {
    var u = a.italic;
    (r === "text" || i && i.font === "mathit") && (u = 0), o = new Jt(e, a.height, a.depth, u, a.skew, a.width, s);
  } else
    typeof console < "u" && console.warn("No character metrics " + ("for '" + e + "' in style '" + t + "' and mode '" + r + "'")), o = new Jt(e, 0, 0, 0, 0, 0, s);
  if (i) {
    o.maxFontSize = i.sizeMultiplier, i.style.isTight() && o.classes.push("mtight");
    var h = i.getColor();
    h && (o.style.color = h);
  }
  return o;
}, b8 = function(e, t, r, i) {
  return i === void 0 && (i = []), r.font === "boldsymbol" && Aa(e, "Main-Bold", t).metrics ? un(e, "Main-Bold", t, r, i.concat(["mathbf"])) : e === "\\" || Be[t][e].font === "main" ? un(e, "Main-Regular", t, r, i) : un(e, "AMS-Regular", t, r, i.concat(["amsrm"]));
}, x8 = function(e, t, r, i, s) {
  return s !== "textord" && Aa(e, "Math-BoldItalic", t).metrics ? {
    fontName: "Math-BoldItalic",
    fontClass: "boldsymbol"
  } : {
    fontName: "Main-Bold",
    fontClass: "mathbf"
  };
}, v8 = function(e, t, r) {
  var i = e.mode, s = e.text, l = ["mord"], a = i === "math" || i === "text" && t.font, o = a ? t.font : t.fontFamily, u = "", h = "";
  if (s.charCodeAt(0) === 55349 && ([u, h] = y8(s, i)), u.length > 0)
    return un(s, u, i, t, l.concat(h));
  if (o) {
    var c, f;
    if (o === "boldsymbol") {
      var d = x8(s, i, t, l, r);
      c = d.fontName, f = [d.fontClass];
    } else a ? (c = A1[o].fontName, f = [o]) : (c = rl(o, t.fontWeight, t.fontShape), f = [o, t.fontWeight, t.fontShape]);
    if (Aa(s, c, i).metrics)
      return un(s, c, i, t, l.concat(f));
    if (Q1.hasOwnProperty(s) && c.slice(0, 10) === "Typewriter") {
      for (var m = [], O = 0; O < s.length; O++)
        m.push(un(s[O], c, i, t, l.concat(f)));
      return C1(m);
    }
  }
  if (r === "mathord")
    return un(s, "Math-Italic", i, t, l.concat(["mathnormal"]));
  if (r === "textord") {
    var x = Be[i][s] && Be[i][s].font;
    if (x === "ams") {
      var b = rl("amsrm", t.fontWeight, t.fontShape);
      return un(s, b, i, t, l.concat("amsrm", t.fontWeight, t.fontShape));
    } else if (x === "main" || !x) {
      var w = rl("textrm", t.fontWeight, t.fontShape);
      return un(s, w, i, t, l.concat(t.fontWeight, t.fontShape));
    } else {
      var C = rl(x, t.fontWeight, t.fontShape);
      return un(s, C, i, t, l.concat(C, t.fontWeight, t.fontShape));
    }
  } else
    throw new Error("unexpected type: " + r + " in makeOrd");
}, w8 = (n, e) => {
  if (dr(n.classes) !== dr(e.classes) || n.skew !== e.skew || n.maxFontSize !== e.maxFontSize)
    return !1;
  if (n.classes.length === 1) {
    var t = n.classes[0];
    if (t === "mbin" || t === "mord")
      return !1;
  }
  for (var r in n.style)
    if (n.style.hasOwnProperty(r) && n.style[r] !== e.style[r])
      return !1;
  for (var i in e.style)
    if (e.style.hasOwnProperty(i) && n.style[i] !== e.style[i])
      return !1;
  return !0;
}, k8 = (n) => {
  for (var e = 0; e < n.length - 1; e++) {
    var t = n[e], r = n[e + 1];
    t instanceof Jt && r instanceof Jt && w8(t, r) && (t.text += r.text, t.height = Math.max(t.height, r.height), t.depth = Math.max(t.depth, r.depth), t.italic = r.italic, n.splice(e + 1, 1), e--);
  }
  return n;
}, ah = function(e) {
  for (var t = 0, r = 0, i = 0, s = 0; s < e.children.length; s++) {
    var l = e.children[s];
    l.height > t && (t = l.height), l.depth > r && (r = l.depth), l.maxFontSize > i && (i = l.maxFontSize);
  }
  e.height = t, e.depth = r, e.maxFontSize = i;
}, Pt = function(e, t, r, i) {
  var s = new zs(e, t, r, i);
  return ah(s), s;
}, P1 = (n, e, t, r) => new zs(n, e, t, r), S8 = function(e, t, r) {
  var i = Pt([e], [], t);
  return i.height = Math.max(r || t.fontMetrics().defaultRuleThickness, t.minRuleThickness), i.style.borderBottomWidth = W(i.height), i.maxFontSize = 1, i;
}, Q8 = function(e, t, r, i) {
  var s = new lh(e, t, r, i);
  return ah(s), s;
}, C1 = function(e) {
  var t = new Zs(e);
  return ah(t), t;
}, P8 = function(e, t) {
  return e instanceof Zs ? Pt([], [e], t) : e;
}, C8 = function(e) {
  if (e.positionType === "individualShift") {
    for (var t = e.children, r = [t[0]], i = -t[0].shift - t[0].elem.depth, s = i, l = 1; l < t.length; l++) {
      var a = -t[l].shift - s - t[l].elem.depth, o = a - (t[l - 1].elem.height + t[l - 1].elem.depth);
      s = s + a, r.push({
        type: "kern",
        size: o
      }), r.push(t[l]);
    }
    return {
      children: r,
      depth: i
    };
  }
  var u;
  if (e.positionType === "top") {
    for (var h = e.positionData, c = 0; c < e.children.length; c++) {
      var f = e.children[c];
      h -= f.type === "kern" ? f.size : f.elem.height + f.elem.depth;
    }
    u = h;
  } else if (e.positionType === "bottom")
    u = -e.positionData;
  else {
    var d = e.children[0];
    if (d.type !== "elem")
      throw new Error('First child must have type "elem".');
    if (e.positionType === "shift")
      u = -d.elem.depth - e.positionData;
    else if (e.positionType === "firstBaseline")
      u = -d.elem.depth;
    else
      throw new Error("Invalid positionType " + e.positionType + ".");
  }
  return {
    children: e.children,
    depth: u
  };
}, A8 = function(e, t) {
  for (var {
    children: r,
    depth: i
  } = C8(e), s = 0, l = 0; l < r.length; l++) {
    var a = r[l];
    if (a.type === "elem") {
      var o = a.elem;
      s = Math.max(s, o.maxFontSize, o.height);
    }
  }
  s += 2;
  var u = Pt(["pstrut"], []);
  u.style.height = W(s);
  for (var h = [], c = i, f = i, d = i, m = 0; m < r.length; m++) {
    var O = r[m];
    if (O.type === "kern")
      d += O.size;
    else {
      var x = O.elem, b = O.wrapperClasses || [], w = O.wrapperStyle || {}, C = Pt(b, [u, x], void 0, w);
      C.style.top = W(-s - d - x.depth), O.marginLeft && (C.style.marginLeft = O.marginLeft), O.marginRight && (C.style.marginRight = O.marginRight), h.push(C), d += x.height + x.depth;
    }
    c = Math.min(c, d), f = Math.max(f, d);
  }
  var Z = Pt(["vlist"], h);
  Z.style.height = W(f);
  var T;
  if (c < 0) {
    var S = Pt([], []), E = Pt(["vlist"], [S]);
    E.style.height = W(-c);
    var N = Pt(["vlist-s"], [new Jt("​")]);
    T = [Pt(["vlist-r"], [Z, N]), Pt(["vlist-r"], [E])];
  } else
    T = [Pt(["vlist-r"], [Z])];
  var z = Pt(["vlist-t"], T);
  return T.length === 2 && z.classes.push("vlist-t2"), z.height = f, z.depth = -c, z;
}, $8 = (n, e) => {
  var t = Pt(["mspace"], [], e), r = _e(n, e);
  return t.style.marginRight = W(r), t;
}, rl = function(e, t, r) {
  var i = "";
  switch (e) {
    case "amsrm":
      i = "AMS";
      break;
    case "textrm":
      i = "Main";
      break;
    case "textsf":
      i = "SansSerif";
      break;
    case "texttt":
      i = "Typewriter";
      break;
    default:
      i = e;
  }
  var s;
  return t === "textbf" && r === "textit" ? s = "BoldItalic" : t === "textbf" ? s = "Bold" : t === "textit" ? s = "Italic" : s = "Regular", i + "-" + s;
}, A1 = {
  // styles
  mathbf: {
    variant: "bold",
    fontName: "Main-Bold"
  },
  mathrm: {
    variant: "normal",
    fontName: "Main-Regular"
  },
  textit: {
    variant: "italic",
    fontName: "Main-Italic"
  },
  mathit: {
    variant: "italic",
    fontName: "Main-Italic"
  },
  mathnormal: {
    variant: "italic",
    fontName: "Math-Italic"
  },
  mathsfit: {
    variant: "sans-serif-italic",
    fontName: "SansSerif-Italic"
  },
  // "boldsymbol" is missing because they require the use of multiple fonts:
  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
  // makeOrd which ends up calling boldsymbol.
  // families
  mathbb: {
    variant: "double-struck",
    fontName: "AMS-Regular"
  },
  mathcal: {
    variant: "script",
    fontName: "Caligraphic-Regular"
  },
  mathfrak: {
    variant: "fraktur",
    fontName: "Fraktur-Regular"
  },
  mathscr: {
    variant: "script",
    fontName: "Script-Regular"
  },
  mathsf: {
    variant: "sans-serif",
    fontName: "SansSerif-Regular"
  },
  mathtt: {
    variant: "monospace",
    fontName: "Typewriter-Regular"
  }
}, $1 = {
  //   path, width, height
  vec: ["vec", 0.471, 0.714],
  // values from the font glyph
  oiintSize1: ["oiintSize1", 0.957, 0.499],
  // oval to overlay the integrand
  oiintSize2: ["oiintSize2", 1.472, 0.659],
  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
}, D8 = function(e, t) {
  var [r, i, s] = $1[e], l = new pr(r), a = new Yn([l], {
    width: W(i),
    height: W(s),
    // Override CSS rule `.katex svg { width: 100% }`
    style: "width:" + W(i),
    viewBox: "0 0 " + 1e3 * i + " " + 1e3 * s,
    preserveAspectRatio: "xMinYMin"
  }), o = P1(["overlay"], [a], t);
  return o.height = s, o.style.height = W(s), o.style.width = W(i), o;
}, R = {
  fontMap: A1,
  makeSymbol: un,
  mathsym: b8,
  makeSpan: Pt,
  makeSvgSpan: P1,
  makeLineSpan: S8,
  makeAnchor: Q8,
  makeFragment: C1,
  wrapFragment: P8,
  makeVList: A8,
  makeOrd: v8,
  makeGlue: $8,
  staticSvg: D8,
  svgData: $1,
  tryCombineChars: k8
}, je = {
  number: 3,
  unit: "mu"
}, $r = {
  number: 4,
  unit: "mu"
}, Bn = {
  number: 5,
  unit: "mu"
}, T8 = {
  mord: {
    mop: je,
    mbin: $r,
    mrel: Bn,
    minner: je
  },
  mop: {
    mord: je,
    mop: je,
    mrel: Bn,
    minner: je
  },
  mbin: {
    mord: $r,
    mop: $r,
    mopen: $r,
    minner: $r
  },
  mrel: {
    mord: Bn,
    mop: Bn,
    mopen: Bn,
    minner: Bn
  },
  mopen: {},
  mclose: {
    mop: je,
    mbin: $r,
    mrel: Bn,
    minner: je
  },
  mpunct: {
    mord: je,
    mop: je,
    mrel: Bn,
    mopen: je,
    mclose: je,
    mpunct: je,
    minner: je
  },
  minner: {
    mord: je,
    mop: je,
    mbin: $r,
    mrel: Bn,
    mopen: je,
    mpunct: je,
    minner: je
  }
}, M8 = {
  mord: {
    mop: je
  },
  mop: {
    mord: je,
    mop: je
  },
  mbin: {},
  mrel: {},
  mopen: {},
  mclose: {
    mop: je
  },
  mpunct: {},
  minner: {
    mop: je
  }
}, D1 = {}, Kl = {}, Jl = {};
function H(n) {
  for (var {
    type: e,
    names: t,
    props: r,
    handler: i,
    htmlBuilder: s,
    mathmlBuilder: l
  } = n, a = {
    type: e,
    numArgs: r.numArgs,
    argTypes: r.argTypes,
    allowedInArgument: !!r.allowedInArgument,
    allowedInText: !!r.allowedInText,
    allowedInMath: r.allowedInMath === void 0 ? !0 : r.allowedInMath,
    numOptionalArgs: r.numOptionalArgs || 0,
    infix: !!r.infix,
    primitive: !!r.primitive,
    handler: i
  }, o = 0; o < t.length; ++o)
    D1[t[o]] = a;
  e && (s && (Kl[e] = s), l && (Jl[e] = l));
}
function Xr(n) {
  var {
    type: e,
    htmlBuilder: t,
    mathmlBuilder: r
  } = n;
  H({
    type: e,
    names: [],
    props: {
      numArgs: 0
    },
    handler() {
      throw new Error("Should never be called.");
    },
    htmlBuilder: t,
    mathmlBuilder: r
  });
}
var ea = function(e) {
  return e.type === "ordgroup" && e.body.length === 1 ? e.body[0] : e;
}, He = function(e) {
  return e.type === "ordgroup" ? e.body : [e];
}, Gn = R.makeSpan, E8 = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"], R8 = ["rightmost", "mrel", "mclose", "mpunct"], Z8 = {
  display: ae.DISPLAY,
  text: ae.TEXT,
  script: ae.SCRIPT,
  scriptscript: ae.SCRIPTSCRIPT
}, z8 = {
  mord: "mord",
  mop: "mop",
  mbin: "mbin",
  mrel: "mrel",
  mopen: "mopen",
  mclose: "mclose",
  mpunct: "mpunct",
  minner: "minner"
}, st = function(e, t, r, i) {
  i === void 0 && (i = [null, null]);
  for (var s = [], l = 0; l < e.length; l++) {
    var a = Se(e[l], t);
    if (a instanceof Zs) {
      var o = a.children;
      s.push(...o);
    } else
      s.push(a);
  }
  if (R.tryCombineChars(s), !r)
    return s;
  var u = t;
  if (e.length === 1) {
    var h = e[0];
    h.type === "sizing" ? u = t.havingSize(h.size) : h.type === "styling" && (u = t.havingStyle(Z8[h.style]));
  }
  var c = Gn([i[0] || "leftmost"], [], t), f = Gn([i[1] || "rightmost"], [], t), d = r === "root";
  return Hc(s, (m, O) => {
    var x = O.classes[0], b = m.classes[0];
    x === "mbin" && se.contains(R8, b) ? O.classes[0] = "mord" : b === "mbin" && se.contains(E8, x) && (m.classes[0] = "mord");
  }, {
    node: c
  }, f, d), Hc(s, (m, O) => {
    var x = Lu(O), b = Lu(m), w = x && b ? m.hasClass("mtight") ? M8[x][b] : T8[x][b] : null;
    if (w)
      return R.makeGlue(w, u);
  }, {
    node: c
  }, f, d), s;
}, Hc = function n(e, t, r, i, s) {
  i && e.push(i);
  for (var l = 0; l < e.length; l++) {
    var a = e[l], o = T1(a);
    if (o) {
      n(o.children, t, r, null, s);
      continue;
    }
    var u = !a.hasClass("mspace");
    if (u) {
      var h = t(a, r.node);
      h && (r.insertAfter ? r.insertAfter(h) : (e.unshift(h), l++));
    }
    u ? r.node = a : s && a.hasClass("newline") && (r.node = Gn(["leftmost"])), r.insertAfter = /* @__PURE__ */ ((c) => (f) => {
      e.splice(c + 1, 0, f), l++;
    })(l);
  }
  i && e.pop();
}, T1 = function(e) {
  return e instanceof Zs || e instanceof lh || e instanceof zs && e.hasClass("enclosing") ? e : null;
}, F8 = function n(e, t) {
  var r = T1(e);
  if (r) {
    var i = r.children;
    if (i.length) {
      if (t === "right")
        return n(i[i.length - 1], "right");
      if (t === "left")
        return n(i[0], "left");
    }
  }
  return e;
}, Lu = function(e, t) {
  return e ? (t && (e = F8(e, t)), z8[e.classes[0]] || null) : null;
}, fs = function(e, t) {
  var r = ["nulldelimiter"].concat(e.baseSizingClasses());
  return Gn(t.concat(r));
}, Se = function(e, t, r) {
  if (!e)
    return Gn();
  if (Kl[e.type]) {
    var i = Kl[e.type](e, t);
    if (r && t.size !== r.size) {
      i = Gn(t.sizingClasses(r), [i], t);
      var s = t.sizeMultiplier / r.sizeMultiplier;
      i.height *= s, i.depth *= s;
    }
    return i;
  } else
    throw new I("Got group of unknown type: '" + e.type + "'");
};
function il(n, e) {
  var t = Gn(["base"], n, e), r = Gn(["strut"]);
  return r.style.height = W(t.height + t.depth), t.depth && (r.style.verticalAlign = W(-t.depth)), t.children.unshift(r), t;
}
function qu(n, e) {
  var t = null;
  n.length === 1 && n[0].type === "tag" && (t = n[0].tag, n = n[0].body);
  var r = st(n, e, "root"), i;
  r.length === 2 && r[1].hasClass("tag") && (i = r.pop());
  for (var s = [], l = [], a = 0; a < r.length; a++)
    if (l.push(r[a]), r[a].hasClass("mbin") || r[a].hasClass("mrel") || r[a].hasClass("allowbreak")) {
      for (var o = !1; a < r.length - 1 && r[a + 1].hasClass("mspace") && !r[a + 1].hasClass("newline"); )
        a++, l.push(r[a]), r[a].hasClass("nobreak") && (o = !0);
      o || (s.push(il(l, e)), l = []);
    } else r[a].hasClass("newline") && (l.pop(), l.length > 0 && (s.push(il(l, e)), l = []), s.push(r[a]));
  l.length > 0 && s.push(il(l, e));
  var u;
  t ? (u = il(st(t, e, !0)), u.classes = ["tag"], s.push(u)) : i && s.push(i);
  var h = Gn(["katex-html"], s);
  if (h.setAttribute("aria-hidden", "true"), u) {
    var c = u.children[0];
    c.style.height = W(h.height + h.depth), h.depth && (c.style.verticalAlign = W(-h.depth));
  }
  return h;
}
function M1(n) {
  return new Zs(n);
}
class Xt {
  constructor(e, t, r) {
    this.type = void 0, this.attributes = void 0, this.children = void 0, this.classes = void 0, this.type = e, this.attributes = {}, this.children = t || [], this.classes = r || [];
  }
  /**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */
  setAttribute(e, t) {
    this.attributes[e] = t;
  }
  /**
   * Gets an attribute on a MathML node.
   */
  getAttribute(e) {
    return this.attributes[e];
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    var e = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && e.setAttribute(t, this.attributes[t]);
    this.classes.length > 0 && (e.className = dr(this.classes));
    for (var r = 0; r < this.children.length; r++)
      if (this.children[r] instanceof wn && this.children[r + 1] instanceof wn) {
        for (var i = this.children[r].toText() + this.children[++r].toText(); this.children[r + 1] instanceof wn; )
          i += this.children[++r].toText();
        e.appendChild(new wn(i).toNode());
      } else
        e.appendChild(this.children[r].toNode());
    return e;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    var e = "<" + this.type;
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && (e += " " + t + '="', e += se.escape(this.attributes[t]), e += '"');
    this.classes.length > 0 && (e += ' class ="' + se.escape(dr(this.classes)) + '"'), e += ">";
    for (var r = 0; r < this.children.length; r++)
      e += this.children[r].toMarkup();
    return e += "</" + this.type + ">", e;
  }
  /**
   * Converts the math node into a string, similar to innerText, but escaped.
   */
  toText() {
    return this.children.map((e) => e.toText()).join("");
  }
}
let wn = class {
  constructor(e) {
    this.text = void 0, this.text = e;
  }
  /**
   * Converts the text node into a DOM text node.
   */
  toNode() {
    return document.createTextNode(this.text);
  }
  /**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */
  toMarkup() {
    return se.escape(this.toText());
  }
  /**
   * Converts the text node into a string
   * (representing the text itself).
   */
  toText() {
    return this.text;
  }
};
class B8 {
  /**
   * Create a Space node with width given in CSS ems.
   */
  constructor(e) {
    this.width = void 0, this.character = void 0, this.width = e, e >= 0.05555 && e <= 0.05556 ? this.character = " " : e >= 0.1666 && e <= 0.1667 ? this.character = " " : e >= 0.2222 && e <= 0.2223 ? this.character = " " : e >= 0.2777 && e <= 0.2778 ? this.character = "  " : e >= -0.05556 && e <= -0.05555 ? this.character = " ⁣" : e >= -0.1667 && e <= -0.1666 ? this.character = " ⁣" : e >= -0.2223 && e <= -0.2222 ? this.character = " ⁣" : e >= -0.2778 && e <= -0.2777 ? this.character = " ⁣" : this.character = null;
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    if (this.character)
      return document.createTextNode(this.character);
    var e = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
    return e.setAttribute("width", W(this.width)), e;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    return this.character ? "<mtext>" + this.character + "</mtext>" : '<mspace width="' + W(this.width) + '"/>';
  }
  /**
   * Converts the math node into a string, similar to innerText.
   */
  toText() {
    return this.character ? this.character : " ";
  }
}
var X = {
  MathNode: Xt,
  TextNode: wn,
  SpaceNode: B8,
  newDocumentFragment: M1
}, en = function(e, t, r) {
  return Be[t][e] && Be[t][e].replace && e.charCodeAt(0) !== 55349 && !(Q1.hasOwnProperty(e) && r && (r.fontFamily && r.fontFamily.slice(4, 6) === "tt" || r.font && r.font.slice(4, 6) === "tt")) && (e = Be[t][e].replace), new X.TextNode(e);
}, oh = function(e) {
  return e.length === 1 ? e[0] : new X.MathNode("mrow", e);
}, uh = function(e, t) {
  if (t.fontFamily === "texttt")
    return "monospace";
  if (t.fontFamily === "textsf")
    return t.fontShape === "textit" && t.fontWeight === "textbf" ? "sans-serif-bold-italic" : t.fontShape === "textit" ? "sans-serif-italic" : t.fontWeight === "textbf" ? "bold-sans-serif" : "sans-serif";
  if (t.fontShape === "textit" && t.fontWeight === "textbf")
    return "bold-italic";
  if (t.fontShape === "textit")
    return "italic";
  if (t.fontWeight === "textbf")
    return "bold";
  var r = t.font;
  if (!r || r === "mathnormal")
    return null;
  var i = e.mode;
  if (r === "mathit")
    return "italic";
  if (r === "boldsymbol")
    return e.type === "textord" ? "bold" : "bold-italic";
  if (r === "mathbf")
    return "bold";
  if (r === "mathbb")
    return "double-struck";
  if (r === "mathsfit")
    return "sans-serif-italic";
  if (r === "mathfrak")
    return "fraktur";
  if (r === "mathscr" || r === "mathcal")
    return "script";
  if (r === "mathsf")
    return "sans-serif";
  if (r === "mathtt")
    return "monospace";
  var s = e.text;
  if (se.contains(["\\imath", "\\jmath"], s))
    return null;
  Be[i][s] && Be[i][s].replace && (s = Be[i][s].replace);
  var l = R.fontMap[r].fontName;
  return sh(s, l, i) ? R.fontMap[r].variant : null;
};
function co(n) {
  if (!n)
    return !1;
  if (n.type === "mi" && n.children.length === 1) {
    var e = n.children[0];
    return e instanceof wn && e.text === ".";
  } else if (n.type === "mo" && n.children.length === 1 && n.getAttribute("separator") === "true" && n.getAttribute("lspace") === "0em" && n.getAttribute("rspace") === "0em") {
    var t = n.children[0];
    return t instanceof wn && t.text === ",";
  } else
    return !1;
}
var Dt = function(e, t, r) {
  if (e.length === 1) {
    var i = Re(e[0], t);
    return r && i instanceof Xt && i.type === "mo" && (i.setAttribute("lspace", "0em"), i.setAttribute("rspace", "0em")), [i];
  }
  for (var s = [], l, a = 0; a < e.length; a++) {
    var o = Re(e[a], t);
    if (o instanceof Xt && l instanceof Xt) {
      if (o.type === "mtext" && l.type === "mtext" && o.getAttribute("mathvariant") === l.getAttribute("mathvariant")) {
        l.children.push(...o.children);
        continue;
      } else if (o.type === "mn" && l.type === "mn") {
        l.children.push(...o.children);
        continue;
      } else if (co(o) && l.type === "mn") {
        l.children.push(...o.children);
        continue;
      } else if (o.type === "mn" && co(l))
        o.children = [...l.children, ...o.children], s.pop();
      else if ((o.type === "msup" || o.type === "msub") && o.children.length >= 1 && (l.type === "mn" || co(l))) {
        var u = o.children[0];
        u instanceof Xt && u.type === "mn" && (u.children = [...l.children, ...u.children], s.pop());
      } else if (l.type === "mi" && l.children.length === 1) {
        var h = l.children[0];
        if (h instanceof wn && h.text === "̸" && (o.type === "mo" || o.type === "mi" || o.type === "mn")) {
          var c = o.children[0];
          c instanceof wn && c.text.length > 0 && (c.text = c.text.slice(0, 1) + "̸" + c.text.slice(1), s.pop());
        }
      }
    }
    s.push(o), l = o;
  }
  return s;
}, mr = function(e, t, r) {
  return oh(Dt(e, t, r));
}, Re = function(e, t) {
  if (!e)
    return new X.MathNode("mrow");
  if (Jl[e.type]) {
    var r = Jl[e.type](e, t);
    return r;
  } else
    throw new I("Got group of unknown type: '" + e.type + "'");
};
function Kc(n, e, t, r, i) {
  var s = Dt(n, t), l;
  s.length === 1 && s[0] instanceof Xt && se.contains(["mrow", "mtable"], s[0].type) ? l = s[0] : l = new X.MathNode("mrow", s);
  var a = new X.MathNode("annotation", [new X.TextNode(e)]);
  a.setAttribute("encoding", "application/x-tex");
  var o = new X.MathNode("semantics", [l, a]), u = new X.MathNode("math", [o]);
  u.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML"), r && u.setAttribute("display", "block");
  var h = i ? "katex" : "katex-mathml";
  return R.makeSpan([h], [u]);
}
var E1 = function(e) {
  return new Xn({
    style: e.displayMode ? ae.DISPLAY : ae.TEXT,
    maxSize: e.maxSize,
    minRuleThickness: e.minRuleThickness
  });
}, R1 = function(e, t) {
  if (t.displayMode) {
    var r = ["katex-display"];
    t.leqno && r.push("leqno"), t.fleqn && r.push("fleqn"), e = R.makeSpan(r, [e]);
  }
  return e;
}, L8 = function(e, t, r) {
  var i = E1(r), s;
  if (r.output === "mathml")
    return Kc(e, t, i, r.displayMode, !0);
  if (r.output === "html") {
    var l = qu(e, i);
    s = R.makeSpan(["katex"], [l]);
  } else {
    var a = Kc(e, t, i, r.displayMode, !1), o = qu(e, i);
    s = R.makeSpan(["katex"], [a, o]);
  }
  return R1(s, r);
}, q8 = function(e, t, r) {
  var i = E1(r), s = qu(e, i), l = R.makeSpan(["katex"], [s]);
  return R1(l, r);
}, X8 = {
  widehat: "^",
  widecheck: "ˇ",
  widetilde: "~",
  utilde: "~",
  overleftarrow: "←",
  underleftarrow: "←",
  xleftarrow: "←",
  overrightarrow: "→",
  underrightarrow: "→",
  xrightarrow: "→",
  underbrace: "⏟",
  overbrace: "⏞",
  overgroup: "⏠",
  undergroup: "⏡",
  overleftrightarrow: "↔",
  underleftrightarrow: "↔",
  xleftrightarrow: "↔",
  Overrightarrow: "⇒",
  xRightarrow: "⇒",
  overleftharpoon: "↼",
  xleftharpoonup: "↼",
  overrightharpoon: "⇀",
  xrightharpoonup: "⇀",
  xLeftarrow: "⇐",
  xLeftrightarrow: "⇔",
  xhookleftarrow: "↩",
  xhookrightarrow: "↪",
  xmapsto: "↦",
  xrightharpoondown: "⇁",
  xleftharpoondown: "↽",
  xrightleftharpoons: "⇌",
  xleftrightharpoons: "⇋",
  xtwoheadleftarrow: "↞",
  xtwoheadrightarrow: "↠",
  xlongequal: "=",
  xtofrom: "⇄",
  xrightleftarrows: "⇄",
  xrightequilibrium: "⇌",
  // Not a perfect match.
  xleftequilibrium: "⇋",
  // None better available.
  "\\cdrightarrow": "→",
  "\\cdleftarrow": "←",
  "\\cdlongequal": "="
}, I8 = function(e) {
  var t = new X.MathNode("mo", [new X.TextNode(X8[e.replace(/^\\/, "")])]);
  return t.setAttribute("stretchy", "true"), t;
}, N8 = {
  //   path(s), minWidth, height, align
  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
  "\\cdrightarrow": [["rightarrow"], 3, 522, "xMaxYMin"],
  // CD minwwidth2.5pc
  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
  "\\cdleftarrow": [["leftarrow"], 3, 522, "xMinYMin"],
  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
  "\\cdlongequal": [["longequal"], 3, 334, "xMinYMin"],
  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
  // The next three arrows are from the mhchem package.
  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
  // document as \xrightarrow or \xrightleftharpoons. Those have
  // min-length = 1.75em, so we set min-length on these next three to match.
  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
}, V8 = function(e) {
  return e.type === "ordgroup" ? e.body.length : 1;
}, j8 = function(e, t) {
  function r() {
    var a = 4e5, o = e.label.slice(1);
    if (se.contains(["widehat", "widecheck", "widetilde", "utilde"], o)) {
      var u = e, h = V8(u.base), c, f, d;
      if (h > 5)
        o === "widehat" || o === "widecheck" ? (c = 420, a = 2364, d = 0.42, f = o + "4") : (c = 312, a = 2340, d = 0.34, f = "tilde4");
      else {
        var m = [1, 1, 2, 2, 3, 3][h];
        o === "widehat" || o === "widecheck" ? (a = [0, 1062, 2364, 2364, 2364][m], c = [0, 239, 300, 360, 420][m], d = [0, 0.24, 0.3, 0.3, 0.36, 0.42][m], f = o + m) : (a = [0, 600, 1033, 2339, 2340][m], c = [0, 260, 286, 306, 312][m], d = [0, 0.26, 0.286, 0.3, 0.306, 0.34][m], f = "tilde" + m);
      }
      var O = new pr(f), x = new Yn([O], {
        width: "100%",
        height: W(d),
        viewBox: "0 0 " + a + " " + c,
        preserveAspectRatio: "none"
      });
      return {
        span: R.makeSvgSpan([], [x], t),
        minWidth: 0,
        height: d
      };
    } else {
      var b = [], w = N8[o], [C, Z, T] = w, S = T / 1e3, E = C.length, N, z;
      if (E === 1) {
        var M = w[3];
        N = ["hide-tail"], z = [M];
      } else if (E === 2)
        N = ["halfarrow-left", "halfarrow-right"], z = ["xMinYMin", "xMaxYMin"];
      else if (E === 3)
        N = ["brace-left", "brace-center", "brace-right"], z = ["xMinYMin", "xMidYMin", "xMaxYMin"];
      else
        throw new Error(`Correct katexImagesData or update code here to support
                    ` + E + " children.");
      for (var L = 0; L < E; L++) {
        var F = new pr(C[L]), ne = new Yn([F], {
          width: "400em",
          height: W(S),
          viewBox: "0 0 " + a + " " + T,
          preserveAspectRatio: z[L] + " slice"
        }), J = R.makeSvgSpan([N[L]], [ne], t);
        if (E === 1)
          return {
            span: J,
            minWidth: Z,
            height: S
          };
        J.style.height = W(S), b.push(J);
      }
      return {
        span: R.makeSpan(["stretchy"], b, t),
        minWidth: Z,
        height: S
      };
    }
  }
  var {
    span: i,
    minWidth: s,
    height: l
  } = r();
  return i.height = l, i.style.height = W(l), s > 0 && (i.style.minWidth = W(s)), i;
}, _8 = function(e, t, r, i, s) {
  var l, a = e.height + e.depth + r + i;
  if (/fbox|color|angl/.test(t)) {
    if (l = R.makeSpan(["stretchy", t], [], s), t === "fbox") {
      var o = s.color && s.getColor();
      o && (l.style.borderColor = o);
    }
  } else {
    var u = [];
    /^[bx]cancel$/.test(t) && u.push(new Fu({
      x1: "0",
      y1: "0",
      x2: "100%",
      y2: "100%",
      "stroke-width": "0.046em"
    })), /^x?cancel$/.test(t) && u.push(new Fu({
      x1: "0",
      y1: "100%",
      x2: "100%",
      y2: "0",
      "stroke-width": "0.046em"
    }));
    var h = new Yn(u, {
      width: "100%",
      height: W(a)
    });
    l = R.makeSvgSpan([], [h], s);
  }
  return l.height = a, l.style.height = W(a), l;
}, Hn = {
  encloseSpan: _8,
  mathMLnode: I8,
  svgSpan: j8
};
function ge(n, e) {
  if (!n || n.type !== e)
    throw new Error("Expected node of type " + e + ", but got " + (n ? "node of type " + n.type : String(n)));
  return n;
}
function hh(n) {
  var e = $a(n);
  if (!e)
    throw new Error("Expected node of symbol group type, but got " + (n ? "node of type " + n.type : String(n)));
  return e;
}
function $a(n) {
  return n && (n.type === "atom" || O8.hasOwnProperty(n.type)) ? n : null;
}
var ch = (n, e) => {
  var t, r, i;
  n && n.type === "supsub" ? (r = ge(n.base, "accent"), t = r.base, n.base = t, i = m8(Se(n, e)), n.base = r) : (r = ge(n, "accent"), t = r.base);
  var s = Se(t, e.havingCrampedStyle()), l = r.isShifty && se.isCharacterBox(t), a = 0;
  if (l) {
    var o = se.getBaseElem(t), u = Se(o, e.havingCrampedStyle());
    a = jc(u).skew;
  }
  var h = r.label === "\\c", c = h ? s.height + s.depth : Math.min(s.height, e.fontMetrics().xHeight), f;
  if (r.isStretchy)
    f = Hn.svgSpan(r, e), f = R.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: s
      }, {
        type: "elem",
        elem: f,
        wrapperClasses: ["svg-align"],
        wrapperStyle: a > 0 ? {
          width: "calc(100% - " + W(2 * a) + ")",
          marginLeft: W(2 * a)
        } : void 0
      }]
    }, e);
  else {
    var d, m;
    r.label === "\\vec" ? (d = R.staticSvg("vec", e), m = R.svgData.vec[1]) : (d = R.makeOrd({
      mode: r.mode,
      text: r.label
    }, e, "textord"), d = jc(d), d.italic = 0, m = d.width, h && (c += d.depth)), f = R.makeSpan(["accent-body"], [d]);
    var O = r.label === "\\textcircled";
    O && (f.classes.push("accent-full"), c = s.height);
    var x = a;
    O || (x -= m / 2), f.style.left = W(x), r.label === "\\textcircled" && (f.style.top = ".2em"), f = R.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: s
      }, {
        type: "kern",
        size: -c
      }, {
        type: "elem",
        elem: f
      }]
    }, e);
  }
  var b = R.makeSpan(["mord", "accent"], [f], e);
  return i ? (i.children[0] = b, i.height = Math.max(b.height, i.height), i.classes[0] = "mord", i) : b;
}, Z1 = (n, e) => {
  var t = n.isStretchy ? Hn.mathMLnode(n.label) : new X.MathNode("mo", [en(n.label, n.mode)]), r = new X.MathNode("mover", [Re(n.base, e), t]);
  return r.setAttribute("accent", "true"), r;
}, U8 = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map((n) => "\\" + n).join("|"));
H({
  type: "accent",
  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
  props: {
    numArgs: 1
  },
  handler: (n, e) => {
    var t = ea(e[0]), r = !U8.test(n.funcName), i = !r || n.funcName === "\\widehat" || n.funcName === "\\widetilde" || n.funcName === "\\widecheck";
    return {
      type: "accent",
      mode: n.parser.mode,
      label: n.funcName,
      isStretchy: r,
      isShifty: i,
      base: t
    };
  },
  htmlBuilder: ch,
  mathmlBuilder: Z1
});
H({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
  props: {
    numArgs: 1,
    allowedInText: !0,
    allowedInMath: !0,
    // unless in strict mode
    argTypes: ["primitive"]
  },
  handler: (n, e) => {
    var t = e[0], r = n.parser.mode;
    return r === "math" && (n.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + n.funcName + " works only in text mode"), r = "text"), {
      type: "accent",
      mode: r,
      label: n.funcName,
      isStretchy: !1,
      isShifty: !0,
      base: t
    };
  },
  htmlBuilder: ch,
  mathmlBuilder: Z1
});
H({
  type: "accentUnder",
  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
  props: {
    numArgs: 1
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0];
    return {
      type: "accentUnder",
      mode: t.mode,
      label: r,
      base: i
    };
  },
  htmlBuilder: (n, e) => {
    var t = Se(n.base, e), r = Hn.svgSpan(n, e), i = n.label === "\\utilde" ? 0.12 : 0, s = R.makeVList({
      positionType: "top",
      positionData: t.height,
      children: [{
        type: "elem",
        elem: r,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: i
      }, {
        type: "elem",
        elem: t
      }]
    }, e);
    return R.makeSpan(["mord", "accentunder"], [s], e);
  },
  mathmlBuilder: (n, e) => {
    var t = Hn.mathMLnode(n.label), r = new X.MathNode("munder", [Re(n.base, e), t]);
    return r.setAttribute("accentunder", "true"), r;
  }
});
var sl = (n) => {
  var e = new X.MathNode("mpadded", n ? [n] : []);
  return e.setAttribute("width", "+0.6em"), e.setAttribute("lspace", "0.3em"), e;
};
H({
  type: "xArrow",
  names: [
    "\\xleftarrow",
    "\\xrightarrow",
    "\\xLeftarrow",
    "\\xRightarrow",
    "\\xleftrightarrow",
    "\\xLeftrightarrow",
    "\\xhookleftarrow",
    "\\xhookrightarrow",
    "\\xmapsto",
    "\\xrightharpoondown",
    "\\xrightharpoonup",
    "\\xleftharpoondown",
    "\\xleftharpoonup",
    "\\xrightleftharpoons",
    "\\xleftrightharpoons",
    "\\xlongequal",
    "\\xtwoheadrightarrow",
    "\\xtwoheadleftarrow",
    "\\xtofrom",
    // The next 3 functions are here to support the mhchem extension.
    // Direct use of these functions is discouraged and may break someday.
    "\\xrightleftarrows",
    "\\xrightequilibrium",
    "\\xleftequilibrium",
    // The next 3 functions are here only to support the {CD} environment.
    "\\\\cdrightarrow",
    "\\\\cdleftarrow",
    "\\\\cdlongequal"
  ],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(n, e, t) {
    var {
      parser: r,
      funcName: i
    } = n;
    return {
      type: "xArrow",
      mode: r.mode,
      label: i,
      body: e[0],
      below: t[0]
    };
  },
  // Flow is unable to correctly infer the type of `group`, even though it's
  // unambiguously determined from the passed-in `type` above.
  htmlBuilder(n, e) {
    var t = e.style, r = e.havingStyle(t.sup()), i = R.wrapFragment(Se(n.body, r, e), e), s = n.label.slice(0, 2) === "\\x" ? "x" : "cd";
    i.classes.push(s + "-arrow-pad");
    var l;
    n.below && (r = e.havingStyle(t.sub()), l = R.wrapFragment(Se(n.below, r, e), e), l.classes.push(s + "-arrow-pad"));
    var a = Hn.svgSpan(n, e), o = -e.fontMetrics().axisHeight + 0.5 * a.height, u = -e.fontMetrics().axisHeight - 0.5 * a.height - 0.111;
    (i.depth > 0.25 || n.label === "\\xleftequilibrium") && (u -= i.depth);
    var h;
    if (l) {
      var c = -e.fontMetrics().axisHeight + l.height + 0.5 * a.height + 0.111;
      h = R.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: i,
          shift: u
        }, {
          type: "elem",
          elem: a,
          shift: o
        }, {
          type: "elem",
          elem: l,
          shift: c
        }]
      }, e);
    } else
      h = R.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: i,
          shift: u
        }, {
          type: "elem",
          elem: a,
          shift: o
        }]
      }, e);
    return h.children[0].children[0].children[1].classes.push("svg-align"), R.makeSpan(["mrel", "x-arrow"], [h], e);
  },
  mathmlBuilder(n, e) {
    var t = Hn.mathMLnode(n.label);
    t.setAttribute("minsize", n.label.charAt(0) === "x" ? "1.75em" : "3.0em");
    var r;
    if (n.body) {
      var i = sl(Re(n.body, e));
      if (n.below) {
        var s = sl(Re(n.below, e));
        r = new X.MathNode("munderover", [t, s, i]);
      } else
        r = new X.MathNode("mover", [t, i]);
    } else if (n.below) {
      var l = sl(Re(n.below, e));
      r = new X.MathNode("munder", [t, l]);
    } else
      r = sl(), r = new X.MathNode("mover", [t, r]);
    return r;
  }
});
var W8 = R.makeSpan;
function z1(n, e) {
  var t = st(n.body, e, !0);
  return W8([n.mclass], t, e);
}
function F1(n, e) {
  var t, r = Dt(n.body, e);
  return n.mclass === "minner" ? t = new X.MathNode("mpadded", r) : n.mclass === "mord" ? n.isCharacterBox ? (t = r[0], t.type = "mi") : t = new X.MathNode("mi", r) : (n.isCharacterBox ? (t = r[0], t.type = "mo") : t = new X.MathNode("mo", r), n.mclass === "mbin" ? (t.attributes.lspace = "0.22em", t.attributes.rspace = "0.22em") : n.mclass === "mpunct" ? (t.attributes.lspace = "0em", t.attributes.rspace = "0.17em") : n.mclass === "mopen" || n.mclass === "mclose" ? (t.attributes.lspace = "0em", t.attributes.rspace = "0em") : n.mclass === "minner" && (t.attributes.lspace = "0.0556em", t.attributes.width = "+0.1111em")), t;
}
H({
  type: "mclass",
  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0];
    return {
      type: "mclass",
      mode: t.mode,
      mclass: "m" + r.slice(5),
      // TODO(kevinb): don't prefix with 'm'
      body: He(i),
      isCharacterBox: se.isCharacterBox(i)
    };
  },
  htmlBuilder: z1,
  mathmlBuilder: F1
});
var Da = (n) => {
  var e = n.type === "ordgroup" && n.body.length ? n.body[0] : n;
  return e.type === "atom" && (e.family === "bin" || e.family === "rel") ? "m" + e.family : "mord";
};
H({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "mclass",
      mode: t.mode,
      mclass: Da(e[0]),
      body: He(e[1]),
      isCharacterBox: se.isCharacterBox(e[1])
    };
  }
});
H({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n, i = e[1], s = e[0], l;
    r !== "\\stackrel" ? l = Da(i) : l = "mrel";
    var a = {
      type: "op",
      mode: i.mode,
      limits: !0,
      alwaysHandleSupSub: !0,
      parentIsSupSub: !1,
      symbol: !1,
      suppressBaseShift: r !== "\\stackrel",
      body: He(i)
    }, o = {
      type: "supsub",
      mode: s.mode,
      base: a,
      sup: r === "\\underset" ? null : s,
      sub: r === "\\underset" ? s : null
    };
    return {
      type: "mclass",
      mode: t.mode,
      mclass: l,
      body: [o],
      isCharacterBox: se.isCharacterBox(o)
    };
  },
  htmlBuilder: z1,
  mathmlBuilder: F1
});
H({
  type: "pmb",
  names: ["\\pmb"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "pmb",
      mode: t.mode,
      mclass: Da(e[0]),
      body: He(e[0])
    };
  },
  htmlBuilder(n, e) {
    var t = st(n.body, e, !0), r = R.makeSpan([n.mclass], t, e);
    return r.style.textShadow = "0.02em 0.01em 0.04px", r;
  },
  mathmlBuilder(n, e) {
    var t = Dt(n.body, e), r = new X.MathNode("mstyle", t);
    return r.setAttribute("style", "text-shadow: 0.02em 0.01em 0.04px"), r;
  }
});
var Y8 = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  A: "\\uparrow",
  V: "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
}, Jc = () => ({
  type: "styling",
  body: [],
  mode: "math",
  style: "display"
}), ef = (n) => n.type === "textord" && n.text === "@", G8 = (n, e) => (n.type === "mathord" || n.type === "atom") && n.text === e;
function H8(n, e, t) {
  var r = Y8[n];
  switch (r) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return t.callFunction(r, [e[0]], [e[1]]);
    case "\\uparrow":
    case "\\downarrow": {
      var i = t.callFunction("\\\\cdleft", [e[0]], []), s = {
        type: "atom",
        text: r,
        mode: "math",
        family: "rel"
      }, l = t.callFunction("\\Big", [s], []), a = t.callFunction("\\\\cdright", [e[1]], []), o = {
        type: "ordgroup",
        mode: "math",
        body: [i, l, a]
      };
      return t.callFunction("\\\\cdparent", [o], []);
    }
    case "\\\\cdlongequal":
      return t.callFunction("\\\\cdlongequal", [], []);
    case "\\Vert": {
      var u = {
        type: "textord",
        text: "\\Vert",
        mode: "math"
      };
      return t.callFunction("\\Big", [u], []);
    }
    default:
      return {
        type: "textord",
        text: " ",
        mode: "math"
      };
  }
}
function K8(n) {
  var e = [];
  for (n.gullet.beginGroup(), n.gullet.macros.set("\\cr", "\\\\\\relax"), n.gullet.beginGroup(); ; ) {
    e.push(n.parseExpression(!1, "\\\\")), n.gullet.endGroup(), n.gullet.beginGroup();
    var t = n.fetch().text;
    if (t === "&" || t === "\\\\")
      n.consume();
    else if (t === "\\end") {
      e[e.length - 1].length === 0 && e.pop();
      break;
    } else
      throw new I("Expected \\\\ or \\cr or \\end", n.nextToken);
  }
  for (var r = [], i = [r], s = 0; s < e.length; s++) {
    for (var l = e[s], a = Jc(), o = 0; o < l.length; o++)
      if (!ef(l[o]))
        a.body.push(l[o]);
      else {
        r.push(a), o += 1;
        var u = hh(l[o]).text, h = new Array(2);
        if (h[0] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }, h[1] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }, !("=|.".indexOf(u) > -1)) if ("<>AV".indexOf(u) > -1)
          for (var c = 0; c < 2; c++) {
            for (var f = !0, d = o + 1; d < l.length; d++) {
              if (G8(l[d], u)) {
                f = !1, o = d;
                break;
              }
              if (ef(l[d]))
                throw new I("Missing a " + u + " character to complete a CD arrow.", l[d]);
              h[c].body.push(l[d]);
            }
            if (f)
              throw new I("Missing a " + u + " character to complete a CD arrow.", l[o]);
          }
        else
          throw new I('Expected one of "<>AV=|." after @', l[o]);
        var m = H8(u, h, n), O = {
          type: "styling",
          body: [m],
          mode: "math",
          style: "display"
          // CD is always displaystyle.
        };
        r.push(O), a = Jc();
      }
    s % 2 === 0 ? r.push(a) : r.shift(), r = [], i.push(r);
  }
  n.gullet.endGroup(), n.gullet.endGroup();
  var x = new Array(i[0].length).fill({
    type: "align",
    align: "c",
    pregap: 0.25,
    // CD package sets \enskip between columns.
    postgap: 0.25
    // So pre and post each get half an \enskip, i.e. 0.25em.
  });
  return {
    type: "array",
    mode: "math",
    body: i,
    arraystretch: 1,
    addJot: !0,
    rowGaps: [null],
    cols: x,
    colSeparationType: "CD",
    hLinesBeforeRow: new Array(i.length + 1).fill([])
  };
}
H({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n;
    return {
      type: "cdlabel",
      mode: t.mode,
      side: r.slice(4),
      label: e[0]
    };
  },
  htmlBuilder(n, e) {
    var t = e.havingStyle(e.style.sup()), r = R.wrapFragment(Se(n.label, t, e), e);
    return r.classes.push("cd-label-" + n.side), r.style.bottom = W(0.8 - r.depth), r.height = 0, r.depth = 0, r;
  },
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mrow", [Re(n.label, e)]);
    return t = new X.MathNode("mpadded", [t]), t.setAttribute("width", "0"), n.side === "left" && t.setAttribute("lspace", "-1width"), t.setAttribute("voffset", "0.7em"), t = new X.MathNode("mstyle", [t]), t.setAttribute("displaystyle", "false"), t.setAttribute("scriptlevel", "1"), t;
  }
});
H({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "cdlabelparent",
      mode: t.mode,
      fragment: e[0]
    };
  },
  htmlBuilder(n, e) {
    var t = R.wrapFragment(Se(n.fragment, e), e);
    return t.classes.push("cd-vert-arrow"), t;
  },
  mathmlBuilder(n, e) {
    return new X.MathNode("mrow", [Re(n.fragment, e)]);
  }
});
H({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(n, e) {
    for (var {
      parser: t
    } = n, r = ge(e[0], "ordgroup"), i = r.body, s = "", l = 0; l < i.length; l++) {
      var a = ge(i[l], "textord");
      s += a.text;
    }
    var o = parseInt(s), u;
    if (isNaN(o))
      throw new I("\\@char has non-numeric argument " + s);
    if (o < 0 || o >= 1114111)
      throw new I("\\@char with invalid code point " + s);
    return o <= 65535 ? u = String.fromCharCode(o) : (o -= 65536, u = String.fromCharCode((o >> 10) + 55296, (o & 1023) + 56320)), {
      type: "textord",
      mode: t.mode,
      text: u
    };
  }
});
var B1 = (n, e) => {
  var t = st(n.body, e.withColor(n.color), !1);
  return R.makeFragment(t);
}, L1 = (n, e) => {
  var t = Dt(n.body, e.withColor(n.color)), r = new X.MathNode("mstyle", t);
  return r.setAttribute("mathcolor", n.color), r;
};
H({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    allowedInText: !0,
    argTypes: ["color", "original"]
  },
  handler(n, e) {
    var {
      parser: t
    } = n, r = ge(e[0], "color-token").color, i = e[1];
    return {
      type: "color",
      mode: t.mode,
      color: r,
      body: He(i)
    };
  },
  htmlBuilder: B1,
  mathmlBuilder: L1
});
H({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    allowedInText: !0,
    argTypes: ["color"]
  },
  handler(n, e) {
    var {
      parser: t,
      breakOnTokenText: r
    } = n, i = ge(e[0], "color-token").color;
    t.gullet.macros.set("\\current@color", i);
    var s = t.parseExpression(!0, r);
    return {
      type: "color",
      mode: t.mode,
      color: i,
      body: s
    };
  },
  htmlBuilder: B1,
  mathmlBuilder: L1
});
H({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 0,
    allowedInText: !0
  },
  handler(n, e, t) {
    var {
      parser: r
    } = n, i = r.gullet.future().text === "[" ? r.parseSizeGroup(!0) : null, s = !r.settings.displayMode || !r.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline does nothing in display mode");
    return {
      type: "cr",
      mode: r.mode,
      newLine: s,
      size: i && ge(i, "size").value
    };
  },
  // The following builders are called only at the top level,
  // not within tabular/array environments.
  htmlBuilder(n, e) {
    var t = R.makeSpan(["mspace"], [], e);
    return n.newLine && (t.classes.push("newline"), n.size && (t.style.marginTop = W(_e(n.size, e)))), t;
  },
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mspace");
    return n.newLine && (t.setAttribute("linebreak", "newline"), n.size && t.setAttribute("height", W(_e(n.size, e)))), t;
  }
});
var Xu = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
}, q1 = (n) => {
  var e = n.text;
  if (/^(?:[\\{}$&#^_]|EOF)$/.test(e))
    throw new I("Expected a control sequence", n);
  return e;
}, J8 = (n) => {
  var e = n.gullet.popToken();
  return e.text === "=" && (e = n.gullet.popToken(), e.text === " " && (e = n.gullet.popToken())), e;
}, X1 = (n, e, t, r) => {
  var i = n.gullet.macros.get(t.text);
  i == null && (t.noexpand = !0, i = {
    tokens: [t],
    numArgs: 0,
    // reproduce the same behavior in expansion
    unexpandable: !n.gullet.isExpandable(t.text)
  }), n.gullet.macros.set(e, i, r);
};
H({
  type: "internal",
  names: [
    "\\global",
    "\\long",
    "\\\\globallong"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t
    } = n;
    e.consumeSpaces();
    var r = e.fetch();
    if (Xu[r.text])
      return (t === "\\global" || t === "\\\\globallong") && (r.text = Xu[r.text]), ge(e.parseFunction(), "internal");
    throw new I("Invalid token after macro prefix", r);
  }
});
H({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t
    } = n, r = e.gullet.popToken(), i = r.text;
    if (/^(?:[\\{}$&#^_]|EOF)$/.test(i))
      throw new I("Expected a control sequence", r);
    for (var s = 0, l, a = [[]]; e.gullet.future().text !== "{"; )
      if (r = e.gullet.popToken(), r.text === "#") {
        if (e.gullet.future().text === "{") {
          l = e.gullet.future(), a[s].push("{");
          break;
        }
        if (r = e.gullet.popToken(), !/^[1-9]$/.test(r.text))
          throw new I('Invalid argument number "' + r.text + '"');
        if (parseInt(r.text) !== s + 1)
          throw new I('Argument number "' + r.text + '" out of order');
        s++, a.push([]);
      } else {
        if (r.text === "EOF")
          throw new I("Expected a macro definition");
        a[s].push(r.text);
      }
    var {
      tokens: o
    } = e.gullet.consumeArg();
    return l && o.unshift(l), (t === "\\edef" || t === "\\xdef") && (o = e.gullet.expandTokens(o), o.reverse()), e.gullet.macros.set(i, {
      tokens: o,
      numArgs: s,
      delimiters: a
    }, t === Xu[t]), {
      type: "internal",
      mode: e.mode
    };
  }
});
H({
  type: "internal",
  names: [
    "\\let",
    "\\\\globallet"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t
    } = n, r = q1(e.gullet.popToken());
    e.gullet.consumeSpaces();
    var i = J8(e);
    return X1(e, r, i, t === "\\\\globallet"), {
      type: "internal",
      mode: e.mode
    };
  }
});
H({
  type: "internal",
  names: [
    "\\futurelet",
    "\\\\globalfuture"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t
    } = n, r = q1(e.gullet.popToken()), i = e.gullet.popToken(), s = e.gullet.popToken();
    return X1(e, r, s, t === "\\\\globalfuture"), e.gullet.pushToken(s), e.gullet.pushToken(i), {
      type: "internal",
      mode: e.mode
    };
  }
});
var _i = function(e, t, r) {
  var i = Be.math[e] && Be.math[e].replace, s = sh(i || e, t, r);
  if (!s)
    throw new Error("Unsupported symbol " + e + " and font size " + t + ".");
  return s;
}, fh = function(e, t, r, i) {
  var s = r.havingBaseStyle(t), l = R.makeSpan(i.concat(s.sizingClasses(r)), [e], r), a = s.sizeMultiplier / r.sizeMultiplier;
  return l.height *= a, l.depth *= a, l.maxFontSize = s.sizeMultiplier, l;
}, I1 = function(e, t, r) {
  var i = t.havingBaseStyle(r), s = (1 - t.sizeMultiplier / i.sizeMultiplier) * t.fontMetrics().axisHeight;
  e.classes.push("delimcenter"), e.style.top = W(s), e.height -= s, e.depth += s;
}, ex = function(e, t, r, i, s, l) {
  var a = R.makeSymbol(e, "Main-Regular", s, i), o = fh(a, t, i, l);
  return r && I1(o, i, t), o;
}, tx = function(e, t, r, i) {
  return R.makeSymbol(e, "Size" + t + "-Regular", r, i);
}, N1 = function(e, t, r, i, s, l) {
  var a = tx(e, t, s, i), o = fh(R.makeSpan(["delimsizing", "size" + t], [a], i), ae.TEXT, i, l);
  return r && I1(o, i, ae.TEXT), o;
}, fo = function(e, t, r) {
  var i;
  t === "Size1-Regular" ? i = "delim-size1" : i = "delim-size4";
  var s = R.makeSpan(["delimsizinginner", i], [R.makeSpan([], [R.makeSymbol(e, t, r)])]);
  return {
    type: "elem",
    elem: s
  };
}, po = function(e, t, r) {
  var i = vn["Size4-Regular"][e.charCodeAt(0)] ? vn["Size4-Regular"][e.charCodeAt(0)][4] : vn["Size1-Regular"][e.charCodeAt(0)][4], s = new pr("inner", a8(e, Math.round(1e3 * t))), l = new Yn([s], {
    width: W(i),
    height: W(t),
    // Override CSS rule `.katex svg { width: 100% }`
    style: "width:" + W(i),
    viewBox: "0 0 " + 1e3 * i + " " + Math.round(1e3 * t),
    preserveAspectRatio: "xMinYMin"
  }), a = R.makeSvgSpan([], [l], r);
  return a.height = t, a.style.height = W(t), a.style.width = W(i), {
    type: "elem",
    elem: a
  };
}, Iu = 8e-3, ll = {
  type: "kern",
  size: -1 * Iu
}, nx = ["|", "\\lvert", "\\rvert", "\\vert"], rx = ["\\|", "\\lVert", "\\rVert", "\\Vert"], V1 = function(e, t, r, i, s, l) {
  var a, o, u, h, c = "", f = 0;
  a = u = h = e, o = null;
  var d = "Size1-Regular";
  e === "\\uparrow" ? u = h = "⏐" : e === "\\Uparrow" ? u = h = "‖" : e === "\\downarrow" ? a = u = "⏐" : e === "\\Downarrow" ? a = u = "‖" : e === "\\updownarrow" ? (a = "\\uparrow", u = "⏐", h = "\\downarrow") : e === "\\Updownarrow" ? (a = "\\Uparrow", u = "‖", h = "\\Downarrow") : se.contains(nx, e) ? (u = "∣", c = "vert", f = 333) : se.contains(rx, e) ? (u = "∥", c = "doublevert", f = 556) : e === "[" || e === "\\lbrack" ? (a = "⎡", u = "⎢", h = "⎣", d = "Size4-Regular", c = "lbrack", f = 667) : e === "]" || e === "\\rbrack" ? (a = "⎤", u = "⎥", h = "⎦", d = "Size4-Regular", c = "rbrack", f = 667) : e === "\\lfloor" || e === "⌊" ? (u = a = "⎢", h = "⎣", d = "Size4-Regular", c = "lfloor", f = 667) : e === "\\lceil" || e === "⌈" ? (a = "⎡", u = h = "⎢", d = "Size4-Regular", c = "lceil", f = 667) : e === "\\rfloor" || e === "⌋" ? (u = a = "⎥", h = "⎦", d = "Size4-Regular", c = "rfloor", f = 667) : e === "\\rceil" || e === "⌉" ? (a = "⎤", u = h = "⎥", d = "Size4-Regular", c = "rceil", f = 667) : e === "(" || e === "\\lparen" ? (a = "⎛", u = "⎜", h = "⎝", d = "Size4-Regular", c = "lparen", f = 875) : e === ")" || e === "\\rparen" ? (a = "⎞", u = "⎟", h = "⎠", d = "Size4-Regular", c = "rparen", f = 875) : e === "\\{" || e === "\\lbrace" ? (a = "⎧", o = "⎨", h = "⎩", u = "⎪", d = "Size4-Regular") : e === "\\}" || e === "\\rbrace" ? (a = "⎫", o = "⎬", h = "⎭", u = "⎪", d = "Size4-Regular") : e === "\\lgroup" || e === "⟮" ? (a = "⎧", h = "⎩", u = "⎪", d = "Size4-Regular") : e === "\\rgroup" || e === "⟯" ? (a = "⎫", h = "⎭", u = "⎪", d = "Size4-Regular") : e === "\\lmoustache" || e === "⎰" ? (a = "⎧", h = "⎭", u = "⎪", d = "Size4-Regular") : (e === "\\rmoustache" || e === "⎱") && (a = "⎫", h = "⎩", u = "⎪", d = "Size4-Regular");
  var m = _i(a, d, s), O = m.height + m.depth, x = _i(u, d, s), b = x.height + x.depth, w = _i(h, d, s), C = w.height + w.depth, Z = 0, T = 1;
  if (o !== null) {
    var S = _i(o, d, s);
    Z = S.height + S.depth, T = 2;
  }
  var E = O + C + Z, N = Math.max(0, Math.ceil((t - E) / (T * b))), z = E + N * T * b, M = i.fontMetrics().axisHeight;
  r && (M *= i.sizeMultiplier);
  var L = z / 2 - M, F = [];
  if (c.length > 0) {
    var ne = z - O - C, J = Math.round(z * 1e3), K = o8(c, Math.round(ne * 1e3)), me = new pr(c, K), Oe = (f / 1e3).toFixed(3) + "em", $e = (J / 1e3).toFixed(3) + "em", Qe = new Yn([me], {
      width: Oe,
      height: $e,
      viewBox: "0 0 " + f + " " + J
    }), P = R.makeSvgSpan([], [Qe], i);
    P.height = J / 1e3, P.style.width = Oe, P.style.height = $e, F.push({
      type: "elem",
      elem: P
    });
  } else {
    if (F.push(fo(h, d, s)), F.push(ll), o === null) {
      var Ce = z - O - C + 2 * Iu;
      F.push(po(u, Ce, i));
    } else {
      var ve = (z - O - C - Z) / 2 + 2 * Iu;
      F.push(po(u, ve, i)), F.push(ll), F.push(fo(o, d, s)), F.push(ll), F.push(po(u, ve, i));
    }
    F.push(ll), F.push(fo(a, d, s));
  }
  var A = i.havingBaseStyle(ae.TEXT), Ve = R.makeVList({
    positionType: "bottom",
    positionData: L,
    children: F
  }, A);
  return fh(R.makeSpan(["delimsizing", "mult"], [Ve], A), ae.TEXT, i, l);
}, mo = 80, go = 0.08, Oo = function(e, t, r, i, s) {
  var l = l8(e, i, r), a = new pr(e, l), o = new Yn([a], {
    // Note: 1000:1 ratio of viewBox to document em width.
    width: "400em",
    height: W(t),
    viewBox: "0 0 400000 " + r,
    preserveAspectRatio: "xMinYMin slice"
  });
  return R.makeSvgSpan(["hide-tail"], [o], s);
}, ix = function(e, t) {
  var r = t.havingBaseSizing(), i = W1("\\surd", e * r.sizeMultiplier, U1, r), s = r.sizeMultiplier, l = Math.max(0, t.minRuleThickness - t.fontMetrics().sqrtRuleThickness), a, o = 0, u = 0, h = 0, c;
  return i.type === "small" ? (h = 1e3 + 1e3 * l + mo, e < 1 ? s = 1 : e < 1.4 && (s = 0.7), o = (1 + l + go) / s, u = (1 + l) / s, a = Oo("sqrtMain", o, h, l, t), a.style.minWidth = "0.853em", c = 0.833 / s) : i.type === "large" ? (h = (1e3 + mo) * ns[i.size], u = (ns[i.size] + l) / s, o = (ns[i.size] + l + go) / s, a = Oo("sqrtSize" + i.size, o, h, l, t), a.style.minWidth = "1.02em", c = 1 / s) : (o = e + l + go, u = e + l, h = Math.floor(1e3 * e + l) + mo, a = Oo("sqrtTall", o, h, l, t), a.style.minWidth = "0.742em", c = 1.056), a.height = u, a.style.height = W(o), {
    span: a,
    advanceWidth: c,
    // Calculate the actual line width.
    // This actually should depend on the chosen font -- e.g. \boldmath
    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
    // have thicker rules.
    ruleWidth: (t.fontMetrics().sqrtRuleThickness + l) * s
  };
}, j1 = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "\\surd"], sx = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱"], _1 = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"], ns = [0, 1.2, 1.8, 2.4, 3], lx = function(e, t, r, i, s) {
  if (e === "<" || e === "\\lt" || e === "⟨" ? e = "\\langle" : (e === ">" || e === "\\gt" || e === "⟩") && (e = "\\rangle"), se.contains(j1, e) || se.contains(_1, e))
    return N1(e, t, !1, r, i, s);
  if (se.contains(sx, e))
    return V1(e, ns[t], !1, r, i, s);
  throw new I("Illegal delimiter: '" + e + "'");
}, ax = [{
  type: "small",
  style: ae.SCRIPTSCRIPT
}, {
  type: "small",
  style: ae.SCRIPT
}, {
  type: "small",
  style: ae.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}], ox = [{
  type: "small",
  style: ae.SCRIPTSCRIPT
}, {
  type: "small",
  style: ae.SCRIPT
}, {
  type: "small",
  style: ae.TEXT
}, {
  type: "stack"
}], U1 = [{
  type: "small",
  style: ae.SCRIPTSCRIPT
}, {
  type: "small",
  style: ae.SCRIPT
}, {
  type: "small",
  style: ae.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}, {
  type: "stack"
}], ux = function(e) {
  if (e.type === "small")
    return "Main-Regular";
  if (e.type === "large")
    return "Size" + e.size + "-Regular";
  if (e.type === "stack")
    return "Size4-Regular";
  throw new Error("Add support for delim type '" + e.type + "' here.");
}, W1 = function(e, t, r, i) {
  for (var s = Math.min(2, 3 - i.style.size), l = s; l < r.length && r[l].type !== "stack"; l++) {
    var a = _i(e, ux(r[l]), "math"), o = a.height + a.depth;
    if (r[l].type === "small") {
      var u = i.havingBaseStyle(r[l].style);
      o *= u.sizeMultiplier;
    }
    if (o > t)
      return r[l];
  }
  return r[r.length - 1];
}, Y1 = function(e, t, r, i, s, l) {
  e === "<" || e === "\\lt" || e === "⟨" ? e = "\\langle" : (e === ">" || e === "\\gt" || e === "⟩") && (e = "\\rangle");
  var a;
  se.contains(_1, e) ? a = ax : se.contains(j1, e) ? a = U1 : a = ox;
  var o = W1(e, t, a, i);
  return o.type === "small" ? ex(e, o.style, r, i, s, l) : o.type === "large" ? N1(e, o.size, r, i, s, l) : V1(e, t, r, i, s, l);
}, hx = function(e, t, r, i, s, l) {
  var a = i.fontMetrics().axisHeight * i.sizeMultiplier, o = 901, u = 5 / i.fontMetrics().ptPerEm, h = Math.max(t - a, r + a), c = Math.max(
    // In real TeX, calculations are done using integral values which are
    // 65536 per pt, or 655360 per em. So, the division here truncates in
    // TeX but doesn't here, producing different results. If we wanted to
    // exactly match TeX's calculation, we could do
    //   Math.floor(655360 * maxDistFromAxis / 500) *
    //    delimiterFactor / 655360
    // (To see the difference, compare
    //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
    // in TeX and KaTeX)
    h / 500 * o,
    2 * h - u
  );
  return Y1(e, c, !0, i, s, l);
}, _n = {
  sqrtImage: ix,
  sizedDelim: lx,
  sizeToMaxHeight: ns,
  customSizedDelim: Y1,
  leftRightDelim: hx
}, tf = {
  "\\bigl": {
    mclass: "mopen",
    size: 1
  },
  "\\Bigl": {
    mclass: "mopen",
    size: 2
  },
  "\\biggl": {
    mclass: "mopen",
    size: 3
  },
  "\\Biggl": {
    mclass: "mopen",
    size: 4
  },
  "\\bigr": {
    mclass: "mclose",
    size: 1
  },
  "\\Bigr": {
    mclass: "mclose",
    size: 2
  },
  "\\biggr": {
    mclass: "mclose",
    size: 3
  },
  "\\Biggr": {
    mclass: "mclose",
    size: 4
  },
  "\\bigm": {
    mclass: "mrel",
    size: 1
  },
  "\\Bigm": {
    mclass: "mrel",
    size: 2
  },
  "\\biggm": {
    mclass: "mrel",
    size: 3
  },
  "\\Biggm": {
    mclass: "mrel",
    size: 4
  },
  "\\big": {
    mclass: "mord",
    size: 1
  },
  "\\Big": {
    mclass: "mord",
    size: 2
  },
  "\\bigg": {
    mclass: "mord",
    size: 3
  },
  "\\Bigg": {
    mclass: "mord",
    size: 4
  }
}, cx = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "<", ">", "\\langle", "⟨", "\\rangle", "⟩", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];
function Ta(n, e) {
  var t = $a(n);
  if (t && se.contains(cx, t.text))
    return t;
  throw t ? new I("Invalid delimiter '" + t.text + "' after '" + e.funcName + "'", n) : new I("Invalid delimiter type '" + n.type + "'", n);
}
H({
  type: "delimsizing",
  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (n, e) => {
    var t = Ta(e[0], n);
    return {
      type: "delimsizing",
      mode: n.parser.mode,
      size: tf[n.funcName].size,
      mclass: tf[n.funcName].mclass,
      delim: t.text
    };
  },
  htmlBuilder: (n, e) => n.delim === "." ? R.makeSpan([n.mclass]) : _n.sizedDelim(n.delim, n.size, e, n.mode, [n.mclass]),
  mathmlBuilder: (n) => {
    var e = [];
    n.delim !== "." && e.push(en(n.delim, n.mode));
    var t = new X.MathNode("mo", e);
    n.mclass === "mopen" || n.mclass === "mclose" ? t.setAttribute("fence", "true") : t.setAttribute("fence", "false"), t.setAttribute("stretchy", "true");
    var r = W(_n.sizeToMaxHeight[n.size]);
    return t.setAttribute("minsize", r), t.setAttribute("maxsize", r), t;
  }
});
function nf(n) {
  if (!n.body)
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
}
H({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (n, e) => {
    var t = n.parser.gullet.macros.get("\\current@color");
    if (t && typeof t != "string")
      throw new I("\\current@color set to non-string in \\right");
    return {
      type: "leftright-right",
      mode: n.parser.mode,
      delim: Ta(e[0], n).text,
      color: t
      // undefined if not set via \color
    };
  }
});
H({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (n, e) => {
    var t = Ta(e[0], n), r = n.parser;
    ++r.leftrightDepth;
    var i = r.parseExpression(!1);
    --r.leftrightDepth, r.expect("\\right", !1);
    var s = ge(r.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: r.mode,
      body: i,
      left: t.text,
      right: s.delim,
      rightColor: s.color
    };
  },
  htmlBuilder: (n, e) => {
    nf(n);
    for (var t = st(n.body, e, !0, ["mopen", "mclose"]), r = 0, i = 0, s = !1, l = 0; l < t.length; l++)
      t[l].isMiddle ? s = !0 : (r = Math.max(t[l].height, r), i = Math.max(t[l].depth, i));
    r *= e.sizeMultiplier, i *= e.sizeMultiplier;
    var a;
    if (n.left === "." ? a = fs(e, ["mopen"]) : a = _n.leftRightDelim(n.left, r, i, e, n.mode, ["mopen"]), t.unshift(a), s)
      for (var o = 1; o < t.length; o++) {
        var u = t[o], h = u.isMiddle;
        h && (t[o] = _n.leftRightDelim(h.delim, r, i, h.options, n.mode, []));
      }
    var c;
    if (n.right === ".")
      c = fs(e, ["mclose"]);
    else {
      var f = n.rightColor ? e.withColor(n.rightColor) : e;
      c = _n.leftRightDelim(n.right, r, i, f, n.mode, ["mclose"]);
    }
    return t.push(c), R.makeSpan(["minner"], t, e);
  },
  mathmlBuilder: (n, e) => {
    nf(n);
    var t = Dt(n.body, e);
    if (n.left !== ".") {
      var r = new X.MathNode("mo", [en(n.left, n.mode)]);
      r.setAttribute("fence", "true"), t.unshift(r);
    }
    if (n.right !== ".") {
      var i = new X.MathNode("mo", [en(n.right, n.mode)]);
      i.setAttribute("fence", "true"), n.rightColor && i.setAttribute("mathcolor", n.rightColor), t.push(i);
    }
    return oh(t);
  }
});
H({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (n, e) => {
    var t = Ta(e[0], n);
    if (!n.parser.leftrightDepth)
      throw new I("\\middle without preceding \\left", t);
    return {
      type: "middle",
      mode: n.parser.mode,
      delim: t.text
    };
  },
  htmlBuilder: (n, e) => {
    var t;
    if (n.delim === ".")
      t = fs(e, []);
    else {
      t = _n.sizedDelim(n.delim, 1, e, n.mode, []);
      var r = {
        delim: n.delim,
        options: e
      };
      t.isMiddle = r;
    }
    return t;
  },
  mathmlBuilder: (n, e) => {
    var t = n.delim === "\\vert" || n.delim === "|" ? en("|", "text") : en(n.delim, n.mode), r = new X.MathNode("mo", [t]);
    return r.setAttribute("fence", "true"), r.setAttribute("lspace", "0.05em"), r.setAttribute("rspace", "0.05em"), r;
  }
});
var dh = (n, e) => {
  var t = R.wrapFragment(Se(n.body, e), e), r = n.label.slice(1), i = e.sizeMultiplier, s, l = 0, a = se.isCharacterBox(n.body);
  if (r === "sout")
    s = R.makeSpan(["stretchy", "sout"]), s.height = e.fontMetrics().defaultRuleThickness / i, l = -0.5 * e.fontMetrics().xHeight;
  else if (r === "phase") {
    var o = _e({
      number: 0.6,
      unit: "pt"
    }, e), u = _e({
      number: 0.35,
      unit: "ex"
    }, e), h = e.havingBaseSizing();
    i = i / h.sizeMultiplier;
    var c = t.height + t.depth + o + u;
    t.style.paddingLeft = W(c / 2 + o);
    var f = Math.floor(1e3 * c * i), d = i8(f), m = new Yn([new pr("phase", d)], {
      width: "400em",
      height: W(f / 1e3),
      viewBox: "0 0 400000 " + f,
      preserveAspectRatio: "xMinYMin slice"
    });
    s = R.makeSvgSpan(["hide-tail"], [m], e), s.style.height = W(c), l = t.depth + o + u;
  } else {
    /cancel/.test(r) ? a || t.classes.push("cancel-pad") : r === "angl" ? t.classes.push("anglpad") : t.classes.push("boxpad");
    var O = 0, x = 0, b = 0;
    /box/.test(r) ? (b = Math.max(
      e.fontMetrics().fboxrule,
      // default
      e.minRuleThickness
      // User override.
    ), O = e.fontMetrics().fboxsep + (r === "colorbox" ? 0 : b), x = O) : r === "angl" ? (b = Math.max(e.fontMetrics().defaultRuleThickness, e.minRuleThickness), O = 4 * b, x = Math.max(0, 0.25 - t.depth)) : (O = a ? 0.2 : 0, x = O), s = Hn.encloseSpan(t, r, O, x, e), /fbox|boxed|fcolorbox/.test(r) ? (s.style.borderStyle = "solid", s.style.borderWidth = W(b)) : r === "angl" && b !== 0.049 && (s.style.borderTopWidth = W(b), s.style.borderRightWidth = W(b)), l = t.depth + x, n.backgroundColor && (s.style.backgroundColor = n.backgroundColor, n.borderColor && (s.style.borderColor = n.borderColor));
  }
  var w;
  if (n.backgroundColor)
    w = R.makeVList({
      positionType: "individualShift",
      children: [
        // Put the color background behind inner;
        {
          type: "elem",
          elem: s,
          shift: l
        },
        {
          type: "elem",
          elem: t,
          shift: 0
        }
      ]
    }, e);
  else {
    var C = /cancel|phase/.test(r) ? ["svg-align"] : [];
    w = R.makeVList({
      positionType: "individualShift",
      children: [
        // Write the \cancel stroke on top of inner.
        {
          type: "elem",
          elem: t,
          shift: 0
        },
        {
          type: "elem",
          elem: s,
          shift: l,
          wrapperClasses: C
        }
      ]
    }, e);
  }
  return /cancel/.test(r) && (w.height = t.height, w.depth = t.depth), /cancel/.test(r) && !a ? R.makeSpan(["mord", "cancel-lap"], [w], e) : R.makeSpan(["mord"], [w], e);
}, ph = (n, e) => {
  var t = 0, r = new X.MathNode(n.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [Re(n.body, e)]);
  switch (n.label) {
    case "\\cancel":
      r.setAttribute("notation", "updiagonalstrike");
      break;
    case "\\bcancel":
      r.setAttribute("notation", "downdiagonalstrike");
      break;
    case "\\phase":
      r.setAttribute("notation", "phasorangle");
      break;
    case "\\sout":
      r.setAttribute("notation", "horizontalstrike");
      break;
    case "\\fbox":
      r.setAttribute("notation", "box");
      break;
    case "\\angl":
      r.setAttribute("notation", "actuarial");
      break;
    case "\\fcolorbox":
    case "\\colorbox":
      if (t = e.fontMetrics().fboxsep * e.fontMetrics().ptPerEm, r.setAttribute("width", "+" + 2 * t + "pt"), r.setAttribute("height", "+" + 2 * t + "pt"), r.setAttribute("lspace", t + "pt"), r.setAttribute("voffset", t + "pt"), n.label === "\\fcolorbox") {
        var i = Math.max(
          e.fontMetrics().fboxrule,
          // default
          e.minRuleThickness
          // user override
        );
        r.setAttribute("style", "border: " + i + "em solid " + String(n.borderColor));
      }
      break;
    case "\\xcancel":
      r.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      break;
  }
  return n.backgroundColor && r.setAttribute("mathbackground", n.backgroundColor), r;
};
H({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    allowedInText: !0,
    argTypes: ["color", "text"]
  },
  handler(n, e, t) {
    var {
      parser: r,
      funcName: i
    } = n, s = ge(e[0], "color-token").color, l = e[1];
    return {
      type: "enclose",
      mode: r.mode,
      label: i,
      backgroundColor: s,
      body: l
    };
  },
  htmlBuilder: dh,
  mathmlBuilder: ph
});
H({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    allowedInText: !0,
    argTypes: ["color", "color", "text"]
  },
  handler(n, e, t) {
    var {
      parser: r,
      funcName: i
    } = n, s = ge(e[0], "color-token").color, l = ge(e[1], "color-token").color, a = e[2];
    return {
      type: "enclose",
      mode: r.mode,
      label: i,
      backgroundColor: l,
      borderColor: s,
      body: a
    };
  },
  htmlBuilder: dh,
  mathmlBuilder: ph
});
H({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: !0
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "enclose",
      mode: t.mode,
      label: "\\fbox",
      body: e[0]
    };
  }
});
H({
  type: "enclose",
  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
  props: {
    numArgs: 1
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0];
    return {
      type: "enclose",
      mode: t.mode,
      label: r,
      body: i
    };
  },
  htmlBuilder: dh,
  mathmlBuilder: ph
});
H({
  type: "enclose",
  names: ["\\angl"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: !1
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "enclose",
      mode: t.mode,
      label: "\\angl",
      body: e[0]
    };
  }
});
var G1 = {};
function Tn(n) {
  for (var {
    type: e,
    names: t,
    props: r,
    handler: i,
    htmlBuilder: s,
    mathmlBuilder: l
  } = n, a = {
    type: e,
    numArgs: r.numArgs || 0,
    allowedInText: !1,
    numOptionalArgs: 0,
    handler: i
  }, o = 0; o < t.length; ++o)
    G1[t[o]] = a;
  s && (Kl[e] = s), l && (Jl[e] = l);
}
var H1 = {};
function v(n, e) {
  H1[n] = e;
}
function rf(n) {
  var e = [];
  n.consumeSpaces();
  var t = n.fetch().text;
  for (t === "\\relax" && (n.consume(), n.consumeSpaces(), t = n.fetch().text); t === "\\hline" || t === "\\hdashline"; )
    n.consume(), e.push(t === "\\hdashline"), n.consumeSpaces(), t = n.fetch().text;
  return e;
}
var Ma = (n) => {
  var e = n.parser.settings;
  if (!e.displayMode)
    throw new I("{" + n.envName + "} can be used only in display mode.");
};
function mh(n) {
  if (n.indexOf("ed") === -1)
    return n.indexOf("*") === -1;
}
function wr(n, e, t) {
  var {
    hskipBeforeAndAfter: r,
    addJot: i,
    cols: s,
    arraystretch: l,
    colSeparationType: a,
    autoTag: o,
    singleRow: u,
    emptySingleRow: h,
    maxNumCols: c,
    leqno: f
  } = e;
  if (n.gullet.beginGroup(), u || n.gullet.macros.set("\\cr", "\\\\\\relax"), !l) {
    var d = n.gullet.expandMacroAsText("\\arraystretch");
    if (d == null)
      l = 1;
    else if (l = parseFloat(d), !l || l < 0)
      throw new I("Invalid \\arraystretch: " + d);
  }
  n.gullet.beginGroup();
  var m = [], O = [m], x = [], b = [], w = o != null ? [] : void 0;
  function C() {
    o && n.gullet.macros.set("\\@eqnsw", "1", !0);
  }
  function Z() {
    w && (n.gullet.macros.get("\\df@tag") ? (w.push(n.subparse([new Ht("\\df@tag")])), n.gullet.macros.set("\\df@tag", void 0, !0)) : w.push(!!o && n.gullet.macros.get("\\@eqnsw") === "1"));
  }
  for (C(), b.push(rf(n)); ; ) {
    var T = n.parseExpression(!1, u ? "\\end" : "\\\\");
    n.gullet.endGroup(), n.gullet.beginGroup(), T = {
      type: "ordgroup",
      mode: n.mode,
      body: T
    }, t && (T = {
      type: "styling",
      mode: n.mode,
      style: t,
      body: [T]
    }), m.push(T);
    var S = n.fetch().text;
    if (S === "&") {
      if (c && m.length === c) {
        if (u || a)
          throw new I("Too many tab characters: &", n.nextToken);
        n.settings.reportNonstrict("textEnv", "Too few columns specified in the {array} column argument.");
      }
      n.consume();
    } else if (S === "\\end") {
      Z(), m.length === 1 && T.type === "styling" && T.body[0].body.length === 0 && (O.length > 1 || !h) && O.pop(), b.length < O.length + 1 && b.push([]);
      break;
    } else if (S === "\\\\") {
      n.consume();
      var E = void 0;
      n.gullet.future().text !== " " && (E = n.parseSizeGroup(!0)), x.push(E ? E.value : null), Z(), b.push(rf(n)), m = [], O.push(m), C();
    } else
      throw new I("Expected & or \\\\ or \\cr or \\end", n.nextToken);
  }
  return n.gullet.endGroup(), n.gullet.endGroup(), {
    type: "array",
    mode: n.mode,
    addJot: i,
    arraystretch: l,
    body: O,
    cols: s,
    rowGaps: x,
    hskipBeforeAndAfter: r,
    hLinesBeforeRow: b,
    colSeparationType: a,
    tags: w,
    leqno: f
  };
}
function gh(n) {
  return n.slice(0, 1) === "d" ? "display" : "text";
}
var Mn = function(e, t) {
  var r, i, s = e.body.length, l = e.hLinesBeforeRow, a = 0, o = new Array(s), u = [], h = Math.max(
    // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
    t.fontMetrics().arrayRuleWidth,
    t.minRuleThickness
    // User override.
  ), c = 1 / t.fontMetrics().ptPerEm, f = 5 * c;
  if (e.colSeparationType && e.colSeparationType === "small") {
    var d = t.havingStyle(ae.SCRIPT).sizeMultiplier;
    f = 0.2778 * (d / t.sizeMultiplier);
  }
  var m = e.colSeparationType === "CD" ? _e({
    number: 3,
    unit: "ex"
  }, t) : 12 * c, O = 3 * c, x = e.arraystretch * m, b = 0.7 * x, w = 0.3 * x, C = 0;
  function Z(Ur) {
    for (var Qr = 0; Qr < Ur.length; ++Qr)
      Qr > 0 && (C += 0.25), u.push({
        pos: C,
        isDashed: Ur[Qr]
      });
  }
  for (Z(l[0]), r = 0; r < e.body.length; ++r) {
    var T = e.body[r], S = b, E = w;
    a < T.length && (a = T.length);
    var N = new Array(T.length);
    for (i = 0; i < T.length; ++i) {
      var z = Se(T[i], t);
      E < z.depth && (E = z.depth), S < z.height && (S = z.height), N[i] = z;
    }
    var M = e.rowGaps[r], L = 0;
    M && (L = _e(M, t), L > 0 && (L += w, E < L && (E = L), L = 0)), e.addJot && (E += O), N.height = S, N.depth = E, C += S, N.pos = C, C += E + L, o[r] = N, Z(l[r + 1]);
  }
  var F = C / 2 + t.fontMetrics().axisHeight, ne = e.cols || [], J = [], K, me, Oe = [];
  if (e.tags && e.tags.some((Ur) => Ur))
    for (r = 0; r < s; ++r) {
      var $e = o[r], Qe = $e.pos - F, P = e.tags[r], Ce = void 0;
      P === !0 ? Ce = R.makeSpan(["eqn-num"], [], t) : P === !1 ? Ce = R.makeSpan([], [], t) : Ce = R.makeSpan([], st(P, t, !0), t), Ce.depth = $e.depth, Ce.height = $e.height, Oe.push({
        type: "elem",
        elem: Ce,
        shift: Qe
      });
    }
  for (
    i = 0, me = 0;
    // Continue while either there are more columns or more column
    // descriptions, so trailing separators don't get lost.
    i < a || me < ne.length;
    ++i, ++me
  ) {
    for (var ve = ne[me] || {}, A = !0; ve.type === "separator"; ) {
      if (A || (K = R.makeSpan(["arraycolsep"], []), K.style.width = W(t.fontMetrics().doubleRuleSep), J.push(K)), ve.separator === "|" || ve.separator === ":") {
        var Ve = ve.separator === "|" ? "solid" : "dashed", Ye = R.makeSpan(["vertical-separator"], [], t);
        Ye.style.height = W(C), Ye.style.borderRightWidth = W(h), Ye.style.borderRightStyle = Ve, Ye.style.margin = "0 " + W(-h / 2);
        var Le = C - F;
        Le && (Ye.style.verticalAlign = W(-Le)), J.push(Ye);
      } else
        throw new I("Invalid separator type: " + ve.separator);
      me++, ve = ne[me] || {}, A = !1;
    }
    if (!(i >= a)) {
      var mt = void 0;
      (i > 0 || e.hskipBeforeAndAfter) && (mt = se.deflt(ve.pregap, f), mt !== 0 && (K = R.makeSpan(["arraycolsep"], []), K.style.width = W(mt), J.push(K)));
      var gt = [];
      for (r = 0; r < s; ++r) {
        var ln = o[r], an = ln[i];
        if (an) {
          var jr = ln.pos - F;
          an.depth = ln.depth, an.height = ln.height, gt.push({
            type: "elem",
            elem: an,
            shift: jr
          });
        }
      }
      gt = R.makeVList({
        positionType: "individualShift",
        children: gt
      }, t), gt = R.makeSpan(["col-align-" + (ve.align || "c")], [gt]), J.push(gt), (i < a - 1 || e.hskipBeforeAndAfter) && (mt = se.deflt(ve.postgap, f), mt !== 0 && (K = R.makeSpan(["arraycolsep"], []), K.style.width = W(mt), J.push(K)));
    }
  }
  if (o = R.makeSpan(["mtable"], J), u.length > 0) {
    for (var Va = R.makeLineSpan("hline", t, h), ja = R.makeLineSpan("hdashline", t, h), Ti = [{
      type: "elem",
      elem: o,
      shift: 0
    }]; u.length > 0; ) {
      var Mi = u.pop(), Ei = Mi.pos - F;
      Mi.isDashed ? Ti.push({
        type: "elem",
        elem: ja,
        shift: Ei
      }) : Ti.push({
        type: "elem",
        elem: Va,
        shift: Ei
      });
    }
    o = R.makeVList({
      positionType: "individualShift",
      children: Ti
    }, t);
  }
  if (Oe.length === 0)
    return R.makeSpan(["mord"], [o], t);
  var _r = R.makeVList({
    positionType: "individualShift",
    children: Oe
  }, t);
  return _r = R.makeSpan(["tag"], [_r], t), R.makeFragment([o, _r]);
}, fx = {
  c: "center ",
  l: "left ",
  r: "right "
}, En = function(e, t) {
  for (var r = [], i = new X.MathNode("mtd", [], ["mtr-glue"]), s = new X.MathNode("mtd", [], ["mml-eqn-num"]), l = 0; l < e.body.length; l++) {
    for (var a = e.body[l], o = [], u = 0; u < a.length; u++)
      o.push(new X.MathNode("mtd", [Re(a[u], t)]));
    e.tags && e.tags[l] && (o.unshift(i), o.push(i), e.leqno ? o.unshift(s) : o.push(s)), r.push(new X.MathNode("mtr", o));
  }
  var h = new X.MathNode("mtable", r), c = e.arraystretch === 0.5 ? 0.1 : 0.16 + e.arraystretch - 1 + (e.addJot ? 0.09 : 0);
  h.setAttribute("rowspacing", W(c));
  var f = "", d = "";
  if (e.cols && e.cols.length > 0) {
    var m = e.cols, O = "", x = !1, b = 0, w = m.length;
    m[0].type === "separator" && (f += "top ", b = 1), m[m.length - 1].type === "separator" && (f += "bottom ", w -= 1);
    for (var C = b; C < w; C++)
      m[C].type === "align" ? (d += fx[m[C].align], x && (O += "none "), x = !0) : m[C].type === "separator" && x && (O += m[C].separator === "|" ? "solid " : "dashed ", x = !1);
    h.setAttribute("columnalign", d.trim()), /[sd]/.test(O) && h.setAttribute("columnlines", O.trim());
  }
  if (e.colSeparationType === "align") {
    for (var Z = e.cols || [], T = "", S = 1; S < Z.length; S++)
      T += S % 2 ? "0em " : "1em ";
    h.setAttribute("columnspacing", T.trim());
  } else e.colSeparationType === "alignat" || e.colSeparationType === "gather" ? h.setAttribute("columnspacing", "0em") : e.colSeparationType === "small" ? h.setAttribute("columnspacing", "0.2778em") : e.colSeparationType === "CD" ? h.setAttribute("columnspacing", "0.5em") : h.setAttribute("columnspacing", "1em");
  var E = "", N = e.hLinesBeforeRow;
  f += N[0].length > 0 ? "left " : "", f += N[N.length - 1].length > 0 ? "right " : "";
  for (var z = 1; z < N.length - 1; z++)
    E += N[z].length === 0 ? "none " : N[z][0] ? "dashed " : "solid ";
  return /[sd]/.test(E) && h.setAttribute("rowlines", E.trim()), f !== "" && (h = new X.MathNode("menclose", [h]), h.setAttribute("notation", f.trim())), e.arraystretch && e.arraystretch < 1 && (h = new X.MathNode("mstyle", [h]), h.setAttribute("scriptlevel", "1")), h;
}, K1 = function(e, t) {
  e.envName.indexOf("ed") === -1 && Ma(e);
  var r = [], i = e.envName.indexOf("at") > -1 ? "alignat" : "align", s = e.envName === "split", l = wr(e.parser, {
    cols: r,
    addJot: !0,
    autoTag: s ? void 0 : mh(e.envName),
    emptySingleRow: !0,
    colSeparationType: i,
    maxNumCols: s ? 2 : void 0,
    leqno: e.parser.settings.leqno
  }, "display"), a, o = 0, u = {
    type: "ordgroup",
    mode: e.mode,
    body: []
  };
  if (t[0] && t[0].type === "ordgroup") {
    for (var h = "", c = 0; c < t[0].body.length; c++) {
      var f = ge(t[0].body[c], "textord");
      h += f.text;
    }
    a = Number(h), o = a * 2;
  }
  var d = !o;
  l.body.forEach(function(b) {
    for (var w = 1; w < b.length; w += 2) {
      var C = ge(b[w], "styling"), Z = ge(C.body[0], "ordgroup");
      Z.body.unshift(u);
    }
    if (d)
      o < b.length && (o = b.length);
    else {
      var T = b.length / 2;
      if (a < T)
        throw new I("Too many math in a row: " + ("expected " + a + ", but got " + T), b[0]);
    }
  });
  for (var m = 0; m < o; ++m) {
    var O = "r", x = 0;
    m % 2 === 1 ? O = "l" : m > 0 && d && (x = 1), r[m] = {
      type: "align",
      align: O,
      pregap: x,
      postgap: 0
    };
  }
  return l.colSeparationType = d ? "align" : "alignat", l;
};
Tn({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler(n, e) {
    var t = $a(e[0]), r = t ? [e[0]] : ge(e[0], "ordgroup").body, i = r.map(function(l) {
      var a = hh(l), o = a.text;
      if ("lcr".indexOf(o) !== -1)
        return {
          type: "align",
          align: o
        };
      if (o === "|")
        return {
          type: "separator",
          separator: "|"
        };
      if (o === ":")
        return {
          type: "separator",
          separator: ":"
        };
      throw new I("Unknown column alignment: " + o, l);
    }), s = {
      cols: i,
      hskipBeforeAndAfter: !0,
      // \@preamble in lttab.dtx
      maxNumCols: i.length
    };
    return wr(n.parser, s, gh(n.envName));
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
  props: {
    numArgs: 0
  },
  handler(n) {
    var e = {
      matrix: null,
      pmatrix: ["(", ")"],
      bmatrix: ["[", "]"],
      Bmatrix: ["\\{", "\\}"],
      vmatrix: ["|", "|"],
      Vmatrix: ["\\Vert", "\\Vert"]
    }[n.envName.replace("*", "")], t = "c", r = {
      hskipBeforeAndAfter: !1,
      cols: [{
        type: "align",
        align: t
      }]
    };
    if (n.envName.charAt(n.envName.length - 1) === "*") {
      var i = n.parser;
      if (i.consumeSpaces(), i.fetch().text === "[") {
        if (i.consume(), i.consumeSpaces(), t = i.fetch().text, "lcr".indexOf(t) === -1)
          throw new I("Expected l or c or r", i.nextToken);
        i.consume(), i.consumeSpaces(), i.expect("]"), i.consume(), r.cols = [{
          type: "align",
          align: t
        }];
      }
    }
    var s = wr(n.parser, r, gh(n.envName)), l = Math.max(0, ...s.body.map((a) => a.length));
    return s.cols = new Array(l).fill({
      type: "align",
      align: t
    }), e ? {
      type: "leftright",
      mode: n.mode,
      body: [s],
      left: e[0],
      right: e[1],
      rightColor: void 0
      // \right uninfluenced by \color in array
    } : s;
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler(n) {
    var e = {
      arraystretch: 0.5
    }, t = wr(n.parser, e, "script");
    return t.colSeparationType = "small", t;
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler(n, e) {
    var t = $a(e[0]), r = t ? [e[0]] : ge(e[0], "ordgroup").body, i = r.map(function(l) {
      var a = hh(l), o = a.text;
      if ("lc".indexOf(o) !== -1)
        return {
          type: "align",
          align: o
        };
      throw new I("Unknown column alignment: " + o, l);
    });
    if (i.length > 1)
      throw new I("{subarray} can contain only one column");
    var s = {
      cols: i,
      hskipBeforeAndAfter: !1,
      arraystretch: 0.5
    };
    if (s = wr(n.parser, s, "script"), s.body.length > 0 && s.body[0].length > 1)
      throw new I("{subarray} can contain only one column");
    return s;
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler(n) {
    var e = {
      arraystretch: 1.2,
      cols: [{
        type: "align",
        align: "l",
        pregap: 0,
        // TODO(kevinb) get the current style.
        // For now we use the metrics for TEXT style which is what we were
        // doing before.  Before attempting to get the current style we
        // should look at TeX's behavior especially for \over and matrices.
        postgap: 1
        /* 1em quad */
      }, {
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 0
      }]
    }, t = wr(n.parser, e, gh(n.envName));
    return {
      type: "leftright",
      mode: n.mode,
      body: [t],
      left: n.envName.indexOf("r") > -1 ? "." : "\\{",
      right: n.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: void 0
    };
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: K1,
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler(n) {
    se.contains(["gather", "gather*"], n.envName) && Ma(n);
    var e = {
      cols: [{
        type: "align",
        align: "c"
      }],
      addJot: !0,
      colSeparationType: "gather",
      autoTag: mh(n.envName),
      emptySingleRow: !0,
      leqno: n.parser.settings.leqno
    };
    return wr(n.parser, e, "display");
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: K1,
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler(n) {
    Ma(n);
    var e = {
      autoTag: mh(n.envName),
      emptySingleRow: !0,
      singleRow: !0,
      maxNumCols: 1,
      leqno: n.parser.settings.leqno
    };
    return wr(n.parser, e, "display");
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
Tn({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler(n) {
    return Ma(n), K8(n.parser);
  },
  htmlBuilder: Mn,
  mathmlBuilder: En
});
v("\\nonumber", "\\gdef\\@eqnsw{0}");
v("\\notag", "\\nonumber");
H({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !0
  },
  handler(n, e) {
    throw new I(n.funcName + " valid only within array environment");
  }
});
var sf = G1;
H({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0];
    if (i.type !== "ordgroup")
      throw new I("Invalid environment name", i);
    for (var s = "", l = 0; l < i.body.length; ++l)
      s += ge(i.body[l], "textord").text;
    if (r === "\\begin") {
      if (!sf.hasOwnProperty(s))
        throw new I("No such environment: " + s, i);
      var a = sf[s], {
        args: o,
        optArgs: u
      } = t.parseArguments("\\begin{" + s + "}", a), h = {
        mode: t.mode,
        envName: s,
        parser: t
      }, c = a.handler(h, o, u);
      t.expect("\\end", !1);
      var f = t.nextToken, d = ge(t.parseFunction(), "environment");
      if (d.name !== s)
        throw new I("Mismatch: \\begin{" + s + "} matched by \\end{" + d.name + "}", f);
      return c;
    }
    return {
      type: "environment",
      mode: t.mode,
      name: s,
      nameGroup: i
    };
  }
});
var J1 = (n, e) => {
  var t = n.font, r = e.withFont(t);
  return Se(n.body, r);
}, eg = (n, e) => {
  var t = n.font, r = e.withFont(t);
  return Re(n.body, r);
}, lf = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};
H({
  type: "font",
  names: [
    // styles, except \boldsymbol defined below
    "\\mathrm",
    "\\mathit",
    "\\mathbf",
    "\\mathnormal",
    "\\mathsfit",
    // families
    "\\mathbb",
    "\\mathcal",
    "\\mathfrak",
    "\\mathscr",
    "\\mathsf",
    "\\mathtt",
    // aliases, except \bm defined below
    "\\Bbb",
    "\\bold",
    "\\frak"
  ],
  props: {
    numArgs: 1,
    allowedInArgument: !0
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = ea(e[0]), s = r;
    return s in lf && (s = lf[s]), {
      type: "font",
      mode: t.mode,
      font: s.slice(1),
      body: i
    };
  },
  htmlBuilder: J1,
  mathmlBuilder: eg
});
H({
  type: "mclass",
  names: ["\\boldsymbol", "\\bm"],
  props: {
    numArgs: 1
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n, r = e[0], i = se.isCharacterBox(r);
    return {
      type: "mclass",
      mode: t.mode,
      mclass: Da(r),
      body: [{
        type: "font",
        mode: t.mode,
        font: "boldsymbol",
        body: r
      }],
      isCharacterBox: i
    };
  }
});
H({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r,
      breakOnTokenText: i
    } = n, {
      mode: s
    } = t, l = t.parseExpression(!0, i), a = "math" + r.slice(1);
    return {
      type: "font",
      mode: s,
      font: a,
      body: {
        type: "ordgroup",
        mode: t.mode,
        body: l
      }
    };
  },
  htmlBuilder: J1,
  mathmlBuilder: eg
});
var tg = (n, e) => {
  var t = e;
  return n === "display" ? t = t.id >= ae.SCRIPT.id ? t.text() : ae.DISPLAY : n === "text" && t.size === ae.DISPLAY.size ? t = ae.TEXT : n === "script" ? t = ae.SCRIPT : n === "scriptscript" && (t = ae.SCRIPTSCRIPT), t;
}, Oh = (n, e) => {
  var t = tg(n.size, e.style), r = t.fracNum(), i = t.fracDen(), s;
  s = e.havingStyle(r);
  var l = Se(n.numer, s, e);
  if (n.continued) {
    var a = 8.5 / e.fontMetrics().ptPerEm, o = 3.5 / e.fontMetrics().ptPerEm;
    l.height = l.height < a ? a : l.height, l.depth = l.depth < o ? o : l.depth;
  }
  s = e.havingStyle(i);
  var u = Se(n.denom, s, e), h, c, f;
  n.hasBarLine ? (n.barSize ? (c = _e(n.barSize, e), h = R.makeLineSpan("frac-line", e, c)) : h = R.makeLineSpan("frac-line", e), c = h.height, f = h.height) : (h = null, c = 0, f = e.fontMetrics().defaultRuleThickness);
  var d, m, O;
  t.size === ae.DISPLAY.size || n.size === "display" ? (d = e.fontMetrics().num1, c > 0 ? m = 3 * f : m = 7 * f, O = e.fontMetrics().denom1) : (c > 0 ? (d = e.fontMetrics().num2, m = f) : (d = e.fontMetrics().num3, m = 3 * f), O = e.fontMetrics().denom2);
  var x;
  if (h) {
    var w = e.fontMetrics().axisHeight;
    d - l.depth - (w + 0.5 * c) < m && (d += m - (d - l.depth - (w + 0.5 * c))), w - 0.5 * c - (u.height - O) < m && (O += m - (w - 0.5 * c - (u.height - O)));
    var C = -(w - 0.5 * c);
    x = R.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: u,
        shift: O
      }, {
        type: "elem",
        elem: h,
        shift: C
      }, {
        type: "elem",
        elem: l,
        shift: -d
      }]
    }, e);
  } else {
    var b = d - l.depth - (u.height - O);
    b < m && (d += 0.5 * (m - b), O += 0.5 * (m - b)), x = R.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: u,
        shift: O
      }, {
        type: "elem",
        elem: l,
        shift: -d
      }]
    }, e);
  }
  s = e.havingStyle(t), x.height *= s.sizeMultiplier / e.sizeMultiplier, x.depth *= s.sizeMultiplier / e.sizeMultiplier;
  var Z;
  t.size === ae.DISPLAY.size ? Z = e.fontMetrics().delim1 : t.size === ae.SCRIPTSCRIPT.size ? Z = e.havingStyle(ae.SCRIPT).fontMetrics().delim2 : Z = e.fontMetrics().delim2;
  var T, S;
  return n.leftDelim == null ? T = fs(e, ["mopen"]) : T = _n.customSizedDelim(n.leftDelim, Z, !0, e.havingStyle(t), n.mode, ["mopen"]), n.continued ? S = R.makeSpan([]) : n.rightDelim == null ? S = fs(e, ["mclose"]) : S = _n.customSizedDelim(n.rightDelim, Z, !0, e.havingStyle(t), n.mode, ["mclose"]), R.makeSpan(["mord"].concat(s.sizingClasses(e)), [T, R.makeSpan(["mfrac"], [x]), S], e);
}, yh = (n, e) => {
  var t = new X.MathNode("mfrac", [Re(n.numer, e), Re(n.denom, e)]);
  if (!n.hasBarLine)
    t.setAttribute("linethickness", "0px");
  else if (n.barSize) {
    var r = _e(n.barSize, e);
    t.setAttribute("linethickness", W(r));
  }
  var i = tg(n.size, e.style);
  if (i.size !== e.style.size) {
    t = new X.MathNode("mstyle", [t]);
    var s = i.size === ae.DISPLAY.size ? "true" : "false";
    t.setAttribute("displaystyle", s), t.setAttribute("scriptlevel", "0");
  }
  if (n.leftDelim != null || n.rightDelim != null) {
    var l = [];
    if (n.leftDelim != null) {
      var a = new X.MathNode("mo", [new X.TextNode(n.leftDelim.replace("\\", ""))]);
      a.setAttribute("fence", "true"), l.push(a);
    }
    if (l.push(t), n.rightDelim != null) {
      var o = new X.MathNode("mo", [new X.TextNode(n.rightDelim.replace("\\", ""))]);
      o.setAttribute("fence", "true"), l.push(o);
    }
    return oh(l);
  }
  return t;
};
H({
  type: "genfrac",
  names: [
    "\\dfrac",
    "\\frac",
    "\\tfrac",
    "\\dbinom",
    "\\binom",
    "\\tbinom",
    "\\\\atopfrac",
    // can’t be entered directly
    "\\\\bracefrac",
    "\\\\brackfrac"
    // ditto
  ],
  props: {
    numArgs: 2,
    allowedInArgument: !0
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0], s = e[1], l, a = null, o = null, u = "auto";
    switch (r) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        l = !0;
        break;
      case "\\\\atopfrac":
        l = !1;
        break;
      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        l = !1, a = "(", o = ")";
        break;
      case "\\\\bracefrac":
        l = !1, a = "\\{", o = "\\}";
        break;
      case "\\\\brackfrac":
        l = !1, a = "[", o = "]";
        break;
      default:
        throw new Error("Unrecognized genfrac command");
    }
    switch (r) {
      case "\\dfrac":
      case "\\dbinom":
        u = "display";
        break;
      case "\\tfrac":
      case "\\tbinom":
        u = "text";
        break;
    }
    return {
      type: "genfrac",
      mode: t.mode,
      continued: !1,
      numer: i,
      denom: s,
      hasBarLine: l,
      leftDelim: a,
      rightDelim: o,
      size: u,
      barSize: null
    };
  },
  htmlBuilder: Oh,
  mathmlBuilder: yh
});
H({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0], s = e[1];
    return {
      type: "genfrac",
      mode: t.mode,
      continued: !0,
      numer: i,
      denom: s,
      hasBarLine: !0,
      leftDelim: null,
      rightDelim: null,
      size: "display",
      barSize: null
    };
  }
});
H({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: !0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t,
      token: r
    } = n, i;
    switch (t) {
      case "\\over":
        i = "\\frac";
        break;
      case "\\choose":
        i = "\\binom";
        break;
      case "\\atop":
        i = "\\\\atopfrac";
        break;
      case "\\brace":
        i = "\\\\bracefrac";
        break;
      case "\\brack":
        i = "\\\\brackfrac";
        break;
      default:
        throw new Error("Unrecognized infix genfrac command");
    }
    return {
      type: "infix",
      mode: e.mode,
      replaceWith: i,
      token: r
    };
  }
});
var af = ["display", "text", "script", "scriptscript"], of = function(e) {
  var t = null;
  return e.length > 0 && (t = e, t = t === "." ? null : t), t;
};
H({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: !0,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler(n, e) {
    var {
      parser: t
    } = n, r = e[4], i = e[5], s = ea(e[0]), l = s.type === "atom" && s.family === "open" ? of(s.text) : null, a = ea(e[1]), o = a.type === "atom" && a.family === "close" ? of(a.text) : null, u = ge(e[2], "size"), h, c = null;
    u.isBlank ? h = !0 : (c = u.value, h = c.number > 0);
    var f = "auto", d = e[3];
    if (d.type === "ordgroup") {
      if (d.body.length > 0) {
        var m = ge(d.body[0], "textord");
        f = af[Number(m.text)];
      }
    } else
      d = ge(d, "textord"), f = af[Number(d.text)];
    return {
      type: "genfrac",
      mode: t.mode,
      numer: r,
      denom: i,
      continued: !1,
      hasBarLine: h,
      barSize: c,
      leftDelim: l,
      rightDelim: o,
      size: f
    };
  },
  htmlBuilder: Oh,
  mathmlBuilder: yh
});
H({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: !0
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r,
      token: i
    } = n;
    return {
      type: "infix",
      mode: t.mode,
      replaceWith: "\\\\abovefrac",
      size: ge(e[0], "size").value,
      token: i
    };
  }
});
H({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0], s = Nb(ge(e[1], "infix").size), l = e[2], a = s.number > 0;
    return {
      type: "genfrac",
      mode: t.mode,
      numer: i,
      denom: l,
      continued: !1,
      hasBarLine: a,
      barSize: s,
      leftDelim: null,
      rightDelim: null,
      size: "auto"
    };
  },
  htmlBuilder: Oh,
  mathmlBuilder: yh
});
var ng = (n, e) => {
  var t = e.style, r, i;
  n.type === "supsub" ? (r = n.sup ? Se(n.sup, e.havingStyle(t.sup()), e) : Se(n.sub, e.havingStyle(t.sub()), e), i = ge(n.base, "horizBrace")) : i = ge(n, "horizBrace");
  var s = Se(i.base, e.havingBaseStyle(ae.DISPLAY)), l = Hn.svgSpan(i, e), a;
  if (i.isOver ? (a = R.makeVList({
    positionType: "firstBaseline",
    children: [{
      type: "elem",
      elem: s
    }, {
      type: "kern",
      size: 0.1
    }, {
      type: "elem",
      elem: l
    }]
  }, e), a.children[0].children[0].children[1].classes.push("svg-align")) : (a = R.makeVList({
    positionType: "bottom",
    positionData: s.depth + 0.1 + l.height,
    children: [{
      type: "elem",
      elem: l
    }, {
      type: "kern",
      size: 0.1
    }, {
      type: "elem",
      elem: s
    }]
  }, e), a.children[0].children[0].children[0].classes.push("svg-align")), r) {
    var o = R.makeSpan(["mord", i.isOver ? "mover" : "munder"], [a], e);
    i.isOver ? a = R.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: o
      }, {
        type: "kern",
        size: 0.2
      }, {
        type: "elem",
        elem: r
      }]
    }, e) : a = R.makeVList({
      positionType: "bottom",
      positionData: o.depth + 0.2 + r.height + r.depth,
      children: [{
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: 0.2
      }, {
        type: "elem",
        elem: o
      }]
    }, e);
  }
  return R.makeSpan(["mord", i.isOver ? "mover" : "munder"], [a], e);
}, dx = (n, e) => {
  var t = Hn.mathMLnode(n.label);
  return new X.MathNode(n.isOver ? "mover" : "munder", [Re(n.base, e), t]);
};
H({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n;
    return {
      type: "horizBrace",
      mode: t.mode,
      label: r,
      isOver: /^\\over/.test(r),
      base: e[0]
    };
  },
  htmlBuilder: ng,
  mathmlBuilder: dx
});
H({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n, r = e[1], i = ge(e[0], "url").url;
    return t.settings.isTrusted({
      command: "\\href",
      url: i
    }) ? {
      type: "href",
      mode: t.mode,
      href: i,
      body: He(r)
    } : t.formatUnsupportedCmd("\\href");
  },
  htmlBuilder: (n, e) => {
    var t = st(n.body, e, !1);
    return R.makeAnchor(n.href, [], t, e);
  },
  mathmlBuilder: (n, e) => {
    var t = mr(n.body, e);
    return t instanceof Xt || (t = new Xt("mrow", [t])), t.setAttribute("href", n.href), t;
  }
});
H({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n, r = ge(e[0], "url").url;
    if (!t.settings.isTrusted({
      command: "\\url",
      url: r
    }))
      return t.formatUnsupportedCmd("\\url");
    for (var i = [], s = 0; s < r.length; s++) {
      var l = r[s];
      l === "~" && (l = "\\textasciitilde"), i.push({
        type: "textord",
        mode: "text",
        text: l
      });
    }
    var a = {
      type: "text",
      mode: t.mode,
      font: "\\texttt",
      body: i
    };
    return {
      type: "href",
      mode: t.mode,
      href: r,
      body: He(a)
    };
  }
});
H({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInText: !0,
    primitive: !0
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "hbox",
      mode: t.mode,
      body: He(e[0])
    };
  },
  htmlBuilder(n, e) {
    var t = st(n.body, e, !1);
    return R.makeFragment(t);
  },
  mathmlBuilder(n, e) {
    return new X.MathNode("mrow", Dt(n.body, e));
  }
});
H({
  type: "html",
  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r,
      token: i
    } = n, s = ge(e[0], "raw").string, l = e[1];
    t.settings.strict && t.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
    var a, o = {};
    switch (r) {
      case "\\htmlClass":
        o.class = s, a = {
          command: "\\htmlClass",
          class: s
        };
        break;
      case "\\htmlId":
        o.id = s, a = {
          command: "\\htmlId",
          id: s
        };
        break;
      case "\\htmlStyle":
        o.style = s, a = {
          command: "\\htmlStyle",
          style: s
        };
        break;
      case "\\htmlData": {
        for (var u = s.split(","), h = 0; h < u.length; h++) {
          var c = u[h].split("=");
          if (c.length !== 2)
            throw new I("Error parsing key-value for \\htmlData");
          o["data-" + c[0].trim()] = c[1].trim();
        }
        a = {
          command: "\\htmlData",
          attributes: o
        };
        break;
      }
      default:
        throw new Error("Unrecognized html command");
    }
    return t.settings.isTrusted(a) ? {
      type: "html",
      mode: t.mode,
      attributes: o,
      body: He(l)
    } : t.formatUnsupportedCmd(r);
  },
  htmlBuilder: (n, e) => {
    var t = st(n.body, e, !1), r = ["enclosing"];
    n.attributes.class && r.push(...n.attributes.class.trim().split(/\s+/));
    var i = R.makeSpan(r, t, e);
    for (var s in n.attributes)
      s !== "class" && n.attributes.hasOwnProperty(s) && i.setAttribute(s, n.attributes[s]);
    return i;
  },
  mathmlBuilder: (n, e) => mr(n.body, e)
});
H({
  type: "htmlmathml",
  names: ["\\html@mathml"],
  props: {
    numArgs: 2,
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n;
    return {
      type: "htmlmathml",
      mode: t.mode,
      html: He(e[0]),
      mathml: He(e[1])
    };
  },
  htmlBuilder: (n, e) => {
    var t = st(n.html, e, !1);
    return R.makeFragment(t);
  },
  mathmlBuilder: (n, e) => mr(n.mathml, e)
});
var yo = function(e) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e))
    return {
      number: +e,
      unit: "bp"
    };
  var t = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);
  if (!t)
    throw new I("Invalid size: '" + e + "' in \\includegraphics");
  var r = {
    number: +(t[1] + t[2]),
    // sign + magnitude, cast to number
    unit: t[3]
  };
  if (!v1(r))
    throw new I("Invalid unit: '" + r.unit + "' in \\includegraphics.");
  return r;
};
H({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: !1
  },
  handler: (n, e, t) => {
    var {
      parser: r
    } = n, i = {
      number: 0,
      unit: "em"
    }, s = {
      number: 0.9,
      unit: "em"
    }, l = {
      number: 0,
      unit: "em"
    }, a = "";
    if (t[0])
      for (var o = ge(t[0], "raw").string, u = o.split(","), h = 0; h < u.length; h++) {
        var c = u[h].split("=");
        if (c.length === 2) {
          var f = c[1].trim();
          switch (c[0].trim()) {
            case "alt":
              a = f;
              break;
            case "width":
              i = yo(f);
              break;
            case "height":
              s = yo(f);
              break;
            case "totalheight":
              l = yo(f);
              break;
            default:
              throw new I("Invalid key: '" + c[0] + "' in \\includegraphics.");
          }
        }
      }
    var d = ge(e[0], "url").url;
    return a === "" && (a = d, a = a.replace(/^.*[\\/]/, ""), a = a.substring(0, a.lastIndexOf("."))), r.settings.isTrusted({
      command: "\\includegraphics",
      url: d
    }) ? {
      type: "includegraphics",
      mode: r.mode,
      alt: a,
      width: i,
      height: s,
      totalheight: l,
      src: d
    } : r.formatUnsupportedCmd("\\includegraphics");
  },
  htmlBuilder: (n, e) => {
    var t = _e(n.height, e), r = 0;
    n.totalheight.number > 0 && (r = _e(n.totalheight, e) - t);
    var i = 0;
    n.width.number > 0 && (i = _e(n.width, e));
    var s = {
      height: W(t + r)
    };
    i > 0 && (s.width = W(i)), r > 0 && (s.verticalAlign = W(-r));
    var l = new d8(n.src, n.alt, s);
    return l.height = t, l.depth = r, l;
  },
  mathmlBuilder: (n, e) => {
    var t = new X.MathNode("mglyph", []);
    t.setAttribute("alt", n.alt);
    var r = _e(n.height, e), i = 0;
    if (n.totalheight.number > 0 && (i = _e(n.totalheight, e) - r, t.setAttribute("valign", W(-i))), t.setAttribute("height", W(r + i)), n.width.number > 0) {
      var s = _e(n.width, e);
      t.setAttribute("width", W(s));
    }
    return t.setAttribute("src", n.src), t;
  }
});
H({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: !0,
    allowedInText: !0
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n, i = ge(e[0], "size");
    if (t.settings.strict) {
      var s = r[1] === "m", l = i.value.unit === "mu";
      s ? (l || t.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " supports only mu units, " + ("not " + i.value.unit + " units")), t.mode !== "math" && t.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " works only in math mode")) : l && t.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " doesn't support mu units");
    }
    return {
      type: "kern",
      mode: t.mode,
      dimension: i.value
    };
  },
  htmlBuilder(n, e) {
    return R.makeGlue(n.dimension, e);
  },
  mathmlBuilder(n, e) {
    var t = _e(n.dimension, e);
    return new X.SpaceNode(t);
  }
});
H({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0];
    return {
      type: "lap",
      mode: t.mode,
      alignment: r.slice(5),
      body: i
    };
  },
  htmlBuilder: (n, e) => {
    var t;
    n.alignment === "clap" ? (t = R.makeSpan([], [Se(n.body, e)]), t = R.makeSpan(["inner"], [t], e)) : t = R.makeSpan(["inner"], [Se(n.body, e)]);
    var r = R.makeSpan(["fix"], []), i = R.makeSpan([n.alignment], [t, r], e), s = R.makeSpan(["strut"]);
    return s.style.height = W(i.height + i.depth), i.depth && (s.style.verticalAlign = W(-i.depth)), i.children.unshift(s), i = R.makeSpan(["thinbox"], [i], e), R.makeSpan(["mord", "vbox"], [i], e);
  },
  mathmlBuilder: (n, e) => {
    var t = new X.MathNode("mpadded", [Re(n.body, e)]);
    if (n.alignment !== "rlap") {
      var r = n.alignment === "llap" ? "-1" : "-0.5";
      t.setAttribute("lspace", r + "width");
    }
    return t.setAttribute("width", "0px"), t;
  }
});
H({
  type: "styling",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !1
  },
  handler(n, e) {
    var {
      funcName: t,
      parser: r
    } = n, i = r.mode;
    r.switchMode("math");
    var s = t === "\\(" ? "\\)" : "$", l = r.parseExpression(!1, s);
    return r.expect(s), r.switchMode(i), {
      type: "styling",
      mode: r.mode,
      style: "text",
      body: l
    };
  }
});
H({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !1
  },
  handler(n, e) {
    throw new I("Mismatched " + n.funcName);
  }
});
var uf = (n, e) => {
  switch (e.style.size) {
    case ae.DISPLAY.size:
      return n.display;
    case ae.TEXT.size:
      return n.text;
    case ae.SCRIPT.size:
      return n.script;
    case ae.SCRIPTSCRIPT.size:
      return n.scriptscript;
    default:
      return n.text;
  }
};
H({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n;
    return {
      type: "mathchoice",
      mode: t.mode,
      display: He(e[0]),
      text: He(e[1]),
      script: He(e[2]),
      scriptscript: He(e[3])
    };
  },
  htmlBuilder: (n, e) => {
    var t = uf(n, e), r = st(t, e, !1);
    return R.makeFragment(r);
  },
  mathmlBuilder: (n, e) => {
    var t = uf(n, e);
    return mr(t, e);
  }
});
var rg = (n, e, t, r, i, s, l) => {
  n = R.makeSpan([], [n]);
  var a = t && se.isCharacterBox(t), o, u;
  if (e) {
    var h = Se(e, r.havingStyle(i.sup()), r);
    u = {
      elem: h,
      kern: Math.max(r.fontMetrics().bigOpSpacing1, r.fontMetrics().bigOpSpacing3 - h.depth)
    };
  }
  if (t) {
    var c = Se(t, r.havingStyle(i.sub()), r);
    o = {
      elem: c,
      kern: Math.max(r.fontMetrics().bigOpSpacing2, r.fontMetrics().bigOpSpacing4 - c.height)
    };
  }
  var f;
  if (u && o) {
    var d = r.fontMetrics().bigOpSpacing5 + o.elem.height + o.elem.depth + o.kern + n.depth + l;
    f = R.makeVList({
      positionType: "bottom",
      positionData: d,
      children: [{
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: o.elem,
        marginLeft: W(-s)
      }, {
        type: "kern",
        size: o.kern
      }, {
        type: "elem",
        elem: n
      }, {
        type: "kern",
        size: u.kern
      }, {
        type: "elem",
        elem: u.elem,
        marginLeft: W(s)
      }, {
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }]
    }, r);
  } else if (o) {
    var m = n.height - l;
    f = R.makeVList({
      positionType: "top",
      positionData: m,
      children: [{
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: o.elem,
        marginLeft: W(-s)
      }, {
        type: "kern",
        size: o.kern
      }, {
        type: "elem",
        elem: n
      }]
    }, r);
  } else if (u) {
    var O = n.depth + l;
    f = R.makeVList({
      positionType: "bottom",
      positionData: O,
      children: [{
        type: "elem",
        elem: n
      }, {
        type: "kern",
        size: u.kern
      }, {
        type: "elem",
        elem: u.elem,
        marginLeft: W(s)
      }, {
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }]
    }, r);
  } else
    return n;
  var x = [f];
  if (o && s !== 0 && !a) {
    var b = R.makeSpan(["mspace"], [], r);
    b.style.marginRight = W(s), x.unshift(b);
  }
  return R.makeSpan(["mop", "op-limits"], x, r);
}, ig = ["\\smallint"], Qi = (n, e) => {
  var t, r, i = !1, s;
  n.type === "supsub" ? (t = n.sup, r = n.sub, s = ge(n.base, "op"), i = !0) : s = ge(n, "op");
  var l = e.style, a = !1;
  l.size === ae.DISPLAY.size && s.symbol && !se.contains(ig, s.name) && (a = !0);
  var o;
  if (s.symbol) {
    var u = a ? "Size2-Regular" : "Size1-Regular", h = "";
    if ((s.name === "\\oiint" || s.name === "\\oiiint") && (h = s.name.slice(1), s.name = h === "oiint" ? "\\iint" : "\\iiint"), o = R.makeSymbol(s.name, u, "math", e, ["mop", "op-symbol", a ? "large-op" : "small-op"]), h.length > 0) {
      var c = o.italic, f = R.staticSvg(h + "Size" + (a ? "2" : "1"), e);
      o = R.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: o,
          shift: 0
        }, {
          type: "elem",
          elem: f,
          shift: a ? 0.08 : 0
        }]
      }, e), s.name = "\\" + h, o.classes.unshift("mop"), o.italic = c;
    }
  } else if (s.body) {
    var d = st(s.body, e, !0);
    d.length === 1 && d[0] instanceof Jt ? (o = d[0], o.classes[0] = "mop") : o = R.makeSpan(["mop"], d, e);
  } else {
    for (var m = [], O = 1; O < s.name.length; O++)
      m.push(R.mathsym(s.name[O], s.mode, e));
    o = R.makeSpan(["mop"], m, e);
  }
  var x = 0, b = 0;
  return (o instanceof Jt || s.name === "\\oiint" || s.name === "\\oiiint") && !s.suppressBaseShift && (x = (o.height - o.depth) / 2 - e.fontMetrics().axisHeight, b = o.italic), i ? rg(o, t, r, e, l, b, x) : (x && (o.style.position = "relative", o.style.top = W(x)), o);
}, Fs = (n, e) => {
  var t;
  if (n.symbol)
    t = new Xt("mo", [en(n.name, n.mode)]), se.contains(ig, n.name) && t.setAttribute("largeop", "false");
  else if (n.body)
    t = new Xt("mo", Dt(n.body, e));
  else {
    t = new Xt("mi", [new wn(n.name.slice(1))]);
    var r = new Xt("mo", [en("⁡", "text")]);
    n.parentIsSupSub ? t = new Xt("mrow", [t, r]) : t = M1([t, r]);
  }
  return t;
}, px = {
  "∏": "\\prod",
  "∐": "\\coprod",
  "∑": "\\sum",
  "⋀": "\\bigwedge",
  "⋁": "\\bigvee",
  "⋂": "\\bigcap",
  "⋃": "\\bigcup",
  "⨀": "\\bigodot",
  "⨁": "\\bigoplus",
  "⨂": "\\bigotimes",
  "⨄": "\\biguplus",
  "⨆": "\\bigsqcup"
};
H({
  type: "op",
  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "∏", "∐", "∑", "⋀", "⋁", "⋂", "⋃", "⨀", "⨁", "⨂", "⨄", "⨆"],
  props: {
    numArgs: 0
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = r;
    return i.length === 1 && (i = px[i]), {
      type: "op",
      mode: t.mode,
      limits: !0,
      parentIsSupSub: !1,
      symbol: !0,
      name: i
    };
  },
  htmlBuilder: Qi,
  mathmlBuilder: Fs
});
H({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n, r = e[0];
    return {
      type: "op",
      mode: t.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !1,
      body: He(r)
    };
  },
  htmlBuilder: Qi,
  mathmlBuilder: Fs
});
var mx = {
  "∫": "\\int",
  "∬": "\\iint",
  "∭": "\\iiint",
  "∮": "\\oint",
  "∯": "\\oiint",
  "∰": "\\oiiint"
};
H({
  type: "op",
  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
  props: {
    numArgs: 0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t
    } = n;
    return {
      type: "op",
      mode: e.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !1,
      name: t
    };
  },
  htmlBuilder: Qi,
  mathmlBuilder: Fs
});
H({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t
    } = n;
    return {
      type: "op",
      mode: e.mode,
      limits: !0,
      parentIsSupSub: !1,
      symbol: !1,
      name: t
    };
  },
  htmlBuilder: Qi,
  mathmlBuilder: Fs
});
H({
  type: "op",
  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "∫", "∬", "∭", "∮", "∯", "∰"],
  props: {
    numArgs: 0
  },
  handler(n) {
    var {
      parser: e,
      funcName: t
    } = n, r = t;
    return r.length === 1 && (r = mx[r]), {
      type: "op",
      mode: e.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !0,
      name: r
    };
  },
  htmlBuilder: Qi,
  mathmlBuilder: Fs
});
var sg = (n, e) => {
  var t, r, i = !1, s;
  n.type === "supsub" ? (t = n.sup, r = n.sub, s = ge(n.base, "operatorname"), i = !0) : s = ge(n, "operatorname");
  var l;
  if (s.body.length > 0) {
    for (var a = s.body.map((c) => {
      var f = c.text;
      return typeof f == "string" ? {
        type: "textord",
        mode: c.mode,
        text: f
      } : c;
    }), o = st(a, e.withFont("mathrm"), !0), u = 0; u < o.length; u++) {
      var h = o[u];
      h instanceof Jt && (h.text = h.text.replace(/\u2212/, "-").replace(/\u2217/, "*"));
    }
    l = R.makeSpan(["mop"], o, e);
  } else
    l = R.makeSpan(["mop"], [], e);
  return i ? rg(l, t, r, e, e.style, 0, 0) : l;
}, gx = (n, e) => {
  for (var t = Dt(n.body, e.withFont("mathrm")), r = !0, i = 0; i < t.length; i++) {
    var s = t[i];
    if (!(s instanceof X.SpaceNode)) if (s instanceof X.MathNode)
      switch (s.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mspace":
        case "mtext":
          break;
        // Do nothing yet.
        case "mo": {
          var l = s.children[0];
          s.children.length === 1 && l instanceof X.TextNode ? l.text = l.text.replace(/\u2212/, "-").replace(/\u2217/, "*") : r = !1;
          break;
        }
        default:
          r = !1;
      }
    else
      r = !1;
  }
  if (r) {
    var a = t.map((h) => h.toText()).join("");
    t = [new X.TextNode(a)];
  }
  var o = new X.MathNode("mi", t);
  o.setAttribute("mathvariant", "normal");
  var u = new X.MathNode("mo", [en("⁡", "text")]);
  return n.parentIsSupSub ? new X.MathNode("mrow", [o, u]) : X.newDocumentFragment([o, u]);
};
H({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1
  },
  handler: (n, e) => {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0];
    return {
      type: "operatorname",
      mode: t.mode,
      body: He(i),
      alwaysHandleSupSub: r === "\\operatornamewithlimits",
      limits: !1,
      parentIsSupSub: !1
    };
  },
  htmlBuilder: sg,
  mathmlBuilder: gx
});
v("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
Xr({
  type: "ordgroup",
  htmlBuilder(n, e) {
    return n.semisimple ? R.makeFragment(st(n.body, e, !1)) : R.makeSpan(["mord"], st(n.body, e, !0), e);
  },
  mathmlBuilder(n, e) {
    return mr(n.body, e, !0);
  }
});
H({
  type: "overline",
  names: ["\\overline"],
  props: {
    numArgs: 1
  },
  handler(n, e) {
    var {
      parser: t
    } = n, r = e[0];
    return {
      type: "overline",
      mode: t.mode,
      body: r
    };
  },
  htmlBuilder(n, e) {
    var t = Se(n.body, e.havingCrampedStyle()), r = R.makeLineSpan("overline-line", e), i = e.fontMetrics().defaultRuleThickness, s = R.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t
      }, {
        type: "kern",
        size: 3 * i
      }, {
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: i
      }]
    }, e);
    return R.makeSpan(["mord", "overline"], [s], e);
  },
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mo", [new X.TextNode("‾")]);
    t.setAttribute("stretchy", "true");
    var r = new X.MathNode("mover", [Re(n.body, e), t]);
    return r.setAttribute("accent", "true"), r;
  }
});
H({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n, r = e[0];
    return {
      type: "phantom",
      mode: t.mode,
      body: He(r)
    };
  },
  htmlBuilder: (n, e) => {
    var t = st(n.body, e.withPhantom(), !1);
    return R.makeFragment(t);
  },
  mathmlBuilder: (n, e) => {
    var t = Dt(n.body, e);
    return new X.MathNode("mphantom", t);
  }
});
H({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n, r = e[0];
    return {
      type: "hphantom",
      mode: t.mode,
      body: r
    };
  },
  htmlBuilder: (n, e) => {
    var t = R.makeSpan([], [Se(n.body, e.withPhantom())]);
    if (t.height = 0, t.depth = 0, t.children)
      for (var r = 0; r < t.children.length; r++)
        t.children[r].height = 0, t.children[r].depth = 0;
    return t = R.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t
      }]
    }, e), R.makeSpan(["mord"], [t], e);
  },
  mathmlBuilder: (n, e) => {
    var t = Dt(He(n.body), e), r = new X.MathNode("mphantom", t), i = new X.MathNode("mpadded", [r]);
    return i.setAttribute("height", "0px"), i.setAttribute("depth", "0px"), i;
  }
});
H({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      parser: t
    } = n, r = e[0];
    return {
      type: "vphantom",
      mode: t.mode,
      body: r
    };
  },
  htmlBuilder: (n, e) => {
    var t = R.makeSpan(["inner"], [Se(n.body, e.withPhantom())]), r = R.makeSpan(["fix"], []);
    return R.makeSpan(["mord", "rlap"], [t, r], e);
  },
  mathmlBuilder: (n, e) => {
    var t = Dt(He(n.body), e), r = new X.MathNode("mphantom", t), i = new X.MathNode("mpadded", [r]);
    return i.setAttribute("width", "0px"), i;
  }
});
H({
  type: "raisebox",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: !0
  },
  handler(n, e) {
    var {
      parser: t
    } = n, r = ge(e[0], "size").value, i = e[1];
    return {
      type: "raisebox",
      mode: t.mode,
      dy: r,
      body: i
    };
  },
  htmlBuilder(n, e) {
    var t = Se(n.body, e), r = _e(n.dy, e);
    return R.makeVList({
      positionType: "shift",
      positionData: -r,
      children: [{
        type: "elem",
        elem: t
      }]
    }, e);
  },
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mpadded", [Re(n.body, e)]), r = n.dy.number + n.dy.unit;
    return t.setAttribute("voffset", r), t;
  }
});
H({
  type: "internal",
  names: ["\\relax"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(n) {
    var {
      parser: e
    } = n;
    return {
      type: "internal",
      mode: e.mode
    };
  }
});
H({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    allowedInText: !0,
    allowedInMath: !0,
    argTypes: ["size", "size", "size"]
  },
  handler(n, e, t) {
    var {
      parser: r
    } = n, i = t[0], s = ge(e[0], "size"), l = ge(e[1], "size");
    return {
      type: "rule",
      mode: r.mode,
      shift: i && ge(i, "size").value,
      width: s.value,
      height: l.value
    };
  },
  htmlBuilder(n, e) {
    var t = R.makeSpan(["mord", "rule"], [], e), r = _e(n.width, e), i = _e(n.height, e), s = n.shift ? _e(n.shift, e) : 0;
    return t.style.borderRightWidth = W(r), t.style.borderTopWidth = W(i), t.style.bottom = W(s), t.width = r, t.height = i + s, t.depth = -s, t.maxFontSize = i * 1.125 * e.sizeMultiplier, t;
  },
  mathmlBuilder(n, e) {
    var t = _e(n.width, e), r = _e(n.height, e), i = n.shift ? _e(n.shift, e) : 0, s = e.color && e.getColor() || "black", l = new X.MathNode("mspace");
    l.setAttribute("mathbackground", s), l.setAttribute("width", W(t)), l.setAttribute("height", W(r));
    var a = new X.MathNode("mpadded", [l]);
    return i >= 0 ? a.setAttribute("height", W(i)) : (a.setAttribute("height", W(i)), a.setAttribute("depth", W(-i))), a.setAttribute("voffset", W(i)), a;
  }
});
function lg(n, e, t) {
  for (var r = st(n, e, !1), i = e.sizeMultiplier / t.sizeMultiplier, s = 0; s < r.length; s++) {
    var l = r[s].classes.indexOf("sizing");
    l < 0 ? Array.prototype.push.apply(r[s].classes, e.sizingClasses(t)) : r[s].classes[l + 1] === "reset-size" + e.size && (r[s].classes[l + 1] = "reset-size" + t.size), r[s].height *= i, r[s].depth *= i;
  }
  return R.makeFragment(r);
}
var hf = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"], Ox = (n, e) => {
  var t = e.havingSize(n.size);
  return lg(n.body, t, e);
};
H({
  type: "sizing",
  names: hf,
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler: (n, e) => {
    var {
      breakOnTokenText: t,
      funcName: r,
      parser: i
    } = n, s = i.parseExpression(!1, t);
    return {
      type: "sizing",
      mode: i.mode,
      // Figure out what size to use based on the list of functions above
      size: hf.indexOf(r) + 1,
      body: s
    };
  },
  htmlBuilder: Ox,
  mathmlBuilder: (n, e) => {
    var t = e.havingSize(n.size), r = Dt(n.body, t), i = new X.MathNode("mstyle", r);
    return i.setAttribute("mathsize", W(t.sizeMultiplier)), i;
  }
});
H({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: !0
  },
  handler: (n, e, t) => {
    var {
      parser: r
    } = n, i = !1, s = !1, l = t[0] && ge(t[0], "ordgroup");
    if (l)
      for (var a = "", o = 0; o < l.body.length; ++o) {
        var u = l.body[o];
        if (a = u.text, a === "t")
          i = !0;
        else if (a === "b")
          s = !0;
        else {
          i = !1, s = !1;
          break;
        }
      }
    else
      i = !0, s = !0;
    var h = e[0];
    return {
      type: "smash",
      mode: r.mode,
      body: h,
      smashHeight: i,
      smashDepth: s
    };
  },
  htmlBuilder: (n, e) => {
    var t = R.makeSpan([], [Se(n.body, e)]);
    if (!n.smashHeight && !n.smashDepth)
      return t;
    if (n.smashHeight && (t.height = 0, t.children))
      for (var r = 0; r < t.children.length; r++)
        t.children[r].height = 0;
    if (n.smashDepth && (t.depth = 0, t.children))
      for (var i = 0; i < t.children.length; i++)
        t.children[i].depth = 0;
    var s = R.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t
      }]
    }, e);
    return R.makeSpan(["mord"], [s], e);
  },
  mathmlBuilder: (n, e) => {
    var t = new X.MathNode("mpadded", [Re(n.body, e)]);
    return n.smashHeight && t.setAttribute("height", "0px"), n.smashDepth && t.setAttribute("depth", "0px"), t;
  }
});
H({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(n, e, t) {
    var {
      parser: r
    } = n, i = t[0], s = e[0];
    return {
      type: "sqrt",
      mode: r.mode,
      body: s,
      index: i
    };
  },
  htmlBuilder(n, e) {
    var t = Se(n.body, e.havingCrampedStyle());
    t.height === 0 && (t.height = e.fontMetrics().xHeight), t = R.wrapFragment(t, e);
    var r = e.fontMetrics(), i = r.defaultRuleThickness, s = i;
    e.style.id < ae.TEXT.id && (s = e.fontMetrics().xHeight);
    var l = i + s / 4, a = t.height + t.depth + l + i, {
      span: o,
      ruleWidth: u,
      advanceWidth: h
    } = _n.sqrtImage(a, e), c = o.height - u;
    c > t.height + t.depth + l && (l = (l + c - t.height - t.depth) / 2);
    var f = o.height - t.height - l - u;
    t.style.paddingLeft = W(h);
    var d = R.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: -(t.height + f)
      }, {
        type: "elem",
        elem: o
      }, {
        type: "kern",
        size: u
      }]
    }, e);
    if (n.index) {
      var m = e.havingStyle(ae.SCRIPTSCRIPT), O = Se(n.index, m, e), x = 0.6 * (d.height - d.depth), b = R.makeVList({
        positionType: "shift",
        positionData: -x,
        children: [{
          type: "elem",
          elem: O
        }]
      }, e), w = R.makeSpan(["root"], [b]);
      return R.makeSpan(["mord", "sqrt"], [w, d], e);
    } else
      return R.makeSpan(["mord", "sqrt"], [d], e);
  },
  mathmlBuilder(n, e) {
    var {
      body: t,
      index: r
    } = n;
    return r ? new X.MathNode("mroot", [Re(t, e), Re(r, e)]) : new X.MathNode("msqrt", [Re(t, e)]);
  }
});
var cf = {
  display: ae.DISPLAY,
  text: ae.TEXT,
  script: ae.SCRIPT,
  scriptscript: ae.SCRIPTSCRIPT
};
H({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(n, e) {
    var {
      breakOnTokenText: t,
      funcName: r,
      parser: i
    } = n, s = i.parseExpression(!0, t), l = r.slice(1, r.length - 5);
    return {
      type: "styling",
      mode: i.mode,
      // Figure out what style to use by pulling out the style from
      // the function name
      style: l,
      body: s
    };
  },
  htmlBuilder(n, e) {
    var t = cf[n.style], r = e.havingStyle(t).withFont("");
    return lg(n.body, r, e);
  },
  mathmlBuilder(n, e) {
    var t = cf[n.style], r = e.havingStyle(t), i = Dt(n.body, r), s = new X.MathNode("mstyle", i), l = {
      display: ["0", "true"],
      text: ["0", "false"],
      script: ["1", "false"],
      scriptscript: ["2", "false"]
    }, a = l[n.style];
    return s.setAttribute("scriptlevel", a[0]), s.setAttribute("displaystyle", a[1]), s;
  }
});
var yx = function(e, t) {
  var r = e.base;
  if (r)
    if (r.type === "op") {
      var i = r.limits && (t.style.size === ae.DISPLAY.size || r.alwaysHandleSupSub);
      return i ? Qi : null;
    } else if (r.type === "operatorname") {
      var s = r.alwaysHandleSupSub && (t.style.size === ae.DISPLAY.size || r.limits);
      return s ? sg : null;
    } else {
      if (r.type === "accent")
        return se.isCharacterBox(r.base) ? ch : null;
      if (r.type === "horizBrace") {
        var l = !e.sub;
        return l === r.isOver ? ng : null;
      } else
        return null;
    }
  else return null;
};
Xr({
  type: "supsub",
  htmlBuilder(n, e) {
    var t = yx(n, e);
    if (t)
      return t(n, e);
    var {
      base: r,
      sup: i,
      sub: s
    } = n, l = Se(r, e), a, o, u = e.fontMetrics(), h = 0, c = 0, f = r && se.isCharacterBox(r);
    if (i) {
      var d = e.havingStyle(e.style.sup());
      a = Se(i, d, e), f || (h = l.height - d.fontMetrics().supDrop * d.sizeMultiplier / e.sizeMultiplier);
    }
    if (s) {
      var m = e.havingStyle(e.style.sub());
      o = Se(s, m, e), f || (c = l.depth + m.fontMetrics().subDrop * m.sizeMultiplier / e.sizeMultiplier);
    }
    var O;
    e.style === ae.DISPLAY ? O = u.sup1 : e.style.cramped ? O = u.sup3 : O = u.sup2;
    var x = e.sizeMultiplier, b = W(0.5 / u.ptPerEm / x), w = null;
    if (o) {
      var C = n.base && n.base.type === "op" && n.base.name && (n.base.name === "\\oiint" || n.base.name === "\\oiiint");
      (l instanceof Jt || C) && (w = W(-l.italic));
    }
    var Z;
    if (a && o) {
      h = Math.max(h, O, a.depth + 0.25 * u.xHeight), c = Math.max(c, u.sub2);
      var T = u.defaultRuleThickness, S = 4 * T;
      if (h - a.depth - (o.height - c) < S) {
        c = S - (h - a.depth) + o.height;
        var E = 0.8 * u.xHeight - (h - a.depth);
        E > 0 && (h += E, c -= E);
      }
      var N = [{
        type: "elem",
        elem: o,
        shift: c,
        marginRight: b,
        marginLeft: w
      }, {
        type: "elem",
        elem: a,
        shift: -h,
        marginRight: b
      }];
      Z = R.makeVList({
        positionType: "individualShift",
        children: N
      }, e);
    } else if (o) {
      c = Math.max(c, u.sub1, o.height - 0.8 * u.xHeight);
      var z = [{
        type: "elem",
        elem: o,
        marginLeft: w,
        marginRight: b
      }];
      Z = R.makeVList({
        positionType: "shift",
        positionData: c,
        children: z
      }, e);
    } else if (a)
      h = Math.max(h, O, a.depth + 0.25 * u.xHeight), Z = R.makeVList({
        positionType: "shift",
        positionData: -h,
        children: [{
          type: "elem",
          elem: a,
          marginRight: b
        }]
      }, e);
    else
      throw new Error("supsub must have either sup or sub.");
    var M = Lu(l, "right") || "mord";
    return R.makeSpan([M], [l, R.makeSpan(["msupsub"], [Z])], e);
  },
  mathmlBuilder(n, e) {
    var t = !1, r, i;
    n.base && n.base.type === "horizBrace" && (i = !!n.sup, i === n.base.isOver && (t = !0, r = n.base.isOver)), n.base && (n.base.type === "op" || n.base.type === "operatorname") && (n.base.parentIsSupSub = !0);
    var s = [Re(n.base, e)];
    n.sub && s.push(Re(n.sub, e)), n.sup && s.push(Re(n.sup, e));
    var l;
    if (t)
      l = r ? "mover" : "munder";
    else if (n.sub)
      if (n.sup) {
        var u = n.base;
        u && u.type === "op" && u.limits && e.style === ae.DISPLAY || u && u.type === "operatorname" && u.alwaysHandleSupSub && (e.style === ae.DISPLAY || u.limits) ? l = "munderover" : l = "msubsup";
      } else {
        var o = n.base;
        o && o.type === "op" && o.limits && (e.style === ae.DISPLAY || o.alwaysHandleSupSub) || o && o.type === "operatorname" && o.alwaysHandleSupSub && (o.limits || e.style === ae.DISPLAY) ? l = "munder" : l = "msub";
      }
    else {
      var a = n.base;
      a && a.type === "op" && a.limits && (e.style === ae.DISPLAY || a.alwaysHandleSupSub) || a && a.type === "operatorname" && a.alwaysHandleSupSub && (a.limits || e.style === ae.DISPLAY) ? l = "mover" : l = "msup";
    }
    return new X.MathNode(l, s);
  }
});
Xr({
  type: "atom",
  htmlBuilder(n, e) {
    return R.mathsym(n.text, n.mode, e, ["m" + n.family]);
  },
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mo", [en(n.text, n.mode)]);
    if (n.family === "bin") {
      var r = uh(n, e);
      r === "bold-italic" && t.setAttribute("mathvariant", r);
    } else n.family === "punct" ? t.setAttribute("separator", "true") : (n.family === "open" || n.family === "close") && t.setAttribute("stretchy", "false");
    return t;
  }
});
var ag = {
  mi: "italic",
  mn: "normal",
  mtext: "normal"
};
Xr({
  type: "mathord",
  htmlBuilder(n, e) {
    return R.makeOrd(n, e, "mathord");
  },
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mi", [en(n.text, n.mode, e)]), r = uh(n, e) || "italic";
    return r !== ag[t.type] && t.setAttribute("mathvariant", r), t;
  }
});
Xr({
  type: "textord",
  htmlBuilder(n, e) {
    return R.makeOrd(n, e, "textord");
  },
  mathmlBuilder(n, e) {
    var t = en(n.text, n.mode, e), r = uh(n, e) || "normal", i;
    return n.mode === "text" ? i = new X.MathNode("mtext", [t]) : /[0-9]/.test(n.text) ? i = new X.MathNode("mn", [t]) : n.text === "\\prime" ? i = new X.MathNode("mo", [t]) : i = new X.MathNode("mi", [t]), r !== ag[i.type] && i.setAttribute("mathvariant", r), i;
  }
});
var bo = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
}, xo = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
};
Xr({
  type: "spacing",
  htmlBuilder(n, e) {
    if (xo.hasOwnProperty(n.text)) {
      var t = xo[n.text].className || "";
      if (n.mode === "text") {
        var r = R.makeOrd(n, e, "textord");
        return r.classes.push(t), r;
      } else
        return R.makeSpan(["mspace", t], [R.mathsym(n.text, n.mode, e)], e);
    } else {
      if (bo.hasOwnProperty(n.text))
        return R.makeSpan(["mspace", bo[n.text]], [], e);
      throw new I('Unknown type of space "' + n.text + '"');
    }
  },
  mathmlBuilder(n, e) {
    var t;
    if (xo.hasOwnProperty(n.text))
      t = new X.MathNode("mtext", [new X.TextNode(" ")]);
    else {
      if (bo.hasOwnProperty(n.text))
        return new X.MathNode("mspace");
      throw new I('Unknown type of space "' + n.text + '"');
    }
    return t;
  }
});
var ff = () => {
  var n = new X.MathNode("mtd", []);
  return n.setAttribute("width", "50%"), n;
};
Xr({
  type: "tag",
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mtable", [new X.MathNode("mtr", [ff(), new X.MathNode("mtd", [mr(n.body, e)]), ff(), new X.MathNode("mtd", [mr(n.tag, e)])])]);
    return t.setAttribute("width", "100%"), t;
  }
});
var df = {
  "\\text": void 0,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm"
}, pf = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
}, bx = {
  "\\textit": "textit",
  "\\textup": "textup"
}, mf = (n, e) => {
  var t = n.font;
  if (t) {
    if (df[t])
      return e.withTextFontFamily(df[t]);
    if (pf[t])
      return e.withTextFontWeight(pf[t]);
    if (t === "\\emph")
      return e.fontShape === "textit" ? e.withTextFontShape("textup") : e.withTextFontShape("textit");
  } else return e;
  return e.withTextFontShape(bx[t]);
};
H({
  type: "text",
  names: [
    // Font families
    "\\text",
    "\\textrm",
    "\\textsf",
    "\\texttt",
    "\\textnormal",
    // Font weights
    "\\textbf",
    "\\textmd",
    // Font Shapes
    "\\textit",
    "\\textup",
    "\\emph"
  ],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: !0,
    allowedInText: !0
  },
  handler(n, e) {
    var {
      parser: t,
      funcName: r
    } = n, i = e[0];
    return {
      type: "text",
      mode: t.mode,
      body: He(i),
      font: r
    };
  },
  htmlBuilder(n, e) {
    var t = mf(n, e), r = st(n.body, t, !0);
    return R.makeSpan(["mord", "text"], r, t);
  },
  mathmlBuilder(n, e) {
    var t = mf(n, e);
    return mr(n.body, t);
  }
});
H({
  type: "underline",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "underline",
      mode: t.mode,
      body: e[0]
    };
  },
  htmlBuilder(n, e) {
    var t = Se(n.body, e), r = R.makeLineSpan("underline-line", e), i = e.fontMetrics().defaultRuleThickness, s = R.makeVList({
      positionType: "top",
      positionData: t.height,
      children: [{
        type: "kern",
        size: i
      }, {
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: 3 * i
      }, {
        type: "elem",
        elem: t
      }]
    }, e);
    return R.makeSpan(["mord", "underline"], [s], e);
  },
  mathmlBuilder(n, e) {
    var t = new X.MathNode("mo", [new X.TextNode("‾")]);
    t.setAttribute("stretchy", "true");
    var r = new X.MathNode("munder", [Re(n.body, e), t]);
    return r.setAttribute("accentunder", "true"), r;
  }
});
H({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    // In LaTeX, \vcenter can act only on a box.
    allowedInText: !1
  },
  handler(n, e) {
    var {
      parser: t
    } = n;
    return {
      type: "vcenter",
      mode: t.mode,
      body: e[0]
    };
  },
  htmlBuilder(n, e) {
    var t = Se(n.body, e), r = e.fontMetrics().axisHeight, i = 0.5 * (t.height - r - (t.depth + r));
    return R.makeVList({
      positionType: "shift",
      positionData: i,
      children: [{
        type: "elem",
        elem: t
      }]
    }, e);
  },
  mathmlBuilder(n, e) {
    return new X.MathNode("mpadded", [Re(n.body, e)], ["vcenter"]);
  }
});
H({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(n, e, t) {
    throw new I("\\verb ended by end of line instead of matching delimiter");
  },
  htmlBuilder(n, e) {
    for (var t = gf(n), r = [], i = e.havingStyle(e.style.text()), s = 0; s < t.length; s++) {
      var l = t[s];
      l === "~" && (l = "\\textasciitilde"), r.push(R.makeSymbol(l, "Typewriter-Regular", n.mode, i, ["mord", "texttt"]));
    }
    return R.makeSpan(["mord", "text"].concat(i.sizingClasses(e)), R.tryCombineChars(r), i);
  },
  mathmlBuilder(n, e) {
    var t = new X.TextNode(gf(n)), r = new X.MathNode("mtext", [t]);
    return r.setAttribute("mathvariant", "monospace"), r;
  }
});
var gf = (n) => n.body.replace(/ /g, n.star ? "␣" : " "), hr = D1, og = `[ \r
	]`, xx = "\\\\[a-zA-Z@]+", vx = "\\\\[^\uD800-\uDFFF]", wx = "(" + xx + ")" + og + "*", kx = `\\\\(
|[ \r	]+
?)[ \r	]*`, Nu = "[̀-ͯ]", Sx = new RegExp(Nu + "+$"), Qx = "(" + og + "+)|" + // whitespace
(kx + "|") + // \whitespace
"([!-\\[\\]-‧‪-퟿豈-￿]" + // single codepoint
(Nu + "*") + // ...plus accents
"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + // surrogate pair
(Nu + "*") + // ...plus accents
"|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5" + // \verb unstarred
("|" + wx) + // \macroName + spaces
("|" + vx + ")");
class Of {
  // Category codes. The lexer only supports comment characters (14) for now.
  // MacroExpander additionally distinguishes active (13).
  constructor(e, t) {
    this.input = void 0, this.settings = void 0, this.tokenRegex = void 0, this.catcodes = void 0, this.input = e, this.settings = t, this.tokenRegex = new RegExp(Qx, "g"), this.catcodes = {
      "%": 14,
      // comment character
      "~": 13
      // active character
    };
  }
  setCatcode(e, t) {
    this.catcodes[e] = t;
  }
  /**
   * This function lexes a single token.
   */
  lex() {
    var e = this.input, t = this.tokenRegex.lastIndex;
    if (t === e.length)
      return new Ht("EOF", new Lt(this, t, t));
    var r = this.tokenRegex.exec(e);
    if (r === null || r.index !== t)
      throw new I("Unexpected character: '" + e[t] + "'", new Ht(e[t], new Lt(this, t, t + 1)));
    var i = r[6] || r[3] || (r[2] ? "\\ " : " ");
    if (this.catcodes[i] === 14) {
      var s = e.indexOf(`
`, this.tokenRegex.lastIndex);
      return s === -1 ? (this.tokenRegex.lastIndex = e.length, this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)")) : this.tokenRegex.lastIndex = s + 1, this.lex();
    }
    return new Ht(i, new Lt(this, t, this.tokenRegex.lastIndex));
  }
}
class Px {
  /**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */
  constructor(e, t) {
    e === void 0 && (e = {}), t === void 0 && (t = {}), this.current = void 0, this.builtins = void 0, this.undefStack = void 0, this.current = t, this.builtins = e, this.undefStack = [];
  }
  /**
   * Start a new nested group, affecting future local `set`s.
   */
  beginGroup() {
    this.undefStack.push({});
  }
  /**
   * End current nested group, restoring values before the group began.
   */
  endGroup() {
    if (this.undefStack.length === 0)
      throw new I("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");
    var e = this.undefStack.pop();
    for (var t in e)
      e.hasOwnProperty(t) && (e[t] == null ? delete this.current[t] : this.current[t] = e[t]);
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    for (; this.undefStack.length > 0; )
      this.endGroup();
  }
  /**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */
  has(e) {
    return this.current.hasOwnProperty(e) || this.builtins.hasOwnProperty(e);
  }
  /**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */
  get(e) {
    return this.current.hasOwnProperty(e) ? this.current[e] : this.builtins[e];
  }
  /**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   * A value of undefined means to delete existing definitions.
   */
  set(e, t, r) {
    if (r === void 0 && (r = !1), r) {
      for (var i = 0; i < this.undefStack.length; i++)
        delete this.undefStack[i][e];
      this.undefStack.length > 0 && (this.undefStack[this.undefStack.length - 1][e] = t);
    } else {
      var s = this.undefStack[this.undefStack.length - 1];
      s && !s.hasOwnProperty(e) && (s[e] = this.current[e]);
    }
    t == null ? delete this.current[e] : this.current[e] = t;
  }
}
var Cx = H1;
v("\\noexpand", function(n) {
  var e = n.popToken();
  return n.isExpandable(e.text) && (e.noexpand = !0, e.treatAsRelax = !0), {
    tokens: [e],
    numArgs: 0
  };
});
v("\\expandafter", function(n) {
  var e = n.popToken();
  return n.expandOnce(!0), {
    tokens: [e],
    numArgs: 0
  };
});
v("\\@firstoftwo", function(n) {
  var e = n.consumeArgs(2);
  return {
    tokens: e[0],
    numArgs: 0
  };
});
v("\\@secondoftwo", function(n) {
  var e = n.consumeArgs(2);
  return {
    tokens: e[1],
    numArgs: 0
  };
});
v("\\@ifnextchar", function(n) {
  var e = n.consumeArgs(3);
  n.consumeSpaces();
  var t = n.future();
  return e[0].length === 1 && e[0][0].text === t.text ? {
    tokens: e[1],
    numArgs: 0
  } : {
    tokens: e[2],
    numArgs: 0
  };
});
v("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}");
v("\\TextOrMath", function(n) {
  var e = n.consumeArgs(2);
  return n.mode === "text" ? {
    tokens: e[0],
    numArgs: 0
  } : {
    tokens: e[1],
    numArgs: 0
  };
});
var yf = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  a: 10,
  A: 10,
  b: 11,
  B: 11,
  c: 12,
  C: 12,
  d: 13,
  D: 13,
  e: 14,
  E: 14,
  f: 15,
  F: 15
};
v("\\char", function(n) {
  var e = n.popToken(), t, r = "";
  if (e.text === "'")
    t = 8, e = n.popToken();
  else if (e.text === '"')
    t = 16, e = n.popToken();
  else if (e.text === "`")
    if (e = n.popToken(), e.text[0] === "\\")
      r = e.text.charCodeAt(1);
    else {
      if (e.text === "EOF")
        throw new I("\\char` missing argument");
      r = e.text.charCodeAt(0);
    }
  else
    t = 10;
  if (t) {
    if (r = yf[e.text], r == null || r >= t)
      throw new I("Invalid base-" + t + " digit " + e.text);
    for (var i; (i = yf[n.future().text]) != null && i < t; )
      r *= t, r += i, n.popToken();
  }
  return "\\@char{" + r + "}";
});
var bh = (n, e, t, r) => {
  var i = n.consumeArg().tokens;
  if (i.length !== 1)
    throw new I("\\newcommand's first argument must be a macro name");
  var s = i[0].text, l = n.isDefined(s);
  if (l && !e)
    throw new I("\\newcommand{" + s + "} attempting to redefine " + (s + "; use \\renewcommand"));
  if (!l && !t)
    throw new I("\\renewcommand{" + s + "} when command " + s + " does not yet exist; use \\newcommand");
  var a = 0;
  if (i = n.consumeArg().tokens, i.length === 1 && i[0].text === "[") {
    for (var o = "", u = n.expandNextToken(); u.text !== "]" && u.text !== "EOF"; )
      o += u.text, u = n.expandNextToken();
    if (!o.match(/^\s*[0-9]+\s*$/))
      throw new I("Invalid number of arguments: " + o);
    a = parseInt(o), i = n.consumeArg().tokens;
  }
  return l && r || n.macros.set(s, {
    tokens: i,
    numArgs: a
  }), "";
};
v("\\newcommand", (n) => bh(n, !1, !0, !1));
v("\\renewcommand", (n) => bh(n, !0, !1, !1));
v("\\providecommand", (n) => bh(n, !0, !0, !0));
v("\\message", (n) => {
  var e = n.consumeArgs(1)[0];
  return console.log(e.reverse().map((t) => t.text).join("")), "";
});
v("\\errmessage", (n) => {
  var e = n.consumeArgs(1)[0];
  return console.error(e.reverse().map((t) => t.text).join("")), "";
});
v("\\show", (n) => {
  var e = n.popToken(), t = e.text;
  return console.log(e, n.macros.get(t), hr[t], Be.math[t], Be.text[t]), "";
});
v("\\bgroup", "{");
v("\\egroup", "}");
v("~", "\\nobreakspace");
v("\\lq", "`");
v("\\rq", "'");
v("\\aa", "\\r a");
v("\\AA", "\\r A");
v("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
v("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
v("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}");
v("ℬ", "\\mathscr{B}");
v("ℰ", "\\mathscr{E}");
v("ℱ", "\\mathscr{F}");
v("ℋ", "\\mathscr{H}");
v("ℐ", "\\mathscr{I}");
v("ℒ", "\\mathscr{L}");
v("ℳ", "\\mathscr{M}");
v("ℛ", "\\mathscr{R}");
v("ℭ", "\\mathfrak{C}");
v("ℌ", "\\mathfrak{H}");
v("ℨ", "\\mathfrak{Z}");
v("\\Bbbk", "\\Bbb{k}");
v("·", "\\cdotp");
v("\\llap", "\\mathllap{\\textrm{#1}}");
v("\\rlap", "\\mathrlap{\\textrm{#1}}");
v("\\clap", "\\mathclap{\\textrm{#1}}");
v("\\mathstrut", "\\vphantom{(}");
v("\\underbar", "\\underline{\\text{#1}}");
v("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}');
v("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
v("\\ne", "\\neq");
v("≠", "\\neq");
v("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`∉}}");
v("∉", "\\notin");
v("≘", "\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`≘}}");
v("≙", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`≘}}");
v("≚", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`≚}}");
v("≛", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`≛}}");
v("≝", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`≝}}");
v("≞", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`≞}}");
v("≟", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`≟}}");
v("⟂", "\\perp");
v("‼", "\\mathclose{!\\mkern-0.8mu!}");
v("∌", "\\notni");
v("⌜", "\\ulcorner");
v("⌝", "\\urcorner");
v("⌞", "\\llcorner");
v("⌟", "\\lrcorner");
v("©", "\\copyright");
v("®", "\\textregistered");
v("️", "\\textregistered");
v("\\ulcorner", '\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}');
v("\\urcorner", '\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}');
v("\\llcorner", '\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}');
v("\\lrcorner", '\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}');
v("\\vdots", "{\\varvdots\\rule{0pt}{15pt}}");
v("⋮", "\\vdots");
v("\\varGamma", "\\mathit{\\Gamma}");
v("\\varDelta", "\\mathit{\\Delta}");
v("\\varTheta", "\\mathit{\\Theta}");
v("\\varLambda", "\\mathit{\\Lambda}");
v("\\varXi", "\\mathit{\\Xi}");
v("\\varPi", "\\mathit{\\Pi}");
v("\\varSigma", "\\mathit{\\Sigma}");
v("\\varUpsilon", "\\mathit{\\Upsilon}");
v("\\varPhi", "\\mathit{\\Phi}");
v("\\varPsi", "\\mathit{\\Psi}");
v("\\varOmega", "\\mathit{\\Omega}");
v("\\substack", "\\begin{subarray}{c}#1\\end{subarray}");
v("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax");
v("\\boxed", "\\fbox{$\\displaystyle{#1}$}");
v("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
v("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
v("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");
v("\\dddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ...}}{#1}}");
v("\\ddddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ....}}{#1}}");
var bf = {
  ",": "\\dotsc",
  "\\not": "\\dotsb",
  // \keybin@ checks for the following:
  "+": "\\dotsb",
  "=": "\\dotsb",
  "<": "\\dotsb",
  ">": "\\dotsb",
  "-": "\\dotsb",
  "*": "\\dotsb",
  ":": "\\dotsb",
  // Symbols whose definition starts with \DOTSB:
  "\\DOTSB": "\\dotsb",
  "\\coprod": "\\dotsb",
  "\\bigvee": "\\dotsb",
  "\\bigwedge": "\\dotsb",
  "\\biguplus": "\\dotsb",
  "\\bigcap": "\\dotsb",
  "\\bigcup": "\\dotsb",
  "\\prod": "\\dotsb",
  "\\sum": "\\dotsb",
  "\\bigotimes": "\\dotsb",
  "\\bigoplus": "\\dotsb",
  "\\bigodot": "\\dotsb",
  "\\bigsqcup": "\\dotsb",
  "\\And": "\\dotsb",
  "\\longrightarrow": "\\dotsb",
  "\\Longrightarrow": "\\dotsb",
  "\\longleftarrow": "\\dotsb",
  "\\Longleftarrow": "\\dotsb",
  "\\longleftrightarrow": "\\dotsb",
  "\\Longleftrightarrow": "\\dotsb",
  "\\mapsto": "\\dotsb",
  "\\longmapsto": "\\dotsb",
  "\\hookrightarrow": "\\dotsb",
  "\\doteq": "\\dotsb",
  // Symbols whose definition starts with \mathbin:
  "\\mathbin": "\\dotsb",
  // Symbols whose definition starts with \mathrel:
  "\\mathrel": "\\dotsb",
  "\\relbar": "\\dotsb",
  "\\Relbar": "\\dotsb",
  "\\xrightarrow": "\\dotsb",
  "\\xleftarrow": "\\dotsb",
  // Symbols whose definition starts with \DOTSI:
  "\\DOTSI": "\\dotsi",
  "\\int": "\\dotsi",
  "\\oint": "\\dotsi",
  "\\iint": "\\dotsi",
  "\\iiint": "\\dotsi",
  "\\iiiint": "\\dotsi",
  "\\idotsint": "\\dotsi",
  // Symbols whose definition starts with \DOTSX:
  "\\DOTSX": "\\dotsx"
};
v("\\dots", function(n) {
  var e = "\\dotso", t = n.expandAfterFuture().text;
  return t in bf ? e = bf[t] : (t.slice(0, 4) === "\\not" || t in Be.math && se.contains(["bin", "rel"], Be.math[t].group)) && (e = "\\dotsb"), e;
});
var xh = {
  // \rightdelim@ checks for the following:
  ")": !0,
  "]": !0,
  "\\rbrack": !0,
  "\\}": !0,
  "\\rbrace": !0,
  "\\rangle": !0,
  "\\rceil": !0,
  "\\rfloor": !0,
  "\\rgroup": !0,
  "\\rmoustache": !0,
  "\\right": !0,
  "\\bigr": !0,
  "\\biggr": !0,
  "\\Bigr": !0,
  "\\Biggr": !0,
  // \extra@ also tests for the following:
  $: !0,
  // \extrap@ checks for the following:
  ";": !0,
  ".": !0,
  ",": !0
};
v("\\dotso", function(n) {
  var e = n.future().text;
  return e in xh ? "\\ldots\\," : "\\ldots";
});
v("\\dotsc", function(n) {
  var e = n.future().text;
  return e in xh && e !== "," ? "\\ldots\\," : "\\ldots";
});
v("\\cdots", function(n) {
  var e = n.future().text;
  return e in xh ? "\\@cdots\\," : "\\@cdots";
});
v("\\dotsb", "\\cdots");
v("\\dotsm", "\\cdots");
v("\\dotsi", "\\!\\cdots");
v("\\dotsx", "\\ldots\\,");
v("\\DOTSI", "\\relax");
v("\\DOTSB", "\\relax");
v("\\DOTSX", "\\relax");
v("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");
v("\\,", "\\tmspace+{3mu}{.1667em}");
v("\\thinspace", "\\,");
v("\\>", "\\mskip{4mu}");
v("\\:", "\\tmspace+{4mu}{.2222em}");
v("\\medspace", "\\:");
v("\\;", "\\tmspace+{5mu}{.2777em}");
v("\\thickspace", "\\;");
v("\\!", "\\tmspace-{3mu}{.1667em}");
v("\\negthinspace", "\\!");
v("\\negmedspace", "\\tmspace-{4mu}{.2222em}");
v("\\negthickspace", "\\tmspace-{5mu}{.277em}");
v("\\enspace", "\\kern.5em ");
v("\\enskip", "\\hskip.5em\\relax");
v("\\quad", "\\hskip1em\\relax");
v("\\qquad", "\\hskip2em\\relax");
v("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
v("\\tag@paren", "\\tag@literal{({#1})}");
v("\\tag@literal", (n) => {
  if (n.macros.get("\\df@tag"))
    throw new I("Multiple \\tag");
  return "\\gdef\\df@tag{\\text{#1}}";
});
v("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
v("\\pod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
v("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
v("\\mod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1");
v("\\newline", "\\\\\\relax");
v("\\TeX", "\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");
var ug = W(vn["Main-Regular"][84][1] - 0.7 * vn["Main-Regular"][65][1]);
v("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + ug + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}");
v("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + ug + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}");
v("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
v("\\@hspace", "\\hskip #1\\relax");
v("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax");
v("\\ordinarycolon", ":");
v("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}");
v("\\dblcolon", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}');
v("\\coloneqq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}');
v("\\Coloneqq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}');
v("\\coloneq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}');
v("\\Coloneq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}');
v("\\eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}');
v("\\Eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}');
v("\\eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}');
v("\\Eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}');
v("\\colonapprox", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}');
v("\\Colonapprox", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}');
v("\\colonsim", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}');
v("\\Colonsim", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}');
v("∷", "\\dblcolon");
v("∹", "\\eqcolon");
v("≔", "\\coloneqq");
v("≕", "\\eqqcolon");
v("⩴", "\\Coloneqq");
v("\\ratio", "\\vcentcolon");
v("\\coloncolon", "\\dblcolon");
v("\\colonequals", "\\coloneqq");
v("\\coloncolonequals", "\\Coloneqq");
v("\\equalscolon", "\\eqqcolon");
v("\\equalscoloncolon", "\\Eqqcolon");
v("\\colonminus", "\\coloneq");
v("\\coloncolonminus", "\\Coloneq");
v("\\minuscolon", "\\eqcolon");
v("\\minuscoloncolon", "\\Eqcolon");
v("\\coloncolonapprox", "\\Colonapprox");
v("\\coloncolonsim", "\\Colonsim");
v("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
v("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
v("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
v("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}");
v("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`∌}}");
v("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
v("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}");
v("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
v("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
v("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
v("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
v("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
v("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}");
v("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{≩}");
v("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{≨}");
v("\\ngeqq", "\\html@mathml{\\@ngeqq}{≱}");
v("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{≱}");
v("\\nleqq", "\\html@mathml{\\@nleqq}{≰}");
v("\\nleqslant", "\\html@mathml{\\@nleqslant}{≰}");
v("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
v("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
v("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{⊈}");
v("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{⊉}");
v("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
v("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
v("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
v("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
v("\\imath", "\\html@mathml{\\@imath}{ı}");
v("\\jmath", "\\html@mathml{\\@jmath}{ȷ}");
v("\\llbracket", "\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`⟦}}");
v("\\rrbracket", "\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`⟧}}");
v("⟦", "\\llbracket");
v("⟧", "\\rrbracket");
v("\\lBrace", "\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`⦃}}");
v("\\rBrace", "\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`⦄}}");
v("⦃", "\\lBrace");
v("⦄", "\\rBrace");
v("\\minuso", "\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`⦵}}");
v("⦵", "\\minuso");
v("\\darr", "\\downarrow");
v("\\dArr", "\\Downarrow");
v("\\Darr", "\\Downarrow");
v("\\lang", "\\langle");
v("\\rang", "\\rangle");
v("\\uarr", "\\uparrow");
v("\\uArr", "\\Uparrow");
v("\\Uarr", "\\Uparrow");
v("\\N", "\\mathbb{N}");
v("\\R", "\\mathbb{R}");
v("\\Z", "\\mathbb{Z}");
v("\\alef", "\\aleph");
v("\\alefsym", "\\aleph");
v("\\Alpha", "\\mathrm{A}");
v("\\Beta", "\\mathrm{B}");
v("\\bull", "\\bullet");
v("\\Chi", "\\mathrm{X}");
v("\\clubs", "\\clubsuit");
v("\\cnums", "\\mathbb{C}");
v("\\Complex", "\\mathbb{C}");
v("\\Dagger", "\\ddagger");
v("\\diamonds", "\\diamondsuit");
v("\\empty", "\\emptyset");
v("\\Epsilon", "\\mathrm{E}");
v("\\Eta", "\\mathrm{H}");
v("\\exist", "\\exists");
v("\\harr", "\\leftrightarrow");
v("\\hArr", "\\Leftrightarrow");
v("\\Harr", "\\Leftrightarrow");
v("\\hearts", "\\heartsuit");
v("\\image", "\\Im");
v("\\infin", "\\infty");
v("\\Iota", "\\mathrm{I}");
v("\\isin", "\\in");
v("\\Kappa", "\\mathrm{K}");
v("\\larr", "\\leftarrow");
v("\\lArr", "\\Leftarrow");
v("\\Larr", "\\Leftarrow");
v("\\lrarr", "\\leftrightarrow");
v("\\lrArr", "\\Leftrightarrow");
v("\\Lrarr", "\\Leftrightarrow");
v("\\Mu", "\\mathrm{M}");
v("\\natnums", "\\mathbb{N}");
v("\\Nu", "\\mathrm{N}");
v("\\Omicron", "\\mathrm{O}");
v("\\plusmn", "\\pm");
v("\\rarr", "\\rightarrow");
v("\\rArr", "\\Rightarrow");
v("\\Rarr", "\\Rightarrow");
v("\\real", "\\Re");
v("\\reals", "\\mathbb{R}");
v("\\Reals", "\\mathbb{R}");
v("\\Rho", "\\mathrm{P}");
v("\\sdot", "\\cdot");
v("\\sect", "\\S");
v("\\spades", "\\spadesuit");
v("\\sub", "\\subset");
v("\\sube", "\\subseteq");
v("\\supe", "\\supseteq");
v("\\Tau", "\\mathrm{T}");
v("\\thetasym", "\\vartheta");
v("\\weierp", "\\wp");
v("\\Zeta", "\\mathrm{Z}");
v("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
v("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
v("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits");
v("\\bra", "\\mathinner{\\langle{#1}|}");
v("\\ket", "\\mathinner{|{#1}\\rangle}");
v("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
v("\\Bra", "\\left\\langle#1\\right|");
v("\\Ket", "\\left|#1\\right\\rangle");
var hg = (n) => (e) => {
  var t = e.consumeArg().tokens, r = e.consumeArg().tokens, i = e.consumeArg().tokens, s = e.consumeArg().tokens, l = e.macros.get("|"), a = e.macros.get("\\|");
  e.macros.beginGroup();
  var o = (c) => (f) => {
    n && (f.macros.set("|", l), i.length && f.macros.set("\\|", a));
    var d = c;
    if (!c && i.length) {
      var m = f.future();
      m.text === "|" && (f.popToken(), d = !0);
    }
    return {
      tokens: d ? i : r,
      numArgs: 0
    };
  };
  e.macros.set("|", o(!1)), i.length && e.macros.set("\\|", o(!0));
  var u = e.consumeArg().tokens, h = e.expandTokens([
    ...s,
    ...u,
    ...t
    // reversed
  ]);
  return e.macros.endGroup(), {
    tokens: h.reverse(),
    numArgs: 0
  };
};
v("\\bra@ket", hg(!1));
v("\\bra@set", hg(!0));
v("\\Braket", "\\bra@ket{\\left\\langle}{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
v("\\Set", "\\bra@set{\\left\\{\\:}{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
v("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}");
v("\\angln", "{\\angl n}");
v("\\blue", "\\textcolor{##6495ed}{#1}");
v("\\orange", "\\textcolor{##ffa500}{#1}");
v("\\pink", "\\textcolor{##ff00af}{#1}");
v("\\red", "\\textcolor{##df0030}{#1}");
v("\\green", "\\textcolor{##28ae7b}{#1}");
v("\\gray", "\\textcolor{gray}{#1}");
v("\\purple", "\\textcolor{##9d38bd}{#1}");
v("\\blueA", "\\textcolor{##ccfaff}{#1}");
v("\\blueB", "\\textcolor{##80f6ff}{#1}");
v("\\blueC", "\\textcolor{##63d9ea}{#1}");
v("\\blueD", "\\textcolor{##11accd}{#1}");
v("\\blueE", "\\textcolor{##0c7f99}{#1}");
v("\\tealA", "\\textcolor{##94fff5}{#1}");
v("\\tealB", "\\textcolor{##26edd5}{#1}");
v("\\tealC", "\\textcolor{##01d1c1}{#1}");
v("\\tealD", "\\textcolor{##01a995}{#1}");
v("\\tealE", "\\textcolor{##208170}{#1}");
v("\\greenA", "\\textcolor{##b6ffb0}{#1}");
v("\\greenB", "\\textcolor{##8af281}{#1}");
v("\\greenC", "\\textcolor{##74cf70}{#1}");
v("\\greenD", "\\textcolor{##1fab54}{#1}");
v("\\greenE", "\\textcolor{##0d923f}{#1}");
v("\\goldA", "\\textcolor{##ffd0a9}{#1}");
v("\\goldB", "\\textcolor{##ffbb71}{#1}");
v("\\goldC", "\\textcolor{##ff9c39}{#1}");
v("\\goldD", "\\textcolor{##e07d10}{#1}");
v("\\goldE", "\\textcolor{##a75a05}{#1}");
v("\\redA", "\\textcolor{##fca9a9}{#1}");
v("\\redB", "\\textcolor{##ff8482}{#1}");
v("\\redC", "\\textcolor{##f9685d}{#1}");
v("\\redD", "\\textcolor{##e84d39}{#1}");
v("\\redE", "\\textcolor{##bc2612}{#1}");
v("\\maroonA", "\\textcolor{##ffbde0}{#1}");
v("\\maroonB", "\\textcolor{##ff92c6}{#1}");
v("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
v("\\maroonD", "\\textcolor{##ca337c}{#1}");
v("\\maroonE", "\\textcolor{##9e034e}{#1}");
v("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
v("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
v("\\purpleC", "\\textcolor{##aa87ff}{#1}");
v("\\purpleD", "\\textcolor{##7854ab}{#1}");
v("\\purpleE", "\\textcolor{##543b78}{#1}");
v("\\mintA", "\\textcolor{##f5f9e8}{#1}");
v("\\mintB", "\\textcolor{##edf2df}{#1}");
v("\\mintC", "\\textcolor{##e0e5cc}{#1}");
v("\\grayA", "\\textcolor{##f6f7f7}{#1}");
v("\\grayB", "\\textcolor{##f0f1f2}{#1}");
v("\\grayC", "\\textcolor{##e3e5e6}{#1}");
v("\\grayD", "\\textcolor{##d6d8da}{#1}");
v("\\grayE", "\\textcolor{##babec2}{#1}");
v("\\grayF", "\\textcolor{##888d93}{#1}");
v("\\grayG", "\\textcolor{##626569}{#1}");
v("\\grayH", "\\textcolor{##3b3e40}{#1}");
v("\\grayI", "\\textcolor{##21242c}{#1}");
v("\\kaBlue", "\\textcolor{##314453}{#1}");
v("\\kaGreen", "\\textcolor{##71B307}{#1}");
var cg = {
  "^": !0,
  // Parser.js
  _: !0,
  // Parser.js
  "\\limits": !0,
  // Parser.js
  "\\nolimits": !0
  // Parser.js
};
class Ax {
  constructor(e, t, r) {
    this.settings = void 0, this.expansionCount = void 0, this.lexer = void 0, this.macros = void 0, this.stack = void 0, this.mode = void 0, this.settings = t, this.expansionCount = 0, this.feed(e), this.macros = new Px(Cx, t.macros), this.mode = r, this.stack = [];
  }
  /**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */
  feed(e) {
    this.lexer = new Of(e, this.settings);
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(e) {
    this.mode = e;
  }
  /**
   * Start a new group nesting within all namespaces.
   */
  beginGroup() {
    this.macros.beginGroup();
  }
  /**
   * End current group nesting within all namespaces.
   */
  endGroup() {
    this.macros.endGroup();
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    this.macros.endGroups();
  }
  /**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */
  future() {
    return this.stack.length === 0 && this.pushToken(this.lexer.lex()), this.stack[this.stack.length - 1];
  }
  /**
   * Remove and return the next unexpanded token.
   */
  popToken() {
    return this.future(), this.stack.pop();
  }
  /**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */
  pushToken(e) {
    this.stack.push(e);
  }
  /**
   * Append an array of tokens to the token stack.
   */
  pushTokens(e) {
    this.stack.push(...e);
  }
  /**
   * Find an macro argument without expanding tokens and append the array of
   * tokens to the token stack. Uses Token as a container for the result.
   */
  scanArgument(e) {
    var t, r, i;
    if (e) {
      if (this.consumeSpaces(), this.future().text !== "[")
        return null;
      t = this.popToken(), {
        tokens: i,
        end: r
      } = this.consumeArg(["]"]);
    } else
      ({
        tokens: i,
        start: t,
        end: r
      } = this.consumeArg());
    return this.pushToken(new Ht("EOF", r.loc)), this.pushTokens(i), t.range(r, "");
  }
  /**
   * Consume all following space tokens, without expansion.
   */
  consumeSpaces() {
    for (; ; ) {
      var e = this.future();
      if (e.text === " ")
        this.stack.pop();
      else
        break;
    }
  }
  /**
   * Consume an argument from the token stream, and return the resulting array
   * of tokens and start/end token.
   */
  consumeArg(e) {
    var t = [], r = e && e.length > 0;
    r || this.consumeSpaces();
    var i = this.future(), s, l = 0, a = 0;
    do {
      if (s = this.popToken(), t.push(s), s.text === "{")
        ++l;
      else if (s.text === "}") {
        if (--l, l === -1)
          throw new I("Extra }", s);
      } else if (s.text === "EOF")
        throw new I("Unexpected end of input in a macro argument, expected '" + (e && r ? e[a] : "}") + "'", s);
      if (e && r)
        if ((l === 0 || l === 1 && e[a] === "{") && s.text === e[a]) {
          if (++a, a === e.length) {
            t.splice(-a, a);
            break;
          }
        } else
          a = 0;
    } while (l !== 0 || r);
    return i.text === "{" && t[t.length - 1].text === "}" && (t.pop(), t.shift()), t.reverse(), {
      tokens: t,
      start: i,
      end: s
    };
  }
  /**
   * Consume the specified number of (delimited) arguments from the token
   * stream and return the resulting array of arguments.
   */
  consumeArgs(e, t) {
    if (t) {
      if (t.length !== e + 1)
        throw new I("The length of delimiters doesn't match the number of args!");
      for (var r = t[0], i = 0; i < r.length; i++) {
        var s = this.popToken();
        if (r[i] !== s.text)
          throw new I("Use of the macro doesn't match its definition", s);
      }
    }
    for (var l = [], a = 0; a < e; a++)
      l.push(this.consumeArg(t && t[a + 1]).tokens);
    return l;
  }
  /**
   * Increment `expansionCount` by the specified amount.
   * Throw an error if it exceeds `maxExpand`.
   */
  countExpansion(e) {
    if (this.expansionCount += e, this.expansionCount > this.settings.maxExpand)
      throw new I("Too many expansions: infinite loop or need to increase maxExpand setting");
  }
  /**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order, and the number of such tokens will be
   * returned.  This number might be zero or positive.
   *
   * If not, the return value is `false`, and the next token remains at the
   * top of the stack.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty (in case of empty expansion
   * and no other tokens).
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */
  expandOnce(e) {
    var t = this.popToken(), r = t.text, i = t.noexpand ? null : this._getExpansion(r);
    if (i == null || e && i.unexpandable) {
      if (e && i == null && r[0] === "\\" && !this.isDefined(r))
        throw new I("Undefined control sequence: " + r);
      return this.pushToken(t), !1;
    }
    this.countExpansion(1);
    var s = i.tokens, l = this.consumeArgs(i.numArgs, i.delimiters);
    if (i.numArgs) {
      s = s.slice();
      for (var a = s.length - 1; a >= 0; --a) {
        var o = s[a];
        if (o.text === "#") {
          if (a === 0)
            throw new I("Incomplete placeholder at end of macro body", o);
          if (o = s[--a], o.text === "#")
            s.splice(a + 1, 1);
          else if (/^[1-9]$/.test(o.text))
            s.splice(a, 2, ...l[+o.text - 1]);
          else
            throw new I("Not a valid argument number", o);
        }
      }
    }
    return this.pushTokens(s), s.length;
  }
  /**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */
  expandAfterFuture() {
    return this.expandOnce(), this.future();
  }
  /**
   * Recursively expand first token, then return first non-expandable token.
   */
  expandNextToken() {
    for (; ; )
      if (this.expandOnce() === !1) {
        var e = this.stack.pop();
        return e.treatAsRelax && (e.text = "\\relax"), e;
      }
    throw new Error();
  }
  /**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */
  expandMacro(e) {
    return this.macros.has(e) ? this.expandTokens([new Ht(e)]) : void 0;
  }
  /**
   * Fully expand the given token stream and return the resulting list of
   * tokens.  Note that the input tokens are in reverse order, but the
   * output tokens are in forward order.
   */
  expandTokens(e) {
    var t = [], r = this.stack.length;
    for (this.pushTokens(e); this.stack.length > r; )
      if (this.expandOnce(!0) === !1) {
        var i = this.stack.pop();
        i.treatAsRelax && (i.noexpand = !1, i.treatAsRelax = !1), t.push(i);
      }
    return this.countExpansion(t.length), t;
  }
  /**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */
  expandMacroAsText(e) {
    var t = this.expandMacro(e);
    return t && t.map((r) => r.text).join("");
  }
  /**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */
  _getExpansion(e) {
    var t = this.macros.get(e);
    if (t == null)
      return t;
    if (e.length === 1) {
      var r = this.lexer.catcodes[e];
      if (r != null && r !== 13)
        return;
    }
    var i = typeof t == "function" ? t(this) : t;
    if (typeof i == "string") {
      var s = 0;
      if (i.indexOf("#") !== -1)
        for (var l = i.replace(/##/g, ""); l.indexOf("#" + (s + 1)) !== -1; )
          ++s;
      for (var a = new Of(i, this.settings), o = [], u = a.lex(); u.text !== "EOF"; )
        o.push(u), u = a.lex();
      o.reverse();
      var h = {
        tokens: o,
        numArgs: s
      };
      return h;
    }
    return i;
  }
  /**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */
  isDefined(e) {
    return this.macros.has(e) || hr.hasOwnProperty(e) || Be.math.hasOwnProperty(e) || Be.text.hasOwnProperty(e) || cg.hasOwnProperty(e);
  }
  /**
   * Determine whether a command is expandable.
   */
  isExpandable(e) {
    var t = this.macros.get(e);
    return t != null ? typeof t == "string" || typeof t == "function" || !t.unexpandable : hr.hasOwnProperty(e) && !hr[e].primitive;
  }
}
var xf = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/, al = Object.freeze({
  "₊": "+",
  "₋": "-",
  "₌": "=",
  "₍": "(",
  "₎": ")",
  "₀": "0",
  "₁": "1",
  "₂": "2",
  "₃": "3",
  "₄": "4",
  "₅": "5",
  "₆": "6",
  "₇": "7",
  "₈": "8",
  "₉": "9",
  "ₐ": "a",
  "ₑ": "e",
  "ₕ": "h",
  "ᵢ": "i",
  "ⱼ": "j",
  "ₖ": "k",
  "ₗ": "l",
  "ₘ": "m",
  "ₙ": "n",
  "ₒ": "o",
  "ₚ": "p",
  "ᵣ": "r",
  "ₛ": "s",
  "ₜ": "t",
  "ᵤ": "u",
  "ᵥ": "v",
  "ₓ": "x",
  "ᵦ": "β",
  "ᵧ": "γ",
  "ᵨ": "ρ",
  "ᵩ": "ϕ",
  "ᵪ": "χ",
  "⁺": "+",
  "⁻": "-",
  "⁼": "=",
  "⁽": "(",
  "⁾": ")",
  "⁰": "0",
  "¹": "1",
  "²": "2",
  "³": "3",
  "⁴": "4",
  "⁵": "5",
  "⁶": "6",
  "⁷": "7",
  "⁸": "8",
  "⁹": "9",
  "ᴬ": "A",
  "ᴮ": "B",
  "ᴰ": "D",
  "ᴱ": "E",
  "ᴳ": "G",
  "ᴴ": "H",
  "ᴵ": "I",
  "ᴶ": "J",
  "ᴷ": "K",
  "ᴸ": "L",
  "ᴹ": "M",
  "ᴺ": "N",
  "ᴼ": "O",
  "ᴾ": "P",
  "ᴿ": "R",
  "ᵀ": "T",
  "ᵁ": "U",
  "ⱽ": "V",
  "ᵂ": "W",
  "ᵃ": "a",
  "ᵇ": "b",
  "ᶜ": "c",
  "ᵈ": "d",
  "ᵉ": "e",
  "ᶠ": "f",
  "ᵍ": "g",
  ʰ: "h",
  "ⁱ": "i",
  ʲ: "j",
  "ᵏ": "k",
  ˡ: "l",
  "ᵐ": "m",
  ⁿ: "n",
  "ᵒ": "o",
  "ᵖ": "p",
  ʳ: "r",
  ˢ: "s",
  "ᵗ": "t",
  "ᵘ": "u",
  "ᵛ": "v",
  ʷ: "w",
  ˣ: "x",
  ʸ: "y",
  "ᶻ": "z",
  "ᵝ": "β",
  "ᵞ": "γ",
  "ᵟ": "δ",
  "ᵠ": "ϕ",
  "ᵡ": "χ",
  "ᶿ": "θ"
}), vo = {
  "́": {
    text: "\\'",
    math: "\\acute"
  },
  "̀": {
    text: "\\`",
    math: "\\grave"
  },
  "̈": {
    text: '\\"',
    math: "\\ddot"
  },
  "̃": {
    text: "\\~",
    math: "\\tilde"
  },
  "̄": {
    text: "\\=",
    math: "\\bar"
  },
  "̆": {
    text: "\\u",
    math: "\\breve"
  },
  "̌": {
    text: "\\v",
    math: "\\check"
  },
  "̂": {
    text: "\\^",
    math: "\\hat"
  },
  "̇": {
    text: "\\.",
    math: "\\dot"
  },
  "̊": {
    text: "\\r",
    math: "\\mathring"
  },
  "̋": {
    text: "\\H"
  },
  "̧": {
    text: "\\c"
  }
}, vf = {
  á: "á",
  à: "à",
  ä: "ä",
  ǟ: "ǟ",
  ã: "ã",
  ā: "ā",
  ă: "ă",
  ắ: "ắ",
  ằ: "ằ",
  ẵ: "ẵ",
  ǎ: "ǎ",
  â: "â",
  ấ: "ấ",
  ầ: "ầ",
  ẫ: "ẫ",
  ȧ: "ȧ",
  ǡ: "ǡ",
  å: "å",
  ǻ: "ǻ",
  ḃ: "ḃ",
  ć: "ć",
  ḉ: "ḉ",
  č: "č",
  ĉ: "ĉ",
  ċ: "ċ",
  ç: "ç",
  ď: "ď",
  ḋ: "ḋ",
  ḑ: "ḑ",
  é: "é",
  è: "è",
  ë: "ë",
  ẽ: "ẽ",
  ē: "ē",
  ḗ: "ḗ",
  ḕ: "ḕ",
  ĕ: "ĕ",
  ḝ: "ḝ",
  ě: "ě",
  ê: "ê",
  ế: "ế",
  ề: "ề",
  ễ: "ễ",
  ė: "ė",
  ȩ: "ȩ",
  ḟ: "ḟ",
  ǵ: "ǵ",
  ḡ: "ḡ",
  ğ: "ğ",
  ǧ: "ǧ",
  ĝ: "ĝ",
  ġ: "ġ",
  ģ: "ģ",
  ḧ: "ḧ",
  ȟ: "ȟ",
  ĥ: "ĥ",
  ḣ: "ḣ",
  ḩ: "ḩ",
  í: "í",
  ì: "ì",
  ï: "ï",
  ḯ: "ḯ",
  ĩ: "ĩ",
  ī: "ī",
  ĭ: "ĭ",
  ǐ: "ǐ",
  î: "î",
  ǰ: "ǰ",
  ĵ: "ĵ",
  ḱ: "ḱ",
  ǩ: "ǩ",
  ķ: "ķ",
  ĺ: "ĺ",
  ľ: "ľ",
  ļ: "ļ",
  ḿ: "ḿ",
  ṁ: "ṁ",
  ń: "ń",
  ǹ: "ǹ",
  ñ: "ñ",
  ň: "ň",
  ṅ: "ṅ",
  ņ: "ņ",
  ó: "ó",
  ò: "ò",
  ö: "ö",
  ȫ: "ȫ",
  õ: "õ",
  ṍ: "ṍ",
  ṏ: "ṏ",
  ȭ: "ȭ",
  ō: "ō",
  ṓ: "ṓ",
  ṑ: "ṑ",
  ŏ: "ŏ",
  ǒ: "ǒ",
  ô: "ô",
  ố: "ố",
  ồ: "ồ",
  ỗ: "ỗ",
  ȯ: "ȯ",
  ȱ: "ȱ",
  ő: "ő",
  ṕ: "ṕ",
  ṗ: "ṗ",
  ŕ: "ŕ",
  ř: "ř",
  ṙ: "ṙ",
  ŗ: "ŗ",
  ś: "ś",
  ṥ: "ṥ",
  š: "š",
  ṧ: "ṧ",
  ŝ: "ŝ",
  ṡ: "ṡ",
  ş: "ş",
  ẗ: "ẗ",
  ť: "ť",
  ṫ: "ṫ",
  ţ: "ţ",
  ú: "ú",
  ù: "ù",
  ü: "ü",
  ǘ: "ǘ",
  ǜ: "ǜ",
  ǖ: "ǖ",
  ǚ: "ǚ",
  ũ: "ũ",
  ṹ: "ṹ",
  ū: "ū",
  ṻ: "ṻ",
  ŭ: "ŭ",
  ǔ: "ǔ",
  û: "û",
  ů: "ů",
  ű: "ű",
  ṽ: "ṽ",
  ẃ: "ẃ",
  ẁ: "ẁ",
  ẅ: "ẅ",
  ŵ: "ŵ",
  ẇ: "ẇ",
  ẘ: "ẘ",
  ẍ: "ẍ",
  ẋ: "ẋ",
  ý: "ý",
  ỳ: "ỳ",
  ÿ: "ÿ",
  ỹ: "ỹ",
  ȳ: "ȳ",
  ŷ: "ŷ",
  ẏ: "ẏ",
  ẙ: "ẙ",
  ź: "ź",
  ž: "ž",
  ẑ: "ẑ",
  ż: "ż",
  Á: "Á",
  À: "À",
  Ä: "Ä",
  Ǟ: "Ǟ",
  Ã: "Ã",
  Ā: "Ā",
  Ă: "Ă",
  Ắ: "Ắ",
  Ằ: "Ằ",
  Ẵ: "Ẵ",
  Ǎ: "Ǎ",
  Â: "Â",
  Ấ: "Ấ",
  Ầ: "Ầ",
  Ẫ: "Ẫ",
  Ȧ: "Ȧ",
  Ǡ: "Ǡ",
  Å: "Å",
  Ǻ: "Ǻ",
  Ḃ: "Ḃ",
  Ć: "Ć",
  Ḉ: "Ḉ",
  Č: "Č",
  Ĉ: "Ĉ",
  Ċ: "Ċ",
  Ç: "Ç",
  Ď: "Ď",
  Ḋ: "Ḋ",
  Ḑ: "Ḑ",
  É: "É",
  È: "È",
  Ë: "Ë",
  Ẽ: "Ẽ",
  Ē: "Ē",
  Ḗ: "Ḗ",
  Ḕ: "Ḕ",
  Ĕ: "Ĕ",
  Ḝ: "Ḝ",
  Ě: "Ě",
  Ê: "Ê",
  Ế: "Ế",
  Ề: "Ề",
  Ễ: "Ễ",
  Ė: "Ė",
  Ȩ: "Ȩ",
  Ḟ: "Ḟ",
  Ǵ: "Ǵ",
  Ḡ: "Ḡ",
  Ğ: "Ğ",
  Ǧ: "Ǧ",
  Ĝ: "Ĝ",
  Ġ: "Ġ",
  Ģ: "Ģ",
  Ḧ: "Ḧ",
  Ȟ: "Ȟ",
  Ĥ: "Ĥ",
  Ḣ: "Ḣ",
  Ḩ: "Ḩ",
  Í: "Í",
  Ì: "Ì",
  Ï: "Ï",
  Ḯ: "Ḯ",
  Ĩ: "Ĩ",
  Ī: "Ī",
  Ĭ: "Ĭ",
  Ǐ: "Ǐ",
  Î: "Î",
  İ: "İ",
  Ĵ: "Ĵ",
  Ḱ: "Ḱ",
  Ǩ: "Ǩ",
  Ķ: "Ķ",
  Ĺ: "Ĺ",
  Ľ: "Ľ",
  Ļ: "Ļ",
  Ḿ: "Ḿ",
  Ṁ: "Ṁ",
  Ń: "Ń",
  Ǹ: "Ǹ",
  Ñ: "Ñ",
  Ň: "Ň",
  Ṅ: "Ṅ",
  Ņ: "Ņ",
  Ó: "Ó",
  Ò: "Ò",
  Ö: "Ö",
  Ȫ: "Ȫ",
  Õ: "Õ",
  Ṍ: "Ṍ",
  Ṏ: "Ṏ",
  Ȭ: "Ȭ",
  Ō: "Ō",
  Ṓ: "Ṓ",
  Ṑ: "Ṑ",
  Ŏ: "Ŏ",
  Ǒ: "Ǒ",
  Ô: "Ô",
  Ố: "Ố",
  Ồ: "Ồ",
  Ỗ: "Ỗ",
  Ȯ: "Ȯ",
  Ȱ: "Ȱ",
  Ő: "Ő",
  Ṕ: "Ṕ",
  Ṗ: "Ṗ",
  Ŕ: "Ŕ",
  Ř: "Ř",
  Ṙ: "Ṙ",
  Ŗ: "Ŗ",
  Ś: "Ś",
  Ṥ: "Ṥ",
  Š: "Š",
  Ṧ: "Ṧ",
  Ŝ: "Ŝ",
  Ṡ: "Ṡ",
  Ş: "Ş",
  Ť: "Ť",
  Ṫ: "Ṫ",
  Ţ: "Ţ",
  Ú: "Ú",
  Ù: "Ù",
  Ü: "Ü",
  Ǘ: "Ǘ",
  Ǜ: "Ǜ",
  Ǖ: "Ǖ",
  Ǚ: "Ǚ",
  Ũ: "Ũ",
  Ṹ: "Ṹ",
  Ū: "Ū",
  Ṻ: "Ṻ",
  Ŭ: "Ŭ",
  Ǔ: "Ǔ",
  Û: "Û",
  Ů: "Ů",
  Ű: "Ű",
  Ṽ: "Ṽ",
  Ẃ: "Ẃ",
  Ẁ: "Ẁ",
  Ẅ: "Ẅ",
  Ŵ: "Ŵ",
  Ẇ: "Ẇ",
  Ẍ: "Ẍ",
  Ẋ: "Ẋ",
  Ý: "Ý",
  Ỳ: "Ỳ",
  Ÿ: "Ÿ",
  Ỹ: "Ỹ",
  Ȳ: "Ȳ",
  Ŷ: "Ŷ",
  Ẏ: "Ẏ",
  Ź: "Ź",
  Ž: "Ž",
  Ẑ: "Ẑ",
  Ż: "Ż",
  ά: "ά",
  ὰ: "ὰ",
  ᾱ: "ᾱ",
  ᾰ: "ᾰ",
  έ: "έ",
  ὲ: "ὲ",
  ή: "ή",
  ὴ: "ὴ",
  ί: "ί",
  ὶ: "ὶ",
  ϊ: "ϊ",
  ΐ: "ΐ",
  ῒ: "ῒ",
  ῑ: "ῑ",
  ῐ: "ῐ",
  ό: "ό",
  ὸ: "ὸ",
  ύ: "ύ",
  ὺ: "ὺ",
  ϋ: "ϋ",
  ΰ: "ΰ",
  ῢ: "ῢ",
  ῡ: "ῡ",
  ῠ: "ῠ",
  ώ: "ώ",
  ὼ: "ὼ",
  Ύ: "Ύ",
  Ὺ: "Ὺ",
  Ϋ: "Ϋ",
  Ῡ: "Ῡ",
  Ῠ: "Ῠ",
  Ώ: "Ώ",
  Ὼ: "Ὼ"
};
let fg = class dg {
  constructor(e, t) {
    this.mode = void 0, this.gullet = void 0, this.settings = void 0, this.leftrightDepth = void 0, this.nextToken = void 0, this.mode = "math", this.gullet = new Ax(e, t, this.mode), this.settings = t, this.leftrightDepth = 0;
  }
  /**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */
  expect(e, t) {
    if (t === void 0 && (t = !0), this.fetch().text !== e)
      throw new I("Expected '" + e + "', got '" + this.fetch().text + "'", this.fetch());
    t && this.consume();
  }
  /**
   * Discards the current lookahead token, considering it consumed.
   */
  consume() {
    this.nextToken = null;
  }
  /**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */
  fetch() {
    return this.nextToken == null && (this.nextToken = this.gullet.expandNextToken()), this.nextToken;
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(e) {
    this.mode = e, this.gullet.switchMode(e);
  }
  /**
   * Main parsing function, which parses an entire input.
   */
  parse() {
    this.settings.globalGroup || this.gullet.beginGroup(), this.settings.colorIsTextColor && this.gullet.macros.set("\\color", "\\textcolor");
    try {
      var e = this.parseExpression(!1);
      return this.expect("EOF"), this.settings.globalGroup || this.gullet.endGroup(), e;
    } finally {
      this.gullet.endGroups();
    }
  }
  /**
   * Fully parse a separate sequence of tokens as a separate job.
   * Tokens should be specified in reverse order, as in a MacroDefinition.
   */
  subparse(e) {
    var t = this.nextToken;
    this.consume(), this.gullet.pushToken(new Ht("}")), this.gullet.pushTokens(e);
    var r = this.parseExpression(!1);
    return this.expect("}"), this.nextToken = t, r;
  }
  /**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precedence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */
  parseExpression(e, t) {
    for (var r = []; ; ) {
      this.mode === "math" && this.consumeSpaces();
      var i = this.fetch();
      if (dg.endOfExpression.indexOf(i.text) !== -1 || t && i.text === t || e && hr[i.text] && hr[i.text].infix)
        break;
      var s = this.parseAtom(t);
      if (s) {
        if (s.type === "internal")
          continue;
      } else break;
      r.push(s);
    }
    return this.mode === "text" && this.formLigatures(r), this.handleInfixNodes(r);
  }
  /**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */
  handleInfixNodes(e) {
    for (var t = -1, r, i = 0; i < e.length; i++)
      if (e[i].type === "infix") {
        if (t !== -1)
          throw new I("only one infix operator per group", e[i].token);
        t = i, r = e[i].replaceWith;
      }
    if (t !== -1 && r) {
      var s, l, a = e.slice(0, t), o = e.slice(t + 1);
      a.length === 1 && a[0].type === "ordgroup" ? s = a[0] : s = {
        type: "ordgroup",
        mode: this.mode,
        body: a
      }, o.length === 1 && o[0].type === "ordgroup" ? l = o[0] : l = {
        type: "ordgroup",
        mode: this.mode,
        body: o
      };
      var u;
      return r === "\\\\abovefrac" ? u = this.callFunction(r, [s, e[t], l], []) : u = this.callFunction(r, [s, l], []), [u];
    } else
      return e;
  }
  /**
   * Handle a subscript or superscript with nice errors.
   */
  handleSupSubscript(e) {
    var t = this.fetch(), r = t.text;
    this.consume(), this.consumeSpaces();
    var i = this.parseGroup(e);
    if (!i)
      throw new I("Expected group after '" + r + "'", t);
    return i;
  }
  /**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */
  formatUnsupportedCmd(e) {
    for (var t = [], r = 0; r < e.length; r++)
      t.push({
        type: "textord",
        mode: "text",
        text: e[r]
      });
    var i = {
      type: "text",
      mode: this.mode,
      body: t
    }, s = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [i]
    };
    return s;
  }
  /**
   * Parses a group with optional super/subscripts.
   */
  parseAtom(e) {
    var t = this.parseGroup("atom", e);
    if (this.mode === "text")
      return t;
    for (var r, i; ; ) {
      this.consumeSpaces();
      var s = this.fetch();
      if (s.text === "\\limits" || s.text === "\\nolimits") {
        if (t && t.type === "op") {
          var l = s.text === "\\limits";
          t.limits = l, t.alwaysHandleSupSub = !0;
        } else if (t && t.type === "operatorname")
          t.alwaysHandleSupSub && (t.limits = s.text === "\\limits");
        else
          throw new I("Limit controls must follow a math operator", s);
        this.consume();
      } else if (s.text === "^") {
        if (r)
          throw new I("Double superscript", s);
        r = this.handleSupSubscript("superscript");
      } else if (s.text === "_") {
        if (i)
          throw new I("Double subscript", s);
        i = this.handleSupSubscript("subscript");
      } else if (s.text === "'") {
        if (r)
          throw new I("Double superscript", s);
        var a = {
          type: "textord",
          mode: this.mode,
          text: "\\prime"
        }, o = [a];
        for (this.consume(); this.fetch().text === "'"; )
          o.push(a), this.consume();
        this.fetch().text === "^" && o.push(this.handleSupSubscript("superscript")), r = {
          type: "ordgroup",
          mode: this.mode,
          body: o
        };
      } else if (al[s.text]) {
        var u = xf.test(s.text), h = [];
        for (h.push(new Ht(al[s.text])), this.consume(); ; ) {
          var c = this.fetch().text;
          if (!al[c] || xf.test(c) !== u)
            break;
          h.unshift(new Ht(al[c])), this.consume();
        }
        var f = this.subparse(h);
        u ? i = {
          type: "ordgroup",
          mode: "math",
          body: f
        } : r = {
          type: "ordgroup",
          mode: "math",
          body: f
        };
      } else
        break;
    }
    return r || i ? {
      type: "supsub",
      mode: this.mode,
      base: t,
      sup: r,
      sub: i
    } : t;
  }
  /**
   * Parses an entire function, including its base and all of its arguments.
   */
  parseFunction(e, t) {
    var r = this.fetch(), i = r.text, s = hr[i];
    if (!s)
      return null;
    if (this.consume(), t && t !== "atom" && !s.allowedInArgument)
      throw new I("Got function '" + i + "' with no arguments" + (t ? " as " + t : ""), r);
    if (this.mode === "text" && !s.allowedInText)
      throw new I("Can't use function '" + i + "' in text mode", r);
    if (this.mode === "math" && s.allowedInMath === !1)
      throw new I("Can't use function '" + i + "' in math mode", r);
    var {
      args: l,
      optArgs: a
    } = this.parseArguments(i, s);
    return this.callFunction(i, l, a, r, e);
  }
  /**
   * Call a function handler with a suitable context and arguments.
   */
  callFunction(e, t, r, i, s) {
    var l = {
      funcName: e,
      parser: this,
      token: i,
      breakOnTokenText: s
    }, a = hr[e];
    if (a && a.handler)
      return a.handler(l, t, r);
    throw new I("No function handler for " + e);
  }
  /**
   * Parses the arguments of a function or environment
   */
  parseArguments(e, t) {
    var r = t.numArgs + t.numOptionalArgs;
    if (r === 0)
      return {
        args: [],
        optArgs: []
      };
    for (var i = [], s = [], l = 0; l < r; l++) {
      var a = t.argTypes && t.argTypes[l], o = l < t.numOptionalArgs;
      (t.primitive && a == null || // \sqrt expands into primitive if optional argument doesn't exist
      t.type === "sqrt" && l === 1 && s[0] == null) && (a = "primitive");
      var u = this.parseGroupOfType("argument to '" + e + "'", a, o);
      if (o)
        s.push(u);
      else if (u != null)
        i.push(u);
      else
        throw new I("Null argument, please report this as a bug");
    }
    return {
      args: i,
      optArgs: s
    };
  }
  /**
   * Parses a group when the mode is changing.
   */
  parseGroupOfType(e, t, r) {
    switch (t) {
      case "color":
        return this.parseColorGroup(r);
      case "size":
        return this.parseSizeGroup(r);
      case "url":
        return this.parseUrlGroup(r);
      case "math":
      case "text":
        return this.parseArgumentGroup(r, t);
      case "hbox": {
        var i = this.parseArgumentGroup(r, "text");
        return i != null ? {
          type: "styling",
          mode: i.mode,
          body: [i],
          style: "text"
          // simulate \textstyle
        } : null;
      }
      case "raw": {
        var s = this.parseStringGroup("raw", r);
        return s != null ? {
          type: "raw",
          mode: "text",
          string: s.text
        } : null;
      }
      case "primitive": {
        if (r)
          throw new I("A primitive argument cannot be optional");
        var l = this.parseGroup(e);
        if (l == null)
          throw new I("Expected group as " + e, this.fetch());
        return l;
      }
      case "original":
      case null:
      case void 0:
        return this.parseArgumentGroup(r);
      default:
        throw new I("Unknown group type as " + e, this.fetch());
    }
  }
  /**
   * Discard any space tokens, fetching the next non-space token.
   */
  consumeSpaces() {
    for (; this.fetch().text === " "; )
      this.consume();
  }
  /**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */
  parseStringGroup(e, t) {
    var r = this.gullet.scanArgument(t);
    if (r == null)
      return null;
    for (var i = "", s; (s = this.fetch()).text !== "EOF"; )
      i += s.text, this.consume();
    return this.consume(), r.text = i, r;
  }
  /**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */
  parseRegexGroup(e, t) {
    for (var r = this.fetch(), i = r, s = "", l; (l = this.fetch()).text !== "EOF" && e.test(s + l.text); )
      i = l, s += i.text, this.consume();
    if (s === "")
      throw new I("Invalid " + t + ": '" + r.text + "'", r);
    return r.range(i, s);
  }
  /**
   * Parses a color description.
   */
  parseColorGroup(e) {
    var t = this.parseStringGroup("color", e);
    if (t == null)
      return null;
    var r = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(t.text);
    if (!r)
      throw new I("Invalid color: '" + t.text + "'", t);
    var i = r[0];
    return /^[0-9a-f]{6}$/i.test(i) && (i = "#" + i), {
      type: "color-token",
      mode: this.mode,
      color: i
    };
  }
  /**
   * Parses a size specification, consisting of magnitude and unit.
   */
  parseSizeGroup(e) {
    var t, r = !1;
    if (this.gullet.consumeSpaces(), !e && this.gullet.future().text !== "{" ? t = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size") : t = this.parseStringGroup("size", e), !t)
      return null;
    !e && t.text.length === 0 && (t.text = "0pt", r = !0);
    var i = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);
    if (!i)
      throw new I("Invalid size: '" + t.text + "'", t);
    var s = {
      number: +(i[1] + i[2]),
      // sign + magnitude, cast to number
      unit: i[3]
    };
    if (!v1(s))
      throw new I("Invalid unit: '" + s.unit + "'", t);
    return {
      type: "size",
      mode: this.mode,
      value: s,
      isBlank: r
    };
  }
  /**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */
  parseUrlGroup(e) {
    this.gullet.lexer.setCatcode("%", 13), this.gullet.lexer.setCatcode("~", 12);
    var t = this.parseStringGroup("url", e);
    if (this.gullet.lexer.setCatcode("%", 14), this.gullet.lexer.setCatcode("~", 13), t == null)
      return null;
    var r = t.text.replace(/\\([#$%&~_^{}])/g, "$1");
    return {
      type: "url",
      mode: this.mode,
      url: r
    };
  }
  /**
   * Parses an argument with the mode specified.
   */
  parseArgumentGroup(e, t) {
    var r = this.gullet.scanArgument(e);
    if (r == null)
      return null;
    var i = this.mode;
    t && this.switchMode(t), this.gullet.beginGroup();
    var s = this.parseExpression(!1, "EOF");
    this.expect("EOF"), this.gullet.endGroup();
    var l = {
      type: "ordgroup",
      mode: this.mode,
      loc: r.loc,
      body: s
    };
    return t && this.switchMode(i), l;
  }
  /**
   * Parses an ordinary group, which is either a single nucleus (like "x")
   * or an expression in braces (like "{x+y}") or an implicit group, a group
   * that starts at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   */
  parseGroup(e, t) {
    var r = this.fetch(), i = r.text, s;
    if (i === "{" || i === "\\begingroup") {
      this.consume();
      var l = i === "{" ? "}" : "\\endgroup";
      this.gullet.beginGroup();
      var a = this.parseExpression(!1, l), o = this.fetch();
      this.expect(l), this.gullet.endGroup(), s = {
        type: "ordgroup",
        mode: this.mode,
        loc: Lt.range(r, o),
        body: a,
        // A group formed by \begingroup...\endgroup is a semi-simple group
        // which doesn't affect spacing in math mode, i.e., is transparent.
        // https://tex.stackexchange.com/questions/1930/when-should-one-
        // use-begingroup-instead-of-bgroup
        semisimple: i === "\\begingroup" || void 0
      };
    } else if (s = this.parseFunction(t, e) || this.parseSymbol(), s == null && i[0] === "\\" && !cg.hasOwnProperty(i)) {
      if (this.settings.throwOnError)
        throw new I("Undefined control sequence: " + i, r);
      s = this.formatUnsupportedCmd(i), this.consume();
    }
    return s;
  }
  /**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */
  formLigatures(e) {
    for (var t = e.length - 1, r = 0; r < t; ++r) {
      var i = e[r], s = i.text;
      s === "-" && e[r + 1].text === "-" && (r + 1 < t && e[r + 2].text === "-" ? (e.splice(r, 3, {
        type: "textord",
        mode: "text",
        loc: Lt.range(i, e[r + 2]),
        text: "---"
      }), t -= 2) : (e.splice(r, 2, {
        type: "textord",
        mode: "text",
        loc: Lt.range(i, e[r + 1]),
        text: "--"
      }), t -= 1)), (s === "'" || s === "`") && e[r + 1].text === s && (e.splice(r, 2, {
        type: "textord",
        mode: "text",
        loc: Lt.range(i, e[r + 1]),
        text: s + s
      }), t -= 1);
    }
  }
  /**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */
  parseSymbol() {
    var e = this.fetch(), t = e.text;
    if (/^\\verb[^a-zA-Z]/.test(t)) {
      this.consume();
      var r = t.slice(5), i = r.charAt(0) === "*";
      if (i && (r = r.slice(1)), r.length < 2 || r.charAt(0) !== r.slice(-1))
        throw new I(`\\verb assertion failed --
                    please report what input caused this bug`);
      return r = r.slice(1, -1), {
        type: "verb",
        mode: "text",
        body: r,
        star: i
      };
    }
    vf.hasOwnProperty(t[0]) && !Be[this.mode][t[0]] && (this.settings.strict && this.mode === "math" && this.settings.reportNonstrict("unicodeTextInMathMode", 'Accented Unicode text character "' + t[0] + '" used in math mode', e), t = vf[t[0]] + t.slice(1));
    var s = Sx.exec(t);
    s && (t = t.substring(0, s.index), t === "i" ? t = "ı" : t === "j" && (t = "ȷ"));
    var l;
    if (Be[this.mode][t]) {
      this.settings.strict && this.mode === "math" && Bu.indexOf(t) >= 0 && this.settings.reportNonstrict("unicodeTextInMathMode", 'Latin-1/Unicode text character "' + t[0] + '" used in math mode', e);
      var a = Be[this.mode][t].group, o = Lt.range(e), u;
      if (g8.hasOwnProperty(a)) {
        var h = a;
        u = {
          type: "atom",
          mode: this.mode,
          family: h,
          loc: o,
          text: t
        };
      } else
        u = {
          type: a,
          mode: this.mode,
          loc: o,
          text: t
        };
      l = u;
    } else if (t.charCodeAt(0) >= 128)
      this.settings.strict && (b1(t.charCodeAt(0)) ? this.mode === "math" && this.settings.reportNonstrict("unicodeTextInMathMode", 'Unicode text character "' + t[0] + '" used in math mode', e) : this.settings.reportNonstrict("unknownSymbol", 'Unrecognized Unicode character "' + t[0] + '"' + (" (" + t.charCodeAt(0) + ")"), e)), l = {
        type: "textord",
        mode: "text",
        loc: Lt.range(e),
        text: t
      };
    else
      return null;
    if (this.consume(), s)
      for (var c = 0; c < s[0].length; c++) {
        var f = s[0][c];
        if (!vo[f])
          throw new I("Unknown accent ' " + f + "'", e);
        var d = vo[f][this.mode] || vo[f].text;
        if (!d)
          throw new I("Accent " + f + " unsupported in " + this.mode + " mode", e);
        l = {
          type: "accent",
          mode: this.mode,
          loc: Lt.range(e),
          label: d,
          isStretchy: !1,
          isShifty: !0,
          // $FlowFixMe
          base: l
        };
      }
    return l;
  }
};
fg.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];
var vh = function(e, t) {
  if (!(typeof e == "string" || e instanceof String))
    throw new TypeError("KaTeX can only parse string typed expression");
  var r = new fg(e, t);
  delete r.gullet.macros.current["\\df@tag"];
  var i = r.parse();
  if (delete r.gullet.macros.current["\\current@color"], delete r.gullet.macros.current["\\color"], r.gullet.macros.get("\\df@tag")) {
    if (!t.displayMode)
      throw new I("\\tag works only in display equations");
    i = [{
      type: "tag",
      mode: "text",
      body: i,
      tag: r.subparse([new Ht("\\df@tag")])
    }];
  }
  return i;
}, wh = function(e, t, r) {
  t.textContent = "";
  var i = Ea(e, r).toNode();
  t.appendChild(i);
};
typeof document < "u" && document.compatMode !== "CSS1Compat" && (typeof console < "u" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."), wh = function() {
  throw new I("KaTeX doesn't work in quirks mode.");
});
var pg = function(e, t) {
  var r = Ea(e, t).toMarkup();
  return r;
}, mg = function(e, t) {
  var r = new rh(t);
  return vh(e, r);
}, gg = function(e, t, r) {
  if (r.throwOnError || !(e instanceof I))
    throw e;
  var i = R.makeSpan(["katex-error"], [new Jt(t)]);
  return i.setAttribute("title", e.toString()), i.setAttribute("style", "color:" + r.errorColor), i;
}, Ea = function(e, t) {
  var r = new rh(t);
  try {
    var i = vh(e, r);
    return L8(i, e, r);
  } catch (s) {
    return gg(s, e, r);
  }
}, Og = function(e, t) {
  var r = new rh(t);
  try {
    var i = vh(e, r);
    return q8(i, e, r);
  } catch (s) {
    return gg(s, e, r);
  }
}, yg = "0.16.21", bg = {
  Span: zs,
  Anchor: lh,
  SymbolNode: Jt,
  SvgNode: Yn,
  PathNode: pr,
  LineNode: Fu
}, Vu = {
  /**
   * Current KaTeX version
   */
  version: yg,
  /**
   * Renders the given LaTeX into an HTML+MathML combination, and adds
   * it as a child to the specified DOM node.
   */
  render: wh,
  /**
   * Renders the given LaTeX into an HTML+MathML combination string,
   * for sending to the client.
   */
  renderToString: pg,
  /**
   * KaTeX error, usually during parsing.
   */
  ParseError: I,
  /**
   * The schema of Settings
   */
  SETTINGS_SCHEMA: ts,
  /**
   * Parses the given LaTeX into KaTeX's internal parse tree structure,
   * without rendering to HTML or MathML.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __parse: mg,
  /**
   * Renders the given LaTeX into an HTML+MathML internal DOM tree
   * representation, without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToDomTree: Ea,
  /**
   * Renders the given LaTeX into an HTML internal DOM tree representation,
   * without MathML and without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToHTMLTree: Og,
  /**
   * extends internal font metrics object with a new object
   * each key in the new object represents a font name
  */
  __setFontMetrics: x1,
  /**
   * adds a new symbol to builtin symbols table
   */
  __defineSymbol: p,
  /**
   * adds a new function to builtin function list,
   * which directly produce parse tree elements
   * and have their own html/mathml builders
   */
  __defineFunction: H,
  /**
   * adds a new macro to builtin macro list
   */
  __defineMacro: v,
  /**
   * Expose the dom tree node types, which can be useful for type checking nodes.
   *
   * NOTE: These methods are not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __domTree: bg
};
const $x = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ParseError: I,
  SETTINGS_SCHEMA: ts,
  __defineFunction: H,
  __defineMacro: v,
  __defineSymbol: p,
  __domTree: bg,
  __parse: mg,
  __renderToDomTree: Ea,
  __renderToHTMLTree: Og,
  __setFontMetrics: x1,
  default: Vu,
  get render() {
    return wh;
  },
  renderToString: pg,
  version: yg
}, Symbol.toStringTag, { value: "Module" })), Dx = {};
function Tx(n) {
  const e = (
    /** @type {Processor} */
    this
  ), t = n || Dx, r = e.data(), i = r.micromarkExtensions || (r.micromarkExtensions = []), s = r.fromMarkdownExtensions || (r.fromMarkdownExtensions = []), l = r.toMarkdownExtensions || (r.toMarkdownExtensions = []);
  i.push(Rb(t)), s.push(Pb()), l.push(Cb(t));
}
function Mx(n, e) {
  const t = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: n.wrap(n.all(e), !0)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function Ex(n, e) {
  const t = { type: "element", tagName: "br", properties: {}, children: [] };
  return n.patch(e, t), [n.applyData(e, t), { type: "text", value: `
` }];
}
function Rx(n, e) {
  const t = e.value ? e.value + `
` : "", r = {};
  e.lang && (r.className = ["language-" + e.lang]);
  let i = {
    type: "element",
    tagName: "code",
    properties: r,
    children: [{ type: "text", value: t }]
  };
  return e.meta && (i.data = { meta: e.meta }), n.patch(e, i), i = n.applyData(e, i), i = { type: "element", tagName: "pre", properties: {}, children: [i] }, n.patch(e, i), i;
}
function Zx(n, e) {
  const t = {
    type: "element",
    tagName: "del",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function zx(n, e) {
  const t = {
    type: "element",
    tagName: "em",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function Fx(n, e) {
  const t = typeof n.options.clobberPrefix == "string" ? n.options.clobberPrefix : "user-content-", r = String(e.identifier).toUpperCase(), i = ki(r.toLowerCase()), s = n.footnoteOrder.indexOf(r);
  let l, a = n.footnoteCounts.get(r);
  a === void 0 ? (a = 0, n.footnoteOrder.push(r), l = n.footnoteOrder.length) : l = s + 1, a += 1, n.footnoteCounts.set(r, a);
  const o = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + t + "fn-" + i,
      id: t + "fnref-" + i + (a > 1 ? "-" + a : ""),
      dataFootnoteRef: !0,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(l) }]
  };
  n.patch(e, o);
  const u = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [o]
  };
  return n.patch(e, u), n.applyData(e, u);
}
function Bx(n, e) {
  const t = {
    type: "element",
    tagName: "h" + e.depth,
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function Lx(n, e) {
  if (n.options.allowDangerousHtml) {
    const t = { type: "raw", value: e.value };
    return n.patch(e, t), n.applyData(e, t);
  }
}
function xg(n, e) {
  const t = e.referenceType;
  let r = "]";
  if (t === "collapsed" ? r += "[]" : t === "full" && (r += "[" + (e.label || e.identifier) + "]"), e.type === "imageReference")
    return [{ type: "text", value: "![" + e.alt + r }];
  const i = n.all(e), s = i[0];
  s && s.type === "text" ? s.value = "[" + s.value : i.unshift({ type: "text", value: "[" });
  const l = i[i.length - 1];
  return l && l.type === "text" ? l.value += r : i.push({ type: "text", value: r }), i;
}
function qx(n, e) {
  const t = String(e.identifier).toUpperCase(), r = n.definitionById.get(t);
  if (!r)
    return xg(n, e);
  const i = { src: ki(r.url || ""), alt: e.alt };
  r.title !== null && r.title !== void 0 && (i.title = r.title);
  const s = { type: "element", tagName: "img", properties: i, children: [] };
  return n.patch(e, s), n.applyData(e, s);
}
function Xx(n, e) {
  const t = { src: ki(e.url) };
  e.alt !== null && e.alt !== void 0 && (t.alt = e.alt), e.title !== null && e.title !== void 0 && (t.title = e.title);
  const r = { type: "element", tagName: "img", properties: t, children: [] };
  return n.patch(e, r), n.applyData(e, r);
}
function Ix(n, e) {
  const t = { type: "text", value: e.value.replace(/\r?\n|\r/g, " ") };
  n.patch(e, t);
  const r = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [t]
  };
  return n.patch(e, r), n.applyData(e, r);
}
function Nx(n, e) {
  const t = String(e.identifier).toUpperCase(), r = n.definitionById.get(t);
  if (!r)
    return xg(n, e);
  const i = { href: ki(r.url || "") };
  r.title !== null && r.title !== void 0 && (i.title = r.title);
  const s = {
    type: "element",
    tagName: "a",
    properties: i,
    children: n.all(e)
  };
  return n.patch(e, s), n.applyData(e, s);
}
function Vx(n, e) {
  const t = { href: ki(e.url) };
  e.title !== null && e.title !== void 0 && (t.title = e.title);
  const r = {
    type: "element",
    tagName: "a",
    properties: t,
    children: n.all(e)
  };
  return n.patch(e, r), n.applyData(e, r);
}
function jx(n, e, t) {
  const r = n.all(e), i = t ? _x(t) : vg(e), s = {}, l = [];
  if (typeof e.checked == "boolean") {
    const h = r[0];
    let c;
    h && h.type === "element" && h.tagName === "p" ? c = h : (c = { type: "element", tagName: "p", properties: {}, children: [] }, r.unshift(c)), c.children.length > 0 && c.children.unshift({ type: "text", value: " " }), c.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: e.checked, disabled: !0 },
      children: []
    }), s.className = ["task-list-item"];
  }
  let a = -1;
  for (; ++a < r.length; ) {
    const h = r[a];
    (i || a !== 0 || h.type !== "element" || h.tagName !== "p") && l.push({ type: "text", value: `
` }), h.type === "element" && h.tagName === "p" && !i ? l.push(...h.children) : l.push(h);
  }
  const o = r[r.length - 1];
  o && (i || o.type !== "element" || o.tagName !== "p") && l.push({ type: "text", value: `
` });
  const u = { type: "element", tagName: "li", properties: s, children: l };
  return n.patch(e, u), n.applyData(e, u);
}
function _x(n) {
  let e = !1;
  if (n.type === "list") {
    e = n.spread || !1;
    const t = n.children;
    let r = -1;
    for (; !e && ++r < t.length; )
      e = vg(t[r]);
  }
  return e;
}
function vg(n) {
  const e = n.spread;
  return e ?? n.children.length > 1;
}
function Ux(n, e) {
  const t = {}, r = n.all(e);
  let i = -1;
  for (typeof e.start == "number" && e.start !== 1 && (t.start = e.start); ++i < r.length; ) {
    const l = r[i];
    if (l.type === "element" && l.tagName === "li" && l.properties && Array.isArray(l.properties.className) && l.properties.className.includes("task-list-item")) {
      t.className = ["contains-task-list"];
      break;
    }
  }
  const s = {
    type: "element",
    tagName: e.ordered ? "ol" : "ul",
    properties: t,
    children: n.wrap(r, !0)
  };
  return n.patch(e, s), n.applyData(e, s);
}
function Wx(n, e) {
  const t = {
    type: "element",
    tagName: "p",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
function Yx(n, e) {
  const t = { type: "root", children: n.wrap(n.all(e)) };
  return n.patch(e, t), n.applyData(e, t);
}
function Gx(n, e) {
  const t = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
const wg = Sg("end"), kg = Sg("start");
function Sg(n) {
  return e;
  function e(t) {
    const r = t && t.position && t.position[n] || {};
    if (typeof r.line == "number" && r.line > 0 && typeof r.column == "number" && r.column > 0)
      return {
        line: r.line,
        column: r.column,
        offset: typeof r.offset == "number" && r.offset > -1 ? r.offset : void 0
      };
  }
}
function Hx(n) {
  const e = kg(n), t = wg(n);
  if (e && t)
    return { start: e, end: t };
}
function Kx(n, e) {
  const t = n.all(e), r = t.shift(), i = [];
  if (r) {
    const l = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: n.wrap([r], !0)
    };
    n.patch(e.children[0], l), i.push(l);
  }
  if (t.length > 0) {
    const l = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: n.wrap(t, !0)
    }, a = kg(e.children[1]), o = wg(e.children[e.children.length - 1]);
    a && o && (l.position = { start: a, end: o }), i.push(l);
  }
  const s = {
    type: "element",
    tagName: "table",
    properties: {},
    children: n.wrap(i, !0)
  };
  return n.patch(e, s), n.applyData(e, s);
}
function Jx(n, e, t) {
  const r = t ? t.children : void 0, s = (r ? r.indexOf(e) : 1) === 0 ? "th" : "td", l = t && t.type === "table" ? t.align : void 0, a = l ? l.length : e.children.length;
  let o = -1;
  const u = [];
  for (; ++o < a; ) {
    const c = e.children[o], f = {}, d = l ? l[o] : void 0;
    d && (f.align = d);
    let m = { type: "element", tagName: s, properties: f, children: [] };
    c && (m.children = n.all(c), n.patch(c, m), m = n.applyData(c, m)), u.push(m);
  }
  const h = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: n.wrap(u, !0)
  };
  return n.patch(e, h), n.applyData(e, h);
}
function ev(n, e) {
  const t = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, t), n.applyData(e, t);
}
const wf = 9, kf = 32;
function tv(n) {
  const e = String(n), t = /\r?\n|\r/g;
  let r = t.exec(e), i = 0;
  const s = [];
  for (; r; )
    s.push(
      Sf(e.slice(i, r.index), i > 0, !0),
      r[0]
    ), i = r.index + r[0].length, r = t.exec(e);
  return s.push(Sf(e.slice(i), i > 0, !1)), s.join("");
}
function Sf(n, e, t) {
  let r = 0, i = n.length;
  if (e) {
    let s = n.codePointAt(r);
    for (; s === wf || s === kf; )
      r++, s = n.codePointAt(r);
  }
  if (t) {
    let s = n.codePointAt(i - 1);
    for (; s === wf || s === kf; )
      i--, s = n.codePointAt(i - 1);
  }
  return i > r ? n.slice(r, i) : "";
}
function nv(n, e) {
  const t = { type: "text", value: tv(String(e.value)) };
  return n.patch(e, t), n.applyData(e, t);
}
function rv(n, e) {
  const t = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  return n.patch(e, t), n.applyData(e, t);
}
const iv = {
  blockquote: Mx,
  break: Ex,
  code: Rx,
  delete: Zx,
  emphasis: zx,
  footnoteReference: Fx,
  heading: Bx,
  html: Lx,
  imageReference: qx,
  image: Xx,
  inlineCode: Ix,
  linkReference: Nx,
  link: Vx,
  listItem: jx,
  list: Ux,
  paragraph: Wx,
  // @ts-expect-error: root is different, but hard to type.
  root: Yx,
  strong: Gx,
  table: Kx,
  tableCell: ev,
  tableRow: Jx,
  text: nv,
  thematicBreak: rv,
  toml: ol,
  yaml: ol,
  definition: ol,
  footnoteDefinition: ol
};
function ol() {
}
const Qg = -1, Ra = 0, rs = 1, ta = 2, kh = 3, Sh = 4, Qh = 5, Ph = 6, Pg = 7, Cg = 8, Qf = typeof self == "object" ? self : globalThis, sv = (n, e) => {
  const t = (i, s) => (n.set(s, i), i), r = (i) => {
    if (n.has(i))
      return n.get(i);
    const [s, l] = e[i];
    switch (s) {
      case Ra:
      case Qg:
        return t(l, i);
      case rs: {
        const a = t([], i);
        for (const o of l)
          a.push(r(o));
        return a;
      }
      case ta: {
        const a = t({}, i);
        for (const [o, u] of l)
          a[r(o)] = r(u);
        return a;
      }
      case kh:
        return t(new Date(l), i);
      case Sh: {
        const { source: a, flags: o } = l;
        return t(new RegExp(a, o), i);
      }
      case Qh: {
        const a = t(/* @__PURE__ */ new Map(), i);
        for (const [o, u] of l)
          a.set(r(o), r(u));
        return a;
      }
      case Ph: {
        const a = t(/* @__PURE__ */ new Set(), i);
        for (const o of l)
          a.add(r(o));
        return a;
      }
      case Pg: {
        const { name: a, message: o } = l;
        return t(new Qf[a](o), i);
      }
      case Cg:
        return t(BigInt(l), i);
      case "BigInt":
        return t(Object(BigInt(l)), i);
      case "ArrayBuffer":
        return t(new Uint8Array(l).buffer, l);
      case "DataView": {
        const { buffer: a } = new Uint8Array(l);
        return t(new DataView(a), l);
      }
    }
    return t(new Qf[s](l), i);
  };
  return r;
}, Pf = (n) => sv(/* @__PURE__ */ new Map(), n)(0), Hr = "", { toString: lv } = {}, { keys: av } = Object, Fi = (n) => {
  const e = typeof n;
  if (e !== "object" || !n)
    return [Ra, e];
  const t = lv.call(n).slice(8, -1);
  switch (t) {
    case "Array":
      return [rs, Hr];
    case "Object":
      return [ta, Hr];
    case "Date":
      return [kh, Hr];
    case "RegExp":
      return [Sh, Hr];
    case "Map":
      return [Qh, Hr];
    case "Set":
      return [Ph, Hr];
    case "DataView":
      return [rs, t];
  }
  return t.includes("Array") ? [rs, t] : t.includes("Error") ? [Pg, t] : [ta, t];
}, ul = ([n, e]) => n === Ra && (e === "function" || e === "symbol"), ov = (n, e, t, r) => {
  const i = (l, a) => {
    const o = r.push(l) - 1;
    return t.set(a, o), o;
  }, s = (l) => {
    if (t.has(l))
      return t.get(l);
    let [a, o] = Fi(l);
    switch (a) {
      case Ra: {
        let h = l;
        switch (o) {
          case "bigint":
            a = Cg, h = l.toString();
            break;
          case "function":
          case "symbol":
            if (n)
              throw new TypeError("unable to serialize " + o);
            h = null;
            break;
          case "undefined":
            return i([Qg], l);
        }
        return i([a, h], l);
      }
      case rs: {
        if (o) {
          let f = l;
          return o === "DataView" ? f = new Uint8Array(l.buffer) : o === "ArrayBuffer" && (f = new Uint8Array(l)), i([o, [...f]], l);
        }
        const h = [], c = i([a, h], l);
        for (const f of l)
          h.push(s(f));
        return c;
      }
      case ta: {
        if (o)
          switch (o) {
            case "BigInt":
              return i([o, l.toString()], l);
            case "Boolean":
            case "Number":
            case "String":
              return i([o, l.valueOf()], l);
          }
        if (e && "toJSON" in l)
          return s(l.toJSON());
        const h = [], c = i([a, h], l);
        for (const f of av(l))
          (n || !ul(Fi(l[f]))) && h.push([s(f), s(l[f])]);
        return c;
      }
      case kh:
        return i([a, l.toISOString()], l);
      case Sh: {
        const { source: h, flags: c } = l;
        return i([a, { source: h, flags: c }], l);
      }
      case Qh: {
        const h = [], c = i([a, h], l);
        for (const [f, d] of l)
          (n || !(ul(Fi(f)) || ul(Fi(d)))) && h.push([s(f), s(d)]);
        return c;
      }
      case Ph: {
        const h = [], c = i([a, h], l);
        for (const f of l)
          (n || !ul(Fi(f))) && h.push(s(f));
        return c;
      }
    }
    const { message: u } = l;
    return i([a, { name: o, message: u }], l);
  };
  return s;
}, Cf = (n, { json: e, lossy: t } = {}) => {
  const r = [];
  return ov(!(e || t), !!e, /* @__PURE__ */ new Map(), r)(n), r;
}, zr = typeof structuredClone == "function" ? (
  /* c8 ignore start */
  (n, e) => e && ("json" in e || "lossy" in e) ? Pf(Cf(n, e)) : structuredClone(n)
) : (n, e) => Pf(Cf(n, e));
function uv(n, e) {
  const t = [{ type: "text", value: "↩" }];
  return e > 1 && t.push({
    type: "element",
    tagName: "sup",
    properties: {},
    children: [{ type: "text", value: String(e) }]
  }), t;
}
function hv(n, e) {
  return "Back to reference " + (n + 1) + (e > 1 ? "-" + e : "");
}
function cv(n) {
  const e = typeof n.options.clobberPrefix == "string" ? n.options.clobberPrefix : "user-content-", t = n.options.footnoteBackContent || uv, r = n.options.footnoteBackLabel || hv, i = n.options.footnoteLabel || "Footnotes", s = n.options.footnoteLabelTagName || "h2", l = n.options.footnoteLabelProperties || {
    className: ["sr-only"]
  }, a = [];
  let o = -1;
  for (; ++o < n.footnoteOrder.length; ) {
    const u = n.footnoteById.get(
      n.footnoteOrder[o]
    );
    if (!u)
      continue;
    const h = n.all(u), c = String(u.identifier).toUpperCase(), f = ki(c.toLowerCase());
    let d = 0;
    const m = [], O = n.footnoteCounts.get(c);
    for (; O !== void 0 && ++d <= O; ) {
      m.length > 0 && m.push({ type: "text", value: " " });
      let w = typeof t == "string" ? t : t(o, d);
      typeof w == "string" && (w = { type: "text", value: w }), m.push({
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + e + "fnref-" + f + (d > 1 ? "-" + d : ""),
          dataFootnoteBackref: "",
          ariaLabel: typeof r == "string" ? r : r(o, d),
          className: ["data-footnote-backref"]
        },
        children: Array.isArray(w) ? w : [w]
      });
    }
    const x = h[h.length - 1];
    if (x && x.type === "element" && x.tagName === "p") {
      const w = x.children[x.children.length - 1];
      w && w.type === "text" ? w.value += " " : x.children.push({ type: "text", value: " " }), x.children.push(...m);
    } else
      h.push(...m);
    const b = {
      type: "element",
      tagName: "li",
      properties: { id: e + "fn-" + f },
      children: n.wrap(h, !0)
    };
    n.patch(u, b), a.push(b);
  }
  if (a.length !== 0)
    return {
      type: "element",
      tagName: "section",
      properties: { dataFootnotes: !0, className: ["footnotes"] },
      children: [
        {
          type: "element",
          tagName: s,
          properties: {
            ...zr(l),
            id: "footnote-label"
          },
          children: [{ type: "text", value: i }]
        },
        { type: "text", value: `
` },
        {
          type: "element",
          tagName: "ol",
          properties: {},
          children: n.wrap(a, !0)
        },
        { type: "text", value: `
` }
      ]
    };
}
const ju = {}.hasOwnProperty, fv = {};
function dv(n, e) {
  const t = e || fv, r = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map(), l = { ...iv, ...t.handlers }, a = {
    all: u,
    applyData: mv,
    definitionById: r,
    footnoteById: i,
    footnoteCounts: s,
    footnoteOrder: [],
    handlers: l,
    one: o,
    options: t,
    patch: pv,
    wrap: Ov
  };
  return Pa(n, function(h) {
    if (h.type === "definition" || h.type === "footnoteDefinition") {
      const c = h.type === "definition" ? r : i, f = String(h.identifier).toUpperCase();
      c.has(f) || c.set(f, h);
    }
  }), a;
  function o(h, c) {
    const f = h.type, d = a.handlers[f];
    if (ju.call(a.handlers, f) && d)
      return d(a, h, c);
    if (a.options.passThrough && a.options.passThrough.includes(f)) {
      if ("children" in h) {
        const { children: O, ...x } = h, b = zr(x);
        return b.children = a.all(h), b;
      }
      return zr(h);
    }
    return (a.options.unknownHandler || gv)(a, h, c);
  }
  function u(h) {
    const c = [];
    if ("children" in h) {
      const f = h.children;
      let d = -1;
      for (; ++d < f.length; ) {
        const m = a.one(f[d], h);
        if (m) {
          if (d && f[d - 1].type === "break" && (!Array.isArray(m) && m.type === "text" && (m.value = Af(m.value)), !Array.isArray(m) && m.type === "element")) {
            const O = m.children[0];
            O && O.type === "text" && (O.value = Af(O.value));
          }
          Array.isArray(m) ? c.push(...m) : c.push(m);
        }
      }
    }
    return c;
  }
}
function pv(n, e) {
  n.position && (e.position = Hx(n));
}
function mv(n, e) {
  let t = e;
  if (n && n.data) {
    const r = n.data.hName, i = n.data.hChildren, s = n.data.hProperties;
    if (typeof r == "string")
      if (t.type === "element")
        t.tagName = r;
      else {
        const l = "children" in t ? t.children : [t];
        t = { type: "element", tagName: r, properties: {}, children: l };
      }
    t.type === "element" && s && Object.assign(t.properties, zr(s)), "children" in t && t.children && i !== null && i !== void 0 && (t.children = i);
  }
  return t;
}
function gv(n, e) {
  const t = e.data || {}, r = "value" in e && !(ju.call(t, "hProperties") || ju.call(t, "hChildren")) ? { type: "text", value: e.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: n.all(e)
  };
  return n.patch(e, r), n.applyData(e, r);
}
function Ov(n, e) {
  const t = [];
  let r = -1;
  for (e && t.push({ type: "text", value: `
` }); ++r < n.length; )
    r && t.push({ type: "text", value: `
` }), t.push(n[r]);
  return e && n.length > 0 && t.push({ type: "text", value: `
` }), t;
}
function Af(n) {
  let e = 0, t = n.charCodeAt(e);
  for (; t === 9 || t === 32; )
    e++, t = n.charCodeAt(e);
  return n.slice(e);
}
function $f(n, e) {
  const t = dv(n, e), r = t.one(n, void 0), i = cv(t), s = Array.isArray(r) ? { type: "root", children: r } : r || { type: "root", children: [] };
  return i && s.children.push({ type: "text", value: `
` }, i), s;
}
function yv(n, e) {
  return n && "run" in n ? async function(t, r) {
    const i = (
      /** @type {HastRoot} */
      $f(t, { file: r, ...e })
    );
    await n.run(i, r);
  } : function(t, r) {
    return (
      /** @type {HastRoot} */
      $f(t, { file: r, ...n || e })
    );
  };
}
const bv = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\u9FFD-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7CB-\uA7F4\uA828-\uA82B\uA82D-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDE7F\uDEAA\uDEAD-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD48-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC62-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD44-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD83E[\uDC00-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g, xv = Object.hasOwnProperty;
class vv {
  /**
   * Create a new slug class.
   */
  constructor() {
    this.occurrences, this.reset();
  }
  /**
   * Generate a unique slug.
  *
  * Tracks previously generated slugs: repeated calls with the same value
  * will result in different slugs.
  * Use the `slug` function to get same slugs.
   *
   * @param  {string} value
   *   String of text to slugify
   * @param  {boolean} [maintainCase=false]
   *   Keep the current case, otherwise make all lowercase
   * @return {string}
   *   A unique slug string
   */
  slug(e, t) {
    const r = this;
    let i = wv(e, t === !0);
    const s = i;
    for (; xv.call(r.occurrences, i); )
      r.occurrences[s]++, i = s + "-" + r.occurrences[s];
    return r.occurrences[i] = 0, i;
  }
  /**
   * Reset - Forget all previous slugs
   *
   * @return void
   */
  reset() {
    this.occurrences = /* @__PURE__ */ Object.create(null);
  }
}
function wv(n, e) {
  return typeof n != "string" ? "" : (e || (n = n.toLowerCase()), n.replace(bv, "").replace(/ /g, "-"));
}
function kv(n) {
  const e = n.type === "element" ? n.tagName.toLowerCase() : "", t = e.length === 2 && e.charCodeAt(0) === 104 ? e.charCodeAt(1) : 0;
  return t > 48 && t < 55 ? t - 48 : void 0;
}
function Sv(n) {
  return "children" in n ? Ag(n) : "value" in n ? n.value : "";
}
function Qv(n) {
  return n.type === "text" ? n.value : "children" in n ? Ag(n) : "";
}
function Ag(n) {
  let e = -1;
  const t = [];
  for (; ++e < n.children.length; )
    t[e] = Qv(n.children[e]);
  return t.join("");
}
const Pv = {}, Df = new vv();
function Cv(n) {
  const t = (n || Pv).prefix || "";
  return function(r) {
    Df.reset(), Pa(r, "element", function(i) {
      kv(i) && !i.properties.id && (i.properties.id = t + Df.slug(Sv(i)));
    });
  };
}
const kr = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {Check}
   */
  function(n) {
    if (n == null)
      return Dv;
    if (typeof n == "string")
      return $v(n);
    if (typeof n == "object")
      return Av(n);
    if (typeof n == "function")
      return Ch(n);
    throw new Error("Expected function, string, or array as `test`");
  }
);
function Av(n) {
  const e = [];
  let t = -1;
  for (; ++t < n.length; )
    e[t] = kr(n[t]);
  return Ch(r);
  function r(...i) {
    let s = -1;
    for (; ++s < e.length; )
      if (e[s].apply(this, i)) return !0;
    return !1;
  }
}
function $v(n) {
  return Ch(e);
  function e(t) {
    return t.tagName === n;
  }
}
function Ch(n) {
  return e;
  function e(t, r, i) {
    return !!(Tv(t) && n.call(
      this,
      t,
      typeof r == "number" ? r : void 0,
      i || void 0
    ));
  }
}
function Dv(n) {
  return !!(n && typeof n == "object" && "type" in n && n.type === "element" && "tagName" in n && typeof n.tagName == "string");
}
function Tv(n) {
  return n !== null && typeof n == "object" && "type" in n && "tagName" in n;
}
const Mv = /^[a-zA-Z][a-zA-Z\d+\-.]*?:/, Ev = /^[a-zA-Z]:\\/;
function Rv(n) {
  if (typeof n != "string")
    throw new TypeError(`Expected a \`string\`, got \`${typeof n}\``);
  return Ev.test(n) ? !1 : Mv.test(n);
}
function _u(n) {
  const e = String(n || "").trim();
  return e ? e.split(/[ \t\n\r\f]+/g) : [];
}
function Zv(n) {
  return n.join(" ").trim();
}
const zv = ["http", "https"], Fv = ["nofollow"], Bv = {};
function Lv(n) {
  const e = n || Bv, t = e.protocols || zv, r = kr(e.test);
  return function(i) {
    Pa(i, "element", function(s, l, a) {
      if (s.tagName === "a" && typeof s.properties.href == "string" && r(s, l, a)) {
        const o = s.properties.href;
        if (Rv(o) ? t.includes(o.slice(0, o.indexOf(":"))) : o.startsWith("//")) {
          const u = Bi(e.content, s), h = u && !Array.isArray(u) ? [u] : u, c = Bi(e.rel, s) || Fv, f = typeof c == "string" ? _u(c) : c, d = Bi(e.target, s), m = Bi(e.properties, s);
          if (m && Object.assign(s.properties, zr(m)), f.length > 0 && (s.properties.rel = [...f]), d && (s.properties.target = d), h) {
            const O = Bi(e.contentProperties, s) || {};
            s.children.push({
              type: "element",
              tagName: "span",
              properties: zr(O),
              children: zr(h)
            });
          }
        }
      }
    });
  };
}
function Bi(n, e) {
  return typeof n == "function" ? n(e) : n;
}
var wo, Tf;
function qv() {
  if (Tf) return wo;
  Tf = 1, wo = n;
  function n(s) {
    if (s == null)
      return i;
    if (typeof s == "string")
      return r(s);
    if (typeof s == "object")
      return "length" in s ? t(s) : e(s);
    if (typeof s == "function")
      return s;
    throw new Error("Expected function, string, or object as test");
  }
  function e(s) {
    return l;
    function l(a) {
      var o;
      for (o in s)
        if (a[o] !== s[o]) return !1;
      return !0;
    }
  }
  function t(s) {
    for (var l = [], a = -1; ++a < s.length; )
      l[a] = n(s[a]);
    return o;
    function o() {
      for (var u = -1; ++u < l.length; )
        if (l[u].apply(this, arguments))
          return !0;
      return !1;
    }
  }
  function r(s) {
    return l;
    function l(a) {
      return !!(a && a.type === s);
    }
  }
  function i() {
    return !0;
  }
  return wo;
}
var ko, Mf;
function Xv() {
  if (Mf) return ko;
  Mf = 1, ko = n;
  function n(e) {
    return e;
  }
  return ko;
}
var So, Ef;
function Iv() {
  if (Ef) return So;
  Ef = 1, So = s;
  var n = qv(), e = Xv(), t = !0, r = "skip", i = !1;
  s.CONTINUE = t, s.SKIP = r, s.EXIT = i;
  function s(a, o, u, h) {
    var c, f;
    typeof o == "function" && typeof u != "function" && (h = u, u = o, o = null), f = n(o), c = h ? -1 : 1, d(a, null, [])();
    function d(m, O, x) {
      var b = typeof m == "object" && m !== null ? m : {}, w;
      return typeof b.type == "string" && (w = typeof b.tagName == "string" ? b.tagName : typeof b.name == "string" ? b.name : void 0, C.displayName = "node (" + e(b.type + (w ? "<" + w + ">" : "")) + ")"), C;
      function C() {
        var Z = x.concat(m), T = [], S, E;
        if ((!o || f(m, O, x[x.length - 1] || null)) && (T = l(u(m, x)), T[0] === i))
          return T;
        if (m.children && T[0] !== r)
          for (E = (h ? m.children.length : -1) + c; E > -1 && E < m.children.length; ) {
            if (S = d(m.children[E], E, Z)(), S[0] === i)
              return S;
            E = typeof S[1] == "number" ? S[1] : E + c;
          }
        return T;
      }
    }
  }
  function l(a) {
    return a !== null && typeof a == "object" && "length" in a ? a : typeof a == "number" ? [t, a] : [a];
  }
  return So;
}
var Qo, Rf;
function Nv() {
  if (Rf) return Qo;
  Rf = 1, Qo = i;
  var n = Iv(), e = n.CONTINUE, t = n.SKIP, r = n.EXIT;
  i.CONTINUE = e, i.SKIP = t, i.EXIT = r;
  function i(s, l, a, o) {
    typeof l == "function" && typeof a != "function" && (o = a, a = l, l = null), n(s, l, u, o);
    function u(h, c) {
      var f = c[c.length - 1], d = f ? f.children.indexOf(h) : null;
      return a(h, d, f);
    }
  }
  return Qo;
}
var Po, Zf;
function Vv() {
  if (Zf) return Po;
  Zf = 1, Po = e;
  var n = Object.prototype.hasOwnProperty;
  function e() {
    for (var t = {}, r = 0; r < arguments.length; r++) {
      var i = arguments[r];
      for (var s in i)
        n.call(i, s) && (t[s] = i[s]);
    }
    return t;
  }
  return Po;
}
var Co, zf;
function $g() {
  if (zf) return Co;
  zf = 1, Co = e;
  var n = e.prototype;
  n.space = null, n.normal = {}, n.property = {};
  function e(t, r, i) {
    this.property = t, this.normal = r, i && (this.space = i);
  }
  return Co;
}
var Ao, Ff;
function jv() {
  if (Ff) return Ao;
  Ff = 1;
  var n = Vv(), e = $g();
  Ao = t;
  function t(r) {
    for (var i = r.length, s = [], l = [], a = -1, o, u; ++a < i; )
      o = r[a], s.push(o.property), l.push(o.normal), u = o.space;
    return new e(
      n.apply(null, s),
      n.apply(null, l),
      u
    );
  }
  return Ao;
}
var $o, Bf;
function Ah() {
  if (Bf) return $o;
  Bf = 1, $o = n;
  function n(e) {
    return e.toLowerCase();
  }
  return $o;
}
var Do, Lf;
function Dg() {
  if (Lf) return Do;
  Lf = 1, Do = e;
  var n = e.prototype;
  n.space = null, n.attribute = null, n.property = null, n.boolean = !1, n.booleanish = !1, n.overloadedBoolean = !1, n.number = !1, n.commaSeparated = !1, n.spaceSeparated = !1, n.commaOrSpaceSeparated = !1, n.mustUseProperty = !1, n.defined = !1;
  function e(t, r) {
    this.property = t, this.attribute = r;
  }
  return Do;
}
var Ln = {}, qf;
function $h() {
  if (qf) return Ln;
  qf = 1;
  var n = 0;
  Ln.boolean = e(), Ln.booleanish = e(), Ln.overloadedBoolean = e(), Ln.number = e(), Ln.spaceSeparated = e(), Ln.commaSeparated = e(), Ln.commaOrSpaceSeparated = e();
  function e() {
    return Math.pow(2, ++n);
  }
  return Ln;
}
var To, Xf;
function Tg() {
  if (Xf) return To;
  Xf = 1;
  var n = Dg(), e = $h();
  To = i, i.prototype = new n(), i.prototype.defined = !0;
  var t = [
    "boolean",
    "booleanish",
    "overloadedBoolean",
    "number",
    "commaSeparated",
    "spaceSeparated",
    "commaOrSpaceSeparated"
  ], r = t.length;
  function i(l, a, o, u) {
    var h = -1, c;
    for (s(this, "space", u), n.call(this, l, a); ++h < r; )
      c = t[h], s(this, c, (o & e[c]) === e[c]);
  }
  function s(l, a, o) {
    o && (l[a] = o);
  }
  return To;
}
var Mo, If;
function Bs() {
  if (If) return Mo;
  If = 1;
  var n = Ah(), e = $g(), t = Tg();
  Mo = r;
  function r(i) {
    var s = i.space, l = i.mustUseProperty || [], a = i.attributes || {}, o = i.properties, u = i.transform, h = {}, c = {}, f, d;
    for (f in o)
      d = new t(
        f,
        u(a, f),
        o[f],
        s
      ), l.indexOf(f) !== -1 && (d.mustUseProperty = !0), h[f] = d, c[n(f)] = f, c[n(d.attribute)] = f;
    return new e(h, c, s);
  }
  return Mo;
}
var Eo, Nf;
function _v() {
  if (Nf) return Eo;
  Nf = 1;
  var n = Bs();
  Eo = n({
    space: "xlink",
    transform: e,
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    }
  });
  function e(t, r) {
    return "xlink:" + r.slice(5).toLowerCase();
  }
  return Eo;
}
var Ro, Vf;
function Uv() {
  if (Vf) return Ro;
  Vf = 1;
  var n = Bs();
  Ro = n({
    space: "xml",
    transform: e,
    properties: {
      xmlLang: null,
      xmlBase: null,
      xmlSpace: null
    }
  });
  function e(t, r) {
    return "xml:" + r.slice(3).toLowerCase();
  }
  return Ro;
}
var Zo, jf;
function Wv() {
  if (jf) return Zo;
  jf = 1, Zo = n;
  function n(e, t) {
    return t in e ? e[t] : t;
  }
  return Zo;
}
var zo, _f;
function Mg() {
  if (_f) return zo;
  _f = 1;
  var n = Wv();
  zo = e;
  function e(t, r) {
    return n(t, r.toLowerCase());
  }
  return zo;
}
var Fo, Uf;
function Yv() {
  if (Uf) return Fo;
  Uf = 1;
  var n = Bs(), e = Mg();
  return Fo = n({
    space: "xmlns",
    attributes: {
      xmlnsxlink: "xmlns:xlink"
    },
    transform: e,
    properties: {
      xmlns: null,
      xmlnsXLink: null
    }
  }), Fo;
}
var Bo, Wf;
function Gv() {
  if (Wf) return Bo;
  Wf = 1;
  var n = $h(), e = Bs(), t = n.booleanish, r = n.number, i = n.spaceSeparated;
  Bo = e({
    transform: s,
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: t,
      ariaAutoComplete: null,
      ariaBusy: t,
      ariaChecked: t,
      ariaColCount: r,
      ariaColIndex: r,
      ariaColSpan: r,
      ariaControls: i,
      ariaCurrent: null,
      ariaDescribedBy: i,
      ariaDetails: null,
      ariaDisabled: t,
      ariaDropEffect: i,
      ariaErrorMessage: null,
      ariaExpanded: t,
      ariaFlowTo: i,
      ariaGrabbed: t,
      ariaHasPopup: null,
      ariaHidden: t,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: i,
      ariaLevel: r,
      ariaLive: null,
      ariaModal: t,
      ariaMultiLine: t,
      ariaMultiSelectable: t,
      ariaOrientation: null,
      ariaOwns: i,
      ariaPlaceholder: null,
      ariaPosInSet: r,
      ariaPressed: t,
      ariaReadOnly: t,
      ariaRelevant: null,
      ariaRequired: t,
      ariaRoleDescription: i,
      ariaRowCount: r,
      ariaRowIndex: r,
      ariaRowSpan: r,
      ariaSelected: t,
      ariaSetSize: r,
      ariaSort: null,
      ariaValueMax: r,
      ariaValueMin: r,
      ariaValueNow: r,
      ariaValueText: null,
      role: null
    }
  });
  function s(l, a) {
    return a === "role" ? a : "aria-" + a.slice(4).toLowerCase();
  }
  return Bo;
}
var Lo, Yf;
function Hv() {
  if (Yf) return Lo;
  Yf = 1;
  var n = $h(), e = Bs(), t = Mg(), r = n.boolean, i = n.overloadedBoolean, s = n.booleanish, l = n.number, a = n.spaceSeparated, o = n.commaSeparated;
  return Lo = e({
    space: "html",
    attributes: {
      acceptcharset: "accept-charset",
      classname: "class",
      htmlfor: "for",
      httpequiv: "http-equiv"
    },
    transform: t,
    mustUseProperty: ["checked", "multiple", "muted", "selected"],
    properties: {
      // Standard Properties.
      abbr: null,
      accept: o,
      acceptCharset: a,
      accessKey: a,
      action: null,
      allow: null,
      allowFullScreen: r,
      allowPaymentRequest: r,
      allowUserMedia: r,
      alt: null,
      as: null,
      async: r,
      autoCapitalize: null,
      autoComplete: a,
      autoFocus: r,
      autoPlay: r,
      capture: r,
      charSet: null,
      checked: r,
      cite: null,
      className: a,
      cols: l,
      colSpan: null,
      content: null,
      contentEditable: s,
      controls: r,
      controlsList: a,
      coords: l | o,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: r,
      defer: r,
      dir: null,
      dirName: null,
      disabled: r,
      download: i,
      draggable: s,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: r,
      formTarget: null,
      headers: a,
      height: l,
      hidden: r,
      high: l,
      href: null,
      hrefLang: null,
      htmlFor: a,
      httpEquiv: a,
      id: null,
      imageSizes: null,
      imageSrcSet: o,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: r,
      itemId: null,
      itemProp: a,
      itemRef: a,
      itemScope: r,
      itemType: a,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: r,
      low: l,
      manifest: null,
      max: null,
      maxLength: l,
      media: null,
      method: null,
      min: null,
      minLength: l,
      multiple: r,
      muted: r,
      name: null,
      nonce: null,
      noModule: r,
      noValidate: r,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextMenu: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: r,
      optimum: l,
      pattern: null,
      ping: a,
      placeholder: null,
      playsInline: r,
      poster: null,
      preload: null,
      readOnly: r,
      referrerPolicy: null,
      rel: a,
      required: r,
      reversed: r,
      rows: l,
      rowSpan: l,
      sandbox: a,
      scope: null,
      scoped: r,
      seamless: r,
      selected: r,
      shape: null,
      size: l,
      sizes: null,
      slot: null,
      span: l,
      spellCheck: s,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: o,
      start: l,
      step: null,
      style: null,
      tabIndex: l,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: r,
      useMap: null,
      value: s,
      width: l,
      wrap: null,
      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null,
      // Several. Use CSS `text-align` instead,
      aLink: null,
      // `<body>`. Use CSS `a:active {color}` instead
      archive: a,
      // `<object>`. List of URIs to archives
      axis: null,
      // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null,
      // `<body>`. Use CSS `background-image` instead
      bgColor: null,
      // `<body>` and table elements. Use CSS `background-color` instead
      border: l,
      // `<table>`. Use CSS `border-width` instead,
      borderColor: null,
      // `<table>`. Use CSS `border-color` instead,
      bottomMargin: l,
      // `<body>`
      cellPadding: null,
      // `<table>`
      cellSpacing: null,
      // `<table>`
      char: null,
      // Several table elements. When `align=char`, sets the character to align on
      charOff: null,
      // Several table elements. When `char`, offsets the alignment
      classId: null,
      // `<object>`
      clear: null,
      // `<br>`. Use CSS `clear` instead
      code: null,
      // `<object>`
      codeBase: null,
      // `<object>`
      codeType: null,
      // `<object>`
      color: null,
      // `<font>` and `<hr>`. Use CSS instead
      compact: r,
      // Lists. Use CSS to reduce space between items instead
      declare: r,
      // `<object>`
      event: null,
      // `<script>`
      face: null,
      // `<font>`. Use CSS instead
      frame: null,
      // `<table>`
      frameBorder: null,
      // `<iframe>`. Use CSS `border` instead
      hSpace: l,
      // `<img>` and `<object>`
      leftMargin: l,
      // `<body>`
      link: null,
      // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null,
      // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null,
      // `<img>`. Use a `<picture>`
      marginHeight: l,
      // `<body>`
      marginWidth: l,
      // `<body>`
      noResize: r,
      // `<frame>`
      noHref: r,
      // `<area>`. Use no href instead of an explicit `nohref`
      noShade: r,
      // `<hr>`. Use background-color and height instead of borders
      noWrap: r,
      // `<td>` and `<th>`
      object: null,
      // `<applet>`
      profile: null,
      // `<head>`
      prompt: null,
      // `<isindex>`
      rev: null,
      // `<link>`
      rightMargin: l,
      // `<body>`
      rules: null,
      // `<table>`
      scheme: null,
      // `<meta>`
      scrolling: s,
      // `<frame>`. Use overflow in the child context
      standby: null,
      // `<object>`
      summary: null,
      // `<table>`
      text: null,
      // `<body>`. Use CSS `color` instead
      topMargin: l,
      // `<body>`
      valueType: null,
      // `<param>`
      version: null,
      // `<html>`. Use a doctype.
      vAlign: null,
      // Several. Use CSS `vertical-align` instead
      vLink: null,
      // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: l,
      // `<img>` and `<object>`
      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: r,
      disableRemotePlayback: r,
      prefix: null,
      property: null,
      results: l,
      security: null,
      unselectable: null
    }
  }), Lo;
}
var qo, Gf;
function Kv() {
  if (Gf) return qo;
  Gf = 1;
  var n = jv(), e = _v(), t = Uv(), r = Yv(), i = Gv(), s = Hv();
  return qo = n([t, e, r, i, s]), qo;
}
var Xo, Hf;
function Jv() {
  if (Hf) return Xo;
  Hf = 1;
  var n = Ah(), e = Tg(), t = Dg(), r = "data";
  Xo = a;
  var i = /^data[-\w.:]+$/i, s = /-[a-z]/g, l = /[A-Z]/g;
  function a(f, d) {
    var m = n(d), O = d, x = t;
    return m in f.normal ? f.property[f.normal[m]] : (m.length > 4 && m.slice(0, 4) === r && i.test(d) && (d.charAt(4) === "-" ? O = o(d) : d = u(d), x = e), new x(O, d));
  }
  function o(f) {
    var d = f.slice(5).replace(s, c);
    return r + d.charAt(0).toUpperCase() + d.slice(1);
  }
  function u(f) {
    var d = f.slice(4);
    return s.test(d) ? f : (d = d.replace(l, h), d.charAt(0) !== "-" && (d = "-" + d), r + d);
  }
  function h(f) {
    return "-" + f.toLowerCase();
  }
  function c(f) {
    return f.charAt(1).toUpperCase();
  }
  return Xo;
}
var Io, Kf;
function ew() {
  if (Kf) return Io;
  Kf = 1, Io = e;
  var n = /[#.]/g;
  function e(t, r) {
    for (var i = t || "", s = r || "div", l = {}, a = 0, o, u, h; a < i.length; )
      n.lastIndex = a, h = n.exec(i), o = i.slice(a, h ? h.index : i.length), o && (u ? u === "#" ? l.id = o : l.className ? l.className.push(o) : l.className = [o] : s = o, a += o.length), h && (u = h[0], a++);
    return { type: "element", tagName: s, properties: l, children: [] };
  }
  return Io;
}
var hl = {}, Jf;
function tw() {
  if (Jf) return hl;
  Jf = 1, hl.parse = r, hl.stringify = i;
  var n = "", e = " ", t = /[ \t\n\r\f]+/g;
  function r(s) {
    var l = String(s || n).trim();
    return l === n ? [] : l.split(t);
  }
  function i(s) {
    return s.join(e).trim();
  }
  return hl;
}
var cl = {}, ed;
function nw() {
  if (ed) return cl;
  ed = 1, cl.parse = r, cl.stringify = i;
  var n = ",", e = " ", t = "";
  function r(s) {
    for (var l = [], a = String(s || t), o = a.indexOf(n), u = 0, h = !1, c; !h; )
      o === -1 && (o = a.length, h = !0), c = a.slice(u, o).trim(), (c || !h) && l.push(c), u = o + 1, o = a.indexOf(n, u);
    return l;
  }
  function i(s, l) {
    var a = l || {}, o = a.padLeft === !1 ? t : e, u = a.padRight ? e : t;
    return s[s.length - 1] === t && (s = s.concat(t)), s.join(u + n + o).trim();
  }
  return cl;
}
var No, td;
function rw() {
  if (td) return No;
  td = 1;
  var n = Jv(), e = Ah(), t = ew(), r = tw().parse, i = nw().parse;
  No = l;
  var s = {}.hasOwnProperty;
  function l(m, O, x) {
    var b = x ? d(x) : null;
    return w;
    function w(Z, T) {
      var S = t(Z, O), E = Array.prototype.slice.call(arguments, 2), N = S.tagName.toLowerCase(), z;
      if (S.tagName = b && s.call(b, N) ? b[N] : N, T && a(T, S) && (E.unshift(T), T = null), T)
        for (z in T)
          C(S.properties, z, T[z]);
      return u(S.children, E), S.tagName === "template" && (S.content = { type: "root", children: S.children }, S.children = []), S;
    }
    function C(Z, T, S) {
      var E, N, z;
      S == null || S !== S || (E = n(m, T), N = E.property, z = S, typeof z == "string" && (E.spaceSeparated ? z = r(z) : E.commaSeparated ? z = i(z) : E.commaOrSpaceSeparated && (z = r(i(z).join(" ")))), N === "style" && typeof S != "string" && (z = f(z)), N === "className" && Z.className && (z = Z.className.concat(z)), Z[N] = h(E, N, z));
    }
  }
  function a(m, O) {
    return typeof m == "string" || "length" in m || o(O.tagName, m);
  }
  function o(m, O) {
    var x = O.type;
    return m === "input" || !x || typeof x != "string" ? !1 : typeof O.children == "object" && "length" in O.children ? !0 : (x = x.toLowerCase(), m === "button" ? x !== "menu" && x !== "submit" && x !== "reset" && x !== "button" : "value" in O);
  }
  function u(m, O) {
    var x, b;
    if (typeof O == "string" || typeof O == "number") {
      m.push({ type: "text", value: String(O) });
      return;
    }
    if (typeof O == "object" && "length" in O) {
      for (x = -1, b = O.length; ++x < b; )
        u(m, O[x]);
      return;
    }
    if (typeof O != "object" || !("type" in O))
      throw new Error("Expected node, nodes, or string, got `" + O + "`");
    m.push(O);
  }
  function h(m, O, x) {
    var b, w, C;
    if (typeof x != "object" || !("length" in x))
      return c(m, O, x);
    for (w = x.length, b = -1, C = []; ++b < w; )
      C[b] = c(m, O, x[b]);
    return C;
  }
  function c(m, O, x) {
    var b = x;
    return m.number || m.positiveNumber ? !isNaN(b) && b !== "" && (b = Number(b)) : (m.boolean || m.overloadedBoolean) && typeof b == "string" && (b === "" || e(x) === e(O)) && (b = !0), b;
  }
  function f(m) {
    var O = [], x;
    for (x in m)
      O.push([x, m[x]].join(": "));
    return O.join("; ");
  }
  function d(m) {
    for (var O = m.length, x = -1, b = {}, w; ++x < O; )
      w = m[x], b[w.toLowerCase()] = w;
    return b;
  }
  return No;
}
var Vo, nd;
function iw() {
  if (nd) return Vo;
  nd = 1;
  var n = Kv(), e = rw(), t = e(n, "div");
  return t.displayName = "html", Vo = t, Vo;
}
var jo, rd;
function sw() {
  return rd || (rd = 1, jo = iw()), jo;
}
var _o, id;
function lw() {
  if (id) return _o;
  id = 1;
  const n = Nv(), e = sw();
  function t(r) {
    const i = r && r.className || "rehype-figure";
    function s({ properties: l }) {
      return e("figure", { class: i }, [
        e("img", { ...l }),
        l.alt && l.alt.trim().length > 0 ? e("figcaption", l.alt) : ""
      ]);
    }
    return function(l) {
      n(l, { tagName: "p" }, (a, o) => {
        const u = a.children.filter((h) => h.tagName === "img").map((h) => s(h));
        u.length !== 0 && (l.children[o] = u.length === 1 ? u[0] : l.children[o] = e(
          "div",
          { class: `${i}-container` },
          u
        ));
      });
    };
  }
  return _o = t, _o;
}
var aw = lw();
const ow = /* @__PURE__ */ Dm(aw);
let Ls = class {
  /**
   * @param {SchemaType['property']} property
   *   Property.
   * @param {SchemaType['normal']} normal
   *   Normal.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Schema.
   */
  constructor(e, t, r) {
    this.normal = t, this.property = e, r && (this.space = r);
  }
};
Ls.prototype.normal = {};
Ls.prototype.property = {};
Ls.prototype.space = void 0;
function Eg(n, e) {
  const t = {}, r = {};
  for (const i of n)
    Object.assign(t, i.property), Object.assign(r, i.normal);
  return new Ls(t, r, e);
}
function ds(n) {
  return n.toLowerCase();
}
let Tt = class {
  /**
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @returns
   *   Info.
   */
  constructor(e, t) {
    this.attribute = t, this.property = e;
  }
};
Tt.prototype.attribute = "";
Tt.prototype.booleanish = !1;
Tt.prototype.boolean = !1;
Tt.prototype.commaOrSpaceSeparated = !1;
Tt.prototype.commaSeparated = !1;
Tt.prototype.defined = !1;
Tt.prototype.mustUseProperty = !1;
Tt.prototype.number = !1;
Tt.prototype.overloadedBoolean = !1;
Tt.prototype.property = "";
Tt.prototype.spaceSeparated = !1;
Tt.prototype.space = void 0;
let uw = 0;
const fe = Ir(), et = Ir(), Rg = Ir(), V = Ir(), Ze = Ir(), ni = Ir(), zt = Ir();
function Ir() {
  return 2 ** ++uw;
}
const Uu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  boolean: fe,
  booleanish: et,
  commaOrSpaceSeparated: zt,
  commaSeparated: ni,
  number: V,
  overloadedBoolean: Rg,
  spaceSeparated: Ze
}, Symbol.toStringTag, { value: "Module" })), Uo = (
  /** @type {ReadonlyArray<keyof typeof types>} */
  Object.keys(Uu)
);
let Dh = class extends Tt {
  /**
   * @constructor
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @param {number | null | undefined} [mask]
   *   Mask.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Info.
   */
  constructor(e, t, r, i) {
    let s = -1;
    if (super(e, t), sd(this, "space", i), typeof r == "number")
      for (; ++s < Uo.length; ) {
        const l = Uo[s];
        sd(this, Uo[s], (r & Uu[l]) === Uu[l]);
      }
  }
};
Dh.prototype.defined = !0;
function sd(n, e, t) {
  t && (n[e] = t);
}
function Pi(n) {
  const e = {}, t = {};
  for (const [r, i] of Object.entries(n.properties)) {
    const s = new Dh(
      r,
      n.transform(n.attributes || {}, r),
      i,
      n.space
    );
    n.mustUseProperty && n.mustUseProperty.includes(r) && (s.mustUseProperty = !0), e[r] = s, t[ds(r)] = r, t[ds(s.attribute)] = r;
  }
  return new Ls(e, t, n.space);
}
const Zg = Pi({
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: et,
    ariaAutoComplete: null,
    ariaBusy: et,
    ariaChecked: et,
    ariaColCount: V,
    ariaColIndex: V,
    ariaColSpan: V,
    ariaControls: Ze,
    ariaCurrent: null,
    ariaDescribedBy: Ze,
    ariaDetails: null,
    ariaDisabled: et,
    ariaDropEffect: Ze,
    ariaErrorMessage: null,
    ariaExpanded: et,
    ariaFlowTo: Ze,
    ariaGrabbed: et,
    ariaHasPopup: null,
    ariaHidden: et,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: Ze,
    ariaLevel: V,
    ariaLive: null,
    ariaModal: et,
    ariaMultiLine: et,
    ariaMultiSelectable: et,
    ariaOrientation: null,
    ariaOwns: Ze,
    ariaPlaceholder: null,
    ariaPosInSet: V,
    ariaPressed: et,
    ariaReadOnly: et,
    ariaRelevant: null,
    ariaRequired: et,
    ariaRoleDescription: Ze,
    ariaRowCount: V,
    ariaRowIndex: V,
    ariaRowSpan: V,
    ariaSelected: et,
    ariaSetSize: V,
    ariaSort: null,
    ariaValueMax: V,
    ariaValueMin: V,
    ariaValueNow: V,
    ariaValueText: null,
    role: null
  },
  transform(n, e) {
    return e === "role" ? e : "aria-" + e.slice(4).toLowerCase();
  }
});
function zg(n, e) {
  return e in n ? n[e] : e;
}
function Fg(n, e) {
  return zg(n, e.toLowerCase());
}
const hw = Pi({
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: ni,
    acceptCharset: Ze,
    accessKey: Ze,
    action: null,
    allow: null,
    allowFullScreen: fe,
    allowPaymentRequest: fe,
    allowUserMedia: fe,
    alt: null,
    as: null,
    async: fe,
    autoCapitalize: null,
    autoComplete: Ze,
    autoFocus: fe,
    autoPlay: fe,
    blocking: Ze,
    capture: null,
    charSet: null,
    checked: fe,
    cite: null,
    className: Ze,
    cols: V,
    colSpan: null,
    content: null,
    contentEditable: et,
    controls: fe,
    controlsList: Ze,
    coords: V | ni,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: fe,
    defer: fe,
    dir: null,
    dirName: null,
    disabled: fe,
    download: Rg,
    draggable: et,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: fe,
    formTarget: null,
    headers: Ze,
    height: V,
    hidden: fe,
    high: V,
    href: null,
    hrefLang: null,
    htmlFor: Ze,
    httpEquiv: Ze,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: fe,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: fe,
    itemId: null,
    itemProp: Ze,
    itemRef: Ze,
    itemScope: fe,
    itemType: Ze,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: fe,
    low: V,
    manifest: null,
    max: null,
    maxLength: V,
    media: null,
    method: null,
    min: null,
    minLength: V,
    multiple: fe,
    muted: fe,
    name: null,
    nonce: null,
    noModule: fe,
    noValidate: fe,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: fe,
    optimum: V,
    pattern: null,
    ping: Ze,
    placeholder: null,
    playsInline: fe,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: fe,
    referrerPolicy: null,
    rel: Ze,
    required: fe,
    reversed: fe,
    rows: V,
    rowSpan: V,
    sandbox: Ze,
    scope: null,
    scoped: fe,
    seamless: fe,
    selected: fe,
    shadowRootClonable: fe,
    shadowRootDelegatesFocus: fe,
    shadowRootMode: null,
    shape: null,
    size: V,
    sizes: null,
    slot: null,
    span: V,
    spellCheck: et,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: V,
    step: null,
    style: null,
    tabIndex: V,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: fe,
    useMap: null,
    value: et,
    width: V,
    wrap: null,
    writingSuggestions: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: Ze,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: V,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: V,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: fe,
    // Lists. Use CSS to reduce space between items instead
    declare: fe,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: V,
    // `<img>` and `<object>`
    leftMargin: V,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: V,
    // `<body>`
    marginWidth: V,
    // `<body>`
    noResize: fe,
    // `<frame>`
    noHref: fe,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: fe,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: fe,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: V,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: et,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: V,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: V,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: fe,
    disableRemotePlayback: fe,
    prefix: null,
    property: null,
    results: V,
    security: null,
    unselectable: null
  },
  space: "html",
  transform: Fg
}), cw = Pi({
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  properties: {
    about: zt,
    accentHeight: V,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: V,
    amplitude: V,
    arabicForm: null,
    ascent: V,
    attributeName: null,
    attributeType: null,
    azimuth: V,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: V,
    by: null,
    calcMode: null,
    capHeight: V,
    className: Ze,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: V,
    diffuseConstant: V,
    direction: null,
    display: null,
    dur: null,
    divisor: V,
    dominantBaseline: null,
    download: fe,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: V,
    enableBackground: null,
    end: null,
    event: null,
    exponent: V,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: V,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: ni,
    g2: ni,
    glyphName: ni,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: V,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: V,
    horizOriginX: V,
    horizOriginY: V,
    id: null,
    ideographic: V,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: V,
    k: V,
    k1: V,
    k2: V,
    k3: V,
    k4: V,
    kernelMatrix: zt,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: V,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: V,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: V,
    overlineThickness: V,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: V,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: Ze,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: V,
    pointsAtY: V,
    pointsAtZ: V,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: zt,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: zt,
    rev: zt,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: zt,
    requiredFeatures: zt,
    requiredFonts: zt,
    requiredFormats: zt,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: V,
    specularExponent: V,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: V,
    strikethroughThickness: V,
    string: null,
    stroke: null,
    strokeDashArray: zt,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: V,
    strokeOpacity: V,
    strokeWidth: null,
    style: null,
    surfaceScale: V,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: zt,
    tabIndex: V,
    tableValues: null,
    target: null,
    targetX: V,
    targetY: V,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: zt,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: V,
    underlineThickness: V,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: V,
    values: null,
    vAlphabetic: V,
    vMathematical: V,
    vectorEffect: null,
    vHanging: V,
    vIdeographic: V,
    version: null,
    vertAdvY: V,
    vertOriginX: V,
    vertOriginY: V,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: V,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  },
  space: "svg",
  transform: zg
}), Bg = Pi({
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  },
  space: "xlink",
  transform(n, e) {
    return "xlink:" + e.slice(5).toLowerCase();
  }
}), Lg = Pi({
  attributes: { xmlnsxlink: "xmlns:xlink" },
  properties: { xmlnsXLink: null, xmlns: null },
  space: "xmlns",
  transform: Fg
}), qg = Pi({
  properties: { xmlBase: null, xmlLang: null, xmlSpace: null },
  space: "xml",
  transform(n, e) {
    return "xml:" + e.slice(3).toLowerCase();
  }
}), fw = /[A-Z]/g, ld = /-[a-z]/g, dw = /^data[-\w.:]+$/i;
function pw(n, e) {
  const t = ds(e);
  let r = e, i = Tt;
  if (t in n.normal)
    return n.property[n.normal[t]];
  if (t.length > 4 && t.slice(0, 4) === "data" && dw.test(e)) {
    if (e.charAt(4) === "-") {
      const s = e.slice(5).replace(ld, gw);
      r = "data" + s.charAt(0).toUpperCase() + s.slice(1);
    } else {
      const s = e.slice(4);
      if (!ld.test(s)) {
        let l = s.replace(fw, mw);
        l.charAt(0) !== "-" && (l = "-" + l), e = "data" + l;
      }
    }
    i = Dh;
  }
  return new i(r, e);
}
function mw(n) {
  return "-" + n.toLowerCase();
}
function gw(n) {
  return n.charAt(1).toUpperCase();
}
const Ow = Eg([Zg, hw, Bg, Lg, qg], "html"), yw = Eg([Zg, cw, Bg, Lg, qg], "svg");
function ad(n) {
  const e = [], t = String(n || "");
  let r = t.indexOf(","), i = 0, s = !1;
  for (; !s; ) {
    r === -1 && (r = t.length, s = !0);
    const l = t.slice(i, r).trim();
    (l || !s) && e.push(l), i = r + 1, r = t.indexOf(",", i);
  }
  return e;
}
const od = /[#.]/g;
function bw(n, e) {
  const t = n || "", r = {};
  let i = 0, s, l;
  for (; i < t.length; ) {
    od.lastIndex = i;
    const a = od.exec(t), o = t.slice(i, a ? a.index : t.length);
    o && (s ? s === "#" ? r.id = o : Array.isArray(r.className) ? r.className.push(o) : r.className = [o] : l = o, i += o.length), a && (s = a[0], i++);
  }
  return {
    type: "element",
    // @ts-expect-error: tag name is parsed.
    tagName: l || e || "div",
    properties: r,
    children: []
  };
}
function Xg(n, e, t) {
  const r = t ? kw(t) : void 0;
  function i(s, l, ...a) {
    let o;
    if (s == null) {
      o = { type: "root", children: [] };
      const u = (
        /** @type {Child} */
        l
      );
      a.unshift(u);
    } else {
      o = bw(s, e);
      const u = o.tagName.toLowerCase(), h = r ? r.get(u) : void 0;
      if (o.tagName = h || u, xw(l))
        a.unshift(l);
      else
        for (const [c, f] of Object.entries(l))
          vw(n, o.properties, c, f);
    }
    for (const u of a)
      Wu(o.children, u);
    return o.type === "element" && o.tagName === "template" && (o.content = { type: "root", children: o.children }, o.children = []), o;
  }
  return i;
}
function xw(n) {
  if (n === null || typeof n != "object" || Array.isArray(n))
    return !0;
  if (typeof n.type != "string") return !1;
  const e = (
    /** @type {Record<string, unknown>} */
    n
  ), t = Object.keys(n);
  for (const r of t) {
    const i = e[r];
    if (i && typeof i == "object") {
      if (!Array.isArray(i)) return !0;
      const s = (
        /** @type {ReadonlyArray<unknown>} */
        i
      );
      for (const l of s)
        if (typeof l != "number" && typeof l != "string")
          return !0;
    }
  }
  return !!("children" in n && Array.isArray(n.children));
}
function vw(n, e, t, r) {
  const i = pw(n, t);
  let s;
  if (r != null) {
    if (typeof r == "number") {
      if (Number.isNaN(r)) return;
      s = r;
    } else typeof r == "boolean" ? s = r : typeof r == "string" ? i.spaceSeparated ? s = _u(r) : i.commaSeparated ? s = ad(r) : i.commaOrSpaceSeparated ? s = _u(ad(r).join(" ")) : s = ud(i, i.property, r) : Array.isArray(r) ? s = [...r] : s = i.property === "style" ? ww(r) : String(r);
    if (Array.isArray(s)) {
      const l = [];
      for (const a of s)
        l.push(
          /** @type {number | string} */
          ud(i, i.property, a)
        );
      s = l;
    }
    i.property === "className" && Array.isArray(e.className) && (s = e.className.concat(
      /** @type {Array<number | string> | number | string} */
      s
    )), e[i.property] = s;
  }
}
function Wu(n, e) {
  if (e != null) if (typeof e == "number" || typeof e == "string")
    n.push({ type: "text", value: String(e) });
  else if (Array.isArray(e))
    for (const t of e)
      Wu(n, t);
  else if (typeof e == "object" && "type" in e)
    e.type === "root" ? Wu(n, e.children) : n.push(e);
  else
    throw new Error("Expected node, nodes, or string, got `" + e + "`");
}
function ud(n, e, t) {
  if (typeof t == "string") {
    if (n.number && t && !Number.isNaN(Number(t)))
      return Number(t);
    if ((n.boolean || n.overloadedBoolean) && (t === "" || ds(t) === ds(e)))
      return !0;
  }
  return t;
}
function ww(n) {
  const e = [];
  for (const [t, r] of Object.entries(n))
    e.push([t, r].join(": "));
  return e.join("; ");
}
function kw(n) {
  const e = /* @__PURE__ */ new Map();
  for (const t of n)
    e.set(t.toLowerCase(), t);
  return e;
}
const Sw = [
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "solidColor",
  "textArea",
  "textPath"
], Qw = Xg(Ow, "div"), Pw = Xg(yw, "g", Sw), Wo = {
  html: "http://www.w3.org/1999/xhtml",
  svg: "http://www.w3.org/2000/svg"
};
function Cw(n, e) {
  return Ig(n, {}) || { type: "root", children: [] };
}
function Ig(n, e) {
  const t = Aw(n, e);
  return t && e.afterTransform && e.afterTransform(n, t), t;
}
function Aw(n, e) {
  switch (n.nodeType) {
    case 1:
      return Mw(
        /** @type {Element} */
        n,
        e
      );
    // Ignore: Attr (2).
    case 3:
      return Dw(
        /** @type {Text} */
        n
      );
    // Ignore: CDATA (4).
    // Removed: Entity reference (5)
    // Removed: Entity (6)
    // Ignore: Processing instruction (7).
    case 8:
      return Tw(
        /** @type {Comment} */
        n
      );
    case 9:
      return hd(
        /** @type {Document} */
        n,
        e
      );
    case 10:
      return $w();
    case 11:
      return hd(
        /** @type {DocumentFragment} */
        n,
        e
      );
    default:
      return;
  }
}
function hd(n, e) {
  return { type: "root", children: Ng(n, e) };
}
function $w() {
  return { type: "doctype" };
}
function Dw(n) {
  return { type: "text", value: n.nodeValue || "" };
}
function Tw(n) {
  return { type: "comment", value: n.nodeValue || "" };
}
function Mw(n, e) {
  const t = n.namespaceURI, r = t === Wo.svg ? Pw : Qw, i = t === Wo.html ? n.tagName.toLowerCase() : n.tagName, s = (
    // @ts-expect-error: DOM types are wrong, content can exist.
    t === Wo.html && i === "template" ? n.content : n
  ), l = n.getAttributeNames(), a = {};
  let o = -1;
  for (; ++o < l.length; )
    a[l[o]] = n.getAttribute(l[o]) || "";
  return r(i, a, Ng(s, e));
}
function Ng(n, e) {
  const t = n.childNodes, r = [];
  let i = -1;
  for (; ++i < t.length; ) {
    const s = Ig(t[i], e);
    s !== void 0 && r.push(s);
  }
  return r;
}
new DOMParser();
function Ew(n, e) {
  const t = Rw(n);
  return (
    /** @type {Root} */
    Cw(t)
  );
}
function Rw(n) {
  const e = document.createElement("template");
  return e.innerHTML = n, e.content;
}
const cd = (
  // Note: overloads like this are needed to support optional generics.
  /**
   * @type {(
   *   (<Kind extends UnistParent, Check extends Test>(parent: Kind, index: Child<Kind> | number, test: Check) => Matches<Child<Kind>, Check> | undefined) &
   *   (<Kind extends UnistParent>(parent: Kind, index: Child<Kind> | number, test?: null | undefined) => Child<Kind> | undefined)
   * )}
   */
  /**
   * @param {UnistParent} parent
   * @param {UnistNode | number} index
   * @param {Test} [test]
   * @returns {UnistNode | undefined}
   */
  function(n, e, t) {
    const r = Rs(t);
    if (!n || !n.type || !n.children)
      throw new Error("Expected parent node");
    if (typeof e == "number") {
      if (e < 0 || e === Number.POSITIVE_INFINITY)
        throw new Error("Expected positive finite number as index");
    } else if (e = n.children.indexOf(e), e < 0)
      throw new Error("Expected child node or index");
    for (; ++e < n.children.length; )
      if (r(n.children[e], e, n))
        return n.children[e];
  }
), fd = /\n/g, dd = /[\t ]+/g, Yu = kr("br"), pd = kr(Iw), Zw = kr("p"), md = kr("tr"), zw = kr([
  // List from: <https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements>
  "datalist",
  "head",
  "noembed",
  "noframes",
  "noscript",
  // Act as if we support scripting.
  "rp",
  "script",
  "style",
  "template",
  "title",
  // Hidden attribute.
  Xw,
  // From: <https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3>
  Nw
]), Vg = kr([
  "address",
  // Flow content
  "article",
  // Sections and headings
  "aside",
  // Sections and headings
  "blockquote",
  // Flow content
  "body",
  // Page
  "caption",
  // `table-caption`
  "center",
  // Flow content (legacy)
  "dd",
  // Lists
  "dialog",
  // Flow content
  "dir",
  // Lists (legacy)
  "dl",
  // Lists
  "dt",
  // Lists
  "div",
  // Flow content
  "figure",
  // Flow content
  "figcaption",
  // Flow content
  "footer",
  // Flow content
  "form,",
  // Flow content
  "h1",
  // Sections and headings
  "h2",
  // Sections and headings
  "h3",
  // Sections and headings
  "h4",
  // Sections and headings
  "h5",
  // Sections and headings
  "h6",
  // Sections and headings
  "header",
  // Flow content
  "hgroup",
  // Sections and headings
  "hr",
  // Flow content
  "html",
  // Page
  "legend",
  // Flow content
  "li",
  // Lists (as `display: list-item`)
  "listing",
  // Flow content (legacy)
  "main",
  // Flow content
  "menu",
  // Lists
  "nav",
  // Sections and headings
  "ol",
  // Lists
  "p",
  // Flow content
  "plaintext",
  // Flow content (legacy)
  "pre",
  // Flow content
  "section",
  // Sections and headings
  "ul",
  // Lists
  "xmp"
  // Flow content (legacy)
]);
function Fw(n, e) {
  const t = e || {}, r = "children" in n ? n.children : [], i = Vg(n), s = Ug(n, {
    whitespace: t.whitespace || "normal"
  }), l = [];
  (n.type === "text" || n.type === "comment") && l.push(
    ..._g(n, {
      breakBefore: !0,
      breakAfter: !0
    })
  );
  let a = -1;
  for (; ++a < r.length; )
    l.push(
      ...jg(
        r[a],
        // @ts-expect-error: `tree` is a parent if we’re here.
        n,
        {
          whitespace: s,
          breakBefore: a ? void 0 : i,
          breakAfter: a < r.length - 1 ? Yu(r[a + 1]) : i
        }
      )
    );
  const o = [];
  let u;
  for (a = -1; ++a < l.length; ) {
    const h = l[a];
    typeof h == "number" ? u !== void 0 && h > u && (u = h) : h && (u !== void 0 && u > -1 && o.push(`
`.repeat(u) || " "), u = -1, o.push(h));
  }
  return o.join("");
}
function jg(n, e, t) {
  return n.type === "element" ? Bw(n, e, t) : n.type === "text" ? t.whitespace === "normal" ? _g(n, t) : Lw(n) : [];
}
function Bw(n, e, t) {
  const r = Ug(n, t), i = n.children || [];
  let s = -1, l = [];
  if (zw(n))
    return l;
  let a, o;
  for (Yu(n) || md(n) && // @ts-expect-error: something up with types of parents.
  cd(e, n, md) ? o = `
` : Zw(n) ? (a = 2, o = 2) : Vg(n) && (a = 1, o = 1); ++s < i.length; )
    l = l.concat(
      jg(i[s], n, {
        whitespace: r,
        breakBefore: s ? void 0 : a,
        breakAfter: s < i.length - 1 ? Yu(i[s + 1]) : o
      })
    );
  return pd(n) && // @ts-expect-error: something up with types of parents.
  cd(e, n, pd) && l.push("	"), a && l.unshift(a), o && l.push(o), l;
}
function _g(n, e) {
  const t = String(n.value), r = [], i = [];
  let s = 0;
  for (; s <= t.length; ) {
    fd.lastIndex = s;
    const o = fd.exec(t), u = o && "index" in o ? o.index : t.length;
    r.push(
      // Any sequence of collapsible spaces and tabs immediately preceding or
      // following a segment break is removed.
      qw(
        // […] ignoring bidi formatting characters (characters with the
        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
        // they were not there.
        t.slice(s, u).replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ""),
        s === 0 ? e.breakBefore : !0,
        u === t.length ? e.breakAfter : !0
      )
    ), s = u + 1;
  }
  let l = -1, a;
  for (; ++l < r.length; )
    r[l].charCodeAt(r[l].length - 1) === 8203 || l < r.length - 1 && r[l + 1].charCodeAt(0) === 8203 ? (i.push(r[l]), a = void 0) : r[l] ? (typeof a == "number" && i.push(a), i.push(r[l]), a = 0) : (l === 0 || l === r.length - 1) && i.push(0);
  return i;
}
function Lw(n) {
  return [String(n.value)];
}
function qw(n, e, t) {
  const r = [];
  let i = 0, s;
  for (; i < n.length; ) {
    dd.lastIndex = i;
    const l = dd.exec(n);
    s = l ? l.index : n.length, !i && !s && l && !e && r.push(""), i !== s && r.push(n.slice(i, s)), i = l ? s + l[0].length : s;
  }
  return i !== s && !t && r.push(""), r.join(" ");
}
function Ug(n, e) {
  if (n.type === "element") {
    const t = n.properties || {};
    switch (n.tagName) {
      case "listing":
      case "plaintext":
      case "xmp":
        return "pre";
      case "nobr":
        return "nowrap";
      case "pre":
        return t.wrap ? "pre-wrap" : "pre";
      case "td":
      case "th":
        return t.noWrap ? "nowrap" : e.whitespace;
      case "textarea":
        return "pre-wrap";
    }
  }
  return e.whitespace;
}
function Xw(n) {
  return !!(n.properties || {}).hidden;
}
function Iw(n) {
  return n.tagName === "td" || n.tagName === "th";
}
function Nw(n) {
  return n.tagName === "dialog" && !(n.properties || {}).open;
}
const Vw = {}, jw = [];
function _w(n) {
  const e = n || Vw;
  return function(t, r) {
    J0(t, "element", function(i, s) {
      const l = Array.isArray(i.properties.className) ? i.properties.className : jw, a = l.includes("language-math"), o = l.includes("math-display"), u = l.includes("math-inline");
      let h = o;
      if (!a && !o && !u)
        return;
      let c = s[s.length - 1], f = i;
      if (i.tagName === "code" && a && c && c.type === "element" && c.tagName === "pre" && (f = c, c = s[s.length - 2], h = !0), !c) return;
      const d = Fw(f, { whitespace: "pre" });
      let m;
      try {
        m = Vu.renderToString(d, {
          ...e,
          displayMode: h,
          throwOnError: !0
        });
      } catch (x) {
        const b = (
          /** @type {Error} */
          x
        ), w = b.name.toLowerCase();
        r.message("Could not render math with KaTeX", {
          ancestors: [...s, i],
          cause: b,
          place: i.position,
          ruleId: w,
          source: "rehype-katex"
        });
        try {
          m = Vu.renderToString(d, {
            ...e,
            displayMode: h,
            strict: "ignore",
            throwOnError: !1
          });
        } catch {
          m = [
            {
              type: "element",
              tagName: "span",
              properties: {
                className: ["katex-error"],
                style: "color:" + (e.errorColor || "#cc0000"),
                title: String(x)
              },
              children: [{ type: "text", value: d }]
            }
          ];
        }
      }
      typeof m == "string" && (m = /** @type {Array<ElementContent>} */
      Ew(m).children);
      const O = c.children.indexOf(f);
      return c.children.splice(O, 1, ...m), _m;
    });
  };
}
const Uw = [
  "area",
  "base",
  "basefont",
  "bgsound",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "image",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
];
let qs = class {
  /**
   * @param {SchemaType['property']} property
   *   Property.
   * @param {SchemaType['normal']} normal
   *   Normal.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Schema.
   */
  constructor(e, t, r) {
    this.normal = t, this.property = e, r && (this.space = r);
  }
};
qs.prototype.normal = {};
qs.prototype.property = {};
qs.prototype.space = void 0;
function Wg(n, e) {
  const t = {}, r = {};
  for (const i of n)
    Object.assign(t, i.property), Object.assign(r, i.normal);
  return new qs(t, r, e);
}
function Gu(n) {
  return n.toLowerCase();
}
class Mt {
  /**
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @returns
   *   Info.
   */
  constructor(e, t) {
    this.attribute = t, this.property = e;
  }
}
Mt.prototype.attribute = "";
Mt.prototype.booleanish = !1;
Mt.prototype.boolean = !1;
Mt.prototype.commaOrSpaceSeparated = !1;
Mt.prototype.commaSeparated = !1;
Mt.prototype.defined = !1;
Mt.prototype.mustUseProperty = !1;
Mt.prototype.number = !1;
Mt.prototype.overloadedBoolean = !1;
Mt.prototype.property = "";
Mt.prototype.spaceSeparated = !1;
Mt.prototype.space = void 0;
let Ww = 0;
const de = Nr(), tt = Nr(), Yg = Nr(), j = Nr(), ze = Nr(), ri = Nr(), Ft = Nr();
function Nr() {
  return 2 ** ++Ww;
}
const Hu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  boolean: de,
  booleanish: tt,
  commaOrSpaceSeparated: Ft,
  commaSeparated: ri,
  number: j,
  overloadedBoolean: Yg,
  spaceSeparated: ze
}, Symbol.toStringTag, { value: "Module" })), Yo = (
  /** @type {ReadonlyArray<keyof typeof types>} */
  Object.keys(Hu)
);
class Th extends Mt {
  /**
   * @constructor
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @param {number | null | undefined} [mask]
   *   Mask.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Info.
   */
  constructor(e, t, r, i) {
    let s = -1;
    if (super(e, t), gd(this, "space", i), typeof r == "number")
      for (; ++s < Yo.length; ) {
        const l = Yo[s];
        gd(this, Yo[s], (r & Hu[l]) === Hu[l]);
      }
  }
}
Th.prototype.defined = !0;
function gd(n, e, t) {
  t && (n[e] = t);
}
function Ci(n) {
  const e = {}, t = {};
  for (const [r, i] of Object.entries(n.properties)) {
    const s = new Th(
      r,
      n.transform(n.attributes || {}, r),
      i,
      n.space
    );
    n.mustUseProperty && n.mustUseProperty.includes(r) && (s.mustUseProperty = !0), e[r] = s, t[Gu(r)] = r, t[Gu(s.attribute)] = r;
  }
  return new qs(e, t, n.space);
}
const Gg = Ci({
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: tt,
    ariaAutoComplete: null,
    ariaBusy: tt,
    ariaChecked: tt,
    ariaColCount: j,
    ariaColIndex: j,
    ariaColSpan: j,
    ariaControls: ze,
    ariaCurrent: null,
    ariaDescribedBy: ze,
    ariaDetails: null,
    ariaDisabled: tt,
    ariaDropEffect: ze,
    ariaErrorMessage: null,
    ariaExpanded: tt,
    ariaFlowTo: ze,
    ariaGrabbed: tt,
    ariaHasPopup: null,
    ariaHidden: tt,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: ze,
    ariaLevel: j,
    ariaLive: null,
    ariaModal: tt,
    ariaMultiLine: tt,
    ariaMultiSelectable: tt,
    ariaOrientation: null,
    ariaOwns: ze,
    ariaPlaceholder: null,
    ariaPosInSet: j,
    ariaPressed: tt,
    ariaReadOnly: tt,
    ariaRelevant: null,
    ariaRequired: tt,
    ariaRoleDescription: ze,
    ariaRowCount: j,
    ariaRowIndex: j,
    ariaRowSpan: j,
    ariaSelected: tt,
    ariaSetSize: j,
    ariaSort: null,
    ariaValueMax: j,
    ariaValueMin: j,
    ariaValueNow: j,
    ariaValueText: null,
    role: null
  },
  transform(n, e) {
    return e === "role" ? e : "aria-" + e.slice(4).toLowerCase();
  }
});
function Hg(n, e) {
  return e in n ? n[e] : e;
}
function Kg(n, e) {
  return Hg(n, e.toLowerCase());
}
const Yw = Ci({
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: ri,
    acceptCharset: ze,
    accessKey: ze,
    action: null,
    allow: null,
    allowFullScreen: de,
    allowPaymentRequest: de,
    allowUserMedia: de,
    alt: null,
    as: null,
    async: de,
    autoCapitalize: null,
    autoComplete: ze,
    autoFocus: de,
    autoPlay: de,
    blocking: ze,
    capture: null,
    charSet: null,
    checked: de,
    cite: null,
    className: ze,
    cols: j,
    colSpan: null,
    content: null,
    contentEditable: tt,
    controls: de,
    controlsList: ze,
    coords: j | ri,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: de,
    defer: de,
    dir: null,
    dirName: null,
    disabled: de,
    download: Yg,
    draggable: tt,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: de,
    formTarget: null,
    headers: ze,
    height: j,
    hidden: de,
    high: j,
    href: null,
    hrefLang: null,
    htmlFor: ze,
    httpEquiv: ze,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: de,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: de,
    itemId: null,
    itemProp: ze,
    itemRef: ze,
    itemScope: de,
    itemType: ze,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: de,
    low: j,
    manifest: null,
    max: null,
    maxLength: j,
    media: null,
    method: null,
    min: null,
    minLength: j,
    multiple: de,
    muted: de,
    name: null,
    nonce: null,
    noModule: de,
    noValidate: de,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: de,
    optimum: j,
    pattern: null,
    ping: ze,
    placeholder: null,
    playsInline: de,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: de,
    referrerPolicy: null,
    rel: ze,
    required: de,
    reversed: de,
    rows: j,
    rowSpan: j,
    sandbox: ze,
    scope: null,
    scoped: de,
    seamless: de,
    selected: de,
    shadowRootClonable: de,
    shadowRootDelegatesFocus: de,
    shadowRootMode: null,
    shape: null,
    size: j,
    sizes: null,
    slot: null,
    span: j,
    spellCheck: tt,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: j,
    step: null,
    style: null,
    tabIndex: j,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: de,
    useMap: null,
    value: tt,
    width: j,
    wrap: null,
    writingSuggestions: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: ze,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: j,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: j,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: de,
    // Lists. Use CSS to reduce space between items instead
    declare: de,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: j,
    // `<img>` and `<object>`
    leftMargin: j,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: j,
    // `<body>`
    marginWidth: j,
    // `<body>`
    noResize: de,
    // `<frame>`
    noHref: de,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: de,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: de,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: j,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: tt,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: j,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: j,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: de,
    disableRemotePlayback: de,
    prefix: null,
    property: null,
    results: j,
    security: null,
    unselectable: null
  },
  space: "html",
  transform: Kg
}), Gw = Ci({
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  properties: {
    about: Ft,
    accentHeight: j,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: j,
    amplitude: j,
    arabicForm: null,
    ascent: j,
    attributeName: null,
    attributeType: null,
    azimuth: j,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: j,
    by: null,
    calcMode: null,
    capHeight: j,
    className: ze,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: j,
    diffuseConstant: j,
    direction: null,
    display: null,
    dur: null,
    divisor: j,
    dominantBaseline: null,
    download: de,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: j,
    enableBackground: null,
    end: null,
    event: null,
    exponent: j,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: j,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: ri,
    g2: ri,
    glyphName: ri,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: j,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: j,
    horizOriginX: j,
    horizOriginY: j,
    id: null,
    ideographic: j,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: j,
    k: j,
    k1: j,
    k2: j,
    k3: j,
    k4: j,
    kernelMatrix: Ft,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: j,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: j,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: j,
    overlineThickness: j,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: j,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: ze,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: j,
    pointsAtY: j,
    pointsAtZ: j,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: Ft,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: Ft,
    rev: Ft,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: Ft,
    requiredFeatures: Ft,
    requiredFonts: Ft,
    requiredFormats: Ft,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: j,
    specularExponent: j,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: j,
    strikethroughThickness: j,
    string: null,
    stroke: null,
    strokeDashArray: Ft,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: j,
    strokeOpacity: j,
    strokeWidth: null,
    style: null,
    surfaceScale: j,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: Ft,
    tabIndex: j,
    tableValues: null,
    target: null,
    targetX: j,
    targetY: j,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: Ft,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: j,
    underlineThickness: j,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: j,
    values: null,
    vAlphabetic: j,
    vMathematical: j,
    vectorEffect: null,
    vHanging: j,
    vIdeographic: j,
    version: null,
    vertAdvY: j,
    vertOriginX: j,
    vertOriginY: j,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: j,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  },
  space: "svg",
  transform: Hg
}), Jg = Ci({
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  },
  space: "xlink",
  transform(n, e) {
    return "xlink:" + e.slice(5).toLowerCase();
  }
}), eO = Ci({
  attributes: { xmlnsxlink: "xmlns:xlink" },
  properties: { xmlnsXLink: null, xmlns: null },
  space: "xmlns",
  transform: Kg
}), tO = Ci({
  properties: { xmlBase: null, xmlLang: null, xmlSpace: null },
  space: "xml",
  transform(n, e) {
    return "xml:" + e.slice(3).toLowerCase();
  }
}), Hw = /[A-Z]/g, Od = /-[a-z]/g, Kw = /^data[-\w.:]+$/i;
function Jw(n, e) {
  const t = Gu(e);
  let r = e, i = Mt;
  if (t in n.normal)
    return n.property[n.normal[t]];
  if (t.length > 4 && t.slice(0, 4) === "data" && Kw.test(e)) {
    if (e.charAt(4) === "-") {
      const s = e.slice(5).replace(Od, tk);
      r = "data" + s.charAt(0).toUpperCase() + s.slice(1);
    } else {
      const s = e.slice(4);
      if (!Od.test(s)) {
        let l = s.replace(Hw, ek);
        l.charAt(0) !== "-" && (l = "-" + l), e = "data" + l;
      }
    }
    i = Th;
  }
  return new i(r, e);
}
function ek(n) {
  return "-" + n.toLowerCase();
}
function tk(n) {
  return n.charAt(1).toUpperCase();
}
const nk = Wg([Gg, Yw, Jg, eO, tO], "html"), nO = Wg([Gg, Gw, Jg, eO, tO], "svg"), rk = /["&'<>`]/g, ik = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, sk = (
  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
  /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g
), lk = /[|\\{}()[\]^$+*?.]/g, yd = /* @__PURE__ */ new WeakMap();
function ak(n, e) {
  if (n = n.replace(
    e.subset ? ok(e.subset) : rk,
    r
  ), e.subset || e.escapeOnly)
    return n;
  return n.replace(ik, t).replace(sk, r);
  function t(i, s, l) {
    return e.format(
      (i.charCodeAt(0) - 55296) * 1024 + i.charCodeAt(1) - 56320 + 65536,
      l.charCodeAt(s + 2),
      e
    );
  }
  function r(i, s, l) {
    return e.format(
      i.charCodeAt(0),
      l.charCodeAt(s + 1),
      e
    );
  }
}
function ok(n) {
  let e = yd.get(n);
  return e || (e = uk(n), yd.set(n, e)), e;
}
function uk(n) {
  const e = [];
  let t = -1;
  for (; ++t < n.length; )
    e.push(n[t].replace(lk, "\\$&"));
  return new RegExp("(?:" + e.join("|") + ")", "g");
}
const hk = /[\dA-Fa-f]/;
function ck(n, e, t) {
  const r = "&#x" + n.toString(16).toUpperCase();
  return t && e && !hk.test(String.fromCharCode(e)) ? r : r + ";";
}
const fk = /\d/;
function dk(n, e, t) {
  const r = "&#" + String(n);
  return t && e && !fk.test(String.fromCharCode(e)) ? r : r + ";";
}
const pk = [
  "AElig",
  "AMP",
  "Aacute",
  "Acirc",
  "Agrave",
  "Aring",
  "Atilde",
  "Auml",
  "COPY",
  "Ccedil",
  "ETH",
  "Eacute",
  "Ecirc",
  "Egrave",
  "Euml",
  "GT",
  "Iacute",
  "Icirc",
  "Igrave",
  "Iuml",
  "LT",
  "Ntilde",
  "Oacute",
  "Ocirc",
  "Ograve",
  "Oslash",
  "Otilde",
  "Ouml",
  "QUOT",
  "REG",
  "THORN",
  "Uacute",
  "Ucirc",
  "Ugrave",
  "Uuml",
  "Yacute",
  "aacute",
  "acirc",
  "acute",
  "aelig",
  "agrave",
  "amp",
  "aring",
  "atilde",
  "auml",
  "brvbar",
  "ccedil",
  "cedil",
  "cent",
  "copy",
  "curren",
  "deg",
  "divide",
  "eacute",
  "ecirc",
  "egrave",
  "eth",
  "euml",
  "frac12",
  "frac14",
  "frac34",
  "gt",
  "iacute",
  "icirc",
  "iexcl",
  "igrave",
  "iquest",
  "iuml",
  "laquo",
  "lt",
  "macr",
  "micro",
  "middot",
  "nbsp",
  "not",
  "ntilde",
  "oacute",
  "ocirc",
  "ograve",
  "ordf",
  "ordm",
  "oslash",
  "otilde",
  "ouml",
  "para",
  "plusmn",
  "pound",
  "quot",
  "raquo",
  "reg",
  "sect",
  "shy",
  "sup1",
  "sup2",
  "sup3",
  "szlig",
  "thorn",
  "times",
  "uacute",
  "ucirc",
  "ugrave",
  "uml",
  "uuml",
  "yacute",
  "yen",
  "yuml"
], Go = {
  nbsp: " ",
  iexcl: "¡",
  cent: "¢",
  pound: "£",
  curren: "¤",
  yen: "¥",
  brvbar: "¦",
  sect: "§",
  uml: "¨",
  copy: "©",
  ordf: "ª",
  laquo: "«",
  not: "¬",
  shy: "­",
  reg: "®",
  macr: "¯",
  deg: "°",
  plusmn: "±",
  sup2: "²",
  sup3: "³",
  acute: "´",
  micro: "µ",
  para: "¶",
  middot: "·",
  cedil: "¸",
  sup1: "¹",
  ordm: "º",
  raquo: "»",
  frac14: "¼",
  frac12: "½",
  frac34: "¾",
  iquest: "¿",
  Agrave: "À",
  Aacute: "Á",
  Acirc: "Â",
  Atilde: "Ã",
  Auml: "Ä",
  Aring: "Å",
  AElig: "Æ",
  Ccedil: "Ç",
  Egrave: "È",
  Eacute: "É",
  Ecirc: "Ê",
  Euml: "Ë",
  Igrave: "Ì",
  Iacute: "Í",
  Icirc: "Î",
  Iuml: "Ï",
  ETH: "Ð",
  Ntilde: "Ñ",
  Ograve: "Ò",
  Oacute: "Ó",
  Ocirc: "Ô",
  Otilde: "Õ",
  Ouml: "Ö",
  times: "×",
  Oslash: "Ø",
  Ugrave: "Ù",
  Uacute: "Ú",
  Ucirc: "Û",
  Uuml: "Ü",
  Yacute: "Ý",
  THORN: "Þ",
  szlig: "ß",
  agrave: "à",
  aacute: "á",
  acirc: "â",
  atilde: "ã",
  auml: "ä",
  aring: "å",
  aelig: "æ",
  ccedil: "ç",
  egrave: "è",
  eacute: "é",
  ecirc: "ê",
  euml: "ë",
  igrave: "ì",
  iacute: "í",
  icirc: "î",
  iuml: "ï",
  eth: "ð",
  ntilde: "ñ",
  ograve: "ò",
  oacute: "ó",
  ocirc: "ô",
  otilde: "õ",
  ouml: "ö",
  divide: "÷",
  oslash: "ø",
  ugrave: "ù",
  uacute: "ú",
  ucirc: "û",
  uuml: "ü",
  yacute: "ý",
  thorn: "þ",
  yuml: "ÿ",
  fnof: "ƒ",
  Alpha: "Α",
  Beta: "Β",
  Gamma: "Γ",
  Delta: "Δ",
  Epsilon: "Ε",
  Zeta: "Ζ",
  Eta: "Η",
  Theta: "Θ",
  Iota: "Ι",
  Kappa: "Κ",
  Lambda: "Λ",
  Mu: "Μ",
  Nu: "Ν",
  Xi: "Ξ",
  Omicron: "Ο",
  Pi: "Π",
  Rho: "Ρ",
  Sigma: "Σ",
  Tau: "Τ",
  Upsilon: "Υ",
  Phi: "Φ",
  Chi: "Χ",
  Psi: "Ψ",
  Omega: "Ω",
  alpha: "α",
  beta: "β",
  gamma: "γ",
  delta: "δ",
  epsilon: "ε",
  zeta: "ζ",
  eta: "η",
  theta: "θ",
  iota: "ι",
  kappa: "κ",
  lambda: "λ",
  mu: "μ",
  nu: "ν",
  xi: "ξ",
  omicron: "ο",
  pi: "π",
  rho: "ρ",
  sigmaf: "ς",
  sigma: "σ",
  tau: "τ",
  upsilon: "υ",
  phi: "φ",
  chi: "χ",
  psi: "ψ",
  omega: "ω",
  thetasym: "ϑ",
  upsih: "ϒ",
  piv: "ϖ",
  bull: "•",
  hellip: "…",
  prime: "′",
  Prime: "″",
  oline: "‾",
  frasl: "⁄",
  weierp: "℘",
  image: "ℑ",
  real: "ℜ",
  trade: "™",
  alefsym: "ℵ",
  larr: "←",
  uarr: "↑",
  rarr: "→",
  darr: "↓",
  harr: "↔",
  crarr: "↵",
  lArr: "⇐",
  uArr: "⇑",
  rArr: "⇒",
  dArr: "⇓",
  hArr: "⇔",
  forall: "∀",
  part: "∂",
  exist: "∃",
  empty: "∅",
  nabla: "∇",
  isin: "∈",
  notin: "∉",
  ni: "∋",
  prod: "∏",
  sum: "∑",
  minus: "−",
  lowast: "∗",
  radic: "√",
  prop: "∝",
  infin: "∞",
  ang: "∠",
  and: "∧",
  or: "∨",
  cap: "∩",
  cup: "∪",
  int: "∫",
  there4: "∴",
  sim: "∼",
  cong: "≅",
  asymp: "≈",
  ne: "≠",
  equiv: "≡",
  le: "≤",
  ge: "≥",
  sub: "⊂",
  sup: "⊃",
  nsub: "⊄",
  sube: "⊆",
  supe: "⊇",
  oplus: "⊕",
  otimes: "⊗",
  perp: "⊥",
  sdot: "⋅",
  lceil: "⌈",
  rceil: "⌉",
  lfloor: "⌊",
  rfloor: "⌋",
  lang: "〈",
  rang: "〉",
  loz: "◊",
  spades: "♠",
  clubs: "♣",
  hearts: "♥",
  diams: "♦",
  quot: '"',
  amp: "&",
  lt: "<",
  gt: ">",
  OElig: "Œ",
  oelig: "œ",
  Scaron: "Š",
  scaron: "š",
  Yuml: "Ÿ",
  circ: "ˆ",
  tilde: "˜",
  ensp: " ",
  emsp: " ",
  thinsp: " ",
  zwnj: "‌",
  zwj: "‍",
  lrm: "‎",
  rlm: "‏",
  ndash: "–",
  mdash: "—",
  lsquo: "‘",
  rsquo: "’",
  sbquo: "‚",
  ldquo: "“",
  rdquo: "”",
  bdquo: "„",
  dagger: "†",
  Dagger: "‡",
  permil: "‰",
  lsaquo: "‹",
  rsaquo: "›",
  euro: "€"
}, mk = [
  "cent",
  "copy",
  "divide",
  "gt",
  "lt",
  "not",
  "para",
  "times"
], rO = {}.hasOwnProperty, Ku = {};
let fl;
for (fl in Go)
  rO.call(Go, fl) && (Ku[Go[fl]] = fl);
const gk = /[^\dA-Za-z]/;
function Ok(n, e, t, r) {
  const i = String.fromCharCode(n);
  if (rO.call(Ku, i)) {
    const s = Ku[i], l = "&" + s;
    return t && pk.includes(s) && !mk.includes(s) && (!r || e && e !== 61 && gk.test(String.fromCharCode(e))) ? l : l + ";";
  }
  return "";
}
function yk(n, e, t) {
  let r = ck(n, e, t.omitOptionalSemicolons), i;
  if ((t.useNamedReferences || t.useShortestReferences) && (i = Ok(
    n,
    e,
    t.omitOptionalSemicolons,
    t.attribute
  )), (t.useShortestReferences || !i) && t.useShortestReferences) {
    const s = dk(n, e, t.omitOptionalSemicolons);
    s.length < r.length && (r = s);
  }
  return i && (!t.useShortestReferences || i.length < r.length) ? i : r;
}
function ii(n, e) {
  return ak(n, Object.assign({ format: yk }, e));
}
const bk = /^>|^->|<!--|-->|--!>|<!-$/g, xk = [">"], vk = ["<", ">"];
function wk(n, e, t, r) {
  return r.settings.bogusComments ? "<?" + ii(
    n.value,
    Object.assign({}, r.settings.characterReferences, {
      subset: xk
    })
  ) + ">" : "<!--" + n.value.replace(bk, i) + "-->";
  function i(s) {
    return ii(
      s,
      Object.assign({}, r.settings.characterReferences, {
        subset: vk
      })
    );
  }
}
function kk(n, e, t, r) {
  return "<!" + (r.settings.upperDoctype ? "DOCTYPE" : "doctype") + (r.settings.tightDoctype ? "" : " ") + "html>";
}
function Sk(n, e) {
  const t = e || {};
  return (n[n.length - 1] === "" ? [...n, ""] : n).join(
    (t.padRight ? " " : "") + "," + (t.padLeft === !1 ? "" : " ")
  ).trim();
}
const Qk = /[ \t\n\f\r]/g;
function Mh(n) {
  return typeof n == "object" ? n.type === "text" ? bd(n.value) : !1 : bd(n);
}
function bd(n) {
  return n.replace(Qk, "") === "";
}
const at = sO(1), iO = sO(-1), Pk = [];
function sO(n) {
  return e;
  function e(t, r, i) {
    const s = t ? t.children : Pk;
    let l = (r || 0) + n, a = s[l];
    if (!i)
      for (; a && Mh(a); )
        l += n, a = s[l];
    return a;
  }
}
const Ck = {}.hasOwnProperty;
function lO(n) {
  return e;
  function e(t, r, i) {
    return Ck.call(n, t.tagName) && n[t.tagName](t, r, i);
  }
}
const Eh = lO({
  body: $k,
  caption: Ho,
  colgroup: Ho,
  dd: Ek,
  dt: Mk,
  head: Ho,
  html: Ak,
  li: Tk,
  optgroup: Rk,
  option: Zk,
  p: Dk,
  rp: xd,
  rt: xd,
  tbody: Fk,
  td: vd,
  tfoot: Bk,
  th: vd,
  thead: zk,
  tr: Lk
});
function Ho(n, e, t) {
  const r = at(t, e, !0);
  return !r || r.type !== "comment" && !(r.type === "text" && Mh(r.value.charAt(0)));
}
function Ak(n, e, t) {
  const r = at(t, e);
  return !r || r.type !== "comment";
}
function $k(n, e, t) {
  const r = at(t, e);
  return !r || r.type !== "comment";
}
function Dk(n, e, t) {
  const r = at(t, e);
  return r ? r.type === "element" && (r.tagName === "address" || r.tagName === "article" || r.tagName === "aside" || r.tagName === "blockquote" || r.tagName === "details" || r.tagName === "div" || r.tagName === "dl" || r.tagName === "fieldset" || r.tagName === "figcaption" || r.tagName === "figure" || r.tagName === "footer" || r.tagName === "form" || r.tagName === "h1" || r.tagName === "h2" || r.tagName === "h3" || r.tagName === "h4" || r.tagName === "h5" || r.tagName === "h6" || r.tagName === "header" || r.tagName === "hgroup" || r.tagName === "hr" || r.tagName === "main" || r.tagName === "menu" || r.tagName === "nav" || r.tagName === "ol" || r.tagName === "p" || r.tagName === "pre" || r.tagName === "section" || r.tagName === "table" || r.tagName === "ul") : !t || // Confusing parent.
  !(t.type === "element" && (t.tagName === "a" || t.tagName === "audio" || t.tagName === "del" || t.tagName === "ins" || t.tagName === "map" || t.tagName === "noscript" || t.tagName === "video"));
}
function Tk(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && r.tagName === "li";
}
function Mk(n, e, t) {
  const r = at(t, e);
  return !!(r && r.type === "element" && (r.tagName === "dt" || r.tagName === "dd"));
}
function Ek(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && (r.tagName === "dt" || r.tagName === "dd");
}
function xd(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && (r.tagName === "rp" || r.tagName === "rt");
}
function Rk(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && r.tagName === "optgroup";
}
function Zk(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && (r.tagName === "option" || r.tagName === "optgroup");
}
function zk(n, e, t) {
  const r = at(t, e);
  return !!(r && r.type === "element" && (r.tagName === "tbody" || r.tagName === "tfoot"));
}
function Fk(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && (r.tagName === "tbody" || r.tagName === "tfoot");
}
function Bk(n, e, t) {
  return !at(t, e);
}
function Lk(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && r.tagName === "tr";
}
function vd(n, e, t) {
  const r = at(t, e);
  return !r || r.type === "element" && (r.tagName === "td" || r.tagName === "th");
}
const qk = lO({
  body: Nk,
  colgroup: Vk,
  head: Ik,
  html: Xk,
  tbody: jk
});
function Xk(n) {
  const e = at(n, -1);
  return !e || e.type !== "comment";
}
function Ik(n) {
  const e = /* @__PURE__ */ new Set();
  for (const r of n.children)
    if (r.type === "element" && (r.tagName === "base" || r.tagName === "title")) {
      if (e.has(r.tagName)) return !1;
      e.add(r.tagName);
    }
  const t = n.children[0];
  return !t || t.type === "element";
}
function Nk(n) {
  const e = at(n, -1, !0);
  return !e || e.type !== "comment" && !(e.type === "text" && Mh(e.value.charAt(0))) && !(e.type === "element" && (e.tagName === "meta" || e.tagName === "link" || e.tagName === "script" || e.tagName === "style" || e.tagName === "template"));
}
function Vk(n, e, t) {
  const r = iO(t, e), i = at(n, -1, !0);
  return t && r && r.type === "element" && r.tagName === "colgroup" && Eh(r, t.children.indexOf(r), t) ? !1 : !!(i && i.type === "element" && i.tagName === "col");
}
function jk(n, e, t) {
  const r = iO(t, e), i = at(n, -1);
  return t && r && r.type === "element" && (r.tagName === "thead" || r.tagName === "tbody") && Eh(r, t.children.indexOf(r), t) ? !1 : !!(i && i.type === "element" && i.tagName === "tr");
}
const dl = {
  // See: <https://html.spec.whatwg.org/#attribute-name-state>.
  name: [
    [`	
\f\r &/=>`.split(""), `	
\f\r "&'/=>\``.split("")],
    [`\0	
\f\r "&'/<=>`.split(""), `\0	
\f\r "&'/<=>\``.split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
  unquoted: [
    [`	
\f\r &>`.split(""), `\0	
\f\r "&'<=>\``.split("")],
    [`\0	
\f\r "&'<=>\``.split(""), `\0	
\f\r "&'<=>\``.split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
  single: [
    ["&'".split(""), "\"&'`".split("")],
    ["\0&'".split(""), "\0\"&'`".split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
  double: [
    ['"&'.split(""), "\"&'`".split("")],
    ['\0"&'.split(""), "\0\"&'`".split("")]
  ]
};
function _k(n, e, t, r) {
  const i = r.schema, s = i.space === "svg" ? !1 : r.settings.omitOptionalTags;
  let l = i.space === "svg" ? r.settings.closeEmptyElements : r.settings.voids.includes(n.tagName.toLowerCase());
  const a = [];
  let o;
  i.space === "html" && n.tagName === "svg" && (r.schema = nO);
  const u = Uk(r, n.properties), h = r.all(
    i.space === "html" && n.tagName === "template" ? n.content : n
  );
  return r.schema = i, h && (l = !1), (u || !s || !qk(n, e, t)) && (a.push("<", n.tagName, u ? " " + u : ""), l && (i.space === "svg" || r.settings.closeSelfClosing) && (o = u.charAt(u.length - 1), (!r.settings.tightSelfClosing || o === "/" || o && o !== '"' && o !== "'") && a.push(" "), a.push("/")), a.push(">")), a.push(h), !l && (!s || !Eh(n, e, t)) && a.push("</" + n.tagName + ">"), a.join("");
}
function Uk(n, e) {
  const t = [];
  let r = -1, i;
  if (e) {
    for (i in e)
      if (e[i] !== null && e[i] !== void 0) {
        const s = Wk(n, i, e[i]);
        s && t.push(s);
      }
  }
  for (; ++r < t.length; ) {
    const s = n.settings.tightAttributes ? t[r].charAt(t[r].length - 1) : void 0;
    r !== t.length - 1 && s !== '"' && s !== "'" && (t[r] += " ");
  }
  return t.join("");
}
function Wk(n, e, t) {
  const r = Jw(n.schema, e), i = n.settings.allowParseErrors && n.schema.space === "html" ? 0 : 1, s = n.settings.allowDangerousCharacters ? 0 : 1;
  let l = n.quote, a;
  if (r.overloadedBoolean && (t === r.attribute || t === "") ? t = !0 : (r.boolean || r.overloadedBoolean) && (typeof t != "string" || t === r.attribute || t === "") && (t = !!t), t == null || t === !1 || typeof t == "number" && Number.isNaN(t))
    return "";
  const o = ii(
    r.attribute,
    Object.assign({}, n.settings.characterReferences, {
      // Always encode without parse errors in non-HTML.
      subset: dl.name[i][s]
    })
  );
  return t === !0 || (t = Array.isArray(t) ? (r.commaSeparated ? Sk : Zv)(t, {
    padLeft: !n.settings.tightCommaSeparatedLists
  }) : String(t), n.settings.collapseEmptyAttributes && !t) ? o : (n.settings.preferUnquoted && (a = ii(
    t,
    Object.assign({}, n.settings.characterReferences, {
      attribute: !0,
      subset: dl.unquoted[i][s]
    })
  )), a !== t && (n.settings.quoteSmart && Wl(t, l) > Wl(t, n.alternative) && (l = n.alternative), a = l + ii(
    t,
    Object.assign({}, n.settings.characterReferences, {
      // Always encode without parse errors in non-HTML.
      subset: (l === "'" ? dl.single : dl.double)[i][s],
      attribute: !0
    })
  ) + l), o + (a && "=" + a));
}
const Yk = ["<", "&"];
function aO(n, e, t, r) {
  return t && t.type === "element" && (t.tagName === "script" || t.tagName === "style") ? n.value : ii(
    n.value,
    Object.assign({}, r.settings.characterReferences, {
      subset: Yk
    })
  );
}
function Gk(n, e, t, r) {
  return r.settings.allowDangerousHtml ? n.value : aO(n, e, t, r);
}
function Hk(n, e, t, r) {
  return r.all(n);
}
const Kk = K6("type", {
  invalid: Jk,
  unknown: eS,
  handlers: { comment: wk, doctype: kk, element: _k, raw: Gk, root: Hk, text: aO }
});
function Jk(n) {
  throw new Error("Expected node, not `" + n + "`");
}
function eS(n) {
  const e = (
    /** @type {Nodes} */
    n
  );
  throw new Error("Cannot compile unknown node `" + e.type + "`");
}
const tS = {}, nS = {}, rS = [];
function iS(n, e) {
  const t = e || tS, r = t.quote || '"', i = r === '"' ? "'" : '"';
  if (r !== '"' && r !== "'")
    throw new Error("Invalid quote `" + r + "`, expected `'` or `\"`");
  return {
    one: sS,
    all: lS,
    settings: {
      omitOptionalTags: t.omitOptionalTags || !1,
      allowParseErrors: t.allowParseErrors || !1,
      allowDangerousCharacters: t.allowDangerousCharacters || !1,
      quoteSmart: t.quoteSmart || !1,
      preferUnquoted: t.preferUnquoted || !1,
      tightAttributes: t.tightAttributes || !1,
      upperDoctype: t.upperDoctype || !1,
      tightDoctype: t.tightDoctype || !1,
      bogusComments: t.bogusComments || !1,
      tightCommaSeparatedLists: t.tightCommaSeparatedLists || !1,
      tightSelfClosing: t.tightSelfClosing || !1,
      collapseEmptyAttributes: t.collapseEmptyAttributes || !1,
      allowDangerousHtml: t.allowDangerousHtml || !1,
      voids: t.voids || Uw,
      characterReferences: t.characterReferences || nS,
      closeSelfClosing: t.closeSelfClosing || !1,
      closeEmptyElements: t.closeEmptyElements || !1
    },
    schema: t.space === "svg" ? nO : nk,
    quote: r,
    alternative: i
  }.one(
    Array.isArray(n) ? { type: "root", children: n } : n,
    void 0,
    void 0
  );
}
function sS(n, e, t) {
  return Kk(n, e, t, this);
}
function lS(n) {
  const e = [], t = n && n.children || rS;
  let r = -1;
  for (; ++r < t.length; )
    e[r] = this.one(t[r], r, n);
  return e.join("");
}
function aS(n) {
  const e = this, t = { ...e.data("settings"), ...n };
  e.compiler = r;
  function r(i) {
    return iS(i, t);
  }
}
const oO = 1024;
let oS = 0, Wt = class {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
};
class pe {
  /**
  Create a new node prop type.
  */
  constructor(e = {}) {
    this.id = oS++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof e != "function" && (e = lt.match(e)), (t) => {
      let r = e(t);
      return r === void 0 ? null : [this, r];
    };
  }
}
pe.closedBy = new pe({ deserialize: (n) => n.split(" ") });
pe.openedBy = new pe({ deserialize: (n) => n.split(" ") });
pe.group = new pe({ deserialize: (n) => n.split(" ") });
pe.isolate = new pe({ deserialize: (n) => {
  if (n && n != "rtl" && n != "ltr" && n != "auto")
    throw new RangeError("Invalid value for isolate: " + n);
  return n || "auto";
} });
pe.contextHash = new pe({ perNode: !0 });
pe.lookAhead = new pe({ perNode: !0 });
pe.mounted = new pe({ perNode: !0 });
class ps {
  constructor(e, t, r) {
    this.tree = e, this.overlay = t, this.parser = r;
  }
  /**
  @internal
  */
  static get(e) {
    return e && e.props && e.props[pe.mounted.id];
  }
}
const uS = /* @__PURE__ */ Object.create(null);
class lt {
  /**
  @internal
  */
  constructor(e, t, r, i = 0) {
    this.name = e, this.props = t, this.id = r, this.flags = i;
  }
  /**
  Define a node type.
  */
  static define(e) {
    let t = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : uS, r = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), i = new lt(e.name || "", t, e.id, r);
    if (e.props) {
      for (let s of e.props)
        if (Array.isArray(s) || (s = s(i)), s) {
          if (s[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          t[s[0].id] = s[1];
        }
    }
    return i;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(e) {
    return this.props[e.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(e) {
    if (typeof e == "string") {
      if (this.name == e)
        return !0;
      let t = this.prop(pe.group);
      return t ? t.indexOf(e) > -1 : !1;
    }
    return this.id == e;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let r in e)
      for (let i of r.split(" "))
        t[i] = e[r];
    return (r) => {
      for (let i = r.prop(pe.group), s = -1; s < (i ? i.length : 0); s++) {
        let l = t[s < 0 ? r.name : i[s]];
        if (l)
          return l;
      }
    };
  }
}
lt.none = new lt(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class Xs {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(e) {
    this.types = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].id != t)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...e) {
    let t = [];
    for (let r of this.types) {
      let i = null;
      for (let s of e) {
        let l = s(r);
        l && (i || (i = Object.assign({}, r.props)), i[l[0].id] = l[1]);
      }
      t.push(i ? new lt(r.name, i, r.id, r.flags) : r);
    }
    return new Xs(t);
  }
}
const pl = /* @__PURE__ */ new WeakMap(), wd = /* @__PURE__ */ new WeakMap();
var Fe;
(function(n) {
  n[n.ExcludeBuffers = 1] = "ExcludeBuffers", n[n.IncludeAnonymous = 2] = "IncludeAnonymous", n[n.IgnoreMounts = 4] = "IgnoreMounts", n[n.IgnoreOverlays = 8] = "IgnoreOverlays";
})(Fe || (Fe = {}));
class Ae {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(e, t, r, i, s) {
    if (this.type = e, this.children = t, this.positions = r, this.length = i, this.props = null, s && s.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [l, a] of s)
        this.props[typeof l == "number" ? l : l.id] = a;
    }
  }
  /**
  @internal
  */
  toString() {
    let e = ps.get(this);
    if (e && !e.overlay)
      return e.tree.toString();
    let t = "";
    for (let r of this.children) {
      let i = r.toString();
      i && (t && (t += ","), t += i);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(e = 0) {
    return new na(this.topNode, e);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(e, t = 0, r = 0) {
    let i = pl.get(this) || this.topNode, s = new na(i);
    return s.moveTo(e, t), pl.set(this, s._tree), s;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new pt(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(e, t = 0) {
    let r = ms(pl.get(this) || this.topNode, e, t, !1);
    return pl.set(this, r), r;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(e, t = 0) {
    let r = ms(wd.get(this) || this.topNode, e, t, !0);
    return wd.set(this, r), r;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(e, t = 0) {
    return fS(this, e, t);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(e) {
    let { enter: t, leave: r, from: i = 0, to: s = this.length } = e, l = e.mode || 0, a = (l & Fe.IncludeAnonymous) > 0;
    for (let o = this.cursor(l | Fe.IncludeAnonymous); ; ) {
      let u = !1;
      if (o.from <= s && o.to >= i && (!a && o.type.isAnonymous || t(o) !== !1)) {
        if (o.firstChild())
          continue;
        u = !0;
      }
      for (; u && r && (a || !o.type.isAnonymous) && r(o), !o.nextSibling(); ) {
        if (!o.parent())
          return;
        u = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(e) {
    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let e = [];
    if (this.props)
      for (let t in this.props)
        e.push([+t, this.props[t]]);
    return e;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(e = {}) {
    return this.children.length <= 8 ? this : zh(lt.none, this.children, this.positions, 0, this.children.length, 0, this.length, (t, r, i) => new Ae(this.type, t, r, i, this.propValues), e.makeTree || ((t, r, i) => new Ae(lt.none, t, r, i)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(e) {
    return dS(e);
  }
}
Ae.empty = new Ae(lt.none, [], [], 0);
class Rh {
  constructor(e, t) {
    this.buffer = e, this.index = t;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new Rh(this.buffer, this.index);
  }
}
class gr {
  /**
  Create a tree buffer.
  */
  constructor(e, t, r) {
    this.buffer = e, this.length = t, this.set = r;
  }
  /**
  @internal
  */
  get type() {
    return lt.none;
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    for (let t = 0; t < this.buffer.length; )
      e.push(this.childString(t)), t = this.buffer[t + 3];
    return e.join(",");
  }
  /**
  @internal
  */
  childString(e) {
    let t = this.buffer[e], r = this.buffer[e + 3], i = this.set.types[t], s = i.name;
    if (/\W/.test(s) && !i.isError && (s = JSON.stringify(s)), e += 4, r == e)
      return s;
    let l = [];
    for (; e < r; )
      l.push(this.childString(e)), e = this.buffer[e + 3];
    return s + "(" + l.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(e, t, r, i, s) {
    let { buffer: l } = this, a = -1;
    for (let o = e; o != t && !(uO(s, i, l[o + 1], l[o + 2]) && (a = o, r > 0)); o = l[o + 3])
      ;
    return a;
  }
  /**
  @internal
  */
  slice(e, t, r) {
    let i = this.buffer, s = new Uint16Array(t - e), l = 0;
    for (let a = e, o = 0; a < t; ) {
      s[o++] = i[a++], s[o++] = i[a++] - r;
      let u = s[o++] = i[a++] - r;
      s[o++] = i[a++] - e, l = Math.max(l, u);
    }
    return new gr(s, l, this.set);
  }
}
function uO(n, e, t, r) {
  switch (n) {
    case -2:
      return t < e;
    case -1:
      return r >= e && t < e;
    case 0:
      return t < e && r > e;
    case 1:
      return t <= e && r > e;
    case 2:
      return r > e;
    case 4:
      return !0;
  }
}
function ms(n, e, t, r) {
  for (var i; n.from == n.to || (t < 1 ? n.from >= e : n.from > e) || (t > -1 ? n.to <= e : n.to < e); ) {
    let l = !r && n instanceof pt && n.index < 0 ? null : n.parent;
    if (!l)
      return n;
    n = l;
  }
  let s = r ? 0 : Fe.IgnoreOverlays;
  if (r)
    for (let l = n, a = l.parent; a; l = a, a = l.parent)
      l instanceof pt && l.index < 0 && ((i = a.enter(e, t, s)) === null || i === void 0 ? void 0 : i.from) != l.from && (n = a);
  for (; ; ) {
    let l = n.enter(e, t, s);
    if (!l)
      return n;
    n = l;
  }
}
class hO {
  cursor(e = 0) {
    return new na(this, e);
  }
  getChild(e, t = null, r = null) {
    let i = kd(this, e, t, r);
    return i.length ? i[0] : null;
  }
  getChildren(e, t = null, r = null) {
    return kd(this, e, t, r);
  }
  resolve(e, t = 0) {
    return ms(this, e, t, !1);
  }
  resolveInner(e, t = 0) {
    return ms(this, e, t, !0);
  }
  matchContext(e) {
    return Ju(this.parent, e);
  }
  enterUnfinishedNodesBefore(e) {
    let t = this.childBefore(e), r = this;
    for (; t; ) {
      let i = t.lastChild;
      if (!i || i.to != t.to)
        break;
      i.type.isError && i.from == i.to ? (r = t, t = i.prevSibling) : t = i;
    }
    return r;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
class pt extends hO {
  constructor(e, t, r, i) {
    super(), this._tree = e, this.from = t, this.index = r, this._parent = i;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(e, t, r, i, s = 0) {
    for (let l = this; ; ) {
      for (let { children: a, positions: o } = l._tree, u = t > 0 ? a.length : -1; e != u; e += t) {
        let h = a[e], c = o[e] + l.from;
        if (uO(i, r, c, c + h.length)) {
          if (h instanceof gr) {
            if (s & Fe.ExcludeBuffers)
              continue;
            let f = h.findChild(0, h.buffer.length, t, r - c, i);
            if (f > -1)
              return new kn(new hS(l, h, e, c), null, f);
          } else if (s & Fe.IncludeAnonymous || !h.type.isAnonymous || Zh(h)) {
            let f;
            if (!(s & Fe.IgnoreMounts) && (f = ps.get(h)) && !f.overlay)
              return new pt(f.tree, c, e, l);
            let d = new pt(h, c, e, l);
            return s & Fe.IncludeAnonymous || !d.type.isAnonymous ? d : d.nextChild(t < 0 ? h.children.length - 1 : 0, t, r, i);
          }
        }
      }
      if (s & Fe.IncludeAnonymous || !l.type.isAnonymous || (l.index >= 0 ? e = l.index + t : e = t < 0 ? -1 : l._parent._tree.children.length, l = l._parent, !l))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, r = 0) {
    let i;
    if (!(r & Fe.IgnoreOverlays) && (i = ps.get(this._tree)) && i.overlay) {
      let s = e - this.from;
      for (let { from: l, to: a } of i.overlay)
        if ((t > 0 ? l <= s : l < s) && (t < 0 ? a >= s : a > s))
          return new pt(i.tree, i.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, e, t, r);
  }
  nextSignificantParent() {
    let e = this;
    for (; e.type.isAnonymous && e._parent; )
      e = e._parent;
    return e;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
}
function kd(n, e, t, r) {
  let i = n.cursor(), s = [];
  if (!i.firstChild())
    return s;
  if (t != null) {
    for (let l = !1; !l; )
      if (l = i.type.is(t), !i.nextSibling())
        return s;
  }
  for (; ; ) {
    if (r != null && i.type.is(r))
      return s;
    if (i.type.is(e) && s.push(i.node), !i.nextSibling())
      return r == null ? s : [];
  }
}
function Ju(n, e, t = e.length - 1) {
  for (let r = n; t >= 0; r = r.parent) {
    if (!r)
      return !1;
    if (!r.type.isAnonymous) {
      if (e[t] && e[t] != r.name)
        return !1;
      t--;
    }
  }
  return !0;
}
class hS {
  constructor(e, t, r, i) {
    this.parent = e, this.buffer = t, this.index = r, this.start = i;
  }
}
class kn extends hO {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(e, t, r) {
    super(), this.context = e, this._parent = t, this.index = r, this.type = e.buffer.set.types[e.buffer.buffer[r]];
  }
  child(e, t, r) {
    let { buffer: i } = this.context, s = i.findChild(this.index + 4, i.buffer[this.index + 3], e, t - this.context.start, r);
    return s < 0 ? null : new kn(this.context, this, s);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, r = 0) {
    if (r & Fe.ExcludeBuffers)
      return null;
    let { buffer: i } = this.context, s = i.findChild(this.index + 4, i.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
    return s < 0 ? null : new kn(this.context, this, s);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(e) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + e,
      e,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: e } = this.context, t = e.buffer[this.index + 3];
    return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new kn(this.context, this._parent, t) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: e } = this.context, t = this._parent ? this._parent.index + 4 : 0;
    return this.index == t ? this.externalSibling(-1) : new kn(this.context, this._parent, e.findChild(
      t,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let e = [], t = [], { buffer: r } = this.context, i = this.index + 4, s = r.buffer[this.index + 3];
    if (s > i) {
      let l = r.buffer[this.index + 1];
      e.push(r.slice(i, s, l)), t.push(0);
    }
    return new Ae(this.type, e, t, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function cO(n) {
  if (!n.length)
    return null;
  let e = 0, t = n[0];
  for (let s = 1; s < n.length; s++) {
    let l = n[s];
    (l.from > t.from || l.to < t.to) && (t = l, e = s);
  }
  let r = t instanceof pt && t.index < 0 ? null : t.parent, i = n.slice();
  return r ? i[e] = r : i.splice(e, 1), new cS(i, t);
}
class cS {
  constructor(e, t) {
    this.heads = e, this.node = t;
  }
  get next() {
    return cO(this.heads);
  }
}
function fS(n, e, t) {
  let r = n.resolveInner(e, t), i = null;
  for (let s = r instanceof pt ? r : r.context.parent; s; s = s.parent)
    if (s.index < 0) {
      let l = s.parent;
      (i || (i = [r])).push(l.resolve(e, t)), s = l;
    } else {
      let l = ps.get(s.tree);
      if (l && l.overlay && l.overlay[0].from <= e && l.overlay[l.overlay.length - 1].to >= e) {
        let a = new pt(l.tree, l.overlay[0].from + s.from, -1, s);
        (i || (i = [r])).push(ms(a, e, t, !1));
      }
    }
  return i ? cO(i) : r;
}
class na {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(e, t = 0) {
    if (this.mode = t, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof pt)
      this.yieldNode(e);
    else {
      this._tree = e.context.parent, this.buffer = e.context;
      for (let r = e._parent; r; r = r._parent)
        this.stack.unshift(r.index);
      this.bufferNode = e, this.yieldBuf(e.index);
    }
  }
  yieldNode(e) {
    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
  }
  yieldBuf(e, t) {
    this.index = e;
    let { start: r, buffer: i } = this.buffer;
    return this.type = t || i.set.types[i.buffer[e]], this.from = r + i.buffer[e + 1], this.to = r + i.buffer[e + 2], !0;
  }
  /**
  @internal
  */
  yield(e) {
    return e ? e instanceof pt ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(e, t, r) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, t, r, this.mode));
    let { buffer: i } = this.buffer, s = i.findChild(this.index + 4, i.buffer[this.index + 3], e, t - this.buffer.start, r);
    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(e, t, r = this.mode) {
    return this.buffer ? r & Fe.ExcludeBuffers ? !1 : this.enterChild(1, e, t) : this.yield(this._tree.enter(e, t, r));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & Fe.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let e = this.mode & Fe.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(e);
  }
  /**
  @internal
  */
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
    let { buffer: t } = this.buffer, r = this.stack.length - 1;
    if (e < 0) {
      let i = r < 0 ? 0 : this.stack[r] + 4;
      if (this.index != i)
        return this.yieldBuf(t.findChild(
          i,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let i = t.buffer[this.index + 3];
      if (i < (r < 0 ? t.buffer.length : t.buffer[this.stack[r] + 3]))
        return this.yieldBuf(i);
    }
    return r < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(e) {
    let t, r, { buffer: i } = this;
    if (i) {
      if (e > 0) {
        if (this.index < i.buffer.buffer.length)
          return !1;
      } else
        for (let s = 0; s < this.index; s++)
          if (i.buffer.buffer[s + 3] < this.index)
            return !1;
      ({ index: t, parent: r } = i);
    } else
      ({ index: t, _parent: r } = this._tree);
    for (; r; { index: t, _parent: r } = r)
      if (t > -1)
        for (let s = t + e, l = e < 0 ? -1 : r._tree.children.length; s != l; s += e) {
          let a = r._tree.children[s];
          if (this.mode & Fe.IncludeAnonymous || a instanceof gr || !a.type.isAnonymous || Zh(a))
            return !1;
        }
    return !0;
  }
  move(e, t) {
    if (t && this.enterChild(
      e,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(e))
        return !0;
      if (this.atLastNode(e) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(e = !0) {
    return this.move(1, e);
  }
  /**
  Move to the next node in a last-to-first pre-order traversal. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(e = !0) {
    return this.move(-1, e);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(e, t = 0) {
    for (; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent(); )
      ;
    for (; this.enterChild(1, e, t); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let e = this.bufferNode, t = null, r = 0;
    if (e && e.context == this.buffer)
      e: for (let i = this.index, s = this.stack.length; s >= 0; ) {
        for (let l = e; l; l = l._parent)
          if (l.index == i) {
            if (i == this.index)
              return l;
            t = l, r = s + 1;
            break e;
          }
        i = this.stack[--s];
      }
    for (let i = r; i < this.stack.length; i++)
      t = new kn(this.buffer, t, this.stack[i]);
    return this.bufferNode = new kn(this.buffer, t, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(e, t) {
    for (let r = 0; ; ) {
      let i = !1;
      if (this.type.isAnonymous || e(this) !== !1) {
        if (this.firstChild()) {
          r++;
          continue;
        }
        this.type.isAnonymous || (i = !0);
      }
      for (; ; ) {
        if (i && t && t(this), i = this.type.isAnonymous, !r)
          return;
        if (this.nextSibling())
          break;
        this.parent(), r--, i = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(e) {
    if (!this.buffer)
      return Ju(this.node.parent, e);
    let { buffer: t } = this.buffer, { types: r } = t.set;
    for (let i = e.length - 1, s = this.stack.length - 1; i >= 0; s--) {
      if (s < 0)
        return Ju(this._tree, e, i);
      let l = r[t.buffer[this.stack[s]]];
      if (!l.isAnonymous) {
        if (e[i] && e[i] != l.name)
          return !1;
        i--;
      }
    }
    return !0;
  }
}
function Zh(n) {
  return n.children.some((e) => e instanceof gr || !e.type.isAnonymous || Zh(e));
}
function dS(n) {
  var e;
  let { buffer: t, nodeSet: r, maxBufferLength: i = oO, reused: s = [], minRepeatType: l = r.types.length } = n, a = Array.isArray(t) ? new Rh(t, t.length) : t, o = r.types, u = 0, h = 0;
  function c(T, S, E, N, z, M) {
    let { id: L, start: F, end: ne, size: J } = a, K = h, me = u;
    for (; J < 0; )
      if (a.next(), J == -1) {
        let Ce = s[L];
        E.push(Ce), N.push(F - T);
        return;
      } else if (J == -3) {
        u = L;
        return;
      } else if (J == -4) {
        h = L;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${J}`);
    let Oe = o[L], $e, Qe, P = F - T;
    if (ne - F <= i && (Qe = x(a.pos - S, z))) {
      let Ce = new Uint16Array(Qe.size - Qe.skip), ve = a.pos - Qe.size, A = Ce.length;
      for (; a.pos > ve; )
        A = b(Qe.start, Ce, A);
      $e = new gr(Ce, ne - Qe.start, r), P = Qe.start - T;
    } else {
      let Ce = a.pos - J;
      a.next();
      let ve = [], A = [], Ve = L >= l ? L : -1, Ye = 0, Le = ne;
      for (; a.pos > Ce; )
        Ve >= 0 && a.id == Ve && a.size >= 0 ? (a.end <= Le - i && (m(ve, A, F, Ye, a.end, Le, Ve, K, me), Ye = ve.length, Le = a.end), a.next()) : M > 2500 ? f(F, Ce, ve, A) : c(F, Ce, ve, A, Ve, M + 1);
      if (Ve >= 0 && Ye > 0 && Ye < ve.length && m(ve, A, F, Ye, F, Le, Ve, K, me), ve.reverse(), A.reverse(), Ve > -1 && Ye > 0) {
        let mt = d(Oe, me);
        $e = zh(Oe, ve, A, 0, ve.length, 0, ne - F, mt, mt);
      } else
        $e = O(Oe, ve, A, ne - F, K - ne, me);
    }
    E.push($e), N.push(P);
  }
  function f(T, S, E, N) {
    let z = [], M = 0, L = -1;
    for (; a.pos > S; ) {
      let { id: F, start: ne, end: J, size: K } = a;
      if (K > 4)
        a.next();
      else {
        if (L > -1 && ne < L)
          break;
        L < 0 && (L = J - i), z.push(F, ne, J), M++, a.next();
      }
    }
    if (M) {
      let F = new Uint16Array(M * 4), ne = z[z.length - 2];
      for (let J = z.length - 3, K = 0; J >= 0; J -= 3)
        F[K++] = z[J], F[K++] = z[J + 1] - ne, F[K++] = z[J + 2] - ne, F[K++] = K;
      E.push(new gr(F, z[2] - ne, r)), N.push(ne - T);
    }
  }
  function d(T, S) {
    return (E, N, z) => {
      let M = 0, L = E.length - 1, F, ne;
      if (L >= 0 && (F = E[L]) instanceof Ae) {
        if (!L && F.type == T && F.length == z)
          return F;
        (ne = F.prop(pe.lookAhead)) && (M = N[L] + F.length + ne);
      }
      return O(T, E, N, z, M, S);
    };
  }
  function m(T, S, E, N, z, M, L, F, ne) {
    let J = [], K = [];
    for (; T.length > N; )
      J.push(T.pop()), K.push(S.pop() + E - z);
    T.push(O(r.types[L], J, K, M - z, F - M, ne)), S.push(z - E);
  }
  function O(T, S, E, N, z, M, L) {
    if (M) {
      let F = [pe.contextHash, M];
      L = L ? [F].concat(L) : [F];
    }
    if (z > 25) {
      let F = [pe.lookAhead, z];
      L = L ? [F].concat(L) : [F];
    }
    return new Ae(T, S, E, N, L);
  }
  function x(T, S) {
    let E = a.fork(), N = 0, z = 0, M = 0, L = E.end - i, F = { size: 0, start: 0, skip: 0 };
    e: for (let ne = E.pos - T; E.pos > ne; ) {
      let J = E.size;
      if (E.id == S && J >= 0) {
        F.size = N, F.start = z, F.skip = M, M += 4, N += 4, E.next();
        continue;
      }
      let K = E.pos - J;
      if (J < 0 || K < ne || E.start < L)
        break;
      let me = E.id >= l ? 4 : 0, Oe = E.start;
      for (E.next(); E.pos > K; ) {
        if (E.size < 0)
          if (E.size == -3)
            me += 4;
          else
            break e;
        else E.id >= l && (me += 4);
        E.next();
      }
      z = Oe, N += J, M += me;
    }
    return (S < 0 || N == T) && (F.size = N, F.start = z, F.skip = M), F.size > 4 ? F : void 0;
  }
  function b(T, S, E) {
    let { id: N, start: z, end: M, size: L } = a;
    if (a.next(), L >= 0 && N < l) {
      let F = E;
      if (L > 4) {
        let ne = a.pos - (L - 4);
        for (; a.pos > ne; )
          E = b(T, S, E);
      }
      S[--E] = F, S[--E] = M - T, S[--E] = z - T, S[--E] = N;
    } else L == -3 ? u = N : L == -4 && (h = N);
    return E;
  }
  let w = [], C = [];
  for (; a.pos > 0; )
    c(n.start || 0, n.bufferStart || 0, w, C, -1, 0);
  let Z = (e = n.length) !== null && e !== void 0 ? e : w.length ? C[0] + w[0].length : 0;
  return new Ae(o[n.topID], w.reverse(), C.reverse(), Z);
}
const Sd = /* @__PURE__ */ new WeakMap();
function Zl(n, e) {
  if (!n.isAnonymous || e instanceof gr || e.type != n)
    return 1;
  let t = Sd.get(e);
  if (t == null) {
    t = 1;
    for (let r of e.children) {
      if (r.type != n || !(r instanceof Ae)) {
        t = 1;
        break;
      }
      t += Zl(n, r);
    }
    Sd.set(e, t);
  }
  return t;
}
function zh(n, e, t, r, i, s, l, a, o) {
  let u = 0;
  for (let m = r; m < i; m++)
    u += Zl(n, e[m]);
  let h = Math.ceil(
    u * 1.5 / 8
    /* Balance.BranchFactor */
  ), c = [], f = [];
  function d(m, O, x, b, w) {
    for (let C = x; C < b; ) {
      let Z = C, T = O[C], S = Zl(n, m[C]);
      for (C++; C < b; C++) {
        let E = Zl(n, m[C]);
        if (S + E >= h)
          break;
        S += E;
      }
      if (C == Z + 1) {
        if (S > h) {
          let E = m[Z];
          d(E.children, E.positions, 0, E.children.length, O[Z] + w);
          continue;
        }
        c.push(m[Z]);
      } else {
        let E = O[C - 1] + m[C - 1].length - T;
        c.push(zh(n, m, O, Z, C, T, E, null, o));
      }
      f.push(T + w - s);
    }
  }
  return d(e, t, r, i, 0), (a || o)(c, f, l);
}
class fO {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(e, t, r) {
    let i = this.map.get(e);
    i || this.map.set(e, i = /* @__PURE__ */ new Map()), i.set(t, r);
  }
  getBuffer(e, t) {
    let r = this.map.get(e);
    return r && r.get(t);
  }
  /**
  Set the value for this syntax node.
  */
  set(e, t) {
    e instanceof kn ? this.setBuffer(e.context.buffer, e.index, t) : e instanceof pt && this.map.set(e.tree, t);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(e) {
    return e instanceof kn ? this.getBuffer(e.context.buffer, e.index) : e instanceof pt ? this.map.get(e.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(e, t) {
    e.buffer ? this.setBuffer(e.buffer.buffer, e.index, t) : this.map.set(e.tree, t);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(e) {
    return e.buffer ? this.getBuffer(e.buffer.buffer, e.index) : this.map.get(e.tree);
  }
}
class Un {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(e, t, r, i, s = !1, l = !1) {
    this.from = e, this.to = t, this.tree = r, this.offset = i, this.open = (s ? 1 : 0) | (l ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(e, t = [], r = !1) {
    let i = [new Un(0, e.length, e, 0, !1, r)];
    for (let s of t)
      s.to > e.length && i.push(s);
    return i;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(e, t, r = 128) {
    if (!t.length)
      return e;
    let i = [], s = 1, l = e.length ? e[0] : null;
    for (let a = 0, o = 0, u = 0; ; a++) {
      let h = a < t.length ? t[a] : null, c = h ? h.fromA : 1e9;
      if (c - o >= r)
        for (; l && l.from < c; ) {
          let f = l;
          if (o >= f.from || c <= f.to || u) {
            let d = Math.max(f.from, o) - u, m = Math.min(f.to, c) - u;
            f = d >= m ? null : new Un(d, m, f.tree, f.offset + u, a > 0, !!h);
          }
          if (f && i.push(f), l.to > c)
            break;
          l = s < e.length ? e[s++] : null;
        }
      if (!h)
        break;
      o = h.toA, u = h.toA - h.toB;
    }
    return i;
  }
}
class Fh {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(e, t, r) {
    return typeof e == "string" && (e = new pS(e)), r = r ? r.length ? r.map((i) => new Wt(i.from, i.to)) : [new Wt(0, 0)] : [new Wt(0, e.length)], this.createParse(e, t || [], r);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(e, t, r) {
    let i = this.startParse(e, t, r);
    for (; ; ) {
      let s = i.advance();
      if (s)
        return s;
    }
  }
}
class pS {
  constructor(e) {
    this.string = e;
  }
  get length() {
    return this.string.length;
  }
  chunk(e) {
    return this.string.slice(e);
  }
  get lineChunks() {
    return !1;
  }
  read(e, t) {
    return this.string.slice(e, t);
  }
}
function dO(n) {
  return (e, t, r, i) => new gS(e, n, t, r, i);
}
class Qd {
  constructor(e, t, r, i, s) {
    this.parser = e, this.parse = t, this.overlay = r, this.target = i, this.from = s;
  }
}
function Pd(n) {
  if (!n.length || n.some((e) => e.from >= e.to))
    throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(n));
}
class mS {
  constructor(e, t, r, i, s, l, a) {
    this.parser = e, this.predicate = t, this.mounts = r, this.index = i, this.start = s, this.target = l, this.prev = a, this.depth = 0, this.ranges = [];
  }
}
const e0 = new pe({ perNode: !0 });
class gS {
  constructor(e, t, r, i, s) {
    this.nest = t, this.input = r, this.fragments = i, this.ranges = s, this.inner = [], this.innerDone = 0, this.baseTree = null, this.stoppedAt = null, this.baseParse = e;
  }
  advance() {
    if (this.baseParse) {
      let r = this.baseParse.advance();
      if (!r)
        return null;
      if (this.baseParse = null, this.baseTree = r, this.startInner(), this.stoppedAt != null)
        for (let i of this.inner)
          i.parse.stopAt(this.stoppedAt);
    }
    if (this.innerDone == this.inner.length) {
      let r = this.baseTree;
      return this.stoppedAt != null && (r = new Ae(r.type, r.children, r.positions, r.length, r.propValues.concat([[e0, this.stoppedAt]]))), r;
    }
    let e = this.inner[this.innerDone], t = e.parse.advance();
    if (t) {
      this.innerDone++;
      let r = Object.assign(/* @__PURE__ */ Object.create(null), e.target.props);
      r[pe.mounted.id] = new ps(t, e.overlay, e.parser), e.target.props = r;
    }
    return null;
  }
  get parsedPos() {
    if (this.baseParse)
      return 0;
    let e = this.input.length;
    for (let t = this.innerDone; t < this.inner.length; t++)
      this.inner[t].from < e && (e = Math.min(e, this.inner[t].parse.parsedPos));
    return e;
  }
  stopAt(e) {
    if (this.stoppedAt = e, this.baseParse)
      this.baseParse.stopAt(e);
    else
      for (let t = this.innerDone; t < this.inner.length; t++)
        this.inner[t].parse.stopAt(e);
  }
  startInner() {
    let e = new bS(this.fragments), t = null, r = null, i = new na(new pt(this.baseTree, this.ranges[0].from, 0, null), Fe.IncludeAnonymous | Fe.IgnoreMounts);
    e: for (let s, l; ; ) {
      let a = !0, o;
      if (this.stoppedAt != null && i.from >= this.stoppedAt)
        a = !1;
      else if (e.hasNode(i)) {
        if (t) {
          let u = t.mounts.find((h) => h.frag.from <= i.from && h.frag.to >= i.to && h.mount.overlay);
          if (u)
            for (let h of u.mount.overlay) {
              let c = h.from + u.pos, f = h.to + u.pos;
              c >= i.from && f <= i.to && !t.ranges.some((d) => d.from < f && d.to > c) && t.ranges.push({ from: c, to: f });
            }
        }
        a = !1;
      } else if (r && (l = OS(r.ranges, i.from, i.to)))
        a = l != 2;
      else if (!i.type.isAnonymous && (s = this.nest(i, this.input)) && (i.from < i.to || !s.overlay)) {
        i.tree || yS(i);
        let u = e.findMounts(i.from, s.parser);
        if (typeof s.overlay == "function")
          t = new mS(s.parser, s.overlay, u, this.inner.length, i.from, i.tree, t);
        else {
          let h = $d(this.ranges, s.overlay || (i.from < i.to ? [new Wt(i.from, i.to)] : []));
          h.length && Pd(h), (h.length || !s.overlay) && this.inner.push(new Qd(s.parser, h.length ? s.parser.startParse(this.input, Dd(u, h), h) : s.parser.startParse(""), s.overlay ? s.overlay.map((c) => new Wt(c.from - i.from, c.to - i.from)) : null, i.tree, h.length ? h[0].from : i.from)), s.overlay ? h.length && (r = { ranges: h, depth: 0, prev: r }) : a = !1;
        }
      } else if (t && (o = t.predicate(i)) && (o === !0 && (o = new Wt(i.from, i.to)), o.from < o.to)) {
        let u = t.ranges.length - 1;
        u >= 0 && t.ranges[u].to == o.from ? t.ranges[u] = { from: t.ranges[u].from, to: o.to } : t.ranges.push(o);
      }
      if (a && i.firstChild())
        t && t.depth++, r && r.depth++;
      else
        for (; !i.nextSibling(); ) {
          if (!i.parent())
            break e;
          if (t && !--t.depth) {
            let u = $d(this.ranges, t.ranges);
            u.length && (Pd(u), this.inner.splice(t.index, 0, new Qd(t.parser, t.parser.startParse(this.input, Dd(t.mounts, u), u), t.ranges.map((h) => new Wt(h.from - t.start, h.to - t.start)), t.target, u[0].from))), t = t.prev;
          }
          r && !--r.depth && (r = r.prev);
        }
    }
  }
}
function OS(n, e, t) {
  for (let r of n) {
    if (r.from >= t)
      break;
    if (r.to > e)
      return r.from <= e && r.to >= t ? 2 : 1;
  }
  return 0;
}
function Cd(n, e, t, r, i, s) {
  if (e < t) {
    let l = n.buffer[e + 1];
    r.push(n.slice(e, t, l)), i.push(l - s);
  }
}
function yS(n) {
  let { node: e } = n, t = [], r = e.context.buffer;
  do
    t.push(n.index), n.parent();
  while (!n.tree);
  let i = n.tree, s = i.children.indexOf(r), l = i.children[s], a = l.buffer, o = [s];
  function u(h, c, f, d, m, O) {
    let x = t[O], b = [], w = [];
    Cd(l, h, x, b, w, d);
    let C = a[x + 1], Z = a[x + 2];
    o.push(b.length);
    let T = O ? u(x + 4, a[x + 3], l.set.types[a[x]], C, Z - C, O - 1) : e.toTree();
    return b.push(T), w.push(C - d), Cd(l, a[x + 3], c, b, w, d), new Ae(f, b, w, m);
  }
  i.children[s] = u(0, a.length, lt.none, 0, l.length, t.length - 1);
  for (let h of o) {
    let c = n.tree.children[h], f = n.tree.positions[h];
    n.yield(new pt(c, f + n.from, h, n._tree));
  }
}
class Ad {
  constructor(e, t) {
    this.offset = t, this.done = !1, this.cursor = e.cursor(Fe.IncludeAnonymous | Fe.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(e) {
    let { cursor: t } = this, r = e - this.offset;
    for (; !this.done && t.from < r; )
      t.to >= e && t.enter(r, 1, Fe.IgnoreOverlays | Fe.ExcludeBuffers) || t.next(!1) || (this.done = !0);
  }
  hasNode(e) {
    if (this.moveTo(e.from), !this.done && this.cursor.from + this.offset == e.from && this.cursor.tree)
      for (let t = this.cursor.tree; ; ) {
        if (t == e.tree)
          return !0;
        if (t.children.length && t.positions[0] == 0 && t.children[0] instanceof Ae)
          t = t.children[0];
        else
          break;
      }
    return !1;
  }
}
let bS = class {
  constructor(e) {
    var t;
    if (this.fragments = e, this.curTo = 0, this.fragI = 0, e.length) {
      let r = this.curFrag = e[0];
      this.curTo = (t = r.tree.prop(e0)) !== null && t !== void 0 ? t : r.to, this.inner = new Ad(r.tree, -r.offset);
    } else
      this.curFrag = this.inner = null;
  }
  hasNode(e) {
    for (; this.curFrag && e.from >= this.curTo; )
      this.nextFrag();
    return this.curFrag && this.curFrag.from <= e.from && this.curTo >= e.to && this.inner.hasNode(e);
  }
  nextFrag() {
    var e;
    if (this.fragI++, this.fragI == this.fragments.length)
      this.curFrag = this.inner = null;
    else {
      let t = this.curFrag = this.fragments[this.fragI];
      this.curTo = (e = t.tree.prop(e0)) !== null && e !== void 0 ? e : t.to, this.inner = new Ad(t.tree, -t.offset);
    }
  }
  findMounts(e, t) {
    var r;
    let i = [];
    if (this.inner) {
      this.inner.cursor.moveTo(e, 1);
      for (let s = this.inner.cursor.node; s; s = s.parent) {
        let l = (r = s.tree) === null || r === void 0 ? void 0 : r.prop(pe.mounted);
        if (l && l.parser == t)
          for (let a = this.fragI; a < this.fragments.length; a++) {
            let o = this.fragments[a];
            if (o.from >= s.to)
              break;
            o.tree == this.curFrag.tree && i.push({
              frag: o,
              pos: s.from - o.offset,
              mount: l
            });
          }
      }
    }
    return i;
  }
};
function $d(n, e) {
  let t = null, r = e;
  for (let i = 1, s = 0; i < n.length; i++) {
    let l = n[i - 1].to, a = n[i].from;
    for (; s < r.length; s++) {
      let o = r[s];
      if (o.from >= a)
        break;
      o.to <= l || (t || (r = t = e.slice()), o.from < l ? (t[s] = new Wt(o.from, l), o.to > a && t.splice(s + 1, 0, new Wt(a, o.to))) : o.to > a ? t[s--] = new Wt(a, o.to) : t.splice(s--, 1));
    }
  }
  return r;
}
function xS(n, e, t, r) {
  let i = 0, s = 0, l = !1, a = !1, o = -1e9, u = [];
  for (; ; ) {
    let h = i == n.length ? 1e9 : l ? n[i].to : n[i].from, c = s == e.length ? 1e9 : a ? e[s].to : e[s].from;
    if (l != a) {
      let f = Math.max(o, t), d = Math.min(h, c, r);
      f < d && u.push(new Wt(f, d));
    }
    if (o = Math.min(h, c), o == 1e9)
      break;
    h == o && (l ? (l = !1, i++) : l = !0), c == o && (a ? (a = !1, s++) : a = !0);
  }
  return u;
}
function Dd(n, e) {
  let t = [];
  for (let { pos: r, mount: i, frag: s } of n) {
    let l = r + (i.overlay ? i.overlay[0].from : 0), a = l + i.tree.length, o = Math.max(s.from, l), u = Math.min(s.to, a);
    if (i.overlay) {
      let h = i.overlay.map((f) => new Wt(f.from + r, f.to + r)), c = xS(e, h, o, u);
      for (let f = 0, d = o; ; f++) {
        let m = f == c.length, O = m ? u : c[f].from;
        if (O > d && t.push(new Un(d, O, i.tree, -l, s.from >= d || s.openStart, s.to <= O || s.openEnd)), m)
          break;
        d = c[f].to;
      }
    } else
      t.push(new Un(o, u, i.tree, -l, s.from >= l || s.openStart, s.to <= a || s.openEnd));
  }
  return t;
}
let t0 = [], pO = [];
(() => {
  let n = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((e) => e ? parseInt(e, 36) : 1);
  for (let e = 0, t = 0; e < n.length; e++)
    (e % 2 ? pO : t0).push(t = t + n[e]);
})();
function vS(n) {
  if (n < 768) return !1;
  for (let e = 0, t = t0.length; ; ) {
    let r = e + t >> 1;
    if (n < t0[r]) t = r;
    else if (n >= pO[r]) e = r + 1;
    else return !0;
    if (e == t) return !1;
  }
}
function Td(n) {
  return n >= 127462 && n <= 127487;
}
const Md = 8205;
function wS(n, e, t = !0, r = !0) {
  return (t ? mO : kS)(n, e, r);
}
function mO(n, e, t) {
  if (e == n.length) return e;
  e && gO(n.charCodeAt(e)) && OO(n.charCodeAt(e - 1)) && e--;
  let r = Ko(n, e);
  for (e += Ed(r); e < n.length; ) {
    let i = Ko(n, e);
    if (r == Md || i == Md || t && vS(i))
      e += Ed(i), r = i;
    else if (Td(i)) {
      let s = 0, l = e - 2;
      for (; l >= 0 && Td(Ko(n, l)); )
        s++, l -= 2;
      if (s % 2 == 0) break;
      e += 2;
    } else
      break;
  }
  return e;
}
function kS(n, e, t) {
  for (; e > 0; ) {
    let r = mO(n, e - 2, t);
    if (r < e) return r;
    e--;
  }
  return 0;
}
function Ko(n, e) {
  let t = n.charCodeAt(e);
  if (!OO(t) || e + 1 == n.length) return t;
  let r = n.charCodeAt(e + 1);
  return gO(r) ? (t - 55296 << 10) + (r - 56320) + 65536 : t;
}
function gO(n) {
  return n >= 56320 && n < 57344;
}
function OO(n) {
  return n >= 55296 && n < 56320;
}
function Ed(n) {
  return n < 65536 ? 1 : 2;
}
class ye {
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, t, r) {
    [e, t] = ci(this, e, t);
    let i = [];
    return this.decompose(
      0,
      e,
      i,
      2
      /* Open.To */
    ), r.length && r.decompose(
      0,
      r.length,
      i,
      3
      /* Open.To */
    ), this.decompose(
      t,
      this.length,
      i,
      1
      /* Open.From */
    ), bn.from(i, this.length - (t - e) + r.length);
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, t = this.length) {
    [e, t] = ci(this, e, t);
    let r = [];
    return this.decompose(e, t, r, 0), bn.from(r, t - e);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this)
      return !0;
    if (e.length != this.length || e.lines != this.lines)
      return !1;
    let t = this.scanIdentical(e, 1), r = this.length - this.scanIdentical(e, -1), i = new is(this), s = new is(e);
    for (let l = t, a = t; ; ) {
      if (i.next(l), s.next(l), l = 0, i.lineBreak != s.lineBreak || i.done != s.done || i.value != s.value)
        return !1;
      if (a += i.value.length, i.done || a >= r)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(e = 1) {
    return new is(this, e);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, t = this.length) {
    return new yO(this, e, t);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, t) {
    let r;
    if (e == null)
      r = this.iter();
    else {
      t == null && (t = this.lines + 1);
      let i = this.line(e).from;
      r = this.iterRange(i, Math.max(i, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to));
    }
    return new bO(r);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? ye.empty : e.length <= 32 ? new Ge(e) : bn.from(Ge.split(e, []));
  }
}
class Ge extends ye {
  constructor(e, t = SS(e)) {
    super(), this.text = e, this.length = t;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t, r, i) {
    for (let s = 0; ; s++) {
      let l = this.text[s], a = i + l.length;
      if ((t ? r : a) >= e)
        return new QS(i, a, r, l);
      i = a + 1, r++;
    }
  }
  decompose(e, t, r, i) {
    let s = e <= 0 && t >= this.length ? this : new Ge(Rd(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
    if (i & 1) {
      let l = r.pop(), a = zl(s.text, l.text.slice(), 0, s.length);
      if (a.length <= 32)
        r.push(new Ge(a, l.length + s.length));
      else {
        let o = a.length >> 1;
        r.push(new Ge(a.slice(0, o)), new Ge(a.slice(o)));
      }
    } else
      r.push(s);
  }
  replace(e, t, r) {
    if (!(r instanceof Ge))
      return super.replace(e, t, r);
    [e, t] = ci(this, e, t);
    let i = zl(this.text, zl(r.text, Rd(this.text, 0, e)), t), s = this.length + r.length - (t - e);
    return i.length <= 32 ? new Ge(i, s) : bn.from(Ge.split(i, []), s);
  }
  sliceString(e, t = this.length, r = `
`) {
    [e, t] = ci(this, e, t);
    let i = "";
    for (let s = 0, l = 0; s <= t && l < this.text.length; l++) {
      let a = this.text[l], o = s + a.length;
      s > e && l && (i += r), e < o && t > s && (i += a.slice(Math.max(0, e - s), t - s)), s = o + 1;
    }
    return i;
  }
  flatten(e) {
    for (let t of this.text)
      e.push(t);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t) {
    let r = [], i = -1;
    for (let s of e)
      r.push(s), i += s.length + 1, r.length == 32 && (t.push(new Ge(r, i)), r = [], i = -1);
    return i > -1 && t.push(new Ge(r, i)), t;
  }
}
class bn extends ye {
  constructor(e, t) {
    super(), this.children = e, this.length = t, this.lines = 0;
    for (let r of e)
      this.lines += r.lines;
  }
  lineInner(e, t, r, i) {
    for (let s = 0; ; s++) {
      let l = this.children[s], a = i + l.length, o = r + l.lines - 1;
      if ((t ? o : a) >= e)
        return l.lineInner(e, t, r, i);
      i = a + 1, r = o + 1;
    }
  }
  decompose(e, t, r, i) {
    for (let s = 0, l = 0; l <= t && s < this.children.length; s++) {
      let a = this.children[s], o = l + a.length;
      if (e <= o && t >= l) {
        let u = i & ((l <= e ? 1 : 0) | (o >= t ? 2 : 0));
        l >= e && o <= t && !u ? r.push(a) : a.decompose(e - l, t - l, r, u);
      }
      l = o + 1;
    }
  }
  replace(e, t, r) {
    if ([e, t] = ci(this, e, t), r.lines < this.lines)
      for (let i = 0, s = 0; i < this.children.length; i++) {
        let l = this.children[i], a = s + l.length;
        if (e >= s && t <= a) {
          let o = l.replace(e - s, t - s, r), u = this.lines - l.lines + o.lines;
          if (o.lines < u >> 4 && o.lines > u >> 6) {
            let h = this.children.slice();
            return h[i] = o, new bn(h, this.length - (t - e) + r.length);
          }
          return super.replace(s, a, o);
        }
        s = a + 1;
      }
    return super.replace(e, t, r);
  }
  sliceString(e, t = this.length, r = `
`) {
    [e, t] = ci(this, e, t);
    let i = "";
    for (let s = 0, l = 0; s < this.children.length && l <= t; s++) {
      let a = this.children[s], o = l + a.length;
      l > e && s && (i += r), e < o && t > l && (i += a.sliceString(e - l, t - l, r)), l = o + 1;
    }
    return i;
  }
  flatten(e) {
    for (let t of this.children)
      t.flatten(e);
  }
  scanIdentical(e, t) {
    if (!(e instanceof bn))
      return 0;
    let r = 0, [i, s, l, a] = t > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; i += t, s += t) {
      if (i == l || s == a)
        return r;
      let o = this.children[i], u = e.children[s];
      if (o != u)
        return r + o.scanIdentical(u, t);
      r += o.length + 1;
    }
  }
  static from(e, t = e.reduce((r, i) => r + i.length + 1, -1)) {
    let r = 0;
    for (let d of e)
      r += d.lines;
    if (r < 32) {
      let d = [];
      for (let m of e)
        m.flatten(d);
      return new Ge(d, t);
    }
    let i = Math.max(
      32,
      r >> 5
      /* Tree.BranchShift */
    ), s = i << 1, l = i >> 1, a = [], o = 0, u = -1, h = [];
    function c(d) {
      let m;
      if (d.lines > s && d instanceof bn)
        for (let O of d.children)
          c(O);
      else d.lines > l && (o > l || !o) ? (f(), a.push(d)) : d instanceof Ge && o && (m = h[h.length - 1]) instanceof Ge && d.lines + m.lines <= 32 ? (o += d.lines, u += d.length + 1, h[h.length - 1] = new Ge(m.text.concat(d.text), m.length + 1 + d.length)) : (o + d.lines > i && f(), o += d.lines, u += d.length + 1, h.push(d));
    }
    function f() {
      o != 0 && (a.push(h.length == 1 ? h[0] : bn.from(h, u)), u = -1, o = h.length = 0);
    }
    for (let d of e)
      c(d);
    return f(), a.length == 1 ? a[0] : new bn(a, t);
  }
}
ye.empty = /* @__PURE__ */ new Ge([""], 0);
function SS(n) {
  let e = -1;
  for (let t of n)
    e += t.length + 1;
  return e;
}
function zl(n, e, t = 0, r = 1e9) {
  for (let i = 0, s = 0, l = !0; s < n.length && i <= r; s++) {
    let a = n[s], o = i + a.length;
    o >= t && (o > r && (a = a.slice(0, r - i)), i < t && (a = a.slice(t - i)), l ? (e[e.length - 1] += a, l = !1) : e.push(a)), i = o + 1;
  }
  return e;
}
function Rd(n, e, t) {
  return zl(n, [""], e, t);
}
class is {
  constructor(e, t = 1) {
    this.dir = t, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [e], this.offsets = [t > 0 ? 1 : (e instanceof Ge ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t) {
    for (this.done = this.lineBreak = !1; ; ) {
      let r = this.nodes.length - 1, i = this.nodes[r], s = this.offsets[r], l = s >> 1, a = i instanceof Ge ? i.text.length : i.children.length;
      if (l == (t > 0 ? a : 0)) {
        if (r == 0)
          return this.done = !0, this.value = "", this;
        t > 0 && this.offsets[r - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((s & 1) == (t > 0 ? 0 : 1)) {
        if (this.offsets[r] += t, e == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        e--;
      } else if (i instanceof Ge) {
        let o = i.text[l + (t < 0 ? -1 : 0)];
        if (this.offsets[r] += t, o.length > Math.max(0, e))
          return this.value = e == 0 ? o : t > 0 ? o.slice(e) : o.slice(0, o.length - e), this;
        e -= o.length;
      } else {
        let o = i.children[l + (t < 0 ? -1 : 0)];
        e > o.length ? (e -= o.length, this.offsets[r] += t) : (t < 0 && this.offsets[r]--, this.nodes.push(o), this.offsets.push(t > 0 ? 1 : (o instanceof Ge ? o.text.length : o.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
}
class yO {
  constructor(e, t, r) {
    this.value = "", this.done = !1, this.cursor = new is(e, t > r ? -1 : 1), this.pos = t > r ? e.length : 0, this.from = Math.min(t, r), this.to = Math.max(t, r);
  }
  nextInner(e, t) {
    if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
    let r = t < 0 ? this.pos - this.from : this.to - this.pos;
    e > r && (e = r), r -= e;
    let { value: i } = this.cursor.next(e);
    return this.pos += (i.length + e) * t, this.value = i.length <= r ? i : t < 0 ? i.slice(i.length - r) : i.slice(0, r), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class bO {
  constructor(e) {
    this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(e = 0) {
    let { done: t, lineBreak: r, value: i } = this.inner.next(e);
    return t && this.afterBreak ? (this.value = "", this.afterBreak = !1) : t ? (this.done = !0, this.value = "") : r ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = i, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
}
typeof Symbol < "u" && (ye.prototype[Symbol.iterator] = function() {
  return this.iter();
}, is.prototype[Symbol.iterator] = yO.prototype[Symbol.iterator] = bO.prototype[Symbol.iterator] = function() {
  return this;
});
let QS = class {
  /**
  @internal
  */
  constructor(e, t, r, i) {
    this.from = e, this.to = t, this.number = r, this.text = i;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function ci(n, e, t) {
  return e = Math.max(0, Math.min(n.length, e)), [e, Math.max(e, Math.min(n.length, t))];
}
function vt(n, e, t = !0, r = !0) {
  return wS(n, e, t, r);
}
function PS(n) {
  return n >= 56320 && n < 57344;
}
function CS(n) {
  return n >= 55296 && n < 56320;
}
function AS(n, e) {
  let t = n.charCodeAt(e);
  if (!CS(t) || e + 1 == n.length)
    return t;
  let r = n.charCodeAt(e + 1);
  return PS(r) ? (t - 55296 << 10) + (r - 56320) + 65536 : t;
}
function $S(n) {
  return n < 65536 ? 1 : 2;
}
const n0 = /\r\n?|\n/;
var bt = /* @__PURE__ */ function(n) {
  return n[n.Simple = 0] = "Simple", n[n.TrackDel = 1] = "TrackDel", n[n.TrackBefore = 2] = "TrackBefore", n[n.TrackAfter = 3] = "TrackAfter", n;
}(bt || (bt = {}));
class Pn {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2)
      e += this.sections[t];
    return e;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2) {
      let r = this.sections[t + 1];
      e += r < 0 ? this.sections[t] : r;
    }
    return e;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(e) {
    for (let t = 0, r = 0, i = 0; t < this.sections.length; ) {
      let s = this.sections[t++], l = this.sections[t++];
      l < 0 ? (e(r, i, s), i += s) : i += l, r += s;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, t = !1) {
    r0(this, e, t);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = [];
    for (let t = 0; t < this.sections.length; ) {
      let r = this.sections[t++], i = this.sections[t++];
      i < 0 ? e.push(r, i) : e.push(i, r);
    }
    return new Pn(e);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : xO(this, e);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `this` happened before the ones in `other`.
  */
  mapDesc(e, t = !1) {
    return e.empty ? this : i0(this, e, t);
  }
  mapPos(e, t = -1, r = bt.Simple) {
    let i = 0, s = 0;
    for (let l = 0; l < this.sections.length; ) {
      let a = this.sections[l++], o = this.sections[l++], u = i + a;
      if (o < 0) {
        if (u > e)
          return s + (e - i);
        s += a;
      } else {
        if (r != bt.Simple && u >= e && (r == bt.TrackDel && i < e && u > e || r == bt.TrackBefore && i < e || r == bt.TrackAfter && u > e))
          return null;
        if (u > e || u == e && t < 0 && !a)
          return e == i || t < 0 ? s : s + o;
        s += o;
      }
      i = u;
    }
    if (e > i)
      throw new RangeError(`Position ${e} is out of range for changeset of length ${i}`);
    return s;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, t = e) {
    for (let r = 0, i = 0; r < this.sections.length && i <= t; ) {
      let s = this.sections[r++], l = this.sections[r++], a = i + s;
      if (l >= 0 && i <= t && a >= e)
        return i < e && a > t ? "cover" : !0;
      i = a;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 0; t < this.sections.length; ) {
      let r = this.sections[t++], i = this.sections[t++];
      e += (e ? " " : "") + r + (i >= 0 ? ":" + i : "");
    }
    return e;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t) => typeof t != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Pn(e);
  }
  /**
  @internal
  */
  static create(e) {
    return new Pn(e);
  }
}
class it extends Pn {
  constructor(e, t) {
    super(e), this.inserted = t;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return r0(this, (t, r, i, s, l) => e = e.replace(i, i + (r - t), l), !1), e;
  }
  mapDesc(e, t = !1) {
    return i0(this, e, t, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let t = this.sections.slice(), r = [];
    for (let i = 0, s = 0; i < t.length; i += 2) {
      let l = t[i], a = t[i + 1];
      if (a >= 0) {
        t[i] = a, t[i + 1] = l;
        let o = i >> 1;
        for (; r.length < o; )
          r.push(ye.empty);
        r.push(l ? e.slice(s, s + l) : ye.empty);
      }
      s += l;
    }
    return new it(t, r);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : xO(this, e, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, t = !1) {
    return e.empty ? this : i0(this, e, t, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, t = !1) {
    r0(this, e, t);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return Pn.create(this.sections);
  }
  /**
  @internal
  */
  filter(e) {
    let t = [], r = [], i = [], s = new gs(this);
    e: for (let l = 0, a = 0; ; ) {
      let o = l == e.length ? 1e9 : e[l++];
      for (; a < o || a == o && s.len == 0; ) {
        if (s.done)
          break e;
        let h = Math.min(s.len, o - a);
        ct(i, h, -1);
        let c = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;
        ct(t, h, c), c > 0 && cr(r, t, s.text), s.forward(h), a += h;
      }
      let u = e[l++];
      for (; a < u; ) {
        if (s.done)
          break e;
        let h = Math.min(s.len, u - a);
        ct(t, h, -1), ct(i, h, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(h), a += h;
      }
    }
    return {
      changes: new it(t, r),
      filtered: Pn.create(i)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = [];
    for (let t = 0; t < this.sections.length; t += 2) {
      let r = this.sections[t], i = this.sections[t + 1];
      i < 0 ? e.push(r) : i == 0 ? e.push([r]) : e.push([r].concat(this.inserted[t >> 1].toJSON()));
    }
    return e;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, t, r) {
    let i = [], s = [], l = 0, a = null;
    function o(h = !1) {
      if (!h && !i.length)
        return;
      l < t && ct(i, t - l, -1);
      let c = new it(i, s);
      a = a ? a.compose(c.map(a)) : c, i = [], s = [], l = 0;
    }
    function u(h) {
      if (Array.isArray(h))
        for (let c of h)
          u(c);
      else if (h instanceof it) {
        if (h.length != t)
          throw new RangeError(`Mismatched change set length (got ${h.length}, expected ${t})`);
        o(), a = a ? a.compose(h.map(a)) : h;
      } else {
        let { from: c, to: f = c, insert: d } = h;
        if (c > f || c < 0 || f > t)
          throw new RangeError(`Invalid change range ${c} to ${f} (in doc of length ${t})`);
        let m = d ? typeof d == "string" ? ye.of(d.split(r || n0)) : d : ye.empty, O = m.length;
        if (c == f && O == 0)
          return;
        c < l && o(), c > l && ct(i, c - l, -1), ct(i, f - c, O), cr(s, i, m), l = f;
      }
    }
    return u(e), o(!a), a;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new it(e ? [e, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let t = [], r = [];
    for (let i = 0; i < e.length; i++) {
      let s = e[i];
      if (typeof s == "number")
        t.push(s, -1);
      else {
        if (!Array.isArray(s) || typeof s[0] != "number" || s.some((l, a) => a && typeof l != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (s.length == 1)
          t.push(s[0], 0);
        else {
          for (; r.length < i; )
            r.push(ye.empty);
          r[i] = ye.of(s.slice(1)), t.push(s[0], r[i].length);
        }
      }
    }
    return new it(t, r);
  }
  /**
  @internal
  */
  static createSet(e, t) {
    return new it(e, t);
  }
}
function ct(n, e, t, r = !1) {
  if (e == 0 && t <= 0)
    return;
  let i = n.length - 2;
  i >= 0 && t <= 0 && t == n[i + 1] ? n[i] += e : i >= 0 && e == 0 && n[i] == 0 ? n[i + 1] += t : r ? (n[i] += e, n[i + 1] += t) : n.push(e, t);
}
function cr(n, e, t) {
  if (t.length == 0)
    return;
  let r = e.length - 2 >> 1;
  if (r < n.length)
    n[n.length - 1] = n[n.length - 1].append(t);
  else {
    for (; n.length < r; )
      n.push(ye.empty);
    n.push(t);
  }
}
function r0(n, e, t) {
  let r = n.inserted;
  for (let i = 0, s = 0, l = 0; l < n.sections.length; ) {
    let a = n.sections[l++], o = n.sections[l++];
    if (o < 0)
      i += a, s += a;
    else {
      let u = i, h = s, c = ye.empty;
      for (; u += a, h += o, o && r && (c = c.append(r[l - 2 >> 1])), !(t || l == n.sections.length || n.sections[l + 1] < 0); )
        a = n.sections[l++], o = n.sections[l++];
      e(i, u, s, h, c), i = u, s = h;
    }
  }
}
function i0(n, e, t, r = !1) {
  let i = [], s = r ? [] : null, l = new gs(n), a = new gs(e);
  for (let o = -1; ; ) {
    if (l.done && a.len || a.done && l.len)
      throw new Error("Mismatched change set lengths");
    if (l.ins == -1 && a.ins == -1) {
      let u = Math.min(l.len, a.len);
      ct(i, u, -1), l.forward(u), a.forward(u);
    } else if (a.ins >= 0 && (l.ins < 0 || o == l.i || l.off == 0 && (a.len < l.len || a.len == l.len && !t))) {
      let u = a.len;
      for (ct(i, a.ins, -1); u; ) {
        let h = Math.min(l.len, u);
        l.ins >= 0 && o < l.i && l.len <= h && (ct(i, 0, l.ins), s && cr(s, i, l.text), o = l.i), l.forward(h), u -= h;
      }
      a.next();
    } else if (l.ins >= 0) {
      let u = 0, h = l.len;
      for (; h; )
        if (a.ins == -1) {
          let c = Math.min(h, a.len);
          u += c, h -= c, a.forward(c);
        } else if (a.ins == 0 && a.len < h)
          h -= a.len, a.next();
        else
          break;
      ct(i, u, o < l.i ? l.ins : 0), s && o < l.i && cr(s, i, l.text), o = l.i, l.forward(l.len - h);
    } else {
      if (l.done && a.done)
        return s ? it.createSet(i, s) : Pn.create(i);
      throw new Error("Mismatched change set lengths");
    }
  }
}
function xO(n, e, t = !1) {
  let r = [], i = t ? [] : null, s = new gs(n), l = new gs(e);
  for (let a = !1; ; ) {
    if (s.done && l.done)
      return i ? it.createSet(r, i) : Pn.create(r);
    if (s.ins == 0)
      ct(r, s.len, 0, a), s.next();
    else if (l.len == 0 && !l.done)
      ct(r, 0, l.ins, a), i && cr(i, r, l.text), l.next();
    else {
      if (s.done || l.done)
        throw new Error("Mismatched change set lengths");
      {
        let o = Math.min(s.len2, l.len), u = r.length;
        if (s.ins == -1) {
          let h = l.ins == -1 ? -1 : l.off ? 0 : l.ins;
          ct(r, o, h, a), i && h && cr(i, r, l.text);
        } else l.ins == -1 ? (ct(r, s.off ? 0 : s.len, o, a), i && cr(i, r, s.textBit(o))) : (ct(r, s.off ? 0 : s.len, l.off ? 0 : l.ins, a), i && !l.off && cr(i, r, l.text));
        a = (s.ins > o || l.ins >= 0 && l.len > o) && (a || r.length > u), s.forward2(o), l.forward(o);
      }
    }
  }
}
class gs {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t = this.i - 2 >> 1;
    return t >= e.length ? ye.empty : e[t];
  }
  textBit(e) {
    let { inserted: t } = this.set, r = this.i - 2 >> 1;
    return r >= t.length && !e ? ye.empty : t[r].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
}
class Er {
  constructor(e, t, r) {
    this.from = e, this.to = t, this.flags = r;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, t = -1) {
    let r, i;
    return this.empty ? r = i = e.mapPos(this.from, t) : (r = e.mapPos(this.from, 1), i = e.mapPos(this.to, -1)), r == this.from && i == this.to ? this : new Er(r, i, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, t = e) {
    if (e <= this.anchor && t >= this.anchor)
      return _.range(e, t);
    let r = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
    return _.range(this.anchor, r);
  }
  /**
  Compare this range to another range.
  */
  eq(e, t = !1) {
    return this.anchor == e.anchor && this.head == e.head && (!t || !this.empty || this.assoc == e.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return _.range(e.anchor, e.head);
  }
  /**
  @internal
  */
  static create(e, t, r) {
    return new Er(e, t, r);
  }
}
class _ {
  constructor(e, t) {
    this.ranges = e, this.mainIndex = t;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, t = -1) {
    return e.empty ? this : _.create(this.ranges.map((r) => r.map(e, t)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(e, t = !1) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1;
    for (let r = 0; r < this.ranges.length; r++)
      if (!this.ranges[r].eq(e.ranges[r], t))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new _([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, t = !0) {
    return _.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, t = this.mainIndex) {
    let r = this.ranges.slice();
    return r[t] = e, _.create(r, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new _(e.ranges.map((t) => Er.fromJSON(t)), e.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, t = e) {
    return new _([_.range(e, t)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, t = 0) {
    if (e.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let r = 0, i = 0; i < e.length; i++) {
      let s = e[i];
      if (s.empty ? s.from <= r : s.from < r)
        return _.normalized(e.slice(), t);
      r = s.to;
    }
    return new _(e, t);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, t = 0, r, i) {
    return Er.create(e, e, (t == 0 ? 0 : t < 0 ? 8 : 16) | (r == null ? 7 : Math.min(6, r)) | (i ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(e, t, r, i) {
    let s = (r ?? 16777215) << 6 | (i == null ? 7 : Math.min(6, i));
    return t < e ? Er.create(t, e, 48 | s) : Er.create(e, t, (t > e ? 8 : 0) | s);
  }
  /**
  @internal
  */
  static normalized(e, t = 0) {
    let r = e[t];
    e.sort((i, s) => i.from - s.from), t = e.indexOf(r);
    for (let i = 1; i < e.length; i++) {
      let s = e[i], l = e[i - 1];
      if (s.empty ? s.from <= l.to : s.from < l.to) {
        let a = l.from, o = Math.max(s.to, l.to);
        i <= t && t--, e.splice(--i, 2, s.anchor > s.head ? _.range(o, a) : _.range(a, o));
      }
    }
    return new _(e, t);
  }
}
function vO(n, e) {
  for (let t of n.ranges)
    if (t.to > e)
      throw new RangeError("Selection points outside of document");
}
let Bh = 0;
class oe {
  constructor(e, t, r, i, s) {
    this.combine = e, this.compareInput = t, this.compare = r, this.isStatic = i, this.id = Bh++, this.default = e([]), this.extensions = typeof s == "function" ? s(this) : s;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new oe(e.combine || ((t) => t), e.compareInput || ((t, r) => t === r), e.compare || (e.combine ? (t, r) => t === r : Lh), !!e.static, e.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(e) {
    return new Fl([], this, 0, e);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Fl(e, this, 1, t);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Fl(e, this, 2, t);
  }
  from(e, t) {
    return t || (t = (r) => r), this.compute([e], (r) => t(r.field(e)));
  }
}
function Lh(n, e) {
  return n == e || n.length == e.length && n.every((t, r) => t === e[r]);
}
class Fl {
  constructor(e, t, r, i) {
    this.dependencies = e, this.facet = t, this.type = r, this.value = i, this.id = Bh++;
  }
  dynamicSlot(e) {
    var t;
    let r = this.value, i = this.facet.compareInput, s = this.id, l = e[s] >> 1, a = this.type == 2, o = !1, u = !1, h = [];
    for (let c of this.dependencies)
      c == "doc" ? o = !0 : c == "selection" ? u = !0 : ((t = e[c.id]) !== null && t !== void 0 ? t : 1) & 1 || h.push(e[c.id]);
    return {
      create(c) {
        return c.values[l] = r(c), 1;
      },
      update(c, f) {
        if (o && f.docChanged || u && (f.docChanged || f.selection) || s0(c, h)) {
          let d = r(c);
          if (a ? !Zd(d, c.values[l], i) : !i(d, c.values[l]))
            return c.values[l] = d, 1;
        }
        return 0;
      },
      reconfigure: (c, f) => {
        let d, m = f.config.address[s];
        if (m != null) {
          let O = ia(f, m);
          if (this.dependencies.every((x) => x instanceof oe ? f.facet(x) === c.facet(x) : x instanceof Rn ? f.field(x, !1) == c.field(x, !1) : !0) || (a ? Zd(d = r(c), O, i) : i(d = r(c), O)))
            return c.values[l] = O, 0;
        } else
          d = r(c);
        return c.values[l] = d, 1;
      }
    };
  }
}
function Zd(n, e, t) {
  if (n.length != e.length)
    return !1;
  for (let r = 0; r < n.length; r++)
    if (!t(n[r], e[r]))
      return !1;
  return !0;
}
function s0(n, e) {
  let t = !1;
  for (let r of e)
    ss(n, r) & 1 && (t = !0);
  return t;
}
function DS(n, e, t) {
  let r = t.map((o) => n[o.id]), i = t.map((o) => o.type), s = r.filter((o) => !(o & 1)), l = n[e.id] >> 1;
  function a(o) {
    let u = [];
    for (let h = 0; h < r.length; h++) {
      let c = ia(o, r[h]);
      if (i[h] == 2)
        for (let f of c)
          u.push(f);
      else
        u.push(c);
    }
    return e.combine(u);
  }
  return {
    create(o) {
      for (let u of r)
        ss(o, u);
      return o.values[l] = a(o), 1;
    },
    update(o, u) {
      if (!s0(o, s))
        return 0;
      let h = a(o);
      return e.compare(h, o.values[l]) ? 0 : (o.values[l] = h, 1);
    },
    reconfigure(o, u) {
      let h = s0(o, r), c = u.config.facets[e.id], f = u.facet(e);
      if (c && !h && Lh(t, c))
        return o.values[l] = f, 0;
      let d = a(o);
      return e.compare(d, f) ? (o.values[l] = f, 0) : (o.values[l] = d, 1);
    }
  };
}
const ml = /* @__PURE__ */ oe.define({ static: !0 });
class Rn {
  constructor(e, t, r, i, s) {
    this.id = e, this.createF = t, this.updateF = r, this.compareF = i, this.spec = s, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(e) {
    let t = new Rn(Bh++, e.create, e.update, e.compare || ((r, i) => r === i), e);
    return e.provide && (t.provides = e.provide(t)), t;
  }
  create(e) {
    let t = e.facet(ml).find((r) => r.field == this);
    return ((t == null ? void 0 : t.create) || this.createF)(e);
  }
  /**
  @internal
  */
  slot(e) {
    let t = e[this.id] >> 1;
    return {
      create: (r) => (r.values[t] = this.create(r), 1),
      update: (r, i) => {
        let s = r.values[t], l = this.updateF(s, i);
        return this.compareF(s, l) ? 0 : (r.values[t] = l, 1);
      },
      reconfigure: (r, i) => {
        let s = r.facet(ml), l = i.facet(ml), a;
        return (a = s.find((o) => o.field == this)) && a != l.find((o) => o.field == this) ? (r.values[t] = a.create(r), 1) : i.config.address[this.id] != null ? (r.values[t] = i.field(this), 0) : (r.values[t] = this.create(r), 1);
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, ml.of({ field: this, create: e })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const Mr = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function Li(n) {
  return (e) => new wO(e, n);
}
const Ai = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ Li(Mr.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ Li(Mr.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ Li(Mr.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ Li(Mr.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ Li(Mr.lowest)
};
class wO {
  constructor(e, t) {
    this.inner = e, this.prec = t;
  }
}
class Za {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new l0(this, e);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return Za.reconfigure.of({ compartment: this, extension: e });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this);
  }
}
class l0 {
  constructor(e, t) {
    this.compartment = e, this.inner = t;
  }
}
class ra {
  constructor(e, t, r, i, s, l) {
    for (this.base = e, this.compartments = t, this.dynamicSlots = r, this.address = i, this.staticValues = s, this.facets = l, this.statusTemplate = []; this.statusTemplate.length < r.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(e) {
    let t = this.address[e.id];
    return t == null ? e.default : this.staticValues[t >> 1];
  }
  static resolve(e, t, r) {
    let i = [], s = /* @__PURE__ */ Object.create(null), l = /* @__PURE__ */ new Map();
    for (let f of TS(e, t, l))
      f instanceof Rn ? i.push(f) : (s[f.facet.id] || (s[f.facet.id] = [])).push(f);
    let a = /* @__PURE__ */ Object.create(null), o = [], u = [];
    for (let f of i)
      a[f.id] = u.length << 1, u.push((d) => f.slot(d));
    let h = r == null ? void 0 : r.config.facets;
    for (let f in s) {
      let d = s[f], m = d[0].facet, O = h && h[f] || [];
      if (d.every(
        (x) => x.type == 0
        /* Provider.Static */
      ))
        if (a[m.id] = o.length << 1 | 1, Lh(O, d))
          o.push(r.facet(m));
        else {
          let x = m.combine(d.map((b) => b.value));
          o.push(r && m.compare(x, r.facet(m)) ? r.facet(m) : x);
        }
      else {
        for (let x of d)
          x.type == 0 ? (a[x.id] = o.length << 1 | 1, o.push(x.value)) : (a[x.id] = u.length << 1, u.push((b) => x.dynamicSlot(b)));
        a[m.id] = u.length << 1, u.push((x) => DS(x, m, d));
      }
    }
    let c = u.map((f) => f(a));
    return new ra(e, l, c, a, o, s);
  }
}
function TS(n, e, t) {
  let r = [[], [], [], [], []], i = /* @__PURE__ */ new Map();
  function s(l, a) {
    let o = i.get(l);
    if (o != null) {
      if (o <= a)
        return;
      let u = r[o].indexOf(l);
      u > -1 && r[o].splice(u, 1), l instanceof l0 && t.delete(l.compartment);
    }
    if (i.set(l, a), Array.isArray(l))
      for (let u of l)
        s(u, a);
    else if (l instanceof l0) {
      if (t.has(l.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let u = e.get(l.compartment) || l.inner;
      t.set(l.compartment, u), s(u, a);
    } else if (l instanceof wO)
      s(l.inner, l.prec);
    else if (l instanceof Rn)
      r[a].push(l), l.provides && s(l.provides, a);
    else if (l instanceof Fl)
      r[a].push(l), l.facet.extensions && s(l.facet.extensions, Mr.default);
    else {
      let u = l.extension;
      if (!u)
        throw new Error(`Unrecognized extension value in extension set (${l}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      s(u, a);
    }
  }
  return s(n, Mr.default), r.reduce((l, a) => l.concat(a));
}
function ss(n, e) {
  if (e & 1)
    return 2;
  let t = e >> 1, r = n.status[t];
  if (r == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (r & 2)
    return r;
  n.status[t] = 4;
  let i = n.computeSlot(n, n.config.dynamicSlots[t]);
  return n.status[t] = 2 | i;
}
function ia(n, e) {
  return e & 1 ? n.config.staticValues[e >> 1] : n.values[e >> 1];
}
const kO = /* @__PURE__ */ oe.define(), a0 = /* @__PURE__ */ oe.define({
  combine: (n) => n.some((e) => e),
  static: !0
}), SO = /* @__PURE__ */ oe.define({
  combine: (n) => n.length ? n[0] : void 0,
  static: !0
}), QO = /* @__PURE__ */ oe.define(), PO = /* @__PURE__ */ oe.define(), CO = /* @__PURE__ */ oe.define(), AO = /* @__PURE__ */ oe.define({
  combine: (n) => n.length ? n[0] : !1
});
class nr {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new MS();
  }
}
class MS {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new nr(this, e);
  }
}
class ES {
  /**
  @internal
  */
  constructor(e) {
    this.map = e;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new Ie(this, e);
  }
}
class Ie {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let t = this.type.map(this.value, e);
    return t === void 0 ? void 0 : t == this.value ? this : new Ie(this.type, t);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(e = {}) {
    return new ES(e.map || ((t) => t));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, t) {
    if (!e.length)
      return e;
    let r = [];
    for (let i of e) {
      let s = i.map(t);
      s && r.push(s);
    }
    return r;
  }
}
Ie.reconfigure = /* @__PURE__ */ Ie.define();
Ie.appendConfig = /* @__PURE__ */ Ie.define();
class Ke {
  constructor(e, t, r, i, s, l) {
    this.startState = e, this.changes = t, this.selection = r, this.effects = i, this.annotations = s, this.scrollIntoView = l, this._doc = null, this._state = null, r && vO(r, t.newLength), s.some((a) => a.type == Ke.time) || (this.annotations = s.concat(Ke.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(e, t, r, i, s, l) {
    return new Ke(e, t, r, i, s, l);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let t of this.annotations)
      if (t.type == e)
        return t.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let t = this.annotation(Ke.userEvent);
    return !!(t && (t == e || t.length > e.length && t.slice(0, e.length) == e && t[e.length] == "."));
  }
}
Ke.time = /* @__PURE__ */ nr.define();
Ke.userEvent = /* @__PURE__ */ nr.define();
Ke.addToHistory = /* @__PURE__ */ nr.define();
Ke.remote = /* @__PURE__ */ nr.define();
function RS(n, e) {
  let t = [];
  for (let r = 0, i = 0; ; ) {
    let s, l;
    if (r < n.length && (i == e.length || e[i] >= n[r]))
      s = n[r++], l = n[r++];
    else if (i < e.length)
      s = e[i++], l = e[i++];
    else
      return t;
    !t.length || t[t.length - 1] < s ? t.push(s, l) : t[t.length - 1] < l && (t[t.length - 1] = l);
  }
}
function $O(n, e, t) {
  var r;
  let i, s, l;
  return t ? (i = e.changes, s = it.empty(e.changes.length), l = n.changes.compose(e.changes)) : (i = e.changes.map(n.changes), s = n.changes.mapDesc(e.changes, !0), l = n.changes.compose(i)), {
    changes: l,
    selection: e.selection ? e.selection.map(s) : (r = n.selection) === null || r === void 0 ? void 0 : r.map(i),
    effects: Ie.mapEffects(n.effects, i).concat(Ie.mapEffects(e.effects, s)),
    annotations: n.annotations.length ? n.annotations.concat(e.annotations) : e.annotations,
    scrollIntoView: n.scrollIntoView || e.scrollIntoView
  };
}
function o0(n, e, t) {
  let r = e.selection, i = si(e.annotations);
  return e.userEvent && (i = i.concat(Ke.userEvent.of(e.userEvent))), {
    changes: e.changes instanceof it ? e.changes : it.of(e.changes || [], t, n.facet(SO)),
    selection: r && (r instanceof _ ? r : _.single(r.anchor, r.head)),
    effects: si(e.effects),
    annotations: i,
    scrollIntoView: !!e.scrollIntoView
  };
}
function DO(n, e, t) {
  let r = o0(n, e.length ? e[0] : {}, n.doc.length);
  e.length && e[0].filter === !1 && (t = !1);
  for (let s = 1; s < e.length; s++) {
    e[s].filter === !1 && (t = !1);
    let l = !!e[s].sequential;
    r = $O(r, o0(n, e[s], l ? r.changes.newLength : n.doc.length), l);
  }
  let i = Ke.create(n, r.changes, r.selection, r.effects, r.annotations, r.scrollIntoView);
  return zS(t ? ZS(i) : i);
}
function ZS(n) {
  let e = n.startState, t = !0;
  for (let i of e.facet(QO)) {
    let s = i(n);
    if (s === !1) {
      t = !1;
      break;
    }
    Array.isArray(s) && (t = t === !0 ? s : RS(t, s));
  }
  if (t !== !0) {
    let i, s;
    if (t === !1)
      s = n.changes.invertedDesc, i = it.empty(e.doc.length);
    else {
      let l = n.changes.filter(t);
      i = l.changes, s = l.filtered.mapDesc(l.changes).invertedDesc;
    }
    n = Ke.create(e, i, n.selection && n.selection.map(s), Ie.mapEffects(n.effects, s), n.annotations, n.scrollIntoView);
  }
  let r = e.facet(PO);
  for (let i = r.length - 1; i >= 0; i--) {
    let s = r[i](n);
    s instanceof Ke ? n = s : Array.isArray(s) && s.length == 1 && s[0] instanceof Ke ? n = s[0] : n = DO(e, si(s), !1);
  }
  return n;
}
function zS(n) {
  let e = n.startState, t = e.facet(CO), r = n;
  for (let i = t.length - 1; i >= 0; i--) {
    let s = t[i](n);
    s && Object.keys(s).length && (r = $O(r, o0(e, s, n.changes.newLength), !0));
  }
  return r == n ? n : Ke.create(e, n.changes, n.selection, r.effects, r.annotations, r.scrollIntoView);
}
const FS = [];
function si(n) {
  return n == null ? FS : Array.isArray(n) ? n : [n];
}
var Vn = /* @__PURE__ */ function(n) {
  return n[n.Word = 0] = "Word", n[n.Space = 1] = "Space", n[n.Other = 2] = "Other", n;
}(Vn || (Vn = {}));
const BS = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let u0;
try {
  u0 = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function LS(n) {
  if (u0)
    return u0.test(n);
  for (let e = 0; e < n.length; e++) {
    let t = n[e];
    if (/\w/.test(t) || t > "" && (t.toUpperCase() != t.toLowerCase() || BS.test(t)))
      return !0;
  }
  return !1;
}
function qS(n) {
  return (e) => {
    if (!/\S/.test(e))
      return Vn.Space;
    if (LS(e))
      return Vn.Word;
    for (let t = 0; t < n.length; t++)
      if (e.indexOf(n[t]) > -1)
        return Vn.Word;
    return Vn.Other;
  };
}
class Pe {
  constructor(e, t, r, i, s, l) {
    this.config = e, this.doc = t, this.selection = r, this.values = i, this.status = e.statusTemplate.slice(), this.computeSlot = s, l && (l._state = this);
    for (let a = 0; a < this.config.dynamicSlots.length; a++)
      ss(this, a << 1);
    this.computeSlot = null;
  }
  field(e, t = !0) {
    let r = this.config.address[e.id];
    if (r == null) {
      if (t)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return ss(this, r), ia(this, r);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return DO(this, e, !0);
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let t = this.config, { base: r, compartments: i } = t;
    for (let a of e.effects)
      a.is(Za.reconfigure) ? (t && (i = /* @__PURE__ */ new Map(), t.compartments.forEach((o, u) => i.set(u, o)), t = null), i.set(a.value.compartment, a.value.extension)) : a.is(Ie.reconfigure) ? (t = null, r = a.value) : a.is(Ie.appendConfig) && (t = null, r = si(r).concat(a.value));
    let s;
    t ? s = e.startState.values.slice() : (t = ra.resolve(r, i, this), s = new Pe(t, this.doc, this.selection, t.dynamicSlots.map(() => null), (o, u) => u.reconfigure(o, this), null).values);
    let l = e.startState.facet(a0) ? e.newSelection : e.newSelection.asSingle();
    new Pe(t, e.newDoc, l, s, (a, o) => o.update(a, e), e);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t) => ({
      changes: { from: t.from, to: t.to, insert: e },
      range: _.cursor(t.from + e.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let t = this.selection, r = e(t.ranges[0]), i = this.changes(r.changes), s = [r.range], l = si(r.effects);
    for (let a = 1; a < t.ranges.length; a++) {
      let o = e(t.ranges[a]), u = this.changes(o.changes), h = u.map(i);
      for (let f = 0; f < a; f++)
        s[f] = s[f].map(h);
      let c = i.mapDesc(u, !0);
      s.push(o.range.map(c)), i = i.compose(h), l = Ie.mapEffects(l, h).concat(Ie.mapEffects(si(o.effects), c));
    }
    return {
      changes: i,
      selection: _.create(s, t.mainIndex),
      effects: l
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof it ? e : it.of(e, this.doc.length, this.facet(Pe.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(e) {
    return ye.of(e.split(this.facet(Pe.lineSeparator) || n0));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, t = this.doc.length) {
    return this.doc.sliceString(e, t, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let t = this.config.address[e.id];
    return t == null ? e.default : (ss(this, t), ia(this, t));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let t = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (e)
      for (let r in e) {
        let i = e[r];
        i instanceof Rn && this.config.address[i.id] != null && (t[r] = i.spec.toJSON(this.field(e[r]), this));
      }
    return t;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, t = {}, r) {
    if (!e || typeof e.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let i = [];
    if (r) {
      for (let s in r)
        if (Object.prototype.hasOwnProperty.call(e, s)) {
          let l = r[s], a = e[s];
          i.push(l.init((o) => l.spec.fromJSON(a, o)));
        }
    }
    return Pe.create({
      doc: e.doc,
      selection: _.fromJSON(e.selection),
      extensions: t.extensions ? i.concat([t.extensions]) : i
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let t = ra.resolve(e.extensions || [], /* @__PURE__ */ new Map()), r = e.doc instanceof ye ? e.doc : ye.of((e.doc || "").split(t.staticFacet(Pe.lineSeparator) || n0)), i = e.selection ? e.selection instanceof _ ? e.selection : _.single(e.selection.anchor, e.selection.head) : _.single(0);
    return vO(i, r.length), t.staticFacet(a0) || (i = i.asSingle()), new Pe(t, r, i, t.dynamicSlots.map(() => null), (s, l) => l.create(s), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(Pe.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(Pe.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(AO);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(e, ...t) {
    for (let r of this.facet(Pe.phrases))
      if (Object.prototype.hasOwnProperty.call(r, e)) {
        e = r[e];
        break;
      }
    return t.length && (e = e.replace(/\$(\$|\d*)/g, (r, i) => {
      if (i == "$")
        return "$";
      let s = +(i || 1);
      return !s || s > t.length ? r : t[s - 1];
    })), e;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(e, t, r = -1) {
    let i = [];
    for (let s of this.facet(kO))
      for (let l of s(this, t, r))
        Object.prototype.hasOwnProperty.call(l, e) && i.push(l[e]);
    return i;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return qS(this.languageDataAt("wordChars", e).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: t, from: r, length: i } = this.doc.lineAt(e), s = this.charCategorizer(e), l = e - r, a = e - r;
    for (; l > 0; ) {
      let o = vt(t, l, !1);
      if (s(t.slice(o, l)) != Vn.Word)
        break;
      l = o;
    }
    for (; a < i; ) {
      let o = vt(t, a);
      if (s(t.slice(a, o)) != Vn.Word)
        break;
      a = o;
    }
    return l == a ? null : _.range(l + r, a + r);
  }
}
Pe.allowMultipleSelections = a0;
Pe.tabSize = /* @__PURE__ */ oe.define({
  combine: (n) => n.length ? n[0] : 4
});
Pe.lineSeparator = SO;
Pe.readOnly = AO;
Pe.phrases = /* @__PURE__ */ oe.define({
  compare(n, e) {
    let t = Object.keys(n), r = Object.keys(e);
    return t.length == r.length && t.every((i) => n[i] == e[i]);
  }
});
Pe.languageData = kO;
Pe.changeFilter = QO;
Pe.transactionFilter = PO;
Pe.transactionExtender = CO;
Za.reconfigure = /* @__PURE__ */ Ie.define();
function TO(n, e, t = {}) {
  let r = {};
  for (let i of n)
    for (let s of Object.keys(i)) {
      let l = i[s], a = r[s];
      if (a === void 0)
        r[s] = l;
      else if (!(a === l || l === void 0)) if (Object.hasOwnProperty.call(t, s))
        r[s] = t[s](a, l);
      else
        throw new Error("Config merge conflict for field " + s);
    }
  for (let i in e)
    r[i] === void 0 && (r[i] = e[i]);
  return r;
}
class Or {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(e) {
    return this == e;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(e, t = e) {
    return Os.create(e, t, this);
  }
}
Or.prototype.startSide = Or.prototype.endSide = 0;
Or.prototype.point = !1;
Or.prototype.mapMode = bt.TrackDel;
class Os {
  constructor(e, t, r) {
    this.from = e, this.to = t, this.value = r;
  }
  /**
  @internal
  */
  static create(e, t, r) {
    return new Os(e, t, r);
  }
}
function h0(n, e) {
  return n.from - e.from || n.value.startSide - e.value.startSide;
}
class qh {
  constructor(e, t, r, i) {
    this.from = e, this.to = t, this.value = r, this.maxPoint = i;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, t, r, i = 0) {
    let s = r ? this.to : this.from;
    for (let l = i, a = s.length; ; ) {
      if (l == a)
        return l;
      let o = l + a >> 1, u = s[o] - e || (r ? this.value[o].endSide : this.value[o].startSide) - t;
      if (o == l)
        return u >= 0 ? l : a;
      u >= 0 ? a = o : l = o + 1;
    }
  }
  between(e, t, r, i) {
    for (let s = this.findIndex(t, -1e9, !0), l = this.findIndex(r, 1e9, !1, s); s < l; s++)
      if (i(this.from[s] + e, this.to[s] + e, this.value[s]) === !1)
        return !1;
  }
  map(e, t) {
    let r = [], i = [], s = [], l = -1, a = -1;
    for (let o = 0; o < this.value.length; o++) {
      let u = this.value[o], h = this.from[o] + e, c = this.to[o] + e, f, d;
      if (h == c) {
        let m = t.mapPos(h, u.startSide, u.mapMode);
        if (m == null || (f = d = m, u.startSide != u.endSide && (d = t.mapPos(h, u.endSide), d < f)))
          continue;
      } else if (f = t.mapPos(h, u.startSide), d = t.mapPos(c, u.endSide), f > d || f == d && u.startSide > 0 && u.endSide <= 0)
        continue;
      (d - f || u.endSide - u.startSide) < 0 || (l < 0 && (l = f), u.point && (a = Math.max(a, d - f)), r.push(u), i.push(f - l), s.push(d - l));
    }
    return { mapped: r.length ? new qh(i, s, r, a) : null, pos: l };
  }
}
class Xe {
  constructor(e, t, r, i) {
    this.chunkPos = e, this.chunk = t, this.nextLayer = r, this.maxPoint = i;
  }
  /**
  @internal
  */
  static create(e, t, r, i) {
    return new Xe(e, t, r, i);
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let e = this.nextLayer.size;
    for (let t of this.chunk)
      e += t.value.length;
    return e;
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let { add: t = [], sort: r = !1, filterFrom: i = 0, filterTo: s = this.length } = e, l = e.filter;
    if (t.length == 0 && !l)
      return this;
    if (r && (t = t.slice().sort(h0)), this.isEmpty)
      return t.length ? Xe.of(t) : this;
    let a = new MO(this, null, -1).goto(0), o = 0, u = [], h = new ys();
    for (; a.value || o < t.length; )
      if (o < t.length && (a.from - t[o].from || a.startSide - t[o].value.startSide) >= 0) {
        let c = t[o++];
        h.addInner(c.from, c.to, c.value) || u.push(c);
      } else a.rangeIndex == 1 && a.chunkIndex < this.chunk.length && (o == t.length || this.chunkEnd(a.chunkIndex) < t[o].from) && (!l || i > this.chunkEnd(a.chunkIndex) || s < this.chunkPos[a.chunkIndex]) && h.addChunk(this.chunkPos[a.chunkIndex], this.chunk[a.chunkIndex]) ? a.nextChunk() : ((!l || i > a.to || s < a.from || l(a.from, a.to, a.value)) && (h.addInner(a.from, a.to, a.value) || u.push(Os.create(a.from, a.to, a.value))), a.next());
    return h.finishInner(this.nextLayer.isEmpty && !u.length ? Xe.empty : this.nextLayer.update({ add: u, filter: l, filterFrom: i, filterTo: s }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty)
      return this;
    let t = [], r = [], i = -1;
    for (let l = 0; l < this.chunk.length; l++) {
      let a = this.chunkPos[l], o = this.chunk[l], u = e.touchesRange(a, a + o.length);
      if (u === !1)
        i = Math.max(i, o.maxPoint), t.push(o), r.push(e.mapPos(a));
      else if (u === !0) {
        let { mapped: h, pos: c } = o.map(a, e);
        h && (i = Math.max(i, h.maxPoint), t.push(h), r.push(c));
      }
    }
    let s = this.nextLayer.map(e);
    return t.length == 0 ? s : new Xe(r, t, s || Xe.empty, i);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, t, r) {
    if (!this.isEmpty) {
      for (let i = 0; i < this.chunk.length; i++) {
        let s = this.chunkPos[i], l = this.chunk[i];
        if (t >= s && e <= s + l.length && l.between(s, e - s, t - s, r) === !1)
          return;
      }
      this.nextLayer.between(e, t, r);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return bs.from([this]).goto(e);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, t = 0) {
    return bs.from(e).goto(t);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, t, r, i, s = -1) {
    let l = e.filter((c) => c.maxPoint > 0 || !c.isEmpty && c.maxPoint >= s), a = t.filter((c) => c.maxPoint > 0 || !c.isEmpty && c.maxPoint >= s), o = zd(l, a, r), u = new qi(l, o, s), h = new qi(a, o, s);
    r.iterGaps((c, f, d) => Fd(u, c, h, f, d, i)), r.empty && r.length == 0 && Fd(u, 0, h, 0, 0, i);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, t, r = 0, i) {
    i == null && (i = 999999999);
    let s = e.filter((h) => !h.isEmpty && t.indexOf(h) < 0), l = t.filter((h) => !h.isEmpty && e.indexOf(h) < 0);
    if (s.length != l.length)
      return !1;
    if (!s.length)
      return !0;
    let a = zd(s, l), o = new qi(s, a, 0).goto(r), u = new qi(l, a, 0).goto(r);
    for (; ; ) {
      if (o.to != u.to || !c0(o.active, u.active) || o.point && (!u.point || !o.point.eq(u.point)))
        return !1;
      if (o.to > i)
        return !0;
      o.next(), u.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, t, r, i, s = -1) {
    let l = new qi(e, null, s).goto(t), a = t, o = l.openStart;
    for (; ; ) {
      let u = Math.min(l.to, r);
      if (l.point) {
        let h = l.activeForPoint(l.to), c = l.pointFrom < t ? h.length + 1 : l.point.startSide < 0 ? h.length : Math.min(h.length, o);
        i.point(a, u, l.point, h, c, l.pointRank), o = Math.min(l.openEnd(u), h.length);
      } else u > a && (i.span(a, u, l.active, o), o = l.openEnd(u));
      if (l.to > r)
        return o + (l.point && l.to > r ? 1 : 0);
      a = l.to, l.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, t = !1) {
    let r = new ys();
    for (let i of e instanceof Os ? [e] : t ? XS(e) : e)
      r.add(i.from, i.to, i.value);
    return r.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(e) {
    if (!e.length)
      return Xe.empty;
    let t = e[e.length - 1];
    for (let r = e.length - 2; r >= 0; r--)
      for (let i = e[r]; i != Xe.empty; i = i.nextLayer)
        t = new Xe(i.chunkPos, i.chunk, t, Math.max(i.maxPoint, t.maxPoint));
    return t;
  }
}
Xe.empty = /* @__PURE__ */ new Xe([], [], null, -1);
function XS(n) {
  if (n.length > 1)
    for (let e = n[0], t = 1; t < n.length; t++) {
      let r = n[t];
      if (h0(e, r) > 0)
        return n.slice().sort(h0);
      e = r;
    }
  return n;
}
Xe.empty.nextLayer = Xe.empty;
class ys {
  finishChunk(e) {
    this.chunks.push(new qh(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, t, r) {
    this.addInner(e, t, r) || (this.nextLayer || (this.nextLayer = new ys())).add(e, t, r);
  }
  /**
  @internal
  */
  addInner(e, t, r) {
    let i = e - this.lastTo || r.startSide - this.last.endSide;
    if (i <= 0 && (e - this.lastFrom || r.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return i < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t - this.chunkStart), this.last = r, this.lastFrom = e, this.lastTo = t, this.value.push(r), r.point && (this.maxPoint = Math.max(this.maxPoint, t - e)), !0);
  }
  /**
  @internal
  */
  addChunk(e, t) {
    if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint), this.chunks.push(t), this.chunkPos.push(e);
    let r = t.value.length - 1;
    return this.last = t.value[r], this.lastFrom = t.from[r] + e, this.lastTo = t.to[r] + e, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(Xe.empty);
  }
  /**
  @internal
  */
  finishInner(e) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return e;
    let t = Xe.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t;
  }
}
function zd(n, e, t) {
  let r = /* @__PURE__ */ new Map();
  for (let s of n)
    for (let l = 0; l < s.chunk.length; l++)
      s.chunk[l].maxPoint <= 0 && r.set(s.chunk[l], s.chunkPos[l]);
  let i = /* @__PURE__ */ new Set();
  for (let s of e)
    for (let l = 0; l < s.chunk.length; l++) {
      let a = r.get(s.chunk[l]);
      a != null && (t ? t.mapPos(a) : a) == s.chunkPos[l] && !(t != null && t.touchesRange(a, a + s.chunk[l].length)) && i.add(s.chunk[l]);
    }
  return i;
}
class MO {
  constructor(e, t, r, i = 0) {
    this.layer = e, this.skip = t, this.minPoint = r, this.rank = i;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t, !1), this;
  }
  gotoInner(e, t, r) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let i = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(i) || this.layer.chunkEnd(this.chunkIndex) < e || i.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, r = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let i = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
      (!r || this.rangeIndex < i) && this.setRangeIndex(i);
    }
    this.next();
  }
  forward(e, t) {
    (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let e = this.layer.chunkPos[this.chunkIndex], t = this.layer.chunk[this.chunkIndex], r = e + t.from[this.rangeIndex];
        if (this.from = r, this.to = e + t.to[this.rangeIndex], this.value = t.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
}
class bs {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t = null, r = -1) {
    let i = [];
    for (let s = 0; s < e.length; s++)
      for (let l = e[s]; !l.isEmpty; l = l.nextLayer)
        l.maxPoint >= r && i.push(new MO(l, t, r, s));
    return i.length == 1 ? i[0] : new bs(i);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t = -1e9) {
    for (let r of this.heap)
      r.goto(e, t);
    for (let r = this.heap.length >> 1; r >= 0; r--)
      Jo(this.heap, r);
    return this.next(), this;
  }
  forward(e, t) {
    for (let r of this.heap)
      r.forward(e, t);
    for (let r = this.heap.length >> 1; r >= 0; r--)
      Jo(this.heap, r);
    (this.to - e || this.value.endSide - t) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), Jo(this.heap, 0);
    }
  }
}
function Jo(n, e) {
  for (let t = n[e]; ; ) {
    let r = (e << 1) + 1;
    if (r >= n.length)
      break;
    let i = n[r];
    if (r + 1 < n.length && i.compare(n[r + 1]) >= 0 && (i = n[r + 1], r++), t.compare(i) < 0)
      break;
    n[r] = t, n[e] = i, e = r;
  }
}
class qi {
  constructor(e, t, r) {
    this.minPoint = r, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = bs.from(e, t, r);
  }
  goto(e, t = -1e9) {
    return this.cursor.goto(e, t), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t, this.openStart = -1, this.next(), this;
  }
  forward(e, t) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(e, t);
  }
  removeActive(e) {
    gl(this.active, e), gl(this.activeTo, e), gl(this.activeRank, e), this.minActive = Bd(this.active, this.activeTo);
  }
  addActive(e) {
    let t = 0, { value: r, to: i, rank: s } = this.cursor;
    for (; t < this.activeRank.length && (s - this.activeRank[t] || i - this.activeTo[t]) > 0; )
      t++;
    Ol(this.active, t, r), Ol(this.activeTo, t, i), Ol(this.activeRank, t, s), e && Ol(e, t, this.cursor.from), this.minActive = Bd(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to, t = this.point;
    this.point = null;
    let r = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let i = this.minActive;
      if (i > -1 && (this.activeTo[i] - this.cursor.from || this.active[i].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[i] > e) {
          this.to = this.activeTo[i], this.endSide = this.active[i].endSide;
          break;
        }
        this.removeActive(i), r && gl(r, i);
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let s = this.cursor.value;
          if (!s.point)
            this.addActive(r), this.cursor.next();
          else if (t && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = s, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = s.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (r) {
      this.openStart = 0;
      for (let i = r.length - 1; i >= 0 && r[i] < e; i--)
        this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length)
      return this.active;
    let t = [];
    for (let r = this.active.length - 1; r >= 0 && !(this.activeRank[r] < this.pointRank); r--)
      (this.activeTo[r] > e || this.activeTo[r] == e && this.active[r].endSide >= this.point.endSide) && t.push(this.active[r]);
    return t.reverse();
  }
  openEnd(e) {
    let t = 0;
    for (let r = this.activeTo.length - 1; r >= 0 && this.activeTo[r] > e; r--)
      t++;
    return t;
  }
}
function Fd(n, e, t, r, i, s) {
  n.goto(e), t.goto(r);
  let l = r + i, a = r, o = r - e;
  for (; ; ) {
    let u = n.to + o - t.to, h = u || n.endSide - t.endSide, c = h < 0 ? n.to + o : t.to, f = Math.min(c, l);
    if (n.point || t.point ? n.point && t.point && (n.point == t.point || n.point.eq(t.point)) && c0(n.activeForPoint(n.to), t.activeForPoint(t.to)) || s.comparePoint(a, f, n.point, t.point) : f > a && !c0(n.active, t.active) && s.compareRange(a, f, n.active, t.active), c > l)
      break;
    (u || n.openEnd != t.openEnd) && s.boundChange && s.boundChange(c), a = c, h <= 0 && n.next(), h >= 0 && t.next();
  }
}
function c0(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (n[t] != e[t] && !n[t].eq(e[t]))
      return !1;
  return !0;
}
function gl(n, e) {
  for (let t = e, r = n.length - 1; t < r; t++)
    n[t] = n[t + 1];
  n.pop();
}
function Ol(n, e, t) {
  for (let r = n.length - 1; r >= e; r--)
    n[r + 1] = n[r];
  n[e] = t;
}
function Bd(n, e) {
  let t = -1, r = 1e9;
  for (let i = 0; i < e.length; i++)
    (e[i] - r || n[i].endSide - n[t].endSide) < 0 && (t = i, r = e[i]);
  return t;
}
function Kn(n, e, t = n.length) {
  let r = 0;
  for (let i = 0; i < t && i < n.length; )
    n.charCodeAt(i) == 9 ? (r += e - r % e, i++) : (r++, i = vt(n, i));
  return r;
}
function IS(n, e, t, r) {
  for (let i = 0, s = 0; ; ) {
    if (s >= e)
      return i;
    if (i == n.length)
      break;
    s += n.charCodeAt(i) == 9 ? t - s % t : 1, i = vt(n, i);
  }
  return n.length;
}
const f0 = "ͼ", Ld = typeof Symbol > "u" ? "__" + f0 : Symbol.for(f0), d0 = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), qd = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class yr {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(e, t) {
    this.rules = [];
    let { finish: r } = t || {};
    function i(l) {
      return /^@/.test(l) ? [l] : l.split(/,\s*/);
    }
    function s(l, a, o, u) {
      let h = [], c = /^@(\w+)\b/.exec(l[0]), f = c && c[1] == "keyframes";
      if (c && a == null) return o.push(l[0] + ";");
      for (let d in a) {
        let m = a[d];
        if (/&/.test(d))
          s(
            d.split(/,\s*/).map((O) => l.map((x) => O.replace(/&/, x))).reduce((O, x) => O.concat(x)),
            m,
            o
          );
        else if (m && typeof m == "object") {
          if (!c) throw new RangeError("The value of a property (" + d + ") should be a primitive value.");
          s(i(d), m, h, f);
        } else m != null && h.push(d.replace(/_.*/, "").replace(/[A-Z]/g, (O) => "-" + O.toLowerCase()) + ": " + m + ";");
      }
      (h.length || f) && o.push((r && !c && !u ? l.map(r) : l).join(", ") + " {" + h.join(" ") + "}");
    }
    for (let l in e) s(i(l), e[l], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let e = qd[Ld] || 1;
    return qd[Ld] = e + 1, f0 + e.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(e, t, r) {
    let i = e[d0], s = r && r.nonce;
    i ? s && i.setNonce(s) : i = new NS(e, s), i.mount(Array.isArray(t) ? t : [t], e);
  }
}
let Xd = /* @__PURE__ */ new Map();
class NS {
  constructor(e, t) {
    let r = e.ownerDocument || e, i = r.defaultView;
    if (!e.head && e.adoptedStyleSheets && i.CSSStyleSheet) {
      let s = Xd.get(r);
      if (s) return e[d0] = s;
      this.sheet = new i.CSSStyleSheet(), Xd.set(r, this);
    } else
      this.styleTag = r.createElement("style"), t && this.styleTag.setAttribute("nonce", t);
    this.modules = [], e[d0] = this;
  }
  mount(e, t) {
    let r = this.sheet, i = 0, s = 0;
    for (let l = 0; l < e.length; l++) {
      let a = e[l], o = this.modules.indexOf(a);
      if (o < s && o > -1 && (this.modules.splice(o, 1), s--, o = -1), o == -1) {
        if (this.modules.splice(s++, 0, a), r) for (let u = 0; u < a.rules.length; u++)
          r.insertRule(a.rules[u], i++);
      } else {
        for (; s < o; ) i += this.modules[s++].rules.length;
        i += a.rules.length, s++;
      }
    }
    if (r)
      t.adoptedStyleSheets.indexOf(this.sheet) < 0 && (t.adoptedStyleSheets = [this.sheet, ...t.adoptedStyleSheets]);
    else {
      let l = "";
      for (let o = 0; o < this.modules.length; o++)
        l += this.modules[o].getRules() + `
`;
      this.styleTag.textContent = l;
      let a = t.head || t;
      this.styleTag.parentNode != a && a.insertBefore(this.styleTag, a.firstChild);
    }
  }
  setNonce(e) {
    this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e);
  }
}
var br = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, xs = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, VS = typeof navigator < "u" && /Mac/.test(navigator.platform), jS = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var ht = 0; ht < 10; ht++) br[48 + ht] = br[96 + ht] = String(ht);
for (var ht = 1; ht <= 24; ht++) br[ht + 111] = "F" + ht;
for (var ht = 65; ht <= 90; ht++)
  br[ht] = String.fromCharCode(ht + 32), xs[ht] = String.fromCharCode(ht);
for (var eu in br) xs.hasOwnProperty(eu) || (xs[eu] = br[eu]);
function _S(n) {
  var e = VS && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || jS && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", t = !e && n.key || (n.shiftKey ? xs : br)[n.keyCode] || n.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
function vs(n) {
  let e;
  return n.nodeType == 11 ? e = n.getSelection ? n : n.ownerDocument : e = n, e.getSelection();
}
function p0(n, e) {
  return e ? n == e || n.contains(e.nodeType != 1 ? e.parentNode : e) : !1;
}
function Bl(n, e) {
  if (!e.anchorNode)
    return !1;
  try {
    return p0(n, e.anchorNode);
  } catch {
    return !1;
  }
}
function ws(n) {
  return n.nodeType == 3 ? Lr(n, 0, n.nodeValue.length).getClientRects() : n.nodeType == 1 ? n.getClientRects() : [];
}
function ls(n, e, t, r) {
  return t ? Id(n, e, t, r, -1) || Id(n, e, t, r, 1) : !1;
}
function Br(n) {
  for (var e = 0; ; e++)
    if (n = n.previousSibling, !n)
      return e;
}
function sa(n) {
  return n.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n.nodeName);
}
function Id(n, e, t, r, i) {
  for (; ; ) {
    if (n == t && e == r)
      return !0;
    if (e == (i < 0 ? 0 : An(n))) {
      if (n.nodeName == "DIV")
        return !1;
      let s = n.parentNode;
      if (!s || s.nodeType != 1)
        return !1;
      e = Br(n) + (i < 0 ? 0 : 1), n = s;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[e + (i < 0 ? -1 : 0)], n.nodeType == 1 && n.contentEditable == "false")
        return !1;
      e = i < 0 ? An(n) : 0;
    } else
      return !1;
  }
}
function An(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function za(n, e) {
  let t = e ? n.left : n.right;
  return { left: t, right: t, top: n.top, bottom: n.bottom };
}
function US(n) {
  let e = n.visualViewport;
  return e ? {
    left: 0,
    right: e.width,
    top: 0,
    bottom: e.height
  } : {
    left: 0,
    right: n.innerWidth,
    top: 0,
    bottom: n.innerHeight
  };
}
function EO(n, e) {
  let t = e.width / n.offsetWidth, r = e.height / n.offsetHeight;
  return (t > 0.995 && t < 1.005 || !isFinite(t) || Math.abs(e.width - n.offsetWidth) < 1) && (t = 1), (r > 0.995 && r < 1.005 || !isFinite(r) || Math.abs(e.height - n.offsetHeight) < 1) && (r = 1), { scaleX: t, scaleY: r };
}
function WS(n, e, t, r, i, s, l, a) {
  let o = n.ownerDocument, u = o.defaultView || window;
  for (let h = n, c = !1; h && !c; )
    if (h.nodeType == 1) {
      let f, d = h == o.body, m = 1, O = 1;
      if (d)
        f = US(u);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(h).position) && (c = !0), h.scrollHeight <= h.clientHeight && h.scrollWidth <= h.clientWidth) {
          h = h.assignedSlot || h.parentNode;
          continue;
        }
        let w = h.getBoundingClientRect();
        ({ scaleX: m, scaleY: O } = EO(h, w)), f = {
          left: w.left,
          right: w.left + h.clientWidth * m,
          top: w.top,
          bottom: w.top + h.clientHeight * O
        };
      }
      let x = 0, b = 0;
      if (i == "nearest")
        e.top < f.top ? (b = -(f.top - e.top + l), t > 0 && e.bottom > f.bottom + b && (b = e.bottom - f.bottom + b + l)) : e.bottom > f.bottom && (b = e.bottom - f.bottom + l, t < 0 && e.top - b < f.top && (b = -(f.top + b - e.top + l)));
      else {
        let w = e.bottom - e.top, C = f.bottom - f.top;
        b = (i == "center" && w <= C ? e.top + w / 2 - C / 2 : i == "start" || i == "center" && t < 0 ? e.top - l : e.bottom - C + l) - f.top;
      }
      if (r == "nearest" ? e.left < f.left ? (x = -(f.left - e.left + s), t > 0 && e.right > f.right + x && (x = e.right - f.right + x + s)) : e.right > f.right && (x = e.right - f.right + s, t < 0 && e.left < f.left + x && (x = -(f.left + x - e.left + s))) : x = (r == "center" ? e.left + (e.right - e.left) / 2 - (f.right - f.left) / 2 : r == "start" == a ? e.left - s : e.right - (f.right - f.left) + s) - f.left, x || b)
        if (d)
          u.scrollBy(x, b);
        else {
          let w = 0, C = 0;
          if (b) {
            let Z = h.scrollTop;
            h.scrollTop += b / O, C = (h.scrollTop - Z) * O;
          }
          if (x) {
            let Z = h.scrollLeft;
            h.scrollLeft += x / m, w = (h.scrollLeft - Z) * m;
          }
          e = {
            left: e.left - w,
            top: e.top - C,
            right: e.right - w,
            bottom: e.bottom - C
          }, w && Math.abs(w - x) < 1 && (r = "nearest"), C && Math.abs(C - b) < 1 && (i = "nearest");
        }
      if (d)
        break;
      h = h.assignedSlot || h.parentNode;
    } else if (h.nodeType == 11)
      h = h.host;
    else
      break;
}
function YS(n) {
  let e = n.ownerDocument, t, r;
  for (let i = n.parentNode; i && !(i == e.body || t && r); )
    if (i.nodeType == 1)
      !r && i.scrollHeight > i.clientHeight && (r = i), !t && i.scrollWidth > i.clientWidth && (t = i), i = i.assignedSlot || i.parentNode;
    else if (i.nodeType == 11)
      i = i.host;
    else
      break;
  return { x: t, y: r };
}
class GS {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(e) {
    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;
  }
  setRange(e) {
    let { anchorNode: t, focusNode: r } = e;
    this.set(t, Math.min(e.anchorOffset, t ? An(t) : 0), r, Math.min(e.focusOffset, r ? An(r) : 0));
  }
  set(e, t, r, i) {
    this.anchorNode = e, this.anchorOffset = t, this.focusNode = r, this.focusOffset = i;
  }
}
let Kr = null;
function RO(n) {
  if (n.setActive)
    return n.setActive();
  if (Kr)
    return n.focus(Kr);
  let e = [];
  for (let t = n; t && (e.push(t, t.scrollTop, t.scrollLeft), t != t.ownerDocument); t = t.parentNode)
    ;
  if (n.focus(Kr == null ? {
    get preventScroll() {
      return Kr = { preventScroll: !0 }, !0;
    }
  } : void 0), !Kr) {
    Kr = !1;
    for (let t = 0; t < e.length; ) {
      let r = e[t++], i = e[t++], s = e[t++];
      r.scrollTop != i && (r.scrollTop = i), r.scrollLeft != s && (r.scrollLeft = s);
    }
  }
}
let Nd;
function Lr(n, e, t = e) {
  let r = Nd || (Nd = document.createRange());
  return r.setEnd(n, t), r.setStart(n, e), r;
}
function li(n, e, t, r) {
  let i = { key: e, code: e, keyCode: t, which: t, cancelable: !0 };
  r && ({ altKey: i.altKey, ctrlKey: i.ctrlKey, shiftKey: i.shiftKey, metaKey: i.metaKey } = r);
  let s = new KeyboardEvent("keydown", i);
  s.synthetic = !0, n.dispatchEvent(s);
  let l = new KeyboardEvent("keyup", i);
  return l.synthetic = !0, n.dispatchEvent(l), s.defaultPrevented || l.defaultPrevented;
}
function HS(n) {
  for (; n; ) {
    if (n && (n.nodeType == 9 || n.nodeType == 11 && n.host))
      return n;
    n = n.assignedSlot || n.parentNode;
  }
  return null;
}
function ZO(n) {
  for (; n.attributes.length; )
    n.removeAttributeNode(n.attributes[0]);
}
function KS(n, e) {
  let t = e.focusNode, r = e.focusOffset;
  if (!t || e.anchorNode != t || e.anchorOffset != r)
    return !1;
  for (r = Math.min(r, An(t)); ; )
    if (r) {
      if (t.nodeType != 1)
        return !1;
      let i = t.childNodes[r - 1];
      i.contentEditable == "false" ? r-- : (t = i, r = An(t));
    } else {
      if (t == n)
        return !0;
      r = Br(t), t = t.parentNode;
    }
}
function zO(n) {
  return n.scrollTop > Math.max(1, n.scrollHeight - n.clientHeight - 4);
}
function FO(n, e) {
  for (let t = n, r = e; ; ) {
    if (t.nodeType == 3 && r > 0)
      return { node: t, offset: r };
    if (t.nodeType == 1 && r > 0) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[r - 1], r = An(t);
    } else if (t.parentNode && !sa(t))
      r = Br(t), t = t.parentNode;
    else
      return null;
  }
}
function BO(n, e) {
  for (let t = n, r = e; ; ) {
    if (t.nodeType == 3 && r < t.nodeValue.length)
      return { node: t, offset: r };
    if (t.nodeType == 1 && r < t.childNodes.length) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[r], r = 0;
    } else if (t.parentNode && !sa(t))
      r = Br(t) + 1, t = t.parentNode;
    else
      return null;
  }
}
class ft {
  constructor(e, t, r = !0) {
    this.node = e, this.offset = t, this.precise = r;
  }
  static before(e, t) {
    return new ft(e.parentNode, Br(e), t);
  }
  static after(e, t) {
    return new ft(e.parentNode, Br(e) + 1, t);
  }
}
const Xh = [];
class Me {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(e) {
    let t = this.posAtStart;
    for (let r of this.children) {
      if (r == e)
        return t;
      t += r.length + r.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(e) {
    return this.posBefore(e) + e.length;
  }
  sync(e, t) {
    if (this.flags & 2) {
      let r = this.dom, i = null, s;
      for (let l of this.children) {
        if (l.flags & 7) {
          if (!l.dom && (s = i ? i.nextSibling : r.firstChild)) {
            let a = Me.get(s);
            (!a || !a.parent && a.canReuseDOM(l)) && l.reuseDOM(s);
          }
          l.sync(e, t), l.flags &= -8;
        }
        if (s = i ? i.nextSibling : r.firstChild, t && !t.written && t.node == r && s != l.dom && (t.written = !0), l.dom.parentNode == r)
          for (; s && s != l.dom; )
            s = Vd(s);
        else
          r.insertBefore(l.dom, s);
        i = l.dom;
      }
      for (s = i ? i.nextSibling : r.firstChild, s && t && t.node == r && (t.written = !0); s; )
        s = Vd(s);
    } else if (this.flags & 1)
      for (let r of this.children)
        r.flags & 7 && (r.sync(e, t), r.flags &= -8);
  }
  reuseDOM(e) {
  }
  localPosFromDOM(e, t) {
    let r;
    if (e == this.dom)
      r = this.dom.childNodes[t];
    else {
      let i = An(e) == 0 ? 0 : t == 0 ? -1 : 1;
      for (; ; ) {
        let s = e.parentNode;
        if (s == this.dom)
          break;
        i == 0 && s.firstChild != s.lastChild && (e == s.firstChild ? i = -1 : i = 1), e = s;
      }
      i < 0 ? r = e : r = e.nextSibling;
    }
    if (r == this.dom.firstChild)
      return 0;
    for (; r && !Me.get(r); )
      r = r.nextSibling;
    if (!r)
      return this.length;
    for (let i = 0, s = 0; ; i++) {
      let l = this.children[i];
      if (l.dom == r)
        return s;
      s += l.length + l.breakAfter;
    }
  }
  domBoundsAround(e, t, r = 0) {
    let i = -1, s = -1, l = -1, a = -1;
    for (let o = 0, u = r, h = r; o < this.children.length; o++) {
      let c = this.children[o], f = u + c.length;
      if (u < e && f > t)
        return c.domBoundsAround(e, t, u);
      if (f >= e && i == -1 && (i = o, s = u), u > t && c.dom.parentNode == this.dom) {
        l = o, a = h;
        break;
      }
      h = f, u = f + c.breakAfter;
    }
    return {
      from: s,
      to: a < 0 ? r + this.length : a,
      startDOM: (i ? this.children[i - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: l < this.children.length && l >= 0 ? this.children[l].dom : null
    };
  }
  markDirty(e = !1) {
    this.flags |= 2, this.markParentsDirty(e);
  }
  markParentsDirty(e) {
    for (let t = this.parent; t; t = t.parent) {
      if (e && (t.flags |= 2), t.flags & 1)
        return;
      t.flags |= 1, e = !1;
    }
  }
  setParent(e) {
    this.parent != e && (this.parent = e, this.flags & 7 && this.markParentsDirty(!0));
  }
  setDOM(e) {
    this.dom != e && (this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this);
  }
  get rootView() {
    for (let e = this; ; ) {
      let t = e.parent;
      if (!t)
        return e;
      e = t;
    }
  }
  replaceChildren(e, t, r = Xh) {
    this.markDirty();
    for (let i = e; i < t; i++) {
      let s = this.children[i];
      s.parent == this && r.indexOf(s) < 0 && s.destroy();
    }
    r.length < 250 ? this.children.splice(e, t - e, ...r) : this.children = [].concat(this.children.slice(0, e), r, this.children.slice(t));
    for (let i = 0; i < r.length; i++)
      r[i].setParent(this);
  }
  ignoreMutation(e) {
    return !1;
  }
  ignoreEvent(e) {
    return !1;
  }
  childCursor(e = this.length) {
    return new LO(this.children, e, this.children.length);
  }
  childPos(e, t = 1) {
    return this.childCursor().findPos(e, t);
  }
  toString() {
    let e = this.constructor.name.replace("View", "");
    return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (e == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(e) {
    return e.cmView;
  }
  get isEditable() {
    return !0;
  }
  get isWidget() {
    return !1;
  }
  get isHidden() {
    return !1;
  }
  merge(e, t, r, i, s, l) {
    return !1;
  }
  become(e) {
    return !1;
  }
  canReuseDOM(e) {
    return e.constructor == this.constructor && !((this.flags | e.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let e of this.children)
      e.parent == this && e.destroy();
    this.parent = null;
  }
}
Me.prototype.breakAfter = 0;
function Vd(n) {
  let e = n.nextSibling;
  return n.parentNode.removeChild(n), e;
}
class LO {
  constructor(e, t, r) {
    this.children = e, this.pos = t, this.i = r, this.off = 0;
  }
  findPos(e, t = 1) {
    for (; ; ) {
      if (e > this.pos || e == this.pos && (t > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = e - this.pos, this;
      let r = this.children[--this.i];
      this.pos -= r.length + r.breakAfter;
    }
  }
}
function qO(n, e, t, r, i, s, l, a, o) {
  let { children: u } = n, h = u.length ? u[e] : null, c = s.length ? s[s.length - 1] : null, f = c ? c.breakAfter : l;
  if (!(e == r && h && !l && !f && s.length < 2 && h.merge(t, i, s.length ? c : null, t == 0, a, o))) {
    if (r < u.length) {
      let d = u[r];
      d && (i < d.length || d.breakAfter && (c != null && c.breakAfter)) ? (e == r && (d = d.split(i), i = 0), !f && c && d.merge(0, i, c, !0, 0, o) ? s[s.length - 1] = d : ((i || d.children.length && !d.children[0].length) && d.merge(0, i, null, !1, 0, o), s.push(d))) : d != null && d.breakAfter && (c ? c.breakAfter = 1 : l = 1), r++;
    }
    for (h && (h.breakAfter = l, t > 0 && (!l && s.length && h.merge(t, h.length, s[0], !1, a, 0) ? h.breakAfter = s.shift().breakAfter : (t < h.length || h.children.length && h.children[h.children.length - 1].length == 0) && h.merge(t, h.length, null, !1, a, 0), e++)); e < r && s.length; )
      if (u[r - 1].become(s[s.length - 1]))
        r--, s.pop(), o = s.length ? 0 : a;
      else if (u[e].become(s[0]))
        e++, s.shift(), a = s.length ? 0 : o;
      else
        break;
    !s.length && e && r < u.length && !u[e - 1].breakAfter && u[r].merge(0, 0, u[e - 1], !1, a, o) && e--, (e < r || s.length) && n.replaceChildren(e, r, s);
  }
}
function XO(n, e, t, r, i, s) {
  let l = n.childCursor(), { i: a, off: o } = l.findPos(t, 1), { i: u, off: h } = l.findPos(e, -1), c = e - t;
  for (let f of r)
    c += f.length;
  n.length += c, qO(n, u, h, a, o, r, 0, i, s);
}
let Ct = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, m0 = typeof document < "u" ? document : { documentElement: { style: {} } };
const g0 = /* @__PURE__ */ /Edge\/(\d+)/.exec(Ct.userAgent), IO = /* @__PURE__ */ /MSIE \d/.test(Ct.userAgent), O0 = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Ct.userAgent), Fa = !!(IO || O0 || g0), jd = !Fa && /* @__PURE__ */ /gecko\/(\d+)/i.test(Ct.userAgent), tu = !Fa && /* @__PURE__ */ /Chrome\/(\d+)/.exec(Ct.userAgent), _d = "webkitFontSmoothing" in m0.documentElement.style, NO = !Fa && /* @__PURE__ */ /Apple Computer/.test(Ct.vendor), Ud = NO && (/* @__PURE__ */ /Mobile\/\w+/.test(Ct.userAgent) || Ct.maxTouchPoints > 2);
var ee = {
  mac: Ud || /* @__PURE__ */ /Mac/.test(Ct.platform),
  windows: /* @__PURE__ */ /Win/.test(Ct.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(Ct.platform),
  ie: Fa,
  ie_version: IO ? m0.documentMode || 6 : O0 ? +O0[1] : g0 ? +g0[1] : 0,
  gecko: jd,
  gecko_version: jd ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(Ct.userAgent) || [0, 0])[1] : 0,
  chrome: !!tu,
  chrome_version: tu ? +tu[1] : 0,
  ios: Ud,
  android: /* @__PURE__ */ /Android\b/.test(Ct.userAgent),
  webkit: _d,
  safari: NO,
  webkit_version: _d ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(Ct.userAgent) || [0, 0])[1] : 0,
  tabSize: m0.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const JS = 256;
class cn extends Me {
  constructor(e) {
    super(), this.text = e;
  }
  get length() {
    return this.text.length;
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text));
  }
  sync(e, t) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t && t.node == this.dom && (t.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e);
  }
  merge(e, t, r) {
    return this.flags & 8 || r && (!(r instanceof cn) || this.length - (t - e) + r.length > JS || r.flags & 8) ? !1 : (this.text = this.text.slice(0, e) + (r ? r.text : "") + this.text.slice(t), this.markDirty(), !0);
  }
  split(e) {
    let t = new cn(this.text.slice(e));
    return this.text = this.text.slice(0, e), this.markDirty(), t.flags |= this.flags & 8, t;
  }
  localPosFromDOM(e, t) {
    return e == this.dom ? t : t ? this.text.length : 0;
  }
  domAtPos(e) {
    return new ft(this.dom, e);
  }
  domBoundsAround(e, t, r) {
    return { from: r, to: r + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(e, t) {
    return e9(this.dom, e, t);
  }
}
class Jn extends Me {
  constructor(e, t = [], r = 0) {
    super(), this.mark = e, this.children = t, this.length = r;
    for (let i of t)
      i.setParent(this);
  }
  setAttrs(e) {
    if (ZO(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)
      for (let t in this.mark.attrs)
        e.setAttribute(t, this.mark.attrs[t]);
    return e;
  }
  canReuseDOM(e) {
    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e, t);
  }
  merge(e, t, r, i, s, l) {
    return r && (!(r instanceof Jn && r.mark.eq(this.mark)) || e && s <= 0 || t < this.length && l <= 0) ? !1 : (XO(this, e, t, r ? r.children.slice() : [], s - 1, l - 1), this.markDirty(), !0);
  }
  split(e) {
    let t = [], r = 0, i = -1, s = 0;
    for (let a of this.children) {
      let o = r + a.length;
      o > e && t.push(r < e ? a.split(e - r) : a), i < 0 && r >= e && (i = s), r = o, s++;
    }
    let l = this.length - e;
    return this.length = e, i > -1 && (this.children.length = i, this.markDirty()), new Jn(this.mark, t, l);
  }
  domAtPos(e) {
    return VO(this, e);
  }
  coordsAt(e, t) {
    return _O(this, e, t);
  }
}
function e9(n, e, t) {
  let r = n.nodeValue.length;
  e > r && (e = r);
  let i = e, s = e, l = 0;
  e == 0 && t < 0 || e == r && t >= 0 ? ee.chrome || ee.gecko || (e ? (i--, l = 1) : s < r && (s++, l = -1)) : t < 0 ? i-- : s < r && s++;
  let a = Lr(n, i, s).getClientRects();
  if (!a.length)
    return null;
  let o = a[(l ? l < 0 : t >= 0) ? 0 : a.length - 1];
  return ee.safari && !l && o.width == 0 && (o = Array.prototype.find.call(a, (u) => u.width) || o), l ? za(o, l < 0) : o || null;
}
class Rr extends Me {
  static create(e, t, r) {
    return new Rr(e, t, r);
  }
  constructor(e, t, r) {
    super(), this.widget = e, this.length = t, this.side = r, this.prevWidget = null;
  }
  split(e) {
    let t = Rr.create(this.widget, this.length - e, this.side);
    return this.length -= e, t;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(e, t, r, i, s, l) {
    return r && (!(r instanceof Rr) || !this.widget.compare(r.widget) || e > 0 && s <= 0 || t < this.length && l <= 0) ? !1 : (this.length = e + (r ? r.length : 0) + (this.length - t), !0);
  }
  become(e) {
    return e instanceof Rr && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.compare(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return ye.empty;
    let e = this;
    for (; e.parent; )
      e = e.parent;
    let { view: t } = e, r = t && t.state.doc, i = this.posAtStart;
    return r ? r.slice(i, i + this.length) : ye.empty;
  }
  domAtPos(e) {
    return (this.length ? e == 0 : this.side > 0) ? ft.before(this.dom) : ft.after(this.dom, e == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e, t) {
    let r = this.widget.coordsAt(this.dom, e, t);
    if (r)
      return r;
    let i = this.dom.getClientRects(), s = null;
    if (!i.length)
      return null;
    let l = this.side ? this.side < 0 : e > 0;
    for (let a = l ? i.length - 1 : 0; s = i[a], !(e > 0 ? a == 0 : a == i.length - 1 || s.top < s.bottom); a += l ? -1 : 1)
      ;
    return za(s, !l);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class fi extends Me {
  constructor(e) {
    super(), this.side = e;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(e) {
    return e instanceof fi && e.side == this.side;
  }
  split() {
    return new fi(this.side);
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement("img");
      e.className = "cm-widgetBuffer", e.setAttribute("aria-hidden", "true"), this.setDOM(e);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(e) {
    return this.side > 0 ? ft.before(this.dom) : ft.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return ye.empty;
  }
  get isHidden() {
    return !0;
  }
}
cn.prototype.children = Rr.prototype.children = fi.prototype.children = Xh;
function VO(n, e) {
  let t = n.dom, { children: r } = n, i = 0;
  for (let s = 0; i < r.length; i++) {
    let l = r[i], a = s + l.length;
    if (!(a == s && l.getSide() <= 0)) {
      if (e > s && e < a && l.dom.parentNode == t)
        return l.domAtPos(e - s);
      if (e <= s)
        break;
      s = a;
    }
  }
  for (let s = i; s > 0; s--) {
    let l = r[s - 1];
    if (l.dom.parentNode == t)
      return l.domAtPos(l.length);
  }
  for (let s = i; s < r.length; s++) {
    let l = r[s];
    if (l.dom.parentNode == t)
      return l.domAtPos(0);
  }
  return new ft(t, 0);
}
function jO(n, e, t) {
  let r, { children: i } = n;
  t > 0 && e instanceof Jn && i.length && (r = i[i.length - 1]) instanceof Jn && r.mark.eq(e.mark) ? jO(r, e.children[0], t - 1) : (i.push(e), e.setParent(n)), n.length += e.length;
}
function _O(n, e, t) {
  let r = null, i = -1, s = null, l = -1;
  function a(u, h) {
    for (let c = 0, f = 0; c < u.children.length && f <= h; c++) {
      let d = u.children[c], m = f + d.length;
      m >= h && (d.children.length ? a(d, h - f) : (!s || s.isHidden && t > 0) && (m > h || f == m && d.getSide() > 0) ? (s = d, l = h - f) : (f < h || f == m && d.getSide() < 0 && !d.isHidden) && (r = d, i = h - f)), f = m;
    }
  }
  a(n, e);
  let o = (t < 0 ? r : s) || r || s;
  return o ? o.coordsAt(Math.max(0, o == r ? i : l), t) : t9(n);
}
function t9(n) {
  let e = n.dom.lastChild;
  if (!e)
    return n.dom.getBoundingClientRect();
  let t = ws(e);
  return t[t.length - 1] || null;
}
function y0(n, e) {
  for (let t in n)
    t == "class" && e.class ? e.class += " " + n.class : t == "style" && e.style ? e.style += ";" + n.style : e[t] = n[t];
  return e;
}
const Wd = /* @__PURE__ */ Object.create(null);
function la(n, e, t) {
  if (n == e)
    return !0;
  n || (n = Wd), e || (e = Wd);
  let r = Object.keys(n), i = Object.keys(e);
  if (r.length - (t && r.indexOf(t) > -1 ? 1 : 0) != i.length - (t && i.indexOf(t) > -1 ? 1 : 0))
    return !1;
  for (let s of r)
    if (s != t && (i.indexOf(s) == -1 || n[s] !== e[s]))
      return !1;
  return !0;
}
function b0(n, e, t) {
  let r = !1;
  if (e)
    for (let i in e)
      t && i in t || (r = !0, i == "style" ? n.style.cssText = "" : n.removeAttribute(i));
  if (t)
    for (let i in t)
      e && e[i] == t[i] || (r = !0, i == "style" ? n.style.cssText = t[i] : n.setAttribute(i, t[i]));
  return r;
}
function n9(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t = 0; t < n.attributes.length; t++) {
    let r = n.attributes[t];
    e[r.name] = r.value;
  }
  return e;
}
class Ba {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e, t) {
    return !1;
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(e, t, r) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return !1;
  }
  /**
  @internal
  */
  get editable() {
    return !1;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {
  }
}
var Nt = /* @__PURE__ */ function(n) {
  return n[n.Text = 0] = "Text", n[n.WidgetBefore = 1] = "WidgetBefore", n[n.WidgetAfter = 2] = "WidgetAfter", n[n.WidgetRange = 3] = "WidgetRange", n;
}(Nt || (Nt = {}));
class Ue extends Or {
  constructor(e, t, r, i) {
    super(), this.startSide = e, this.endSide = t, this.widget = r, this.spec = i;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(e) {
    return new Is(e);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(e) {
    let t = Math.max(-1e4, Math.min(1e4, e.side || 0)), r = !!e.block;
    return t += r && !e.inlineOrder ? t > 0 ? 3e8 : -4e8 : t > 0 ? 1e8 : -1e8, new xr(e, t, t, r, e.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let t = !!e.block, r, i;
    if (e.isBlockGap)
      r = -5e8, i = 4e8;
    else {
      let { start: s, end: l } = UO(e, t);
      r = (s ? t ? -3e8 : -1 : 5e8) - 1, i = (l ? t ? 2e8 : 1 : -6e8) + 1;
    }
    return new xr(e, r, i, t, e.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new Ns(e);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, t = !1) {
    return Xe.of(e, t);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
}
Ue.none = Xe.empty;
class Is extends Ue {
  constructor(e) {
    let { start: t, end: r } = UO(e);
    super(t ? -1 : 5e8, r ? 1 : -6e8, null, e), this.tagName = e.tagName || "span", this.class = e.class || "", this.attrs = e.attributes || null;
  }
  eq(e) {
    var t, r;
    return this == e || e instanceof Is && this.tagName == e.tagName && (this.class || ((t = this.attrs) === null || t === void 0 ? void 0 : t.class)) == (e.class || ((r = e.attrs) === null || r === void 0 ? void 0 : r.class)) && la(this.attrs, e.attrs, "class");
  }
  range(e, t = e) {
    if (e >= t)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(e, t);
  }
}
Is.prototype.point = !1;
class Ns extends Ue {
  constructor(e) {
    super(-2e8, -2e8, null, e);
  }
  eq(e) {
    return e instanceof Ns && this.spec.class == e.spec.class && la(this.spec.attributes, e.spec.attributes);
  }
  range(e, t = e) {
    if (t != e)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(e, t);
  }
}
Ns.prototype.mapMode = bt.TrackBefore;
Ns.prototype.point = !0;
class xr extends Ue {
  constructor(e, t, r, i, s, l) {
    super(t, r, s, e), this.block = i, this.isReplace = l, this.mapMode = i ? t <= 0 ? bt.TrackBefore : bt.TrackAfter : bt.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? Nt.WidgetRange : this.startSide <= 0 ? Nt.WidgetBefore : Nt.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(e) {
    return e instanceof xr && r9(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
  }
  range(e, t = e) {
    if (this.isReplace && (e > t || e == t && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && t != e)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(e, t);
  }
}
xr.prototype.point = !0;
function UO(n, e = !1) {
  let { inclusiveStart: t, inclusiveEnd: r } = n;
  return t == null && (t = n.inclusive), r == null && (r = n.inclusive), { start: t ?? e, end: r ?? e };
}
function r9(n, e) {
  return n == e || !!(n && e && n.compare(e));
}
function Ll(n, e, t, r = 0) {
  let i = t.length - 1;
  i >= 0 && t[i] + r >= n ? t[i] = Math.max(t[i], e) : t.push(n, e);
}
class nt extends Me {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(e, t, r, i, s, l) {
    if (r) {
      if (!(r instanceof nt))
        return !1;
      this.dom || r.transferDOM(this);
    }
    return i && this.setDeco(r ? r.attrs : null), XO(this, e, t, r ? r.children.slice() : [], s, l), !0;
  }
  split(e) {
    let t = new nt();
    if (t.breakAfter = this.breakAfter, this.length == 0)
      return t;
    let { i: r, off: i } = this.childPos(e);
    i && (t.append(this.children[r].split(i), 0), this.children[r].merge(i, this.children[r].length, null, !1, 0, 0), r++);
    for (let s = r; s < this.children.length; s++)
      t.append(this.children[s], 0);
    for (; r > 0 && this.children[r - 1].length == 0; )
      this.children[--r].destroy();
    return this.children.length = r, this.markDirty(), this.length = e, t;
  }
  transferDOM(e) {
    this.dom && (this.markDirty(), e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(e) {
    la(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);
  }
  append(e, t) {
    jO(this, e, t);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let t = e.spec.attributes, r = e.spec.class;
    t && (this.attrs = y0(t, this.attrs || {})), r && (this.attrs = y0({ class: r }, this.attrs || {}));
  }
  domAtPos(e) {
    return VO(this, e);
  }
  reuseDOM(e) {
    e.nodeName == "DIV" && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    var r;
    this.dom ? this.flags & 4 && (ZO(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (b0(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(e, t);
    let i = this.dom.lastChild;
    for (; i && Me.get(i) instanceof Jn; )
      i = i.lastChild;
    if (!i || !this.length || i.nodeName != "BR" && ((r = Me.get(i)) === null || r === void 0 ? void 0 : r.isEditable) == !1 && (!ee.ios || !this.children.some((s) => s instanceof cn))) {
      let s = document.createElement("BR");
      s.cmIgnore = !0, this.dom.appendChild(s);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let e = 0, t;
    for (let r of this.children) {
      if (!(r instanceof cn) || /[^ -~]/.test(r.text))
        return null;
      let i = ws(r.dom);
      if (i.length != 1)
        return null;
      e += i[0].width, t = i[0].height;
    }
    return e ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: e / this.length,
      textHeight: t
    } : null;
  }
  coordsAt(e, t) {
    let r = _O(this, e, t);
    if (!this.children.length && r && this.parent) {
      let { heightOracle: i } = this.parent.view.viewState, s = r.bottom - r.top;
      if (Math.abs(s - i.lineHeight) < 2 && i.textHeight < s) {
        let l = (s - i.textHeight) / 2;
        return { top: r.top + l, bottom: r.bottom - l, left: r.left, right: r.left };
      }
    }
    return r;
  }
  become(e) {
    return e instanceof nt && this.children.length == 0 && e.children.length == 0 && la(this.attrs, e.attrs) && this.breakAfter == e.breakAfter;
  }
  covers() {
    return !0;
  }
  static find(e, t) {
    for (let r = 0, i = 0; r < e.children.length; r++) {
      let s = e.children[r], l = i + s.length;
      if (l >= t) {
        if (s instanceof nt)
          return s;
        if (l > t)
          break;
      }
      i = l + s.breakAfter;
    }
    return null;
  }
}
class Wn extends Me {
  constructor(e, t, r) {
    super(), this.widget = e, this.length = t, this.deco = r, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(e, t, r, i, s, l) {
    return r && (!(r instanceof Wn) || !this.widget.compare(r.widget) || e > 0 && s <= 0 || t < this.length && l <= 0) ? !1 : (this.length = e + (r ? r.length : 0) + (this.length - t), !0);
  }
  domAtPos(e) {
    return e == 0 ? ft.before(this.dom) : ft.after(this.dom, e == this.length);
  }
  split(e) {
    let t = this.length - e;
    this.length = e;
    let r = new Wn(this.widget, t, this.deco);
    return r.breakAfter = this.breakAfter, r;
  }
  get children() {
    return Xh;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : ye.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(e) {
    return e instanceof Wn && e.widget.constructor == this.widget.constructor ? (e.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.deco = e.deco, this.breakAfter = e.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  coordsAt(e, t) {
    let r = this.widget.coordsAt(this.dom, e, t);
    return r || (this.widget instanceof x0 ? null : za(this.dom.getBoundingClientRect(), this.length ? e == 0 : t <= 0));
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(e) {
    let { startSide: t, endSide: r } = this.deco;
    return t == r ? !1 : e < 0 ? t < 0 : r > 0;
  }
}
class x0 extends Ba {
  constructor(e) {
    super(), this.height = e;
  }
  toDOM() {
    let e = document.createElement("div");
    return e.className = "cm-gap", this.updateDOM(e), e;
  }
  eq(e) {
    return e.height == this.height;
  }
  updateDOM(e) {
    return e.style.height = this.height + "px", !0;
  }
  get editable() {
    return !0;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return !1;
  }
}
class as {
  constructor(e, t, r, i) {
    this.doc = e, this.pos = t, this.end = r, this.disallowBlockEffectsFor = i, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = e.iter(), this.skip = t;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let e = this.content[this.content.length - 1];
    return !(e.breakAfter || e instanceof Wn && e.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new nt()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(e = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(yl(new fi(-1), e), e.length), this.pendingBuffer = 0);
  }
  addBlockWidget(e) {
    this.flushBuffer(), this.curLine = null, this.content.push(e);
  }
  finish(e) {
    this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(e && this.content.length && this.content[this.content.length - 1] instanceof Wn) && this.getLine();
  }
  buildText(e, t, r) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: s, lineBreak: l, done: a } = this.cursor.next(this.skip);
        if (this.skip = 0, a)
          throw new Error("Ran out of text content when drawing inline views");
        if (l) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, e--;
          continue;
        } else
          this.text = s, this.textOff = 0;
      }
      let i = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* T.Chunk */
      );
      this.flushBuffer(t.slice(t.length - r)), this.getLine().append(yl(new cn(this.text.slice(this.textOff, this.textOff + i)), t), r), this.atCursorPos = !0, this.textOff += i, e -= i, r = 0;
    }
  }
  span(e, t, r, i) {
    this.buildText(t - e, r, i), this.pos = t, this.openStart < 0 && (this.openStart = i);
  }
  point(e, t, r, i, s, l) {
    if (this.disallowBlockEffectsFor[l] && r instanceof xr) {
      if (r.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (t > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let a = t - e;
    if (r instanceof xr)
      if (r.block)
        r.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new Wn(r.widget || di.block, a, r));
      else {
        let o = Rr.create(r.widget || di.inline, a, a ? 0 : r.startSide), u = this.atCursorPos && !o.isEditable && s <= i.length && (e < t || r.startSide > 0), h = !o.isEditable && (e < t || s > i.length || r.startSide <= 0), c = this.getLine();
        this.pendingBuffer == 2 && !u && !o.isEditable && (this.pendingBuffer = 0), this.flushBuffer(i), u && (c.append(yl(new fi(1), i), s), s = i.length + Math.max(0, s - i.length)), c.append(yl(o, i), s), this.atCursorPos = h, this.pendingBuffer = h ? e < t || s > i.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = i.slice());
      }
    else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(r);
    a && (this.textOff + a <= this.text.length ? this.textOff += a : (this.skip += a - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = t), this.openStart < 0 && (this.openStart = s);
  }
  static build(e, t, r, i, s) {
    let l = new as(e, t, r, s);
    return l.openEnd = Xe.spans(i, t, r, l), l.openStart < 0 && (l.openStart = l.openEnd), l.finish(l.openEnd), l;
  }
}
function yl(n, e) {
  for (let t of e)
    n = new Jn(t, [n], n.length);
  return n;
}
class di extends Ba {
  constructor(e) {
    super(), this.tag = e;
  }
  eq(e) {
    return e.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return !0;
  }
}
di.inline = /* @__PURE__ */ new di("span");
di.block = /* @__PURE__ */ new di("div");
var Je = /* @__PURE__ */ function(n) {
  return n[n.LTR = 0] = "LTR", n[n.RTL = 1] = "RTL", n;
}(Je || (Je = {}));
const qr = Je.LTR, Ih = Je.RTL;
function WO(n) {
  let e = [];
  for (let t = 0; t < n.length; t++)
    e.push(1 << +n[t]);
  return e;
}
const i9 = /* @__PURE__ */ WO("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), s9 = /* @__PURE__ */ WO("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), v0 = /* @__PURE__ */ Object.create(null), dn = [];
for (let n of ["()", "[]", "{}"]) {
  let e = /* @__PURE__ */ n.charCodeAt(0), t = /* @__PURE__ */ n.charCodeAt(1);
  v0[e] = t, v0[t] = -e;
}
function YO(n) {
  return n <= 247 ? i9[n] : 1424 <= n && n <= 1524 ? 2 : 1536 <= n && n <= 1785 ? s9[n - 1536] : 1774 <= n && n <= 2220 ? 4 : 8192 <= n && n <= 8204 ? 256 : 64336 <= n && n <= 65023 ? 4 : 1;
}
const l9 = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class fr {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? Ih : qr;
  }
  /**
  @internal
  */
  constructor(e, t, r) {
    this.from = e, this.to = t, this.level = r;
  }
  /**
  @internal
  */
  side(e, t) {
    return this.dir == t == e ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(e, t) {
    return e == (this.dir == t);
  }
  /**
  @internal
  */
  static find(e, t, r, i) {
    let s = -1;
    for (let l = 0; l < e.length; l++) {
      let a = e[l];
      if (a.from <= t && a.to >= t) {
        if (a.level == r)
          return l;
        (s < 0 || (i != 0 ? i < 0 ? a.from < t : a.to > t : e[s].level > a.level)) && (s = l);
      }
    }
    if (s < 0)
      throw new RangeError("Index out of range");
    return s;
  }
}
function GO(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++) {
    let r = n[t], i = e[t];
    if (r.from != i.from || r.to != i.to || r.direction != i.direction || !GO(r.inner, i.inner))
      return !1;
  }
  return !0;
}
const Te = [];
function a9(n, e, t, r, i) {
  for (let s = 0; s <= r.length; s++) {
    let l = s ? r[s - 1].to : e, a = s < r.length ? r[s].from : t, o = s ? 256 : i;
    for (let u = l, h = o, c = o; u < a; u++) {
      let f = YO(n.charCodeAt(u));
      f == 512 ? f = h : f == 8 && c == 4 && (f = 16), Te[u] = f == 4 ? 2 : f, f & 7 && (c = f), h = f;
    }
    for (let u = l, h = o, c = o; u < a; u++) {
      let f = Te[u];
      if (f == 128)
        u < a - 1 && h == Te[u + 1] && h & 24 ? f = Te[u] = h : Te[u] = 256;
      else if (f == 64) {
        let d = u + 1;
        for (; d < a && Te[d] == 64; )
          d++;
        let m = u && h == 8 || d < t && Te[d] == 8 ? c == 1 ? 1 : 8 : 256;
        for (let O = u; O < d; O++)
          Te[O] = m;
        u = d - 1;
      } else f == 8 && c == 1 && (Te[u] = 1);
      h = f, f & 7 && (c = f);
    }
  }
}
function o9(n, e, t, r, i) {
  let s = i == 1 ? 2 : 1;
  for (let l = 0, a = 0, o = 0; l <= r.length; l++) {
    let u = l ? r[l - 1].to : e, h = l < r.length ? r[l].from : t;
    for (let c = u, f, d, m; c < h; c++)
      if (d = v0[f = n.charCodeAt(c)])
        if (d < 0) {
          for (let O = a - 3; O >= 0; O -= 3)
            if (dn[O + 1] == -d) {
              let x = dn[O + 2], b = x & 2 ? i : x & 4 ? x & 1 ? s : i : 0;
              b && (Te[c] = Te[dn[O]] = b), a = O;
              break;
            }
        } else {
          if (dn.length == 189)
            break;
          dn[a++] = c, dn[a++] = f, dn[a++] = o;
        }
      else if ((m = Te[c]) == 2 || m == 1) {
        let O = m == i;
        o = O ? 0 : 1;
        for (let x = a - 3; x >= 0; x -= 3) {
          let b = dn[x + 2];
          if (b & 2)
            break;
          if (O)
            dn[x + 2] |= 2;
          else {
            if (b & 4)
              break;
            dn[x + 2] |= 4;
          }
        }
      }
  }
}
function u9(n, e, t, r) {
  for (let i = 0, s = r; i <= t.length; i++) {
    let l = i ? t[i - 1].to : n, a = i < t.length ? t[i].from : e;
    for (let o = l; o < a; ) {
      let u = Te[o];
      if (u == 256) {
        let h = o + 1;
        for (; ; )
          if (h == a) {
            if (i == t.length)
              break;
            h = t[i++].to, a = i < t.length ? t[i].from : e;
          } else if (Te[h] == 256)
            h++;
          else
            break;
        let c = s == 1, f = (h < e ? Te[h] : r) == 1, d = c == f ? c ? 1 : 2 : r;
        for (let m = h, O = i, x = O ? t[O - 1].to : n; m > o; )
          m == x && (m = t[--O].from, x = O ? t[O - 1].to : n), Te[--m] = d;
        o = h;
      } else
        s = u, o++;
    }
  }
}
function w0(n, e, t, r, i, s, l) {
  let a = r % 2 ? 2 : 1;
  if (r % 2 == i % 2)
    for (let o = e, u = 0; o < t; ) {
      let h = !0, c = !1;
      if (u == s.length || o < s[u].from) {
        let O = Te[o];
        O != a && (h = !1, c = O == 16);
      }
      let f = !h && a == 1 ? [] : null, d = h ? r : r + 1, m = o;
      e: for (; ; )
        if (u < s.length && m == s[u].from) {
          if (c)
            break e;
          let O = s[u];
          if (!h)
            for (let x = O.to, b = u + 1; ; ) {
              if (x == t)
                break e;
              if (b < s.length && s[b].from == x)
                x = s[b++].to;
              else {
                if (Te[x] == a)
                  break e;
                break;
              }
            }
          if (u++, f)
            f.push(O);
          else {
            O.from > o && l.push(new fr(o, O.from, d));
            let x = O.direction == qr != !(d % 2);
            k0(n, x ? r + 1 : r, i, O.inner, O.from, O.to, l), o = O.to;
          }
          m = O.to;
        } else {
          if (m == t || (h ? Te[m] != a : Te[m] == a))
            break;
          m++;
        }
      f ? w0(n, o, m, r + 1, i, f, l) : o < m && l.push(new fr(o, m, d)), o = m;
    }
  else
    for (let o = t, u = s.length; o > e; ) {
      let h = !0, c = !1;
      if (!u || o > s[u - 1].to) {
        let O = Te[o - 1];
        O != a && (h = !1, c = O == 16);
      }
      let f = !h && a == 1 ? [] : null, d = h ? r : r + 1, m = o;
      e: for (; ; )
        if (u && m == s[u - 1].to) {
          if (c)
            break e;
          let O = s[--u];
          if (!h)
            for (let x = O.from, b = u; ; ) {
              if (x == e)
                break e;
              if (b && s[b - 1].to == x)
                x = s[--b].from;
              else {
                if (Te[x - 1] == a)
                  break e;
                break;
              }
            }
          if (f)
            f.push(O);
          else {
            O.to < o && l.push(new fr(O.to, o, d));
            let x = O.direction == qr != !(d % 2);
            k0(n, x ? r + 1 : r, i, O.inner, O.from, O.to, l), o = O.from;
          }
          m = O.from;
        } else {
          if (m == e || (h ? Te[m - 1] != a : Te[m - 1] == a))
            break;
          m--;
        }
      f ? w0(n, m, o, r + 1, i, f, l) : m < o && l.push(new fr(m, o, d)), o = m;
    }
}
function k0(n, e, t, r, i, s, l) {
  let a = e % 2 ? 2 : 1;
  a9(n, i, s, r, a), o9(n, i, s, r, a), u9(i, s, r, a), w0(n, i, s, e, t, r, l);
}
function h9(n, e, t) {
  if (!n)
    return [new fr(0, 0, e == Ih ? 1 : 0)];
  if (e == qr && !t.length && !l9.test(n))
    return HO(n.length);
  if (t.length)
    for (; n.length > Te.length; )
      Te[Te.length] = 256;
  let r = [], i = e == qr ? 0 : 1;
  return k0(n, i, i, t, 0, n.length, r), r;
}
function HO(n) {
  return [new fr(0, n, 0)];
}
let KO = "";
function c9(n, e, t, r, i) {
  var s;
  let l = r.head - n.from, a = fr.find(e, l, (s = r.bidiLevel) !== null && s !== void 0 ? s : -1, r.assoc), o = e[a], u = o.side(i, t);
  if (l == u) {
    let f = a += i ? 1 : -1;
    if (f < 0 || f >= e.length)
      return null;
    o = e[a = f], l = o.side(!i, t), u = o.side(i, t);
  }
  let h = vt(n.text, l, o.forward(i, t));
  (h < o.from || h > o.to) && (h = u), KO = n.text.slice(Math.min(l, h), Math.max(l, h));
  let c = a == (i ? e.length - 1 : 0) ? null : e[a + (i ? 1 : -1)];
  return c && h == u && c.level + (i ? 0 : 1) < o.level ? _.cursor(c.side(!i, t) + n.from, c.forward(i, t) ? 1 : -1, c.level) : _.cursor(h + n.from, o.forward(i, t) ? -1 : 1, o.level);
}
function f9(n, e, t) {
  for (let r = e; r < t; r++) {
    let i = YO(n.charCodeAt(r));
    if (i == 1)
      return qr;
    if (i == 2 || i == 4)
      return Ih;
  }
  return qr;
}
const JO = /* @__PURE__ */ oe.define(), e4 = /* @__PURE__ */ oe.define(), t4 = /* @__PURE__ */ oe.define(), n4 = /* @__PURE__ */ oe.define(), S0 = /* @__PURE__ */ oe.define(), r4 = /* @__PURE__ */ oe.define(), i4 = /* @__PURE__ */ oe.define(), Nh = /* @__PURE__ */ oe.define(), Vh = /* @__PURE__ */ oe.define(), s4 = /* @__PURE__ */ oe.define({
  combine: (n) => n.some((e) => e)
}), l4 = /* @__PURE__ */ oe.define({
  combine: (n) => n.some((e) => e)
}), a4 = /* @__PURE__ */ oe.define();
class ai {
  constructor(e, t = "nearest", r = "nearest", i = 5, s = 5, l = !1) {
    this.range = e, this.y = t, this.x = r, this.yMargin = i, this.xMargin = s, this.isSnapshot = l;
  }
  map(e) {
    return e.empty ? this : new ai(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(e) {
    return this.range.to <= e.doc.length ? this : new ai(_.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
}
const bl = /* @__PURE__ */ Ie.define({ map: (n, e) => n.map(e) }), o4 = /* @__PURE__ */ Ie.define();
function Sn(n, e, t) {
  let r = n.facet(n4);
  r.length ? r[0](e) : window.onerror ? window.onerror(String(e), t, void 0, void 0, e) : t ? console.error(t + ":", e) : console.error(e);
}
const Nn = /* @__PURE__ */ oe.define({ combine: (n) => n.length ? n[0] : !0 });
let d9 = 0;
const Ui = /* @__PURE__ */ oe.define();
class $n {
  constructor(e, t, r, i, s) {
    this.id = e, this.create = t, this.domEventHandlers = r, this.domEventObservers = i, this.extension = s(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, t) {
    const { eventHandlers: r, eventObservers: i, provide: s, decorations: l } = t || {};
    return new $n(d9++, e, r, i, (a) => {
      let o = [Ui.of(a)];
      return l && o.push(ks.of((u) => {
        let h = u.plugin(a);
        return h ? l(h) : Ue.none;
      })), s && o.push(s(a)), o;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, t) {
    return $n.define((r) => new e(r), t);
  }
}
class nu {
  constructor(e) {
    this.spec = e, this.mustUpdate = null, this.value = null;
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let t = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(t);
          } catch (r) {
            if (Sn(t.state, r, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(e);
      } catch (t) {
        Sn(e.state, t, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(e) {
    var t;
    if (!((t = this.value) === null || t === void 0) && t.destroy)
      try {
        this.value.destroy();
      } catch (r) {
        Sn(e.state, r, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const u4 = /* @__PURE__ */ oe.define(), jh = /* @__PURE__ */ oe.define(), ks = /* @__PURE__ */ oe.define(), h4 = /* @__PURE__ */ oe.define(), _h = /* @__PURE__ */ oe.define(), c4 = /* @__PURE__ */ oe.define();
function Yd(n, e) {
  let t = n.state.facet(c4);
  if (!t.length)
    return t;
  let r = t.map((s) => s instanceof Function ? s(n) : s), i = [];
  return Xe.spans(r, e.from, e.to, {
    point() {
    },
    span(s, l, a, o) {
      let u = s - e.from, h = l - e.from, c = i;
      for (let f = a.length - 1; f >= 0; f--, o--) {
        let d = a[f].spec.bidiIsolate, m;
        if (d == null && (d = f9(e.text, u, h)), o > 0 && c.length && (m = c[c.length - 1]).to == u && m.direction == d)
          m.to = h, c = m.inner;
        else {
          let O = { from: u, to: h, direction: d, inner: [] };
          c.push(O), c = O.inner;
        }
      }
    }
  }), i;
}
const f4 = /* @__PURE__ */ oe.define();
function d4(n) {
  let e = 0, t = 0, r = 0, i = 0;
  for (let s of n.state.facet(f4)) {
    let l = s(n);
    l && (l.left != null && (e = Math.max(e, l.left)), l.right != null && (t = Math.max(t, l.right)), l.top != null && (r = Math.max(r, l.top)), l.bottom != null && (i = Math.max(i, l.bottom)));
  }
  return { left: e, right: t, top: r, bottom: i };
}
const Wi = /* @__PURE__ */ oe.define();
class Kt {
  constructor(e, t, r, i) {
    this.fromA = e, this.toA = t, this.fromB = r, this.toB = i;
  }
  join(e) {
    return new Kt(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));
  }
  addToSet(e) {
    let t = e.length, r = this;
    for (; t > 0; t--) {
      let i = e[t - 1];
      if (!(i.fromA > r.toA)) {
        if (i.toA < r.fromA)
          break;
        r = r.join(i), e.splice(t - 1, 1);
      }
    }
    return e.splice(t, 0, r), e;
  }
  static extendWithRanges(e, t) {
    if (t.length == 0)
      return e;
    let r = [];
    for (let i = 0, s = 0, l = 0, a = 0; ; i++) {
      let o = i == e.length ? null : e[i], u = l - a, h = o ? o.fromB : 1e9;
      for (; s < t.length && t[s] < h; ) {
        let c = t[s], f = t[s + 1], d = Math.max(a, c), m = Math.min(h, f);
        if (d <= m && new Kt(d + u, m + u, d, m).addToSet(r), f > h)
          break;
        s += 2;
      }
      if (!o)
        return r;
      new Kt(o.fromA, o.toA, o.fromB, o.toB).addToSet(r), l = o.toA, a = o.toB;
    }
  }
}
class aa {
  constructor(e, t, r) {
    this.view = e, this.state = t, this.transactions = r, this.flags = 0, this.startState = e.state, this.changes = it.empty(this.startState.doc.length);
    for (let s of r)
      this.changes = this.changes.compose(s.changes);
    let i = [];
    this.changes.iterChangedRanges((s, l, a, o) => i.push(new Kt(s, l, a, o))), this.changedRanges = i;
  }
  /**
  @internal
  */
  static create(e, t, r) {
    return new aa(e, t, r);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Returns true when
  [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
  and the viewport change is not just the result of mapping it in
  response to document changes.
  */
  get viewportMoved() {
    return (this.flags & 8) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 18) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
class Gd extends Me {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(e) {
    super(), this.view = e, this.decorations = [], this.dynamicDecorationMap = [!1], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.editContextFormatting = Ue.none, this.lastCompositionAfterCursor = !1, this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new nt()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new Kt(0, 0, 0, e.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(e) {
    var t;
    let r = e.changedRanges;
    this.minWidth > 0 && r.length && (r.every(({ fromA: u, toA: h }) => h < this.minWidthFrom || u > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.updateEditContextFormatting(e);
    let i = -1;
    this.view.inputState.composing >= 0 && !this.view.observer.editContext && (!((t = this.domChanged) === null || t === void 0) && t.newSel ? i = this.domChanged.newSel.head : !x9(e.changes, this.hasComposition) && !e.selectionSet && (i = e.state.selection.main.head));
    let s = i > -1 ? m9(this.view, e.changes, i) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: u, to: h } = this.hasComposition;
      r = new Kt(u, h, e.changes.mapPos(u, -1), e.changes.mapPos(h, 1)).addToSet(r.slice());
    }
    this.hasComposition = s ? { from: s.range.fromB, to: s.range.toB } : null, (ee.ie || ee.chrome) && !s && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
    let l = this.decorations, a = this.updateDeco(), o = y9(l, a, e.changes);
    return r = Kt.extendWithRanges(r, o), !(this.flags & 7) && r.length == 0 ? !1 : (this.updateInner(r, e.startState.doc.length, s), e.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, t, r) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, t, r);
    let { observer: i } = this.view;
    i.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let l = ee.chrome || ee.ios ? { node: i.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(this.view, l), this.flags &= -8, l && (l.written || i.selectionRange.focusNode != l.node) && (this.forceSelection = !0), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (l) => l.flags &= -9
      /* ViewFlag.Composition */
    );
    let s = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let l of this.children)
        l instanceof Wn && l.widget instanceof x0 && s.push(l.dom);
    i.updateGaps(s);
  }
  updateChildren(e, t, r) {
    let i = r ? r.range.addToSet(e.slice()) : e, s = this.childCursor(t);
    for (let l = i.length - 1; ; l--) {
      let a = l >= 0 ? i[l] : null;
      if (!a)
        break;
      let { fromA: o, toA: u, fromB: h, toB: c } = a, f, d, m, O;
      if (r && r.range.fromB < c && r.range.toB > h) {
        let Z = as.build(this.view.state.doc, h, r.range.fromB, this.decorations, this.dynamicDecorationMap), T = as.build(this.view.state.doc, r.range.toB, c, this.decorations, this.dynamicDecorationMap);
        d = Z.breakAtStart, m = Z.openStart, O = T.openEnd;
        let S = this.compositionView(r);
        T.breakAtStart ? S.breakAfter = 1 : T.content.length && S.merge(S.length, S.length, T.content[0], !1, T.openStart, 0) && (S.breakAfter = T.content[0].breakAfter, T.content.shift()), Z.content.length && S.merge(0, 0, Z.content[Z.content.length - 1], !0, 0, Z.openEnd) && Z.content.pop(), f = Z.content.concat(S).concat(T.content);
      } else
        ({ content: f, breakAtStart: d, openStart: m, openEnd: O } = as.build(this.view.state.doc, h, c, this.decorations, this.dynamicDecorationMap));
      let { i: x, off: b } = s.findPos(u, 1), { i: w, off: C } = s.findPos(o, -1);
      qO(this, w, C, x, b, f, d, m, O);
    }
    r && this.fixCompositionDOM(r);
  }
  updateEditContextFormatting(e) {
    this.editContextFormatting = this.editContextFormatting.map(e.changes);
    for (let t of e.transactions)
      for (let r of t.effects)
        r.is(o4) && (this.editContextFormatting = r.value);
  }
  compositionView(e) {
    let t = new cn(e.text.nodeValue);
    t.flags |= 8;
    for (let { deco: i } of e.marks)
      t = new Jn(i, [t], t.length);
    let r = new nt();
    return r.append(t, 0), r;
  }
  fixCompositionDOM(e) {
    let t = (s, l) => {
      l.flags |= 8 | (l.children.some(
        (o) => o.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(l);
      let a = Me.get(s);
      a && a != l && (a.dom = null), l.setDOM(s);
    }, r = this.childPos(e.range.fromB, 1), i = this.children[r.i];
    t(e.line, i);
    for (let s = e.marks.length - 1; s >= -1; s--)
      r = i.childPos(r.off, 1), i = i.children[r.i], t(s >= 0 ? e.marks[s].node : e.text, i);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, t = !1) {
    (e || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let r = this.view.root.activeElement, i = r == this.dom, s = !i && !(this.view.state.facet(Nn) || this.dom.tabIndex > -1) && Bl(this.dom, this.view.observer.selectionRange) && !(r && this.dom.contains(r));
    if (!(i || t || s))
      return;
    let l = this.forceSelection;
    this.forceSelection = !1;
    let a = this.view.state.selection.main, o = this.moveToLine(this.domAtPos(a.anchor)), u = a.empty ? o : this.moveToLine(this.domAtPos(a.head));
    if (ee.gecko && a.empty && !this.hasComposition && p9(o)) {
      let c = document.createTextNode("");
      this.view.observer.ignore(() => o.node.insertBefore(c, o.node.childNodes[o.offset] || null)), o = u = new ft(c, 0), l = !0;
    }
    let h = this.view.observer.selectionRange;
    (l || !h.focusNode || (!ls(o.node, o.offset, h.anchorNode, h.anchorOffset) || !ls(u.node, u.offset, h.focusNode, h.focusOffset)) && !this.suppressWidgetCursorChange(h, a)) && (this.view.observer.ignore(() => {
      ee.android && ee.chrome && this.dom.contains(h.focusNode) && b9(h.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let c = vs(this.view.root);
      if (c) if (a.empty) {
        if (ee.gecko) {
          let f = g9(o.node, o.offset);
          if (f && f != 3) {
            let d = (f == 1 ? FO : BO)(o.node, o.offset);
            d && (o = new ft(d.node, d.offset));
          }
        }
        c.collapse(o.node, o.offset), a.bidiLevel != null && c.caretBidiLevel !== void 0 && (c.caretBidiLevel = a.bidiLevel);
      } else if (c.extend) {
        c.collapse(o.node, o.offset);
        try {
          c.extend(u.node, u.offset);
        } catch {
        }
      } else {
        let f = document.createRange();
        a.anchor > a.head && ([o, u] = [u, o]), f.setEnd(u.node, u.offset), f.setStart(o.node, o.offset), c.removeAllRanges(), c.addRange(f);
      }
      s && this.view.root.activeElement == this.dom && (this.dom.blur(), r && r.focus());
    }), this.view.observer.setSelectionRange(o, u)), this.impreciseAnchor = o.precise ? null : new ft(h.anchorNode, h.anchorOffset), this.impreciseHead = u.precise ? null : new ft(h.focusNode, h.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(e, t) {
    return this.hasComposition && t.empty && ls(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == t.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: e } = this, t = e.state.selection.main, r = vs(e.root), { anchorNode: i, anchorOffset: s } = e.observer.selectionRange;
    if (!r || !t.empty || !t.assoc || !r.modify)
      return;
    let l = nt.find(this, t.head);
    if (!l)
      return;
    let a = l.posAtStart;
    if (t.head == a || t.head == a + l.length)
      return;
    let o = this.coordsAt(t.head, -1), u = this.coordsAt(t.head, 1);
    if (!o || !u || o.bottom > u.top)
      return;
    let h = this.domAtPos(t.head + t.assoc);
    r.collapse(h.node, h.offset), r.modify("move", t.assoc < 0 ? "forward" : "backward", "lineboundary"), e.observer.readSelectionRange();
    let c = e.observer.selectionRange;
    e.docView.posFromDOM(c.anchorNode, c.anchorOffset) != t.from && r.collapse(i, s);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(e) {
    let t = this.dom, r;
    if (e.node != t)
      return e;
    for (let i = e.offset; !r && i < t.childNodes.length; i++) {
      let s = Me.get(t.childNodes[i]);
      s instanceof nt && (r = s.domAtPos(0));
    }
    for (let i = e.offset - 1; !r && i >= 0; i--) {
      let s = Me.get(t.childNodes[i]);
      s instanceof nt && (r = s.domAtPos(s.length));
    }
    return r ? new ft(r.node, r.offset, !0) : e;
  }
  nearest(e) {
    for (let t = e; t; ) {
      let r = Me.get(t);
      if (r && r.rootView == this)
        return r;
      t = t.parentNode;
    }
    return null;
  }
  posFromDOM(e, t) {
    let r = this.nearest(e);
    if (!r)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return r.localPosFromDOM(e, t) + r.posAtStart;
  }
  domAtPos(e) {
    let { i: t, off: r } = this.childCursor().findPos(e, -1);
    for (; t < this.children.length - 1; ) {
      let i = this.children[t];
      if (r < i.length || i instanceof nt)
        break;
      t++, r = 0;
    }
    return this.children[t].domAtPos(r);
  }
  coordsAt(e, t) {
    let r = null, i = 0;
    for (let s = this.length, l = this.children.length - 1; l >= 0; l--) {
      let a = this.children[l], o = s - a.breakAfter, u = o - a.length;
      if (o < e)
        break;
      if (u <= e && (u < e || a.covers(-1)) && (o > e || a.covers(1)) && (!r || a instanceof nt && !(r instanceof nt && t >= 0)))
        r = a, i = u;
      else if (r && u == e && o == e && a instanceof Wn && Math.abs(t) < 2) {
        if (a.deco.startSide < 0)
          break;
        l && (r = null);
      }
      s = u;
    }
    return r ? r.coordsAt(e - i, t) : null;
  }
  coordsForChar(e) {
    let { i: t, off: r } = this.childPos(e, 1), i = this.children[t];
    if (!(i instanceof nt))
      return null;
    for (; i.children.length; ) {
      let { i: a, off: o } = i.childPos(r, 1);
      for (; ; a++) {
        if (a == i.children.length)
          return null;
        if ((i = i.children[a]).length)
          break;
      }
      r = o;
    }
    if (!(i instanceof cn))
      return null;
    let s = vt(i.text, r);
    if (s == r)
      return null;
    let l = Lr(i.dom, r, s).getClientRects();
    for (let a = 0; a < l.length; a++) {
      let o = l[a];
      if (a == l.length - 1 || o.top < o.bottom && o.left < o.right)
        return o;
    }
    return null;
  }
  measureVisibleLineHeights(e) {
    let t = [], { from: r, to: i } = e, s = this.view.contentDOM.clientWidth, l = s > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, a = -1, o = this.view.textDirection == Je.LTR;
    for (let u = 0, h = 0; h < this.children.length; h++) {
      let c = this.children[h], f = u + c.length;
      if (f > i)
        break;
      if (u >= r) {
        let d = c.dom.getBoundingClientRect();
        if (t.push(d.height), l) {
          let m = c.dom.lastChild, O = m ? ws(m) : [];
          if (O.length) {
            let x = O[O.length - 1], b = o ? x.right - d.left : d.right - x.left;
            b > a && (a = b, this.minWidth = s, this.minWidthFrom = u, this.minWidthTo = f);
          }
        }
      }
      u = f + c.breakAfter;
    }
    return t;
  }
  textDirectionAt(e) {
    let { i: t } = this.childPos(e, 1);
    return getComputedStyle(this.children[t].dom).direction == "rtl" ? Je.RTL : Je.LTR;
  }
  measureTextSize() {
    for (let s of this.children)
      if (s instanceof nt) {
        let l = s.measureTextSize();
        if (l)
          return l;
      }
    let e = document.createElement("div"), t, r, i;
    return e.className = "cm-line", e.style.width = "99999px", e.style.position = "absolute", e.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(e);
      let s = ws(e.firstChild)[0];
      t = e.getBoundingClientRect().height, r = s ? s.width / 27 : 7, i = s ? s.height : t, e.remove();
    }), { lineHeight: t, charWidth: r, textHeight: i };
  }
  childCursor(e = this.length) {
    let t = this.children.length;
    return t && (e -= this.children[--t].length), new LO(this.children, e, t);
  }
  computeBlockGapDeco() {
    let e = [], t = this.view.viewState;
    for (let r = 0, i = 0; ; i++) {
      let s = i == t.viewports.length ? null : t.viewports[i], l = s ? s.from - 1 : this.length;
      if (l > r) {
        let a = (t.lineBlockAt(l).bottom - t.lineBlockAt(r).top) / this.view.scaleY;
        e.push(Ue.replace({
          widget: new x0(a),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(r, l));
      }
      if (!s)
        break;
      r = s.to + 1;
    }
    return Ue.set(e);
  }
  updateDeco() {
    let e = 1, t = this.view.state.facet(ks).map((s) => (this.dynamicDecorationMap[e++] = typeof s == "function") ? s(this.view) : s), r = !1, i = this.view.state.facet(h4).map((s, l) => {
      let a = typeof s == "function";
      return a && (r = !0), a ? s(this.view) : s;
    });
    for (i.length && (this.dynamicDecorationMap[e++] = r, t.push(Xe.join(i))), this.decorations = [
      this.editContextFormatting,
      ...t,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ]; e < this.decorations.length; )
      this.dynamicDecorationMap[e++] = !1;
    return this.decorations;
  }
  scrollIntoView(e) {
    if (e.isSnapshot) {
      let u = this.view.viewState.lineBlockAt(e.range.head);
      this.view.scrollDOM.scrollTop = u.top - e.yMargin, this.view.scrollDOM.scrollLeft = e.xMargin;
      return;
    }
    for (let u of this.view.state.facet(a4))
      try {
        if (u(this.view, e.range, e))
          return !0;
      } catch (h) {
        Sn(this.view.state, h, "scroll handler");
      }
    let { range: t } = e, r = this.coordsAt(t.head, t.empty ? t.assoc : t.head > t.anchor ? -1 : 1), i;
    if (!r)
      return;
    !t.empty && (i = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) && (r = {
      left: Math.min(r.left, i.left),
      top: Math.min(r.top, i.top),
      right: Math.max(r.right, i.right),
      bottom: Math.max(r.bottom, i.bottom)
    });
    let s = d4(this.view), l = {
      left: r.left - s.left,
      top: r.top - s.top,
      right: r.right + s.right,
      bottom: r.bottom + s.bottom
    }, { offsetWidth: a, offsetHeight: o } = this.view.scrollDOM;
    WS(this.view.scrollDOM, l, t.head < t.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, a), -a), Math.max(Math.min(e.yMargin, o), -o), this.view.textDirection == Je.LTR);
  }
}
function p9(n) {
  return n.node.nodeType == 1 && n.node.firstChild && (n.offset == 0 || n.node.childNodes[n.offset - 1].contentEditable == "false") && (n.offset == n.node.childNodes.length || n.node.childNodes[n.offset].contentEditable == "false");
}
function p4(n, e) {
  let t = n.observer.selectionRange;
  if (!t.focusNode)
    return null;
  let r = FO(t.focusNode, t.focusOffset), i = BO(t.focusNode, t.focusOffset), s = r || i;
  if (i && r && i.node != r.node) {
    let a = Me.get(i.node);
    if (!a || a instanceof cn && a.text != i.node.nodeValue)
      s = i;
    else if (n.docView.lastCompositionAfterCursor) {
      let o = Me.get(r.node);
      !o || o instanceof cn && o.text != r.node.nodeValue || (s = i);
    }
  }
  if (n.docView.lastCompositionAfterCursor = s != r, !s)
    return null;
  let l = e - s.offset;
  return { from: l, to: l + s.node.nodeValue.length, node: s.node };
}
function m9(n, e, t) {
  let r = p4(n, t);
  if (!r)
    return null;
  let { node: i, from: s, to: l } = r, a = i.nodeValue;
  if (/[\n\r]/.test(a) || n.state.doc.sliceString(r.from, r.to) != a)
    return null;
  let o = e.invertedDesc, u = new Kt(o.mapPos(s), o.mapPos(l), s, l), h = [];
  for (let c = i.parentNode; ; c = c.parentNode) {
    let f = Me.get(c);
    if (f instanceof Jn)
      h.push({ node: c, deco: f.mark });
    else {
      if (f instanceof nt || c.nodeName == "DIV" && c.parentNode == n.contentDOM)
        return { range: u, text: i, marks: h, line: c };
      if (c != n.contentDOM)
        h.push({ node: c, deco: new Is({
          inclusive: !0,
          attributes: n9(c),
          tagName: c.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function g9(n, e) {
  return n.nodeType != 1 ? 0 : (e && n.childNodes[e - 1].contentEditable == "false" ? 1 : 0) | (e < n.childNodes.length && n.childNodes[e].contentEditable == "false" ? 2 : 0);
}
let O9 = class {
  constructor() {
    this.changes = [];
  }
  compareRange(e, t) {
    Ll(e, t, this.changes);
  }
  comparePoint(e, t) {
    Ll(e, t, this.changes);
  }
  boundChange(e) {
    Ll(e, e, this.changes);
  }
};
function y9(n, e, t) {
  let r = new O9();
  return Xe.compare(n, e, t, r), r.changes;
}
function b9(n, e) {
  for (let t = n; t && t != e; t = t.assignedSlot || t.parentNode)
    if (t.nodeType == 1 && t.contentEditable == "false")
      return !0;
  return !1;
}
function x9(n, e) {
  let t = !1;
  return e && n.iterChangedRanges((r, i) => {
    r < e.to && i > e.from && (t = !0);
  }), t;
}
function v9(n, e, t = 1) {
  let r = n.charCategorizer(e), i = n.doc.lineAt(e), s = e - i.from;
  if (i.length == 0)
    return _.cursor(e);
  s == 0 ? t = 1 : s == i.length && (t = -1);
  let l = s, a = s;
  t < 0 ? l = vt(i.text, s, !1) : a = vt(i.text, s);
  let o = r(i.text.slice(l, a));
  for (; l > 0; ) {
    let u = vt(i.text, l, !1);
    if (r(i.text.slice(u, l)) != o)
      break;
    l = u;
  }
  for (; a < i.length; ) {
    let u = vt(i.text, a);
    if (r(i.text.slice(a, u)) != o)
      break;
    a = u;
  }
  return _.range(l + i.from, a + i.from);
}
function w9(n, e) {
  return e.left > n ? e.left - n : Math.max(0, n - e.right);
}
function k9(n, e) {
  return e.top > n ? e.top - n : Math.max(0, n - e.bottom);
}
function ru(n, e) {
  return n.top < e.bottom - 1 && n.bottom > e.top + 1;
}
function Hd(n, e) {
  return e < n.top ? { top: e, left: n.left, right: n.right, bottom: n.bottom } : n;
}
function Kd(n, e) {
  return e > n.bottom ? { top: n.top, left: n.left, right: n.right, bottom: e } : n;
}
function Q0(n, e, t) {
  let r, i, s, l, a = !1, o, u, h, c;
  for (let m = n.firstChild; m; m = m.nextSibling) {
    let O = ws(m);
    for (let x = 0; x < O.length; x++) {
      let b = O[x];
      i && ru(i, b) && (b = Hd(Kd(b, i.bottom), i.top));
      let w = w9(e, b), C = k9(t, b);
      if (w == 0 && C == 0)
        return m.nodeType == 3 ? Jd(m, e, t) : Q0(m, e, t);
      if (!r || l > C || l == C && s > w) {
        r = m, i = b, s = w, l = C;
        let Z = C ? t < b.top ? -1 : 1 : w ? e < b.left ? -1 : 1 : 0;
        a = !Z || (Z > 0 ? x < O.length - 1 : x > 0);
      }
      w == 0 ? t > b.bottom && (!h || h.bottom < b.bottom) ? (o = m, h = b) : t < b.top && (!c || c.top > b.top) && (u = m, c = b) : h && ru(h, b) ? h = Kd(h, b.bottom) : c && ru(c, b) && (c = Hd(c, b.top));
    }
  }
  if (h && h.bottom >= t ? (r = o, i = h) : c && c.top <= t && (r = u, i = c), !r)
    return { node: n, offset: 0 };
  let f = Math.max(i.left, Math.min(i.right, e));
  if (r.nodeType == 3)
    return Jd(r, f, t);
  if (a && r.contentEditable != "false")
    return Q0(r, f, t);
  let d = Array.prototype.indexOf.call(n.childNodes, r) + (e >= (i.left + i.right) / 2 ? 1 : 0);
  return { node: n, offset: d };
}
function Jd(n, e, t) {
  let r = n.nodeValue.length, i = -1, s = 1e9, l = 0;
  for (let a = 0; a < r; a++) {
    let o = Lr(n, a, a + 1).getClientRects();
    for (let u = 0; u < o.length; u++) {
      let h = o[u];
      if (h.top == h.bottom)
        continue;
      l || (l = e - h.left);
      let c = (h.top > t ? h.top - t : t - h.bottom) - 1;
      if (h.left - 1 <= e && h.right + 1 >= e && c < s) {
        let f = e >= (h.left + h.right) / 2, d = f;
        if ((ee.chrome || ee.gecko) && Lr(n, a).getBoundingClientRect().left == h.right && (d = !f), c <= 0)
          return { node: n, offset: a + (d ? 1 : 0) };
        i = a + (d ? 1 : 0), s = c;
      }
    }
  }
  return { node: n, offset: i > -1 ? i : l > 0 ? n.nodeValue.length : 0 };
}
function m4(n, e, t, r = -1) {
  var i, s;
  let l = n.contentDOM.getBoundingClientRect(), a = l.top + n.viewState.paddingTop, o, { docHeight: u } = n.viewState, { x: h, y: c } = e, f = c - a;
  if (f < 0)
    return 0;
  if (f > u)
    return n.state.doc.length;
  for (let Z = n.viewState.heightOracle.textHeight / 2, T = !1; o = n.elementAtHeight(f), o.type != Nt.Text; )
    for (; f = r > 0 ? o.bottom + Z : o.top - Z, !(f >= 0 && f <= u); ) {
      if (T)
        return t ? null : 0;
      T = !0, r = -r;
    }
  c = a + f;
  let d = o.from;
  if (d < n.viewport.from)
    return n.viewport.from == 0 ? 0 : t ? null : ep(n, l, o, h, c);
  if (d > n.viewport.to)
    return n.viewport.to == n.state.doc.length ? n.state.doc.length : t ? null : ep(n, l, o, h, c);
  let m = n.dom.ownerDocument, O = n.root.elementFromPoint ? n.root : m, x = O.elementFromPoint(h, c);
  x && !n.contentDOM.contains(x) && (x = null), x || (h = Math.max(l.left + 1, Math.min(l.right - 1, h)), x = O.elementFromPoint(h, c), x && !n.contentDOM.contains(x) && (x = null));
  let b, w = -1;
  if (x && ((i = n.docView.nearest(x)) === null || i === void 0 ? void 0 : i.isEditable) != !1) {
    if (m.caretPositionFromPoint) {
      let Z = m.caretPositionFromPoint(h, c);
      Z && ({ offsetNode: b, offset: w } = Z);
    } else if (m.caretRangeFromPoint) {
      let Z = m.caretRangeFromPoint(h, c);
      Z && ({ startContainer: b, startOffset: w } = Z, (!n.contentDOM.contains(b) || ee.safari && S9(b, w, h) || ee.chrome && Q9(b, w, h)) && (b = void 0));
    }
    b && (w = Math.min(An(b), w));
  }
  if (!b || !n.docView.dom.contains(b)) {
    let Z = nt.find(n.docView, d);
    if (!Z)
      return f > o.top + o.height / 2 ? o.to : o.from;
    ({ node: b, offset: w } = Q0(Z.dom, h, c));
  }
  let C = n.docView.nearest(b);
  if (!C)
    return null;
  if (C.isWidget && ((s = C.dom) === null || s === void 0 ? void 0 : s.nodeType) == 1) {
    let Z = C.dom.getBoundingClientRect();
    return e.y < Z.top || e.y <= Z.bottom && e.x <= (Z.left + Z.right) / 2 ? C.posAtStart : C.posAtEnd;
  } else
    return C.localPosFromDOM(b, w) + C.posAtStart;
}
function ep(n, e, t, r, i) {
  let s = Math.round((r - e.left) * n.defaultCharacterWidth);
  if (n.lineWrapping && t.height > n.defaultLineHeight * 1.5) {
    let a = n.viewState.heightOracle.textHeight, o = Math.floor((i - t.top - (n.defaultLineHeight - a) * 0.5) / a);
    s += o * n.viewState.heightOracle.lineLength;
  }
  let l = n.state.sliceDoc(t.from, t.to);
  return t.from + IS(l, s, n.state.tabSize);
}
function S9(n, e, t) {
  let r;
  if (n.nodeType != 3 || e != (r = n.nodeValue.length))
    return !1;
  for (let i = n.nextSibling; i; i = i.nextSibling)
    if (i.nodeType != 1 || i.nodeName != "BR")
      return !1;
  return Lr(n, r - 1, r).getBoundingClientRect().left > t;
}
function Q9(n, e, t) {
  if (e != 0)
    return !1;
  for (let i = n; ; ) {
    let s = i.parentNode;
    if (!s || s.nodeType != 1 || s.firstChild != i)
      return !1;
    if (s.classList.contains("cm-line"))
      break;
    i = s;
  }
  let r = n.nodeType == 1 ? n.getBoundingClientRect() : Lr(n, 0, Math.max(n.nodeValue.length, 1)).getBoundingClientRect();
  return t - r.left > 5;
}
function P0(n, e) {
  let t = n.lineBlockAt(e);
  if (Array.isArray(t.type)) {
    for (let r of t.type)
      if (r.to > e || r.to == e && (r.to == t.to || r.type == Nt.Text))
        return r;
  }
  return t;
}
function P9(n, e, t, r) {
  let i = P0(n, e.head), s = !r || i.type != Nt.Text || !(n.lineWrapping || i.widgetLineBreaks) ? null : n.coordsAtPos(e.assoc < 0 && e.head > i.from ? e.head - 1 : e.head);
  if (s) {
    let l = n.dom.getBoundingClientRect(), a = n.textDirectionAt(i.from), o = n.posAtCoords({
      x: t == (a == Je.LTR) ? l.right - 1 : l.left + 1,
      y: (s.top + s.bottom) / 2
    });
    if (o != null)
      return _.cursor(o, t ? -1 : 1);
  }
  return _.cursor(t ? i.to : i.from, t ? -1 : 1);
}
function tp(n, e, t, r) {
  let i = n.state.doc.lineAt(e.head), s = n.bidiSpans(i), l = n.textDirectionAt(i.from);
  for (let a = e, o = null; ; ) {
    let u = c9(i, s, l, a, t), h = KO;
    if (!u) {
      if (i.number == (t ? n.state.doc.lines : 1))
        return a;
      h = `
`, i = n.state.doc.line(i.number + (t ? 1 : -1)), s = n.bidiSpans(i), u = n.visualLineSide(i, !t);
    }
    if (o) {
      if (!o(h))
        return a;
    } else {
      if (!r)
        return u;
      o = r(h);
    }
    a = u;
  }
}
function C9(n, e, t) {
  let r = n.state.charCategorizer(e), i = r(t);
  return (s) => {
    let l = r(s);
    return i == Vn.Space && (i = l), i == l;
  };
}
function A9(n, e, t, r) {
  let i = e.head, s = t ? 1 : -1;
  if (i == (t ? n.state.doc.length : 0))
    return _.cursor(i, e.assoc);
  let l = e.goalColumn, a, o = n.contentDOM.getBoundingClientRect(), u = n.coordsAtPos(i, e.assoc || -1), h = n.documentTop;
  if (u)
    l == null && (l = u.left - o.left), a = s < 0 ? u.top : u.bottom;
  else {
    let d = n.viewState.lineBlockAt(i);
    l == null && (l = Math.min(o.right - o.left, n.defaultCharacterWidth * (i - d.from))), a = (s < 0 ? d.top : d.bottom) + h;
  }
  let c = o.left + l, f = r ?? n.viewState.heightOracle.textHeight >> 1;
  for (let d = 0; ; d += 10) {
    let m = a + (f + d) * s, O = m4(n, { x: c, y: m }, !1, s);
    if (m < o.top || m > o.bottom || (s < 0 ? O < i : O > i)) {
      let x = n.docView.coordsForChar(O), b = !x || m < x.top ? -1 : 1;
      return _.cursor(O, b, void 0, l);
    }
  }
}
function ql(n, e, t) {
  for (; ; ) {
    let r = 0;
    for (let i of n)
      i.between(e - 1, e + 1, (s, l, a) => {
        if (e > s && e < l) {
          let o = r || t || (e - s < l - e ? -1 : 1);
          e = o < 0 ? s : l, r = o;
        }
      });
    if (!r)
      return e;
  }
}
function iu(n, e, t) {
  let r = ql(n.state.facet(_h).map((i) => i(n)), t.from, e.head > t.from ? -1 : 1);
  return r == t.from ? t : _.cursor(r, r < t.from ? 1 : -1);
}
const Yi = "￿";
class $9 {
  constructor(e, t) {
    this.points = e, this.text = "", this.lineSeparator = t.facet(Pe.lineSeparator);
  }
  append(e) {
    this.text += e;
  }
  lineBreak() {
    this.text += Yi;
  }
  readRange(e, t) {
    if (!e)
      return this;
    let r = e.parentNode;
    for (let i = e; ; ) {
      this.findPointBefore(r, i);
      let s = this.text.length;
      this.readNode(i);
      let l = i.nextSibling;
      if (l == t)
        break;
      let a = Me.get(i), o = Me.get(l);
      (a && o ? a.breakAfter : (a ? a.breakAfter : sa(i)) || sa(l) && (i.nodeName != "BR" || i.cmIgnore) && this.text.length > s) && this.lineBreak(), i = l;
    }
    return this.findPointBefore(r, t), this;
  }
  readTextNode(e) {
    let t = e.nodeValue;
    for (let r of this.points)
      r.node == e && (r.pos = this.text.length + Math.min(r.offset, t.length));
    for (let r = 0, i = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let s = -1, l = 1, a;
      if (this.lineSeparator ? (s = t.indexOf(this.lineSeparator, r), l = this.lineSeparator.length) : (a = i.exec(t)) && (s = a.index, l = a[0].length), this.append(t.slice(r, s < 0 ? t.length : s)), s < 0)
        break;
      if (this.lineBreak(), l > 1)
        for (let o of this.points)
          o.node == e && o.pos > this.text.length && (o.pos -= l - 1);
      r = s + l;
    }
  }
  readNode(e) {
    if (e.cmIgnore)
      return;
    let t = Me.get(e), r = t && t.overrideDOMText;
    if (r != null) {
      this.findPointInside(e, r.length);
      for (let i = r.iter(); !i.next().done; )
        i.lineBreak ? this.lineBreak() : this.append(i.value);
    } else e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == "BR" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);
  }
  findPointBefore(e, t) {
    for (let r of this.points)
      r.node == e && e.childNodes[r.offset] == t && (r.pos = this.text.length);
  }
  findPointInside(e, t) {
    for (let r of this.points)
      (e.nodeType == 3 ? r.node == e : e.contains(r.node)) && (r.pos = this.text.length + (D9(e, r.node, r.offset) ? t : 0));
  }
}
function D9(n, e, t) {
  for (; ; ) {
    if (!e || t < An(e))
      return !1;
    if (e == n)
      return !0;
    t = Br(e) + 1, e = e.parentNode;
  }
}
class np {
  constructor(e, t) {
    this.node = e, this.offset = t, this.pos = -1;
  }
}
class T9 {
  constructor(e, t, r, i) {
    this.typeOver = i, this.bounds = null, this.text = "", this.domChanged = t > -1;
    let { impreciseHead: s, impreciseAnchor: l } = e.docView;
    if (e.state.readOnly && t > -1)
      this.newSel = null;
    else if (t > -1 && (this.bounds = e.docView.domBoundsAround(t, r, 0))) {
      let a = s || l ? [] : R9(e), o = new $9(a, e.state);
      o.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = o.text, this.newSel = Z9(a, this.bounds.from);
    } else {
      let a = e.observer.selectionRange, o = s && s.node == a.focusNode && s.offset == a.focusOffset || !p0(e.contentDOM, a.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(a.focusNode, a.focusOffset), u = l && l.node == a.anchorNode && l.offset == a.anchorOffset || !p0(e.contentDOM, a.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(a.anchorNode, a.anchorOffset), h = e.viewport;
      if ((ee.ios || ee.chrome) && e.state.selection.main.empty && o != u && (h.from > 0 || h.to < e.state.doc.length)) {
        let c = Math.min(o, u), f = Math.max(o, u), d = h.from - c, m = h.to - f;
        (d == 0 || d == 1 || c == 0) && (m == 0 || m == -1 || f == e.state.doc.length) && (o = 0, u = e.state.doc.length);
      }
      this.newSel = _.single(u, o);
    }
  }
}
function g4(n, e) {
  let t, { newSel: r } = e, i = n.state.selection.main, s = n.inputState.lastKeyTime > Date.now() - 100 ? n.inputState.lastKeyCode : -1;
  if (e.bounds) {
    let { from: l, to: a } = e.bounds, o = i.from, u = null;
    (s === 8 || ee.android && e.text.length < a - l) && (o = i.to, u = "end");
    let h = E9(n.state.doc.sliceString(l, a, Yi), e.text, o - l, u);
    h && (ee.chrome && s == 13 && h.toB == h.from + 2 && e.text.slice(h.from, h.toB) == Yi + Yi && h.toB--, t = {
      from: l + h.from,
      to: l + h.toA,
      insert: ye.of(e.text.slice(h.from, h.toB).split(Yi))
    });
  } else r && (!n.hasFocus && n.state.facet(Nn) || r.main.eq(i)) && (r = null);
  if (!t && !r)
    return !1;
  if (!t && e.typeOver && !i.empty && r && r.main.empty ? t = { from: i.from, to: i.to, insert: n.state.doc.slice(i.from, i.to) } : (ee.mac || ee.android) && t && t.from == t.to && t.from == i.head - 1 && /^\. ?$/.test(t.insert.toString()) && n.contentDOM.getAttribute("autocorrect") == "off" ? (r && t.insert.length == 2 && (r = _.single(r.main.anchor - 1, r.main.head - 1)), t = { from: t.from, to: t.to, insert: ye.of([t.insert.toString().replace(".", " ")]) }) : t && t.from >= i.from && t.to <= i.to && (t.from != i.from || t.to != i.to) && i.to - i.from - (t.to - t.from) <= 4 ? t = {
    from: i.from,
    to: i.to,
    insert: n.state.doc.slice(i.from, t.from).append(t.insert).append(n.state.doc.slice(t.to, i.to))
  } : ee.chrome && t && t.from == t.to && t.from == i.head && t.insert.toString() == `
 ` && n.lineWrapping && (r && (r = _.single(r.main.anchor - 1, r.main.head - 1)), t = { from: i.from, to: i.to, insert: ye.of([" "]) }), t)
    return Uh(n, t, r, s);
  if (r && !r.main.eq(i)) {
    let l = !1, a = "select";
    return n.inputState.lastSelectionTime > Date.now() - 50 && (n.inputState.lastSelectionOrigin == "select" && (l = !0), a = n.inputState.lastSelectionOrigin), n.dispatch({ selection: r, scrollIntoView: l, userEvent: a }), !0;
  } else
    return !1;
}
function Uh(n, e, t, r = -1) {
  if (ee.ios && n.inputState.flushIOSKey(e))
    return !0;
  let i = n.state.selection.main;
  if (ee.android && (e.to == i.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (e.from == i.from || e.from == i.from - 1 && n.state.sliceDoc(e.from, i.from) == " ") && e.insert.length == 1 && e.insert.lines == 2 && li(n.contentDOM, "Enter", 13) || (e.from == i.from - 1 && e.to == i.to && e.insert.length == 0 || r == 8 && e.insert.length < e.to - e.from && e.to > i.head) && li(n.contentDOM, "Backspace", 8) || e.from == i.from && e.to == i.to + 1 && e.insert.length == 0 && li(n.contentDOM, "Delete", 46)))
    return !0;
  let s = e.insert.toString();
  n.inputState.composing >= 0 && n.inputState.composing++;
  let l, a = () => l || (l = M9(n, e, t));
  return n.state.facet(r4).some((o) => o(n, e.from, e.to, s, a)) || n.dispatch(a()), !0;
}
function M9(n, e, t) {
  let r, i = n.state, s = i.selection.main;
  if (e.from >= s.from && e.to <= s.to && e.to - e.from >= (s.to - s.from) / 3 && (!t || t.main.empty && t.main.from == e.from + e.insert.length) && n.inputState.composing < 0) {
    let a = s.from < e.from ? i.sliceDoc(s.from, e.from) : "", o = s.to > e.to ? i.sliceDoc(e.to, s.to) : "";
    r = i.replaceSelection(n.state.toText(a + e.insert.sliceString(0, void 0, n.state.lineBreak) + o));
  } else {
    let a = i.changes(e), o = t && t.main.to <= a.newLength ? t.main : void 0;
    if (i.selection.ranges.length > 1 && n.inputState.composing >= 0 && e.to <= s.to && e.to >= s.to - 10) {
      let u = n.state.sliceDoc(e.from, e.to), h, c = t && p4(n, t.main.head);
      if (c) {
        let m = e.insert.length - (e.to - e.from);
        h = { from: c.from, to: c.to - m };
      } else
        h = n.state.doc.lineAt(s.head);
      let f = s.to - e.to, d = s.to - s.from;
      r = i.changeByRange((m) => {
        if (m.from == s.from && m.to == s.to)
          return { changes: a, range: o || m.map(a) };
        let O = m.to - f, x = O - u.length;
        if (m.to - m.from != d || n.state.sliceDoc(x, O) != u || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        m.to >= h.from && m.from <= h.to)
          return { range: m };
        let b = i.changes({ from: x, to: O, insert: e.insert }), w = m.to - s.to;
        return {
          changes: b,
          range: o ? _.range(Math.max(0, o.anchor + w), Math.max(0, o.head + w)) : m.map(b)
        };
      });
    } else
      r = {
        changes: a,
        selection: o && i.selection.replaceRange(o)
      };
  }
  let l = "input.type";
  return (n.composing || n.inputState.compositionPendingChange && n.inputState.compositionEndedAt > Date.now() - 50) && (n.inputState.compositionPendingChange = !1, l += ".compose", n.inputState.compositionFirstChange && (l += ".start", n.inputState.compositionFirstChange = !1)), i.update(r, { userEvent: l, scrollIntoView: !0 });
}
function E9(n, e, t, r) {
  let i = Math.min(n.length, e.length), s = 0;
  for (; s < i && n.charCodeAt(s) == e.charCodeAt(s); )
    s++;
  if (s == i && n.length == e.length)
    return null;
  let l = n.length, a = e.length;
  for (; l > 0 && a > 0 && n.charCodeAt(l - 1) == e.charCodeAt(a - 1); )
    l--, a--;
  if (r == "end") {
    let o = Math.max(0, s - Math.min(l, a));
    t -= l + o - s;
  }
  if (l < s && n.length < e.length) {
    let o = t <= s && t >= l ? s - t : 0;
    s -= o, a = s + (a - l), l = s;
  } else if (a < s) {
    let o = t <= s && t >= a ? s - t : 0;
    s -= o, l = s + (l - a), a = s;
  }
  return { from: s, toA: l, toB: a };
}
function R9(n) {
  let e = [];
  if (n.root.activeElement != n.contentDOM)
    return e;
  let { anchorNode: t, anchorOffset: r, focusNode: i, focusOffset: s } = n.observer.selectionRange;
  return t && (e.push(new np(t, r)), (i != t || s != r) && e.push(new np(i, s))), e;
}
function Z9(n, e) {
  if (n.length == 0)
    return null;
  let t = n[0].pos, r = n.length == 2 ? n[1].pos : t;
  return t > -1 && r > -1 ? _.single(t + e, r + e) : null;
}
class z9 {
  setSelectionOrigin(e) {
    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();
  }
  constructor(e) {
    this.view = e, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.tabFocusMode = -1, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = e.hasFocus, ee.safari && e.contentDOM.addEventListener("input", () => null), ee.gecko && K9(e.contentDOM.ownerDocument);
  }
  handleEvent(e) {
    !V9(this.view, e) || this.ignoreDuringComposition(e) || e.type == "keydown" && this.keydown(e) || this.runHandlers(e.type, e);
  }
  runHandlers(e, t) {
    let r = this.handlers[e];
    if (r) {
      for (let i of r.observers)
        i(this.view, t);
      for (let i of r.handlers) {
        if (t.defaultPrevented)
          break;
        if (i(this.view, t)) {
          t.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(e) {
    let t = F9(e), r = this.handlers, i = this.view.contentDOM;
    for (let s in t)
      if (s != "scroll") {
        let l = !t[s].handlers.length, a = r[s];
        a && l != !a.handlers.length && (i.removeEventListener(s, this.handleEvent), a = null), a || i.addEventListener(s, this.handleEvent, { passive: l });
      }
    for (let s in r)
      s != "scroll" && !t[s] && i.removeEventListener(s, this.handleEvent);
    this.handlers = t;
  }
  keydown(e) {
    if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return !0;
    if (this.tabFocusMode > 0 && e.keyCode != 27 && y4.indexOf(e.keyCode) < 0 && (this.tabFocusMode = -1), ee.android && ee.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8))
      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0;
    let t;
    return ee.ios && !e.synthetic && !e.altKey && !e.metaKey && ((t = O4.find((r) => r.keyCode == e.keyCode)) && !e.ctrlKey || B9.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (this.pendingIOSKey = t || e, setTimeout(() => this.flushIOSKey(), 250), !0) : (e.keyCode != 229 && this.view.observer.forceFlush(), !1);
  }
  flushIOSKey(e) {
    let t = this.pendingIOSKey;
    return !t || t.key == "Enter" && e && e.from < e.to && /^\S+$/.test(e.insert.toString()) ? !1 : (this.pendingIOSKey = void 0, li(this.view.contentDOM, t.key, t.keyCode, t instanceof KeyboardEvent ? t : void 0));
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type) ? this.composing > 0 ? !0 : ee.safari && !ee.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;
  }
  update(e) {
    this.view.observer.update(e), this.mouseSelection && this.mouseSelection.update(e), this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
function rp(n, e) {
  return (t, r) => {
    try {
      return e.call(n, r, t);
    } catch (i) {
      Sn(t.state, i);
    }
  };
}
function F9(n) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(r) {
    return e[r] || (e[r] = { observers: [], handlers: [] });
  }
  for (let r of n) {
    let i = r.spec;
    if (i && i.domEventHandlers)
      for (let s in i.domEventHandlers) {
        let l = i.domEventHandlers[s];
        l && t(s).handlers.push(rp(r.value, l));
      }
    if (i && i.domEventObservers)
      for (let s in i.domEventObservers) {
        let l = i.domEventObservers[s];
        l && t(s).observers.push(rp(r.value, l));
      }
  }
  for (let r in fn)
    t(r).handlers.push(fn[r]);
  for (let r in tn)
    t(r).observers.push(tn[r]);
  return e;
}
const O4 = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], B9 = "dthko", y4 = [16, 17, 18, 20, 91, 92, 224, 225], xl = 6;
function vl(n) {
  return Math.max(0, n) * 0.7 + 8;
}
function L9(n, e) {
  return Math.max(Math.abs(n.clientX - e.clientX), Math.abs(n.clientY - e.clientY));
}
class q9 {
  constructor(e, t, r, i) {
    this.view = e, this.startEvent = t, this.style = r, this.mustSelect = i, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = t, this.scrollParents = YS(e.contentDOM), this.atoms = e.state.facet(_h).map((l) => l(e));
    let s = e.contentDOM.ownerDocument;
    s.addEventListener("mousemove", this.move = this.move.bind(this)), s.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = t.shiftKey, this.multiple = e.state.facet(Pe.allowMultipleSelections) && X9(e, t), this.dragging = N9(e, t) && v4(t) == 1 ? null : !1;
  }
  start(e) {
    this.dragging === !1 && this.select(e);
  }
  move(e) {
    if (e.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && L9(this.startEvent, e) < 10)
      return;
    this.select(this.lastEvent = e);
    let t = 0, r = 0, i = 0, s = 0, l = this.view.win.innerWidth, a = this.view.win.innerHeight;
    this.scrollParents.x && ({ left: i, right: l } = this.scrollParents.x.getBoundingClientRect()), this.scrollParents.y && ({ top: s, bottom: a } = this.scrollParents.y.getBoundingClientRect());
    let o = d4(this.view);
    e.clientX - o.left <= i + xl ? t = -vl(i - e.clientX) : e.clientX + o.right >= l - xl && (t = vl(e.clientX - l)), e.clientY - o.top <= s + xl ? r = -vl(s - e.clientY) : e.clientY + o.bottom >= a - xl && (r = vl(e.clientY - a)), this.setScrollSpeed(t, r);
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let e = this.view.contentDOM.ownerDocument;
    e.removeEventListener("mousemove", this.move), e.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(e, t) {
    this.scrollSpeed = { x: e, y: t }, e || t ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    let { x: e, y: t } = this.scrollSpeed;
    e && this.scrollParents.x && (this.scrollParents.x.scrollLeft += e, e = 0), t && this.scrollParents.y && (this.scrollParents.y.scrollTop += t, t = 0), (e || t) && this.view.win.scrollBy(e, t), this.dragging === !1 && this.select(this.lastEvent);
  }
  skipAtoms(e) {
    let t = null;
    for (let r = 0; r < e.ranges.length; r++) {
      let i = e.ranges[r], s = null;
      if (i.empty) {
        let l = ql(this.atoms, i.from, 0);
        l != i.from && (s = _.cursor(l, -1));
      } else {
        let l = ql(this.atoms, i.from, -1), a = ql(this.atoms, i.to, 1);
        (l != i.from || a != i.to) && (s = _.range(i.from == i.anchor ? l : a, i.from == i.head ? l : a));
      }
      s && (t || (t = e.ranges.slice()), t[r] = s);
    }
    return t ? _.create(t, e.mainIndex) : e;
  }
  select(e) {
    let { view: t } = this, r = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
    (this.mustSelect || !r.eq(t.state.selection, this.dragging === !1)) && this.view.dispatch({
      selection: r,
      userEvent: "select.pointer"
    }), this.mustSelect = !1;
  }
  update(e) {
    e.transactions.some((t) => t.isUserEvent("input.type")) ? this.destroy() : this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function X9(n, e) {
  let t = n.state.facet(JO);
  return t.length ? t[0](e) : ee.mac ? e.metaKey : e.ctrlKey;
}
function I9(n, e) {
  let t = n.state.facet(e4);
  return t.length ? t[0](e) : ee.mac ? !e.altKey : !e.ctrlKey;
}
function N9(n, e) {
  let { main: t } = n.state.selection;
  if (t.empty)
    return !1;
  let r = vs(n.root);
  if (!r || r.rangeCount == 0)
    return !0;
  let i = r.getRangeAt(0).getClientRects();
  for (let s = 0; s < i.length; s++) {
    let l = i[s];
    if (l.left <= e.clientX && l.right >= e.clientX && l.top <= e.clientY && l.bottom >= e.clientY)
      return !0;
  }
  return !1;
}
function V9(n, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target, r; t != n.contentDOM; t = t.parentNode)
    if (!t || t.nodeType == 11 || (r = Me.get(t)) && r.ignoreEvent(e))
      return !1;
  return !0;
}
const fn = /* @__PURE__ */ Object.create(null), tn = /* @__PURE__ */ Object.create(null), b4 = ee.ie && ee.ie_version < 15 || ee.ios && ee.webkit_version < 604;
function j9(n) {
  let e = n.dom.parentNode;
  if (!e)
    return;
  let t = e.appendChild(document.createElement("textarea"));
  t.style.cssText = "position: fixed; left: -10000px; top: 10px", t.focus(), setTimeout(() => {
    n.focus(), t.remove(), x4(n, t.value);
  }, 50);
}
function La(n, e, t) {
  for (let r of n.facet(e))
    t = r(t, n);
  return t;
}
function x4(n, e) {
  e = La(n.state, Nh, e);
  let { state: t } = n, r, i = 1, s = t.toText(e), l = s.lines == t.selection.ranges.length;
  if (C0 != null && t.selection.ranges.every((o) => o.empty) && C0 == s.toString()) {
    let o = -1;
    r = t.changeByRange((u) => {
      let h = t.doc.lineAt(u.from);
      if (h.from == o)
        return { range: u };
      o = h.from;
      let c = t.toText((l ? s.line(i++).text : e) + t.lineBreak);
      return {
        changes: { from: h.from, insert: c },
        range: _.cursor(u.from + c.length)
      };
    });
  } else l ? r = t.changeByRange((o) => {
    let u = s.line(i++);
    return {
      changes: { from: o.from, to: o.to, insert: u.text },
      range: _.cursor(o.from + u.length)
    };
  }) : r = t.replaceSelection(s);
  n.dispatch(r, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
tn.scroll = (n) => {
  n.inputState.lastScrollTop = n.scrollDOM.scrollTop, n.inputState.lastScrollLeft = n.scrollDOM.scrollLeft;
};
fn.keydown = (n, e) => (n.inputState.setSelectionOrigin("select"), e.keyCode == 27 && n.inputState.tabFocusMode != 0 && (n.inputState.tabFocusMode = Date.now() + 2e3), !1);
tn.touchstart = (n, e) => {
  n.inputState.lastTouchTime = Date.now(), n.inputState.setSelectionOrigin("select.pointer");
};
tn.touchmove = (n) => {
  n.inputState.setSelectionOrigin("select.pointer");
};
fn.mousedown = (n, e) => {
  if (n.observer.flush(), n.inputState.lastTouchTime > Date.now() - 2e3)
    return !1;
  let t = null;
  for (let r of n.state.facet(t4))
    if (t = r(n, e), t)
      break;
  if (!t && e.button == 0 && (t = W9(n, e)), t) {
    let r = !n.hasFocus;
    n.inputState.startMouseSelection(new q9(n, e, t, r)), r && n.observer.ignore(() => {
      RO(n.contentDOM);
      let s = n.root.activeElement;
      s && !s.contains(n.contentDOM) && s.blur();
    });
    let i = n.inputState.mouseSelection;
    if (i)
      return i.start(e), i.dragging === !1;
  }
  return !1;
};
function ip(n, e, t, r) {
  if (r == 1)
    return _.cursor(e, t);
  if (r == 2)
    return v9(n.state, e, t);
  {
    let i = nt.find(n.docView, e), s = n.state.doc.lineAt(i ? i.posAtEnd : e), l = i ? i.posAtStart : s.from, a = i ? i.posAtEnd : s.to;
    return a < n.state.doc.length && a == s.to && a++, _.range(l, a);
  }
}
let sp = (n, e, t) => e >= t.top && e <= t.bottom && n >= t.left && n <= t.right;
function _9(n, e, t, r) {
  let i = nt.find(n.docView, e);
  if (!i)
    return 1;
  let s = e - i.posAtStart;
  if (s == 0)
    return 1;
  if (s == i.length)
    return -1;
  let l = i.coordsAt(s, -1);
  if (l && sp(t, r, l))
    return -1;
  let a = i.coordsAt(s, 1);
  return a && sp(t, r, a) ? 1 : l && l.bottom >= r ? -1 : 1;
}
function lp(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  return { pos: t, bias: _9(n, t, e.clientX, e.clientY) };
}
const U9 = ee.ie && ee.ie_version <= 11;
let ap = null, op = 0, up = 0;
function v4(n) {
  if (!U9)
    return n.detail;
  let e = ap, t = up;
  return ap = n, up = Date.now(), op = !e || t > Date.now() - 400 && Math.abs(e.clientX - n.clientX) < 2 && Math.abs(e.clientY - n.clientY) < 2 ? (op + 1) % 3 : 1;
}
function W9(n, e) {
  let t = lp(n, e), r = v4(e), i = n.state.selection;
  return {
    update(s) {
      s.docChanged && (t.pos = s.changes.mapPos(t.pos), i = i.map(s.changes));
    },
    get(s, l, a) {
      let o = lp(n, s), u, h = ip(n, o.pos, o.bias, r);
      if (t.pos != o.pos && !l) {
        let c = ip(n, t.pos, t.bias, r), f = Math.min(c.from, h.from), d = Math.max(c.to, h.to);
        h = f < h.from ? _.range(f, d) : _.range(d, f);
      }
      return l ? i.replaceRange(i.main.extend(h.from, h.to)) : a && r == 1 && i.ranges.length > 1 && (u = Y9(i, o.pos)) ? u : a ? i.addRange(h) : _.create([h]);
    }
  };
}
function Y9(n, e) {
  for (let t = 0; t < n.ranges.length; t++) {
    let { from: r, to: i } = n.ranges[t];
    if (r <= e && i >= e)
      return _.create(n.ranges.slice(0, t).concat(n.ranges.slice(t + 1)), n.mainIndex == t ? 0 : n.mainIndex - (n.mainIndex > t ? 1 : 0));
  }
  return null;
}
fn.dragstart = (n, e) => {
  let { selection: { main: t } } = n.state;
  if (e.target.draggable) {
    let i = n.docView.nearest(e.target);
    if (i && i.isWidget) {
      let s = i.posAtStart, l = s + i.length;
      (s >= t.to || l <= t.from) && (t = _.range(s, l));
    }
  }
  let { inputState: r } = n;
  return r.mouseSelection && (r.mouseSelection.dragging = !0), r.draggedContent = t, e.dataTransfer && (e.dataTransfer.setData("Text", La(n.state, Vh, n.state.sliceDoc(t.from, t.to))), e.dataTransfer.effectAllowed = "copyMove"), !1;
};
fn.dragend = (n) => (n.inputState.draggedContent = null, !1);
function hp(n, e, t, r) {
  if (t = La(n.state, Nh, t), !t)
    return;
  let i = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1), { draggedContent: s } = n.inputState, l = r && s && I9(n, e) ? { from: s.from, to: s.to } : null, a = { from: i, insert: t }, o = n.state.changes(l ? [l, a] : a);
  n.focus(), n.dispatch({
    changes: o,
    selection: { anchor: o.mapPos(i, -1), head: o.mapPos(i, 1) },
    userEvent: l ? "move.drop" : "input.drop"
  }), n.inputState.draggedContent = null;
}
fn.drop = (n, e) => {
  if (!e.dataTransfer)
    return !1;
  if (n.state.readOnly)
    return !0;
  let t = e.dataTransfer.files;
  if (t && t.length) {
    let r = Array(t.length), i = 0, s = () => {
      ++i == t.length && hp(n, e, r.filter((l) => l != null).join(n.state.lineBreak), !1);
    };
    for (let l = 0; l < t.length; l++) {
      let a = new FileReader();
      a.onerror = s, a.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(a.result) || (r[l] = a.result), s();
      }, a.readAsText(t[l]);
    }
    return !0;
  } else {
    let r = e.dataTransfer.getData("Text");
    if (r)
      return hp(n, e, r, !0), !0;
  }
  return !1;
};
fn.paste = (n, e) => {
  if (n.state.readOnly)
    return !0;
  n.observer.flush();
  let t = b4 ? null : e.clipboardData;
  return t ? (x4(n, t.getData("text/plain") || t.getData("text/uri-list")), !0) : (j9(n), !1);
};
function G9(n, e) {
  let t = n.dom.parentNode;
  if (!t)
    return;
  let r = t.appendChild(document.createElement("textarea"));
  r.style.cssText = "position: fixed; left: -10000px; top: 10px", r.value = e, r.focus(), r.selectionEnd = e.length, r.selectionStart = 0, setTimeout(() => {
    r.remove(), n.focus();
  }, 50);
}
function H9(n) {
  let e = [], t = [], r = !1;
  for (let i of n.selection.ranges)
    i.empty || (e.push(n.sliceDoc(i.from, i.to)), t.push(i));
  if (!e.length) {
    let i = -1;
    for (let { from: s } of n.selection.ranges) {
      let l = n.doc.lineAt(s);
      l.number > i && (e.push(l.text), t.push({ from: l.from, to: Math.min(n.doc.length, l.to + 1) })), i = l.number;
    }
    r = !0;
  }
  return { text: La(n, Vh, e.join(n.lineBreak)), ranges: t, linewise: r };
}
let C0 = null;
fn.copy = fn.cut = (n, e) => {
  let { text: t, ranges: r, linewise: i } = H9(n.state);
  if (!t && !i)
    return !1;
  C0 = i ? t : null, e.type == "cut" && !n.state.readOnly && n.dispatch({
    changes: r,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
  let s = b4 ? null : e.clipboardData;
  return s ? (s.clearData(), s.setData("text/plain", t), !0) : (G9(n, t), !1);
};
const w4 = /* @__PURE__ */ nr.define();
function k4(n, e) {
  let t = [];
  for (let r of n.facet(i4)) {
    let i = r(n, e);
    i && t.push(i);
  }
  return t ? n.update({ effects: t, annotations: w4.of(!0) }) : null;
}
function S4(n) {
  setTimeout(() => {
    let e = n.hasFocus;
    if (e != n.inputState.notifiedFocused) {
      let t = k4(n.state, e);
      t ? n.dispatch(t) : n.update([]);
    }
  }, 10);
}
tn.focus = (n) => {
  n.inputState.lastFocusTime = Date.now(), !n.scrollDOM.scrollTop && (n.inputState.lastScrollTop || n.inputState.lastScrollLeft) && (n.scrollDOM.scrollTop = n.inputState.lastScrollTop, n.scrollDOM.scrollLeft = n.inputState.lastScrollLeft), S4(n);
};
tn.blur = (n) => {
  n.observer.clearSelectionRange(), S4(n);
};
tn.compositionstart = tn.compositionupdate = (n) => {
  n.observer.editContext || (n.inputState.compositionFirstChange == null && (n.inputState.compositionFirstChange = !0), n.inputState.composing < 0 && (n.inputState.composing = 0));
};
tn.compositionend = (n) => {
  n.observer.editContext || (n.inputState.composing = -1, n.inputState.compositionEndedAt = Date.now(), n.inputState.compositionPendingKey = !0, n.inputState.compositionPendingChange = n.observer.pendingRecords().length > 0, n.inputState.compositionFirstChange = null, ee.chrome && ee.android ? n.observer.flushSoon() : n.inputState.compositionPendingChange ? Promise.resolve().then(() => n.observer.flush()) : setTimeout(() => {
    n.inputState.composing < 0 && n.docView.hasComposition && n.update([]);
  }, 50));
};
tn.contextmenu = (n) => {
  n.inputState.lastContextMenu = Date.now();
};
fn.beforeinput = (n, e) => {
  var t, r;
  if (e.inputType == "insertReplacementText" && n.observer.editContext) {
    let s = (t = e.dataTransfer) === null || t === void 0 ? void 0 : t.getData("text/plain"), l = e.getTargetRanges();
    if (s && l.length) {
      let a = l[0], o = n.posAtDOM(a.startContainer, a.startOffset), u = n.posAtDOM(a.endContainer, a.endOffset);
      return Uh(n, { from: o, to: u, insert: n.state.toText(s) }, null), !0;
    }
  }
  let i;
  if (ee.chrome && ee.android && (i = O4.find((s) => s.inputType == e.inputType)) && (n.observer.delayAndroidKey(i.key, i.keyCode), i.key == "Backspace" || i.key == "Delete")) {
    let s = ((r = window.visualViewport) === null || r === void 0 ? void 0 : r.height) || 0;
    setTimeout(() => {
      var l;
      (((l = window.visualViewport) === null || l === void 0 ? void 0 : l.height) || 0) > s + 10 && n.hasFocus && (n.contentDOM.blur(), n.focus());
    }, 100);
  }
  return ee.ios && e.inputType == "deleteContentForward" && n.observer.flushSoon(), ee.safari && e.inputType == "insertText" && n.inputState.composing >= 0 && setTimeout(() => tn.compositionend(n, e), 20), !1;
};
const cp = /* @__PURE__ */ new Set();
function K9(n) {
  cp.has(n) || (cp.add(n), n.addEventListener("copy", () => {
  }), n.addEventListener("cut", () => {
  }));
}
const fp = ["pre-wrap", "normal", "pre-line", "break-spaces"];
let pi = !1;
function dp() {
  pi = !1;
}
class J9 {
  constructor(e) {
    this.lineWrapping = e, this.doc = ye.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30;
  }
  heightForGap(e, t) {
    let r = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
    return this.lineWrapping && (r += Math.max(0, Math.ceil((t - e - r * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * r;
  }
  heightForLine(e) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(e) {
    return this.doc = e, this;
  }
  mustRefreshForWrapping(e) {
    return fp.indexOf(e) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(e) {
    let t = !1;
    for (let r = 0; r < e.length; r++) {
      let i = e[r];
      i < 0 ? r++ : this.heightSamples[Math.floor(i * 10)] || (t = !0, this.heightSamples[Math.floor(i * 10)] = !0);
    }
    return t;
  }
  refresh(e, t, r, i, s, l) {
    let a = fp.indexOf(e) > -1, o = Math.round(t) != Math.round(this.lineHeight) || this.lineWrapping != a;
    if (this.lineWrapping = a, this.lineHeight = t, this.charWidth = r, this.textHeight = i, this.lineLength = s, o) {
      this.heightSamples = {};
      for (let u = 0; u < l.length; u++) {
        let h = l[u];
        h < 0 ? u++ : this.heightSamples[Math.floor(h * 10)] = !0;
      }
    }
    return o;
  }
}
class eQ {
  constructor(e, t) {
    this.from = e, this.heights = t, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class xn {
  /**
  @internal
  */
  constructor(e, t, r, i, s) {
    this.from = e, this.length = t, this.top = r, this.height = i, this._content = s;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? Nt.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof xr ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(e) {
    let t = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);
    return new xn(this.from, this.length + e.length, this.top, this.height + e.height, t);
  }
}
var qe = /* @__PURE__ */ function(n) {
  return n[n.ByPos = 0] = "ByPos", n[n.ByHeight = 1] = "ByHeight", n[n.ByPosNoHeight = 2] = "ByPosNoHeight", n;
}(qe || (qe = {}));
const Xl = 1e-3;
class wt {
  constructor(e, t, r = 2) {
    this.length = e, this.height = t, this.flags = r;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | this.flags & -3;
  }
  setHeight(e) {
    this.height != e && (Math.abs(this.height - e) > Xl && (pi = !0), this.height = e);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, t, r) {
    return wt.of(r);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, t) {
    t.push(this);
  }
  decomposeRight(e, t) {
    t.push(this);
  }
  applyChanges(e, t, r, i) {
    let s = this, l = r.doc;
    for (let a = i.length - 1; a >= 0; a--) {
      let { fromA: o, toA: u, fromB: h, toB: c } = i[a], f = s.lineAt(o, qe.ByPosNoHeight, r.setDoc(t), 0, 0), d = f.to >= u ? f : s.lineAt(u, qe.ByPosNoHeight, r, 0, 0);
      for (c += d.to - u, u = d.to; a > 0 && f.from <= i[a - 1].toA; )
        o = i[a - 1].fromA, h = i[a - 1].fromB, a--, o < f.from && (f = s.lineAt(o, qe.ByPosNoHeight, r, 0, 0));
      h += f.from - o, o = f.from;
      let m = Wh.build(r.setDoc(l), e, h, c);
      s = oa(s, s.replace(o, u, m));
    }
    return s.updateHeight(r, 0);
  }
  static empty() {
    return new Bt(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1)
      return e[0];
    let t = 0, r = e.length, i = 0, s = 0;
    for (; ; )
      if (t == r)
        if (i > s * 2) {
          let a = e[t - 1];
          a.break ? e.splice(--t, 1, a.left, null, a.right) : e.splice(--t, 1, a.left, a.right), r += 1 + a.break, i -= a.size;
        } else if (s > i * 2) {
          let a = e[r];
          a.break ? e.splice(r, 1, a.left, null, a.right) : e.splice(r, 1, a.left, a.right), r += 2 + a.break, s -= a.size;
        } else
          break;
      else if (i < s) {
        let a = e[t++];
        a && (i += a.size);
      } else {
        let a = e[--r];
        a && (s += a.size);
      }
    let l = 0;
    return e[t - 1] == null ? (l = 1, t--) : e[t] == null && (l = 1, r++), new tQ(wt.of(e.slice(0, t)), l, wt.of(e.slice(r)));
  }
}
function oa(n, e) {
  return n == e ? n : (n.constructor != e.constructor && (pi = !0), e);
}
wt.prototype.size = 1;
class Q4 extends wt {
  constructor(e, t, r) {
    super(e, t), this.deco = r;
  }
  blockAt(e, t, r, i) {
    return new xn(i, this.length, r, this.height, this.deco || 0);
  }
  lineAt(e, t, r, i, s) {
    return this.blockAt(0, r, i, s);
  }
  forEachLine(e, t, r, i, s, l) {
    e <= s + this.length && t >= s && l(this.blockAt(0, r, i, s));
  }
  updateHeight(e, t = 0, r = !1, i) {
    return i && i.from <= t && i.more && this.setHeight(i.heights[i.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class Bt extends Q4 {
  constructor(e, t) {
    super(e, t, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(e, t, r, i) {
    return new xn(i, this.length, r, this.height, this.breaks);
  }
  replace(e, t, r) {
    let i = r[0];
    return r.length == 1 && (i instanceof Bt || i instanceof ut && i.flags & 4) && Math.abs(this.length - i.length) < 10 ? (i instanceof ut ? i = new Bt(i.length, this.height) : i.height = this.height, this.outdated || (i.outdated = !1), i) : wt.of(r);
  }
  updateHeight(e, t = 0, r = !1, i) {
    return i && i.from <= t && i.more ? this.setHeight(i.heights[i.index++]) : (r || this.outdated) && this.setHeight(Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class ut extends wt {
  constructor(e) {
    super(e, 0);
  }
  heightMetrics(e, t) {
    let r = e.doc.lineAt(t).number, i = e.doc.lineAt(t + this.length).number, s = i - r + 1, l, a = 0;
    if (e.lineWrapping) {
      let o = Math.min(this.height, e.lineHeight * s);
      l = o / s, this.length > s + 1 && (a = (this.height - o) / (this.length - s - 1));
    } else
      l = this.height / s;
    return { firstLine: r, lastLine: i, perLine: l, perChar: a };
  }
  blockAt(e, t, r, i) {
    let { firstLine: s, lastLine: l, perLine: a, perChar: o } = this.heightMetrics(t, i);
    if (t.lineWrapping) {
      let u = i + (e < t.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (e - r) / this.height)) * this.length)), h = t.doc.lineAt(u), c = a + h.length * o, f = Math.max(r, e - c / 2);
      return new xn(h.from, h.length, f, c, 0);
    } else {
      let u = Math.max(0, Math.min(l - s, Math.floor((e - r) / a))), { from: h, length: c } = t.doc.line(s + u);
      return new xn(h, c, r + a * u, a, 0);
    }
  }
  lineAt(e, t, r, i, s) {
    if (t == qe.ByHeight)
      return this.blockAt(e, r, i, s);
    if (t == qe.ByPosNoHeight) {
      let { from: d, to: m } = r.doc.lineAt(e);
      return new xn(d, m - d, 0, 0, 0);
    }
    let { firstLine: l, perLine: a, perChar: o } = this.heightMetrics(r, s), u = r.doc.lineAt(e), h = a + u.length * o, c = u.number - l, f = i + a * c + o * (u.from - s - c);
    return new xn(u.from, u.length, Math.max(i, Math.min(f, i + this.height - h)), h, 0);
  }
  forEachLine(e, t, r, i, s, l) {
    e = Math.max(e, s), t = Math.min(t, s + this.length);
    let { firstLine: a, perLine: o, perChar: u } = this.heightMetrics(r, s);
    for (let h = e, c = i; h <= t; ) {
      let f = r.doc.lineAt(h);
      if (h == e) {
        let m = f.number - a;
        c += o * m + u * (e - s - m);
      }
      let d = o + u * f.length;
      l(new xn(f.from, f.length, c, d, 0)), c += d, h = f.to + 1;
    }
  }
  replace(e, t, r) {
    let i = this.length - t;
    if (i > 0) {
      let s = r[r.length - 1];
      s instanceof ut ? r[r.length - 1] = new ut(s.length + i) : r.push(null, new ut(i - 1));
    }
    if (e > 0) {
      let s = r[0];
      s instanceof ut ? r[0] = new ut(e + s.length) : r.unshift(new ut(e - 1), null);
    }
    return wt.of(r);
  }
  decomposeLeft(e, t) {
    t.push(new ut(e - 1), null);
  }
  decomposeRight(e, t) {
    t.push(null, new ut(this.length - e - 1));
  }
  updateHeight(e, t = 0, r = !1, i) {
    let s = t + this.length;
    if (i && i.from <= t + this.length && i.more) {
      let l = [], a = Math.max(t, i.from), o = -1;
      for (i.from > t && l.push(new ut(i.from - t - 1).updateHeight(e, t)); a <= s && i.more; ) {
        let h = e.doc.lineAt(a).length;
        l.length && l.push(null);
        let c = i.heights[i.index++];
        o == -1 ? o = c : Math.abs(c - o) >= Xl && (o = -2);
        let f = new Bt(h, c);
        f.outdated = !1, l.push(f), a += h + 1;
      }
      a <= s && l.push(null, new ut(s - a).updateHeight(e, a));
      let u = wt.of(l);
      return (o < 0 || Math.abs(u.height - this.height) >= Xl || Math.abs(o - this.heightMetrics(e, t).perLine) >= Xl) && (pi = !0), oa(this, u);
    } else (r || this.outdated) && (this.setHeight(e.heightForGap(t, t + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class tQ extends wt {
  constructor(e, t, r) {
    super(e.length + t + r.length, e.height + r.height, t | (e.outdated || r.outdated ? 2 : 0)), this.left = e, this.right = r, this.size = e.size + r.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(e, t, r, i) {
    let s = r + this.left.height;
    return e < s ? this.left.blockAt(e, t, r, i) : this.right.blockAt(e, t, s, i + this.left.length + this.break);
  }
  lineAt(e, t, r, i, s) {
    let l = i + this.left.height, a = s + this.left.length + this.break, o = t == qe.ByHeight ? e < l : e < a, u = o ? this.left.lineAt(e, t, r, i, s) : this.right.lineAt(e, t, r, l, a);
    if (this.break || (o ? u.to < a : u.from > a))
      return u;
    let h = t == qe.ByPosNoHeight ? qe.ByPosNoHeight : qe.ByPos;
    return o ? u.join(this.right.lineAt(a, h, r, l, a)) : this.left.lineAt(a, h, r, i, s).join(u);
  }
  forEachLine(e, t, r, i, s, l) {
    let a = i + this.left.height, o = s + this.left.length + this.break;
    if (this.break)
      e < o && this.left.forEachLine(e, t, r, i, s, l), t >= o && this.right.forEachLine(e, t, r, a, o, l);
    else {
      let u = this.lineAt(o, qe.ByPos, r, i, s);
      e < u.from && this.left.forEachLine(e, u.from - 1, r, i, s, l), u.to >= e && u.from <= t && l(u), t > u.to && this.right.forEachLine(u.to + 1, t, r, a, o, l);
    }
  }
  replace(e, t, r) {
    let i = this.left.length + this.break;
    if (t < i)
      return this.balanced(this.left.replace(e, t, r), this.right);
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - i, t - i, r));
    let s = [];
    e > 0 && this.decomposeLeft(e, s);
    let l = s.length;
    for (let a of r)
      s.push(a);
    if (e > 0 && pp(s, l - 1), t < this.length) {
      let a = s.length;
      this.decomposeRight(t, s), pp(s, a);
    }
    return wt.of(s);
  }
  decomposeLeft(e, t) {
    let r = this.left.length;
    if (e <= r)
      return this.left.decomposeLeft(e, t);
    t.push(this.left), this.break && (r++, e >= r && t.push(null)), e > r && this.right.decomposeLeft(e - r, t);
  }
  decomposeRight(e, t) {
    let r = this.left.length, i = r + this.break;
    if (e >= i)
      return this.right.decomposeRight(e - i, t);
    e < r && this.left.decomposeRight(e, t), this.break && e < i && t.push(null), t.push(this.right);
  }
  balanced(e, t) {
    return e.size > 2 * t.size || t.size > 2 * e.size ? wt.of(this.break ? [e, null, t] : [e, t]) : (this.left = oa(this.left, e), this.right = oa(this.right, t), this.setHeight(e.height + t.height), this.outdated = e.outdated || t.outdated, this.size = e.size + t.size, this.length = e.length + this.break + t.length, this);
  }
  updateHeight(e, t = 0, r = !1, i) {
    let { left: s, right: l } = this, a = t + s.length + this.break, o = null;
    return i && i.from <= t + s.length && i.more ? o = s = s.updateHeight(e, t, r, i) : s.updateHeight(e, t, r), i && i.from <= a + l.length && i.more ? o = l = l.updateHeight(e, a, r, i) : l.updateHeight(e, a, r), o ? this.balanced(s, l) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function pp(n, e) {
  let t, r;
  n[e] == null && (t = n[e - 1]) instanceof ut && (r = n[e + 1]) instanceof ut && n.splice(e - 1, 3, new ut(t.length + 1 + r.length));
}
const nQ = 5;
class Wh {
  constructor(e, t) {
    this.pos = e, this.oracle = t, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(e, t) {
    if (this.lineStart > -1) {
      let r = Math.min(t, this.lineEnd), i = this.nodes[this.nodes.length - 1];
      i instanceof Bt ? i.length += r - this.pos : (r > this.pos || !this.isCovered) && this.nodes.push(new Bt(r - this.pos, -1)), this.writtenTo = r, t > r && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = t;
  }
  point(e, t, r) {
    if (e < t || r.heightRelevant) {
      let i = r.widget ? r.widget.estimatedHeight : 0, s = r.widget ? r.widget.lineBreaks : 0;
      i < 0 && (i = this.oracle.lineHeight);
      let l = t - e;
      r.block ? this.addBlock(new Q4(l, i, r)) : (l || s || i >= nQ) && this.addLineDeco(i, s, l);
    } else t > e && this.span(e, t);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = e, this.lineEnd = t, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new Bt(this.pos - e, -1)), this.writtenTo = this.pos;
  }
  blankContent(e, t) {
    let r = new ut(t - e);
    return this.oracle.doc.lineAt(e).to == t && (r.flags |= 4), r;
  }
  ensureLine() {
    this.enterLine();
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (e instanceof Bt)
      return e;
    let t = new Bt(0, -1);
    return this.nodes.push(t), t;
  }
  addBlock(e) {
    this.enterLine();
    let t = e.deco;
    t && t.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, t && t.endSide > 0 && (this.covering = e);
  }
  addLineDeco(e, t, r) {
    let i = this.ensureLine();
    i.length += r, i.collapsed += r, i.widgetHeight = Math.max(i.widgetHeight, e), i.breaks += t, this.writtenTo = this.pos = this.pos + r;
  }
  finish(e) {
    let t = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(t instanceof Bt) && !this.isCovered ? this.nodes.push(new Bt(0, -1)) : (this.writtenTo < this.pos || t == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let r = e;
    for (let i of this.nodes)
      i instanceof Bt && i.updateHeight(this.oracle, r), r += i ? i.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, t, r, i) {
    let s = new Wh(r, e);
    return Xe.spans(t, r, i, s, 0), s.finish(r);
  }
}
function rQ(n, e, t) {
  let r = new iQ();
  return Xe.compare(n, e, t, r, 0), r.changes;
}
class iQ {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(e, t, r, i) {
    (e < t || r && r.heightRelevant || i && i.heightRelevant) && Ll(e, t, this.changes, 5);
  }
}
function sQ(n, e) {
  let t = n.getBoundingClientRect(), r = n.ownerDocument, i = r.defaultView || window, s = Math.max(0, t.left), l = Math.min(i.innerWidth, t.right), a = Math.max(0, t.top), o = Math.min(i.innerHeight, t.bottom);
  for (let u = n.parentNode; u && u != r.body; )
    if (u.nodeType == 1) {
      let h = u, c = window.getComputedStyle(h);
      if ((h.scrollHeight > h.clientHeight || h.scrollWidth > h.clientWidth) && c.overflow != "visible") {
        let f = h.getBoundingClientRect();
        s = Math.max(s, f.left), l = Math.min(l, f.right), a = Math.max(a, f.top), o = Math.min(u == n.parentNode ? i.innerHeight : o, f.bottom);
      }
      u = c.position == "absolute" || c.position == "fixed" ? h.offsetParent : h.parentNode;
    } else if (u.nodeType == 11)
      u = u.host;
    else
      break;
  return {
    left: s - t.left,
    right: Math.max(s, l) - t.left,
    top: a - (t.top + e),
    bottom: Math.max(a, o) - (t.top + e)
  };
}
function lQ(n) {
  let e = n.getBoundingClientRect(), t = n.ownerDocument.defaultView || window;
  return e.left < t.innerWidth && e.right > 0 && e.top < t.innerHeight && e.bottom > 0;
}
function aQ(n, e) {
  let t = n.getBoundingClientRect();
  return {
    left: 0,
    right: t.right - t.left,
    top: e,
    bottom: t.bottom - (t.top + e)
  };
}
class su {
  constructor(e, t, r, i) {
    this.from = e, this.to = t, this.size = r, this.displaySize = i;
  }
  static same(e, t) {
    if (e.length != t.length)
      return !1;
    for (let r = 0; r < e.length; r++) {
      let i = e[r], s = t[r];
      if (i.from != s.from || i.to != s.to || i.size != s.size)
        return !1;
    }
    return !0;
  }
  draw(e, t) {
    return Ue.replace({
      widget: new oQ(this.displaySize * (t ? e.scaleY : e.scaleX), t)
    }).range(this.from, this.to);
  }
}
class oQ extends Ba {
  constructor(e, t) {
    super(), this.size = e, this.vertical = t;
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px", e.style.height = "2px", e.style.display = "inline-block"), e;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class mp {
  constructor(e) {
    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !1, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = gp, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = Je.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;
    let t = e.facet(jh).some((r) => typeof r != "function" && r.class == "cm-lineWrapping");
    this.heightOracle = new J9(t), this.stateDeco = e.facet(ks).filter((r) => typeof r != "function"), this.heightMap = wt.empty().applyChanges(this.stateDeco, ye.empty, this.heightOracle.setDoc(e.doc), [new Kt(0, 0, 0, e.doc.length)]);
    for (let r = 0; r < 2 && (this.viewport = this.getViewport(0, null), !!this.updateForViewport()); r++)
      ;
    this.updateViewportLines(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = Ue.set(this.lineGaps.map((r) => r.draw(this, !1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let e = [this.viewport], { main: t } = this.state.selection;
    for (let r = 0; r <= 1; r++) {
      let i = r ? t.head : t.anchor;
      if (!e.some(({ from: s, to: l }) => i >= s && i <= l)) {
        let { from: s, to: l } = this.lineBlockAt(i);
        e.push(new wl(s, l));
      }
    }
    return this.viewports = e.sort((r, i) => r.from - i.from), this.updateScaler();
  }
  updateScaler() {
    let e = this.scaler;
    return this.scaler = this.heightMap.height <= 7e6 ? gp : new Yh(this.heightOracle, this.heightMap, this.viewports), e.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e) => {
      this.viewportLines.push(Gi(e, this.scaler));
    });
  }
  update(e, t = null) {
    this.state = e.state;
    let r = this.stateDeco;
    this.stateDeco = this.state.facet(ks).filter((h) => typeof h != "function");
    let i = e.changedRanges, s = Kt.extendWithRanges(i, rQ(r, this.stateDeco, e ? e.changes : it.empty(this.state.doc.length))), l = this.heightMap.height, a = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    dp(), this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), s), (this.heightMap.height != l || pi) && (e.flags |= 2), a ? (this.scrollAnchorPos = e.changes.mapPos(a.from, -1), this.scrollAnchorHeight = a.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = this.heightMap.height);
    let o = s.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
    (t && (t.range.head < o.from || t.range.head > o.to) || !this.viewportIsAppropriate(o)) && (o = this.getViewport(0, t));
    let u = o.from != this.viewport.from || o.to != this.viewport.to;
    this.viewport = o, e.flags |= this.updateForViewport(), (u || !e.changes.empty || e.flags & 2) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(e.changes), t && (this.scrollTarget = t), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(l4) && (this.mustEnforceCursorAssoc = !0);
  }
  measure(e) {
    let t = e.contentDOM, r = window.getComputedStyle(t), i = this.heightOracle, s = r.whiteSpace;
    this.defaultTextDirection = r.direction == "rtl" ? Je.RTL : Je.LTR;
    let l = this.heightOracle.mustRefreshForWrapping(s), a = t.getBoundingClientRect(), o = l || this.mustMeasureContent || this.contentDOMHeight != a.height;
    this.contentDOMHeight = a.height, this.mustMeasureContent = !1;
    let u = 0, h = 0;
    if (a.width && a.height) {
      let { scaleX: Z, scaleY: T } = EO(t, a);
      (Z > 5e-3 && Math.abs(this.scaleX - Z) > 5e-3 || T > 5e-3 && Math.abs(this.scaleY - T) > 5e-3) && (this.scaleX = Z, this.scaleY = T, u |= 16, l = o = !0);
    }
    let c = (parseInt(r.paddingTop) || 0) * this.scaleY, f = (parseInt(r.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != c || this.paddingBottom != f) && (this.paddingTop = c, this.paddingBottom = f, u |= 18), this.editorWidth != e.scrollDOM.clientWidth && (i.lineWrapping && (o = !0), this.editorWidth = e.scrollDOM.clientWidth, u |= 16);
    let d = e.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != d && (this.scrollAnchorHeight = -1, this.scrollTop = d), this.scrolledToBottom = zO(e.scrollDOM);
    let m = (this.printing ? aQ : sQ)(t, this.paddingTop), O = m.top - this.pixelViewport.top, x = m.bottom - this.pixelViewport.bottom;
    this.pixelViewport = m;
    let b = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (b != this.inView && (this.inView = b, b && (o = !0)), !this.inView && !this.scrollTarget && !lQ(e.dom))
      return 0;
    let w = a.width;
    if ((this.contentDOMWidth != w || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = a.width, this.editorHeight = e.scrollDOM.clientHeight, u |= 16), o) {
      let Z = e.docView.measureVisibleLineHeights(this.viewport);
      if (i.mustRefreshForHeights(Z) && (l = !0), l || i.lineWrapping && Math.abs(w - this.contentDOMWidth) > i.charWidth) {
        let { lineHeight: T, charWidth: S, textHeight: E } = e.docView.measureTextSize();
        l = T > 0 && i.refresh(s, T, S, E, w / S, Z), l && (e.docView.minWidth = 0, u |= 16);
      }
      O > 0 && x > 0 ? h = Math.max(O, x) : O < 0 && x < 0 && (h = Math.min(O, x)), dp();
      for (let T of this.viewports) {
        let S = T.from == this.viewport.from ? Z : e.docView.measureVisibleLineHeights(T);
        this.heightMap = (l ? wt.empty().applyChanges(this.stateDeco, ye.empty, this.heightOracle, [new Kt(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(i, 0, l, new eQ(T.from, S));
      }
      pi && (u |= 2);
    }
    let C = !this.viewportIsAppropriate(this.viewport, h) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return C && (u & 2 && (u |= this.updateScaler()), this.viewport = this.getViewport(h, this.scrollTarget), u |= this.updateForViewport()), (u & 2 || C) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(l ? [] : this.lineGaps, e)), u |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), u;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(e, t) {
    let r = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), i = this.heightMap, s = this.heightOracle, { visibleTop: l, visibleBottom: a } = this, o = new wl(i.lineAt(l - r * 1e3, qe.ByHeight, s, 0, 0).from, i.lineAt(a + (1 - r) * 1e3, qe.ByHeight, s, 0, 0).to);
    if (t) {
      let { head: u } = t.range;
      if (u < o.from || u > o.to) {
        let h = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), c = i.lineAt(u, qe.ByPos, s, 0, 0), f;
        t.y == "center" ? f = (c.top + c.bottom) / 2 - h / 2 : t.y == "start" || t.y == "nearest" && u < o.from ? f = c.top : f = c.bottom - h, o = new wl(i.lineAt(f - 1e3 / 2, qe.ByHeight, s, 0, 0).from, i.lineAt(f + h + 1e3 / 2, qe.ByHeight, s, 0, 0).to);
      }
    }
    return o;
  }
  mapViewport(e, t) {
    let r = t.mapPos(e.from, -1), i = t.mapPos(e.to, 1);
    return new wl(this.heightMap.lineAt(r, qe.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(i, qe.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: t }, r = 0) {
    if (!this.inView)
      return !0;
    let { top: i } = this.heightMap.lineAt(e, qe.ByPos, this.heightOracle, 0, 0), { bottom: s } = this.heightMap.lineAt(t, qe.ByPos, this.heightOracle, 0, 0), { visibleTop: l, visibleBottom: a } = this;
    return (e == 0 || i <= l - Math.max(10, Math.min(
      -r,
      250
      /* VP.MaxCoverMargin */
    ))) && (t == this.state.doc.length || s >= a + Math.max(10, Math.min(
      r,
      250
      /* VP.MaxCoverMargin */
    ))) && i > l - 2 * 1e3 && s < a + 2 * 1e3;
  }
  mapLineGaps(e, t) {
    if (!e.length || t.empty)
      return e;
    let r = [];
    for (let i of e)
      t.touchesRange(i.from, i.to) || r.push(new su(t.mapPos(i.from), t.mapPos(i.to), i.size, i.displaySize));
    return r;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e, t) {
    let r = this.heightOracle.lineWrapping, i = r ? 1e4 : 2e3, s = i >> 1, l = i << 1;
    if (this.defaultTextDirection != Je.LTR && !r)
      return [];
    let a = [], o = (h, c, f, d) => {
      if (c - h < s)
        return;
      let m = this.state.selection.main, O = [m.from];
      m.empty || O.push(m.to);
      for (let b of O)
        if (b > h && b < c) {
          o(h, b - 10, f, d), o(b + 10, c, f, d);
          return;
        }
      let x = hQ(e, (b) => b.from >= f.from && b.to <= f.to && Math.abs(b.from - h) < s && Math.abs(b.to - c) < s && !O.some((w) => b.from < w && b.to > w));
      if (!x) {
        if (c < f.to && t && r && t.visibleRanges.some((C) => C.from <= c && C.to >= c)) {
          let C = t.moveToLineBoundary(_.cursor(c), !1, !0).head;
          C > h && (c = C);
        }
        let b = this.gapSize(f, h, c, d), w = r || b < 2e6 ? b : 2e6;
        x = new su(h, c, b, w);
      }
      a.push(x);
    }, u = (h) => {
      if (h.length < l || h.type != Nt.Text)
        return;
      let c = uQ(h.from, h.to, this.stateDeco);
      if (c.total < l)
        return;
      let f = this.scrollTarget ? this.scrollTarget.range.head : null, d, m;
      if (r) {
        let O = i / this.heightOracle.lineLength * this.heightOracle.lineHeight, x, b;
        if (f != null) {
          let w = Sl(c, f), C = ((this.visibleBottom - this.visibleTop) / 2 + O) / h.height;
          x = w - C, b = w + C;
        } else
          x = (this.visibleTop - h.top - O) / h.height, b = (this.visibleBottom - h.top + O) / h.height;
        d = kl(c, x), m = kl(c, b);
      } else {
        let O = c.total * this.heightOracle.charWidth, x = i * this.heightOracle.charWidth, b = 0;
        if (O > 2e6)
          for (let S of e)
            S.from >= h.from && S.from < h.to && S.size != S.displaySize && S.from * this.heightOracle.charWidth + b < this.pixelViewport.left && (b = S.size - S.displaySize);
        let w = this.pixelViewport.left + b, C = this.pixelViewport.right + b, Z, T;
        if (f != null) {
          let S = Sl(c, f), E = ((C - w) / 2 + x) / O;
          Z = S - E, T = S + E;
        } else
          Z = (w - x) / O, T = (C + x) / O;
        d = kl(c, Z), m = kl(c, T);
      }
      d > h.from && o(h.from, d, h, c), m < h.to && o(m, h.to, h, c);
    };
    for (let h of this.viewportLines)
      Array.isArray(h.type) ? h.type.forEach(u) : u(h);
    return a;
  }
  gapSize(e, t, r, i) {
    let s = Sl(i, r) - Sl(i, t);
    return this.heightOracle.lineWrapping ? e.height * s : i.total * this.heightOracle.charWidth * s;
  }
  updateLineGaps(e) {
    su.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = Ue.set(e.map((t) => t.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges(e) {
    let t = this.stateDeco;
    this.lineGaps.length && (t = t.concat(this.lineGapDeco));
    let r = [];
    Xe.spans(t, this.viewport.from, this.viewport.to, {
      span(s, l) {
        r.push({ from: s, to: l });
      },
      point() {
      }
    }, 20);
    let i = 0;
    if (r.length != this.visibleRanges.length)
      i = 12;
    else
      for (let s = 0; s < r.length && !(i & 8); s++) {
        let l = this.visibleRanges[s], a = r[s];
        (l.from != a.from || l.to != a.to) && (i |= 4, e && e.mapPos(l.from, -1) == a.from && e.mapPos(l.to, 1) == a.to || (i |= 8));
      }
    return this.visibleRanges = r, i;
  }
  lineBlockAt(e) {
    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((t) => t.from <= e && t.to >= e) || Gi(this.heightMap.lineAt(e, qe.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(e) {
    return e >= this.viewportLines[0].top && e <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((t) => t.top <= e && t.bottom >= e) || Gi(this.heightMap.lineAt(this.scaler.fromDOM(e), qe.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(e) {
    let t = this.lineBlockAtHeight(e + 8);
    return t.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? t : this.viewportLines[0];
  }
  elementAtHeight(e) {
    return Gi(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class wl {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
function uQ(n, e, t) {
  let r = [], i = n, s = 0;
  return Xe.spans(t, n, e, {
    span() {
    },
    point(l, a) {
      l > i && (r.push({ from: i, to: l }), s += l - i), i = a;
    }
  }, 20), i < e && (r.push({ from: i, to: e }), s += e - i), { total: s, ranges: r };
}
function kl({ total: n, ranges: e }, t) {
  if (t <= 0)
    return e[0].from;
  if (t >= 1)
    return e[e.length - 1].to;
  let r = Math.floor(n * t);
  for (let i = 0; ; i++) {
    let { from: s, to: l } = e[i], a = l - s;
    if (r <= a)
      return s + r;
    r -= a;
  }
}
function Sl(n, e) {
  let t = 0;
  for (let { from: r, to: i } of n.ranges) {
    if (e <= i) {
      t += e - r;
      break;
    }
    t += i - r;
  }
  return t / n.total;
}
function hQ(n, e) {
  for (let t of n)
    if (e(t))
      return t;
}
const gp = {
  toDOM(n) {
    return n;
  },
  fromDOM(n) {
    return n;
  },
  scale: 1,
  eq(n) {
    return n == this;
  }
};
class Yh {
  constructor(e, t, r) {
    let i = 0, s = 0, l = 0;
    this.viewports = r.map(({ from: a, to: o }) => {
      let u = t.lineAt(a, qe.ByPos, e, 0, 0).top, h = t.lineAt(o, qe.ByPos, e, 0, 0).bottom;
      return i += h - u, { from: a, to: o, top: u, bottom: h, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - i) / (t.height - i);
    for (let a of this.viewports)
      a.domTop = l + (a.top - s) * this.scale, l = a.domBottom = a.domTop + (a.bottom - a.top), s = a.bottom;
  }
  toDOM(e) {
    for (let t = 0, r = 0, i = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.top)
        return i + (e - r) * this.scale;
      if (e <= s.bottom)
        return s.domTop + (e - s.top);
      r = s.bottom, i = s.domBottom;
    }
  }
  fromDOM(e) {
    for (let t = 0, r = 0, i = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.domTop)
        return r + (e - i) / this.scale;
      if (e <= s.domBottom)
        return s.top + (e - s.domTop);
      r = s.bottom, i = s.domBottom;
    }
  }
  eq(e) {
    return e instanceof Yh ? this.scale == e.scale && this.viewports.length == e.viewports.length && this.viewports.every((t, r) => t.from == e.viewports[r].from && t.to == e.viewports[r].to) : !1;
  }
}
function Gi(n, e) {
  if (e.scale == 1)
    return n;
  let t = e.toDOM(n.top), r = e.toDOM(n.bottom);
  return new xn(n.from, n.length, t, r - t, Array.isArray(n._content) ? n._content.map((i) => Gi(i, e)) : n._content);
}
const Ql = /* @__PURE__ */ oe.define({ combine: (n) => n.join(" ") }), A0 = /* @__PURE__ */ oe.define({ combine: (n) => n.indexOf(!0) > -1 }), $0 = /* @__PURE__ */ yr.newName(), P4 = /* @__PURE__ */ yr.newName(), C4 = /* @__PURE__ */ yr.newName(), A4 = { "&light": "." + P4, "&dark": "." + C4 };
function D0(n, e, t) {
  return new yr(e, {
    finish(r) {
      return /&/.test(r) ? r.replace(/&\w*/, (i) => {
        if (i == "&")
          return n;
        if (!t || !t[i])
          throw new RangeError(`Unsupported selector: ${i}`);
        return t[i];
      }) : n + " " + r;
    }
  });
}
const cQ = /* @__PURE__ */ D0("." + $0, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0,
    overflowAnchor: "none"
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#ddd"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0,
    zIndex: 300
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace": {
    backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
    backgroundPosition: "center"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, A4), fQ = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, lu = ee.ie && ee.ie_version <= 11;
class dQ {
  constructor(e) {
    this.view = e, this.active = !1, this.editContext = null, this.selectionRange = new GS(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.printQuery = null, this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((t) => {
      for (let r of t)
        this.queue.push(r);
      (ee.ie && ee.ie_version <= 11 || ee.ios && e.composing) && t.some((r) => r.type == "childList" && r.removedNodes.length || r.type == "characterData" && r.oldValue.length > r.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), window.EditContext && e.constructor.EDIT_CONTEXT !== !1 && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(ee.chrome && ee.chrome_version < 126) && (this.editContext = new mQ(e), e.state.facet(Nn) && (e.contentDOM.editContext = this.editContext.editContext)), lu && (this.onCharData = (t) => {
      this.queue.push({
        target: t.target,
        type: "characterData",
        oldValue: t.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), window.matchMedia && (this.printQuery = window.matchMedia("print")), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var t;
      ((t = this.view.docView) === null || t === void 0 ? void 0 : t.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(e.scrollDOM)), this.addWindowListeners(this.win = e.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((t) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), t.length > 0 && t[t.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((t) => {
      t.length > 0 && t[t.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e), this.intersecting && this.view.measure();
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.editContext && this.view.requestMeasure(this.editContext.measureReq), this.onScrollChanged(e);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint(e) {
    (e.type == "change" || !e.type) && !e.matches || (this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500));
  }
  updateGaps(e) {
    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((t, r) => t != e[r]))) {
      this.gapIntersection.disconnect();
      for (let t of e)
        this.gapIntersection.observe(t);
      this.gaps = e;
    }
  }
  onSelectionChange(e) {
    let t = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: r } = this, i = this.selectionRange;
    if (r.state.facet(Nn) ? r.root.activeElement != this.dom : !Bl(this.dom, i))
      return;
    let s = i.anchorNode && r.docView.nearest(i.anchorNode);
    if (s && s.ignoreEvent(e)) {
      t || (this.selectionChanged = !1);
      return;
    }
    (ee.ie && ee.ie_version <= 11 || ee.android && ee.chrome) && !r.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    i.focusNode && ls(i.focusNode, i.focusOffset, i.anchorNode, i.anchorOffset) ? this.flushSoon() : this.flush(!1);
  }
  readSelectionRange() {
    let { view: e } = this, t = vs(e.root);
    if (!t)
      return !1;
    let r = ee.safari && e.root.nodeType == 11 && e.root.activeElement == this.dom && pQ(this.view, t) || t;
    if (!r || this.selectionRange.eq(r))
      return !1;
    let i = Bl(this.dom, r);
    return i && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && KS(this.dom, r) ? (this.view.inputState.lastFocusTime = 0, e.docView.updateSelection(), !1) : (this.selectionRange.setRange(r), i && (this.selectionChanged = !0), !0);
  }
  setSelectionRange(e, t) {
    this.selectionRange.set(e.node, e.offset, t.node, t.offset), this.selectionChanged = !1;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let e = 0, t = null;
    for (let r = this.dom; r; )
      if (r.nodeType == 1)
        !t && e < this.scrollTargets.length && this.scrollTargets[e] == r ? e++ : t || (t = this.scrollTargets.slice(0, e)), t && t.push(r), r = r.assignedSlot || r.parentNode;
      else if (r.nodeType == 11)
        r = r.host;
      else
        break;
    if (e < this.scrollTargets.length && !t && (t = this.scrollTargets.slice(0, e)), t) {
      for (let r of this.scrollTargets)
        r.removeEventListener("scroll", this.onScroll);
      for (let r of this.scrollTargets = t)
        r.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(e) {
    if (!this.active)
      return e();
    try {
      return this.stop(), e();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, fQ), lu && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), lu && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(e, t) {
    var r;
    if (!this.delayedAndroidKey) {
      let i = () => {
        let s = this.delayedAndroidKey;
        s && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = s.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && s.force && li(this.dom, s.key, s.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(i);
    }
    (!this.delayedAndroidKey || e == "Enter") && (this.delayedAndroidKey = {
      key: e,
      keyCode: t,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((r = this.delayedAndroidKey) === null || r === void 0) && r.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let e of this.observer.takeRecords())
      this.queue.push(e);
    return this.queue;
  }
  processRecords() {
    let e = this.pendingRecords();
    e.length && (this.queue = []);
    let t = -1, r = -1, i = !1;
    for (let s of e) {
      let l = this.readMutation(s);
      l && (l.typeOver && (i = !0), t == -1 ? { from: t, to: r } = l : (t = Math.min(l.from, t), r = Math.max(l.to, r)));
    }
    return { from: t, to: r, typeOver: i };
  }
  readChange() {
    let { from: e, to: t, typeOver: r } = this.processRecords(), i = this.selectionChanged && Bl(this.dom, this.selectionRange);
    if (e < 0 && !i)
      return null;
    e > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;
    let s = new T9(this.view, e, t, r);
    return this.view.docView.domChanged = { newSel: s.newSel ? s.newSel.main : null }, s;
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return !1;
    e && this.readSelectionRange();
    let t = this.readChange();
    if (!t)
      return this.view.requestMeasure(), !1;
    let r = this.view.state, i = g4(this.view, t);
    return this.view.state == r && (t.domChanged || t.newSel && !t.newSel.main.eq(this.view.state.selection.main)) && this.view.update([]), i;
  }
  readMutation(e) {
    let t = this.view.docView.nearest(e.target);
    if (!t || t.ignoreMutation(e))
      return null;
    if (t.markDirty(e.type == "attributes"), e.type == "attributes" && (t.flags |= 4), e.type == "childList") {
      let r = Op(t, e.previousSibling || e.target.previousSibling, -1), i = Op(t, e.nextSibling || e.target.nextSibling, 1);
      return {
        from: r ? t.posAfter(r) : t.posAtStart,
        to: i ? t.posBefore(i) : t.posAtEnd,
        typeOver: !1
      };
    } else return e.type == "characterData" ? { from: t.posAtStart, to: t.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;
  }
  setWindow(e) {
    e != this.win && (this.removeWindowListeners(this.win), this.win = e, this.addWindowListeners(this.win));
  }
  addWindowListeners(e) {
    e.addEventListener("resize", this.onResize), this.printQuery ? this.printQuery.addEventListener ? this.printQuery.addEventListener("change", this.onPrint) : this.printQuery.addListener(this.onPrint) : e.addEventListener("beforeprint", this.onPrint), e.addEventListener("scroll", this.onScroll), e.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(e) {
    e.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onResize), this.printQuery ? this.printQuery.removeEventListener ? this.printQuery.removeEventListener("change", this.onPrint) : this.printQuery.removeListener(this.onPrint) : e.removeEventListener("beforeprint", this.onPrint), e.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(e) {
    this.editContext && (this.editContext.update(e), e.startState.facet(Nn) != e.state.facet(Nn) && (e.view.contentDOM.editContext = e.state.facet(Nn) ? this.editContext.editContext : null));
  }
  destroy() {
    var e, t, r;
    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (t = this.gapIntersection) === null || t === void 0 || t.disconnect(), (r = this.resizeScroll) === null || r === void 0 || r.disconnect();
    for (let i of this.scrollTargets)
      i.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey), this.editContext && (this.view.contentDOM.editContext = null, this.editContext.destroy());
  }
}
function Op(n, e, t) {
  for (; e; ) {
    let r = Me.get(e);
    if (r && r.parent == n)
      return r;
    let i = e.parentNode;
    e = i != n.dom ? i : t > 0 ? e.nextSibling : e.previousSibling;
  }
  return null;
}
function yp(n, e) {
  let t = e.startContainer, r = e.startOffset, i = e.endContainer, s = e.endOffset, l = n.docView.domAtPos(n.state.selection.main.anchor);
  return ls(l.node, l.offset, i, s) && ([t, r, i, s] = [i, s, t, r]), { anchorNode: t, anchorOffset: r, focusNode: i, focusOffset: s };
}
function pQ(n, e) {
  if (e.getComposedRanges) {
    let i = e.getComposedRanges(n.root)[0];
    if (i)
      return yp(n, i);
  }
  let t = null;
  function r(i) {
    i.preventDefault(), i.stopImmediatePropagation(), t = i.getTargetRanges()[0];
  }
  return n.contentDOM.addEventListener("beforeinput", r, !0), n.dom.ownerDocument.execCommand("indent"), n.contentDOM.removeEventListener("beforeinput", r, !0), t ? yp(n, t) : null;
}
class mQ {
  constructor(e) {
    this.from = 0, this.to = 0, this.pendingContextChange = null, this.handlers = /* @__PURE__ */ Object.create(null), this.composing = null, this.resetRange(e.state);
    let t = this.editContext = new window.EditContext({
      text: e.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, e.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(e.state.selection.main.head)
    });
    this.handlers.textupdate = (r) => {
      let i = e.state.selection.main, { anchor: s, head: l } = i, a = this.toEditorPos(r.updateRangeStart), o = this.toEditorPos(r.updateRangeEnd);
      e.inputState.composing >= 0 && !this.composing && (this.composing = { contextBase: r.updateRangeStart, editorBase: a, drifted: !1 });
      let u = { from: a, to: o, insert: ye.of(r.text.split(`
`)) };
      if (u.from == this.from && s < this.from ? u.from = s : u.to == this.to && s > this.to && (u.to = s), u.from == u.to && !u.insert.length) {
        let h = _.single(this.toEditorPos(r.selectionStart), this.toEditorPos(r.selectionEnd));
        h.main.eq(i) || e.dispatch({ selection: h, userEvent: "select" });
        return;
      }
      if ((ee.mac || ee.android) && u.from == l - 1 && /^\. ?$/.test(r.text) && e.contentDOM.getAttribute("autocorrect") == "off" && (u = { from: a, to: o, insert: ye.of([r.text.replace(".", " ")]) }), this.pendingContextChange = u, !e.state.readOnly) {
        let h = this.to - this.from + (u.to - u.from + u.insert.length);
        Uh(e, u, _.single(this.toEditorPos(r.selectionStart, h), this.toEditorPos(r.selectionEnd, h)));
      }
      this.pendingContextChange && (this.revertPending(e.state), this.setSelection(e.state));
    }, this.handlers.characterboundsupdate = (r) => {
      let i = [], s = null;
      for (let l = this.toEditorPos(r.rangeStart), a = this.toEditorPos(r.rangeEnd); l < a; l++) {
        let o = e.coordsForChar(l);
        s = o && new DOMRect(o.left, o.top, o.right - o.left, o.bottom - o.top) || s || new DOMRect(), i.push(s);
      }
      t.updateCharacterBounds(r.rangeStart, i);
    }, this.handlers.textformatupdate = (r) => {
      let i = [];
      for (let s of r.getTextFormats()) {
        let l = s.underlineStyle, a = s.underlineThickness;
        if (l != "None" && a != "None") {
          let o = this.toEditorPos(s.rangeStart), u = this.toEditorPos(s.rangeEnd);
          if (o < u) {
            let h = `text-decoration: underline ${l == "Dashed" ? "dashed " : l == "Squiggle" ? "wavy " : ""}${a == "Thin" ? 1 : 2}px`;
            i.push(Ue.mark({ attributes: { style: h } }).range(o, u));
          }
        }
      }
      e.dispatch({ effects: o4.of(Ue.set(i)) });
    }, this.handlers.compositionstart = () => {
      e.inputState.composing < 0 && (e.inputState.composing = 0, e.inputState.compositionFirstChange = !0);
    }, this.handlers.compositionend = () => {
      if (e.inputState.composing = -1, e.inputState.compositionFirstChange = null, this.composing) {
        let { drifted: r } = this.composing;
        this.composing = null, r && this.reset(e.state);
      }
    };
    for (let r in this.handlers)
      t.addEventListener(r, this.handlers[r]);
    this.measureReq = { read: (r) => {
      this.editContext.updateControlBounds(r.contentDOM.getBoundingClientRect());
      let i = vs(r.root);
      i && i.rangeCount && this.editContext.updateSelectionBounds(i.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(e) {
    let t = 0, r = !1, i = this.pendingContextChange;
    return e.changes.iterChanges((s, l, a, o, u) => {
      if (r)
        return;
      let h = u.length - (l - s);
      if (i && l >= i.to)
        if (i.from == s && i.to == l && i.insert.eq(u)) {
          i = this.pendingContextChange = null, t += h, this.to += h;
          return;
        } else
          i = null, this.revertPending(e.state);
      if (s += t, l += t, l <= this.from)
        this.from += h, this.to += h;
      else if (s < this.to) {
        if (s < this.from || l > this.to || this.to - this.from + u.length > 3e4) {
          r = !0;
          return;
        }
        this.editContext.updateText(this.toContextPos(s), this.toContextPos(l), u.toString()), this.to += h;
      }
      t += h;
    }), i && !r && this.revertPending(e.state), !r;
  }
  update(e) {
    let t = this.pendingContextChange;
    this.composing && (this.composing.drifted || e.transactions.some((r) => !r.isUserEvent("input.type") && r.changes.touchesRange(this.from, this.to))) ? (this.composing.drifted = !0, this.composing.editorBase = e.changes.mapPos(this.composing.editorBase)) : !this.applyEdits(e) || !this.rangeIsValid(e.state) ? (this.pendingContextChange = null, this.reset(e.state)) : (e.docChanged || e.selectionSet || t) && this.setSelection(e.state), (e.geometryChanged || e.docChanged || e.selectionSet) && e.view.requestMeasure(this.measureReq);
  }
  resetRange(e) {
    let { head: t } = e.selection.main;
    this.from = Math.max(
      0,
      t - 1e4
      /* CxVp.Margin */
    ), this.to = Math.min(
      e.doc.length,
      t + 1e4
      /* CxVp.Margin */
    );
  }
  reset(e) {
    this.resetRange(e), this.editContext.updateText(0, this.editContext.text.length, e.doc.sliceString(this.from, this.to)), this.setSelection(e);
  }
  revertPending(e) {
    let t = this.pendingContextChange;
    this.pendingContextChange = null, this.editContext.updateText(this.toContextPos(t.from), this.toContextPos(t.from + t.insert.length), e.doc.sliceString(t.from, t.to));
  }
  setSelection(e) {
    let { main: t } = e.selection, r = this.toContextPos(Math.max(this.from, Math.min(this.to, t.anchor))), i = this.toContextPos(t.head);
    (this.editContext.selectionStart != r || this.editContext.selectionEnd != i) && this.editContext.updateSelection(r, i);
  }
  rangeIsValid(e) {
    let { head: t } = e.selection.main;
    return !(this.from > 0 && t - this.from < 500 || this.to < e.doc.length && this.to - t < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(e, t = this.to - this.from) {
    e = Math.min(e, t);
    let r = this.composing;
    return r && r.drifted ? r.editorBase + (e - r.contextBase) : e + this.from;
  }
  toContextPos(e) {
    let t = this.composing;
    return t && t.drifted ? t.contextBase + (e - t.editorBase) : e - this.from;
  }
  destroy() {
    for (let e in this.handlers)
      this.editContext.removeEventListener(e, this.handlers[e]);
  }
}
class he {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(e = {}) {
    var t;
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), e.parent && e.parent.appendChild(this.dom);
    let { dispatch: r } = e;
    this.dispatchTransactions = e.dispatchTransactions || r && ((i) => i.forEach((s) => r(s, this))) || ((i) => this.update(i)), this.dispatch = this.dispatch.bind(this), this._root = e.root || HS(e.parent) || document, this.viewState = new mp(e.state || Pe.create(e)), e.scrollTo && e.scrollTo.is(bl) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(Ui).map((i) => new nu(i));
    for (let i of this.plugins)
      i.update(this);
    this.observer = new dQ(this), this.inputState = new z9(this), this.inputState.ensureHandlers(this.plugins), this.docView = new Gd(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), !((t = document.fonts) === null || t === void 0) && t.ready && document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...e) {
    let t = e.length == 1 && e[0] instanceof Ke ? e : e.length == 1 && Array.isArray(e[0]) ? e[0] : [this.state.update(...e)];
    this.dispatchTransactions(t, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let t = !1, r = !1, i, s = this.state;
    for (let f of e) {
      if (f.startState != s)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      s = f.state;
    }
    if (this.destroyed) {
      this.viewState.state = s;
      return;
    }
    let l = this.hasFocus, a = 0, o = null;
    e.some((f) => f.annotation(w4)) ? (this.inputState.notifiedFocused = l, a = 1) : l != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = l, o = k4(s, l), o || (a = 1));
    let u = this.observer.delayedAndroidKey, h = null;
    if (u ? (this.observer.clearDelayedAndroidKey(), h = this.observer.readChange(), (h && !this.state.doc.eq(s.doc) || !this.state.selection.eq(s.selection)) && (h = null)) : this.observer.clear(), s.facet(Pe.phrases) != this.state.facet(Pe.phrases))
      return this.setState(s);
    i = aa.create(this, s, e), i.flags |= a;
    let c = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let f of e) {
        if (c && (c = c.map(f.changes)), f.scrollIntoView) {
          let { main: d } = f.state.selection;
          c = new ai(d.empty ? d : _.cursor(d.head, d.head > d.anchor ? -1 : 1));
        }
        for (let d of f.effects)
          d.is(bl) && (c = d.value.clip(this.state));
      }
      this.viewState.update(i, c), this.bidiCache = ua.update(this.bidiCache, i.changes), i.empty || (this.updatePlugins(i), this.inputState.update(i)), t = this.docView.update(i), this.state.facet(Wi) != this.styleModules && this.mountStyles(), r = this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(t, e.some((f) => f.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (i.startState.facet(Ql) != i.state.facet(Ql) && (this.viewState.mustMeasureContent = !0), (t || r || c || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), t && this.docViewUpdate(), !i.empty)
      for (let f of this.state.facet(S0))
        try {
          f(i);
        } catch (d) {
          Sn(this.state, d, "update listener");
        }
    (o || h) && Promise.resolve().then(() => {
      o && this.state == o.startState && this.dispatch(o), h && !g4(this, h) && u.force && li(this.contentDOM, u.key, u.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = e;
      return;
    }
    this.updateState = 2;
    let t = this.hasFocus;
    try {
      for (let r of this.plugins)
        r.destroy(this);
      this.viewState = new mp(e), this.plugins = e.facet(Ui).map((r) => new nu(r)), this.pluginMap.clear();
      for (let r of this.plugins)
        r.update(this);
      this.docView.destroy(), this.docView = new Gd(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    t && this.focus(), this.requestMeasure();
  }
  updatePlugins(e) {
    let t = e.startState.facet(Ui), r = e.state.facet(Ui);
    if (t != r) {
      let i = [];
      for (let s of r) {
        let l = t.indexOf(s);
        if (l < 0)
          i.push(new nu(s));
        else {
          let a = this.plugins[l];
          a.mustUpdate = e, i.push(a);
        }
      }
      for (let s of this.plugins)
        s.mustUpdate != e && s.destroy(this);
      this.plugins = i, this.pluginMap.clear();
    } else
      for (let i of this.plugins)
        i.mustUpdate = e;
    for (let i = 0; i < this.plugins.length; i++)
      this.plugins[i].update(this);
    t != r && this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let e of this.plugins) {
      let t = e.value;
      if (t && t.docViewUpdate)
        try {
          t.docViewUpdate(this);
        } catch (r) {
          Sn(this.state, r, "doc view update listener");
        }
    }
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, e && this.observer.forceFlush();
    let t = null, r = this.scrollDOM, i = r.scrollTop * this.scaleY, { scrollAnchorPos: s, scrollAnchorHeight: l } = this.viewState;
    Math.abs(i - this.viewState.scrollTop) > 1 && (l = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let a = 0; ; a++) {
        if (l < 0)
          if (zO(r))
            s = -1, l = this.viewState.heightMap.height;
          else {
            let d = this.viewState.scrollAnchorAt(i);
            s = d.from, l = d.top;
          }
        this.updateState = 1;
        let o = this.viewState.measure(this);
        if (!o && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (a > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let u = [];
        o & 4 || ([this.measureRequests, u] = [u, this.measureRequests]);
        let h = u.map((d) => {
          try {
            return d.read(this);
          } catch (m) {
            return Sn(this.state, m), bp;
          }
        }), c = aa.create(this, this.state, []), f = !1;
        c.flags |= o, t ? t.flags |= o : t = c, this.updateState = 2, c.empty || (this.updatePlugins(c), this.inputState.update(c), this.updateAttrs(), f = this.docView.update(c), f && this.docViewUpdate());
        for (let d = 0; d < u.length; d++)
          if (h[d] != bp)
            try {
              let m = u[d];
              m.write && m.write(h[d], this);
            } catch (m) {
              Sn(this.state, m);
            }
        if (f && this.docView.updateSelection(!0), !c.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, l = -1;
              continue;
            } else {
              let m = (s < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(s).top) - l;
              if (m > 1 || m < -1) {
                i = i + m, r.scrollTop = i / this.scaleY, l = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (t && !t.empty)
      for (let a of this.state.facet(S0))
        a(t);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return $0 + " " + (this.state.facet(A0) ? C4 : P4) + " " + this.state.facet(Ql);
  }
  updateAttrs() {
    let e = xp(this, u4, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), t = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      writingsuggestions: "false",
      translate: "no",
      contenteditable: this.state.facet(Nn) ? "true" : "false",
      class: "cm-content",
      style: `${ee.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (t["aria-readonly"] = "true"), xp(this, jh, t);
    let r = this.observer.ignore(() => {
      let i = b0(this.contentDOM, this.contentAttrs, t), s = b0(this.dom, this.editorAttrs, e);
      return i || s;
    });
    return this.editorAttrs = e, this.contentAttrs = t, r;
  }
  showAnnouncements(e) {
    let t = !0;
    for (let r of e)
      for (let i of r.effects)
        if (i.is(he.announce)) {
          t && (this.announceDOM.textContent = ""), t = !1;
          let s = this.announceDOM.appendChild(document.createElement("div"));
          s.textContent = i.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(Wi);
    let e = this.state.facet(he.cspNonce);
    yr.mount(this.root, this.styleModules.concat(cQ).reverse(), e ? { nonce: e } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), e) {
      if (this.measureRequests.indexOf(e) > -1)
        return;
      if (e.key != null) {
        for (let t = 0; t < this.measureRequests.length; t++)
          if (this.measureRequests[t].key === e.key) {
            this.measureRequests[t] = e;
            return;
          }
      }
      this.measureRequests.push(e);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let t = this.pluginMap.get(e);
    return (t === void 0 || t && t.spec != e) && this.pluginMap.set(e, t = this.plugins.find((r) => r.spec == e) || null), t && t.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, t, r) {
    return iu(this, e, tp(this, e, t, r));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, t) {
    return iu(this, e, tp(this, e, t, (r) => C9(this, e.head, r)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(e, t) {
    let r = this.bidiSpans(e), i = this.textDirectionAt(e.from), s = r[t ? r.length - 1 : 0];
    return _.cursor(s.side(t, i) + e.from, s.forward(!t, i) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, t, r = !0) {
    return P9(this, e, t, r);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, t, r) {
    return iu(this, e, A9(this, e, t, r));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, t = 0) {
    return this.docView.posFromDOM(e, t);
  }
  posAtCoords(e, t = !0) {
    return this.readMeasured(), m4(this, e, t);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, t = 1) {
    this.readMeasured();
    let r = this.docView.coordsAt(e, t);
    if (!r || r.left == r.right)
      return r;
    let i = this.state.doc.lineAt(e), s = this.bidiSpans(i), l = s[fr.find(s, e - i.from, -1, t)];
    return za(r, l.dir == Je.LTR == t > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(e) {
    return this.readMeasured(), this.docView.coordsForChar(e);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(e) {
    return !this.state.facet(s4) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(e));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > gQ)
      return HO(e.length);
    let t = this.textDirectionAt(e.from), r;
    for (let s of this.bidiCache)
      if (s.from == e.from && s.dir == t && (s.fresh || GO(s.isolates, r = Yd(this, e))))
        return s.order;
    r || (r = Yd(this, e));
    let i = h9(e.text, t, r);
    return this.bidiCache.push(new ua(e.from, e.to, t, r, !0, i)), i;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e;
    return (this.dom.ownerDocument.hasFocus() || ee.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      RO(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(e) {
    this._root != e && (this._root = e, this.observer.setWindow((e.nodeType == 9 ? e : e.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    this.root.activeElement == this.contentDOM && this.contentDOM.blur();
    for (let e of this.plugins)
      e.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, t = {}) {
    return bl.of(new ai(typeof e == "number" ? _.cursor(e) : e, t.y, t.x, t.yMargin, t.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: e, scrollLeft: t } = this.scrollDOM, r = this.viewState.scrollAnchorAt(e);
    return bl.of(new ai(_.cursor(r.from), "start", "start", r.top - e, t, !0));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(e) {
    e == null ? this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1 : typeof e == "boolean" ? this.inputState.tabFocusMode = e ? 0 : -1 : this.inputState.tabFocusMode != 0 && (this.inputState.tabFocusMode = Date.now() + e);
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(e) {
    return $n.define(() => ({}), { eventHandlers: e });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(e) {
    return $n.define(() => ({}), { eventObservers: e });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, t) {
    let r = yr.newName(), i = [Ql.of(r), Wi.of(D0(`.${r}`, e))];
    return t && t.dark && i.push(A0.of(!0)), i;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return Ai.lowest(Wi.of(D0("." + $0, e, A4)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(e) {
    var t;
    let r = e.querySelector(".cm-content"), i = r && Me.get(r) || Me.get(e);
    return ((t = i == null ? void 0 : i.rootView) === null || t === void 0 ? void 0 : t.view) || null;
  }
}
he.styleModule = Wi;
he.inputHandler = r4;
he.clipboardInputFilter = Nh;
he.clipboardOutputFilter = Vh;
he.scrollHandler = a4;
he.focusChangeEffect = i4;
he.perLineTextDirection = s4;
he.exceptionSink = n4;
he.updateListener = S0;
he.editable = Nn;
he.mouseSelectionStyle = t4;
he.dragMovesSelection = e4;
he.clickAddsSelectionRange = JO;
he.decorations = ks;
he.outerDecorations = h4;
he.atomicRanges = _h;
he.bidiIsolatedRanges = c4;
he.scrollMargins = f4;
he.darkTheme = A0;
he.cspNonce = /* @__PURE__ */ oe.define({ combine: (n) => n.length ? n[0] : "" });
he.contentAttributes = jh;
he.editorAttributes = u4;
he.lineWrapping = /* @__PURE__ */ he.contentAttributes.of({ class: "cm-lineWrapping" });
he.announce = /* @__PURE__ */ Ie.define();
const gQ = 4096, bp = {};
class ua {
  constructor(e, t, r, i, s, l) {
    this.from = e, this.to = t, this.dir = r, this.isolates = i, this.fresh = s, this.order = l;
  }
  static update(e, t) {
    if (t.empty && !e.some((s) => s.fresh))
      return e;
    let r = [], i = e.length ? e[e.length - 1].dir : Je.LTR;
    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {
      let l = e[s];
      l.dir == i && !t.touchesRange(l.from, l.to) && r.push(new ua(t.mapPos(l.from, 1), t.mapPos(l.to, -1), l.dir, l.isolates, !1, l.order));
    }
    return r;
  }
}
function xp(n, e, t) {
  for (let r = n.state.facet(e), i = r.length - 1; i >= 0; i--) {
    let s = r[i], l = typeof s == "function" ? s(n) : s;
    l && y0(l, t);
  }
  return t;
}
const OQ = ee.mac ? "mac" : ee.windows ? "win" : ee.linux ? "linux" : "key";
function yQ(n, e) {
  const t = n.split(/-(?!$)/);
  let r = t[t.length - 1];
  r == "Space" && (r = " ");
  let i, s, l, a;
  for (let o = 0; o < t.length - 1; ++o) {
    const u = t[o];
    if (/^(cmd|meta|m)$/i.test(u))
      a = !0;
    else if (/^a(lt)?$/i.test(u))
      i = !0;
    else if (/^(c|ctrl|control)$/i.test(u))
      s = !0;
    else if (/^s(hift)?$/i.test(u))
      l = !0;
    else if (/^mod$/i.test(u))
      e == "mac" ? a = !0 : s = !0;
    else
      throw new Error("Unrecognized modifier name: " + u);
  }
  return i && (r = "Alt-" + r), s && (r = "Ctrl-" + r), a && (r = "Meta-" + r), l && (r = "Shift-" + r), r;
}
function Pl(n, e, t) {
  return e.altKey && (n = "Alt-" + n), e.ctrlKey && (n = "Ctrl-" + n), e.metaKey && (n = "Meta-" + n), t !== !1 && e.shiftKey && (n = "Shift-" + n), n;
}
const bQ = /* @__PURE__ */ Ai.default(/* @__PURE__ */ he.domEventHandlers({
  keydown(n, e) {
    return kQ(xQ(e.state), n, e, "editor");
  }
})), Vs = /* @__PURE__ */ oe.define({ enables: bQ }), vp = /* @__PURE__ */ new WeakMap();
function xQ(n) {
  let e = n.facet(Vs), t = vp.get(e);
  return t || vp.set(e, t = wQ(e.reduce((r, i) => r.concat(i), []))), t;
}
let ur = null;
const vQ = 4e3;
function wQ(n, e = OQ) {
  let t = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null), i = (l, a) => {
    let o = r[l];
    if (o == null)
      r[l] = a;
    else if (o != a)
      throw new Error("Key binding " + l + " is used both as a regular binding and as a multi-stroke prefix");
  }, s = (l, a, o, u, h) => {
    var c, f;
    let d = t[l] || (t[l] = /* @__PURE__ */ Object.create(null)), m = a.split(/ (?!$)/).map((b) => yQ(b, e));
    for (let b = 1; b < m.length; b++) {
      let w = m.slice(0, b).join(" ");
      i(w, !0), d[w] || (d[w] = {
        preventDefault: !0,
        stopPropagation: !1,
        run: [(C) => {
          let Z = ur = { view: C, prefix: w, scope: l };
          return setTimeout(() => {
            ur == Z && (ur = null);
          }, vQ), !0;
        }]
      });
    }
    let O = m.join(" ");
    i(O, !1);
    let x = d[O] || (d[O] = {
      preventDefault: !1,
      stopPropagation: !1,
      run: ((f = (c = d._any) === null || c === void 0 ? void 0 : c.run) === null || f === void 0 ? void 0 : f.slice()) || []
    });
    o && x.run.push(o), u && (x.preventDefault = !0), h && (x.stopPropagation = !0);
  };
  for (let l of n) {
    let a = l.scope ? l.scope.split(" ") : ["editor"];
    if (l.any)
      for (let u of a) {
        let h = t[u] || (t[u] = /* @__PURE__ */ Object.create(null));
        h._any || (h._any = { preventDefault: !1, stopPropagation: !1, run: [] });
        let { any: c } = l;
        for (let f in h)
          h[f].run.push((d) => c(d, T0));
      }
    let o = l[e] || l.key;
    if (o)
      for (let u of a)
        s(u, o, l.run, l.preventDefault, l.stopPropagation), l.shift && s(u, "Shift-" + o, l.shift, l.preventDefault, l.stopPropagation);
  }
  return t;
}
let T0 = null;
function kQ(n, e, t, r) {
  T0 = e;
  let i = _S(e), s = AS(i, 0), l = $S(s) == i.length && i != " ", a = "", o = !1, u = !1, h = !1;
  ur && ur.view == t && ur.scope == r && (a = ur.prefix + " ", y4.indexOf(e.keyCode) < 0 && (u = !0, ur = null));
  let c = /* @__PURE__ */ new Set(), f = (x) => {
    if (x) {
      for (let b of x.run)
        if (!c.has(b) && (c.add(b), b(t)))
          return x.stopPropagation && (h = !0), !0;
      x.preventDefault && (x.stopPropagation && (h = !0), u = !0);
    }
    return !1;
  }, d = n[r], m, O;
  return d && (f(d[a + Pl(i, e, !l)]) ? o = !0 : l && (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(ee.windows && e.ctrlKey && e.altKey) && (m = br[e.keyCode]) && m != i ? (f(d[a + Pl(m, e, !0)]) || e.shiftKey && (O = xs[e.keyCode]) != i && O != m && f(d[a + Pl(O, e, !1)])) && (o = !0) : l && e.shiftKey && f(d[a + Pl(i, e, !0)]) && (o = !0), !o && f(d._any) && (o = !0)), u && (o = !0), o && h && e.stopPropagation(), T0 = null, o;
}
class js {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(e, t, r, i, s) {
    this.className = e, this.left = t, this.top = r, this.width = i, this.height = s;
  }
  draw() {
    let e = document.createElement("div");
    return e.className = this.className, this.adjust(e), e;
  }
  update(e, t) {
    return t.className != this.className ? !1 : (this.adjust(e), !0);
  }
  adjust(e) {
    e.style.left = this.left + "px", e.style.top = this.top + "px", this.width != null && (e.style.width = this.width + "px"), e.style.height = this.height + "px";
  }
  eq(e) {
    return this.left == e.left && this.top == e.top && this.width == e.width && this.height == e.height && this.className == e.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(e, t, r) {
    if (r.empty) {
      let i = e.coordsAtPos(r.head, r.assoc || 1);
      if (!i)
        return [];
      let s = $4(e);
      return [new js(t, i.left - s.left, i.top - s.top, null, i.bottom - i.top)];
    } else
      return SQ(e, t, r);
  }
}
function $4(n) {
  let e = n.scrollDOM.getBoundingClientRect();
  return { left: (n.textDirection == Je.LTR ? e.left : e.right - n.scrollDOM.clientWidth * n.scaleX) - n.scrollDOM.scrollLeft * n.scaleX, top: e.top - n.scrollDOM.scrollTop * n.scaleY };
}
function wp(n, e, t, r) {
  let i = n.coordsAtPos(e, t * 2);
  if (!i)
    return r;
  let s = n.dom.getBoundingClientRect(), l = (i.top + i.bottom) / 2, a = n.posAtCoords({ x: s.left + 1, y: l }), o = n.posAtCoords({ x: s.right - 1, y: l });
  return a == null || o == null ? r : { from: Math.max(r.from, Math.min(a, o)), to: Math.min(r.to, Math.max(a, o)) };
}
function SQ(n, e, t) {
  if (t.to <= n.viewport.from || t.from >= n.viewport.to)
    return [];
  let r = Math.max(t.from, n.viewport.from), i = Math.min(t.to, n.viewport.to), s = n.textDirection == Je.LTR, l = n.contentDOM, a = l.getBoundingClientRect(), o = $4(n), u = l.querySelector(".cm-line"), h = u && window.getComputedStyle(u), c = a.left + (h ? parseInt(h.paddingLeft) + Math.min(0, parseInt(h.textIndent)) : 0), f = a.right - (h ? parseInt(h.paddingRight) : 0), d = P0(n, r), m = P0(n, i), O = d.type == Nt.Text ? d : null, x = m.type == Nt.Text ? m : null;
  if (O && (n.lineWrapping || d.widgetLineBreaks) && (O = wp(n, r, 1, O)), x && (n.lineWrapping || m.widgetLineBreaks) && (x = wp(n, i, -1, x)), O && x && O.from == x.from && O.to == x.to)
    return w(C(t.from, t.to, O));
  {
    let T = O ? C(t.from, null, O) : Z(d, !1), S = x ? C(null, t.to, x) : Z(m, !0), E = [];
    return (O || d).to < (x || m).from - (O && x ? 1 : 0) || d.widgetLineBreaks > 1 && T.bottom + n.defaultLineHeight / 2 < S.top ? E.push(b(c, T.bottom, f, S.top)) : T.bottom < S.top && n.elementAtHeight((T.bottom + S.top) / 2).type == Nt.Text && (T.bottom = S.top = (T.bottom + S.top) / 2), w(T).concat(E).concat(w(S));
  }
  function b(T, S, E, N) {
    return new js(e, T - o.left, S - o.top, E - T, N - S);
  }
  function w({ top: T, bottom: S, horizontal: E }) {
    let N = [];
    for (let z = 0; z < E.length; z += 2)
      N.push(b(E[z], T, E[z + 1], S));
    return N;
  }
  function C(T, S, E) {
    let N = 1e9, z = -1e9, M = [];
    function L(J, K, me, Oe, $e) {
      let Qe = n.coordsAtPos(J, J == E.to ? -2 : 2), P = n.coordsAtPos(me, me == E.from ? 2 : -2);
      !Qe || !P || (N = Math.min(Qe.top, P.top, N), z = Math.max(Qe.bottom, P.bottom, z), $e == Je.LTR ? M.push(s && K ? c : Qe.left, s && Oe ? f : P.right) : M.push(!s && Oe ? c : P.left, !s && K ? f : Qe.right));
    }
    let F = T ?? E.from, ne = S ?? E.to;
    for (let J of n.visibleRanges)
      if (J.to > F && J.from < ne)
        for (let K = Math.max(J.from, F), me = Math.min(J.to, ne); ; ) {
          let Oe = n.state.doc.lineAt(K);
          for (let $e of n.bidiSpans(Oe)) {
            let Qe = $e.from + Oe.from, P = $e.to + Oe.from;
            if (Qe >= me)
              break;
            P > K && L(Math.max(Qe, K), T == null && Qe <= F, Math.min(P, me), S == null && P >= ne, $e.dir);
          }
          if (K = Oe.to + 1, K >= me)
            break;
        }
    return M.length == 0 && L(F, T == null, ne, S == null, n.textDirection), { top: N, bottom: z, horizontal: M };
  }
  function Z(T, S) {
    let E = a.top + (S ? T.top : T.bottom);
    return { top: E, bottom: E, horizontal: [] };
  }
}
function QQ(n, e) {
  return n.constructor == e.constructor && n.eq(e);
}
class PQ {
  constructor(e, t) {
    this.view = e, this.layer = t, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = e.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), t.above && this.dom.classList.add("cm-layer-above"), t.class && this.dom.classList.add(t.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(e.state), e.requestMeasure(this.measureReq), t.mount && t.mount(this.dom, e);
  }
  update(e) {
    e.startState.facet(Il) != e.state.facet(Il) && this.setOrder(e.state), (this.layer.update(e, this.dom) || e.geometryChanged) && (this.scale(), e.view.requestMeasure(this.measureReq));
  }
  docViewUpdate(e) {
    this.layer.updateOnDocViewUpdate !== !1 && e.requestMeasure(this.measureReq);
  }
  setOrder(e) {
    let t = 0, r = e.facet(Il);
    for (; t < r.length && r[t] != this.layer; )
      t++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: e, scaleY: t } = this.view;
    (e != this.scaleX || t != this.scaleY) && (this.scaleX = e, this.scaleY = t, this.dom.style.transform = `scale(${1 / e}, ${1 / t})`);
  }
  draw(e) {
    if (e.length != this.drawn.length || e.some((t, r) => !QQ(t, this.drawn[r]))) {
      let t = this.dom.firstChild, r = 0;
      for (let i of e)
        i.update && t && i.constructor && this.drawn[r].constructor && i.update(t, this.drawn[r]) ? (t = t.nextSibling, r++) : this.dom.insertBefore(i.draw(), t);
      for (; t; ) {
        let i = t.nextSibling;
        t.remove(), t = i;
      }
      this.drawn = e;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
}
const Il = /* @__PURE__ */ oe.define();
function D4(n) {
  return [
    $n.define((e) => new PQ(e, n)),
    Il.of(n)
  ];
}
const T4 = !(ee.ios && ee.webkit && ee.webkit_version < 534), Ss = /* @__PURE__ */ oe.define({
  combine(n) {
    return TO(n, {
      cursorBlinkRate: 1200,
      drawRangeCursor: !0
    }, {
      cursorBlinkRate: (e, t) => Math.min(e, t),
      drawRangeCursor: (e, t) => e || t
    });
  }
});
function CQ(n = {}) {
  return [
    Ss.of(n),
    AQ,
    $Q,
    DQ,
    l4.of(!0)
  ];
}
function M4(n) {
  return n.startState.facet(Ss) != n.state.facet(Ss);
}
const AQ = /* @__PURE__ */ D4({
  above: !0,
  markers(n) {
    let { state: e } = n, t = e.facet(Ss), r = [];
    for (let i of e.selection.ranges) {
      let s = i == e.selection.main;
      if (i.empty ? !s || T4 : t.drawRangeCursor) {
        let l = s ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", a = i.empty ? i : _.cursor(i.head, i.head > i.anchor ? -1 : 1);
        for (let o of js.forRange(n, l, a))
          r.push(o);
      }
    }
    return r;
  },
  update(n, e) {
    n.transactions.some((r) => r.selection) && (e.style.animationName = e.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
    let t = M4(n);
    return t && kp(n.state, e), n.docChanged || n.selectionSet || t;
  },
  mount(n, e) {
    kp(e.state, n);
  },
  class: "cm-cursorLayer"
});
function kp(n, e) {
  e.style.animationDuration = n.facet(Ss).cursorBlinkRate + "ms";
}
const $Q = /* @__PURE__ */ D4({
  above: !1,
  markers(n) {
    return n.state.selection.ranges.map((e) => e.empty ? [] : js.forRange(n, "cm-selectionBackground", e)).reduce((e, t) => e.concat(t));
  },
  update(n, e) {
    return n.docChanged || n.selectionSet || n.viewportChanged || M4(n);
  },
  class: "cm-selectionLayer"
}), M0 = {
  ".cm-line": {
    "& ::selection, &::selection": { backgroundColor: "transparent !important" }
  },
  ".cm-content": {
    "& :focus": {
      caretColor: "initial !important",
      "&::selection, & ::selection": {
        backgroundColor: "Highlight !important"
      }
    }
  }
};
T4 && (M0[".cm-line"].caretColor = M0[".cm-content"].caretColor = "transparent !important");
const DQ = /* @__PURE__ */ Ai.highest(/* @__PURE__ */ he.theme(M0)), E4 = /* @__PURE__ */ Ie.define({
  map(n, e) {
    return n == null ? null : e.mapPos(n);
  }
}), Hi = /* @__PURE__ */ Rn.define({
  create() {
    return null;
  },
  update(n, e) {
    return n != null && (n = e.changes.mapPos(n)), e.effects.reduce((t, r) => r.is(E4) ? r.value : t, n);
  }
}), TQ = /* @__PURE__ */ $n.fromClass(class {
  constructor(n) {
    this.view = n, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(n) {
    var e;
    let t = n.state.field(Hi);
    t == null ? this.cursor != null && ((e = this.cursor) === null || e === void 0 || e.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (n.startState.field(Hi) != t || n.docChanged || n.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: n } = this, e = n.state.field(Hi), t = e != null && n.coordsAtPos(e);
    if (!t)
      return null;
    let r = n.scrollDOM.getBoundingClientRect();
    return {
      left: t.left - r.left + n.scrollDOM.scrollLeft * n.scaleX,
      top: t.top - r.top + n.scrollDOM.scrollTop * n.scaleY,
      height: t.bottom - t.top
    };
  }
  drawCursor(n) {
    if (this.cursor) {
      let { scaleX: e, scaleY: t } = this.view;
      n ? (this.cursor.style.left = n.left / e + "px", this.cursor.style.top = n.top / t + "px", this.cursor.style.height = n.height / t + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(n) {
    this.view.state.field(Hi) != n && this.view.dispatch({ effects: E4.of(n) });
  }
}, {
  eventObservers: {
    dragover(n) {
      this.setDropPos(this.view.posAtCoords({ x: n.clientX, y: n.clientY }));
    },
    dragleave(n) {
      (n.target == this.view.contentDOM || !this.view.contentDOM.contains(n.relatedTarget)) && this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function MQ() {
  return [Hi, TQ];
}
function EQ() {
  return ZQ;
}
const RQ = /* @__PURE__ */ Ue.line({ class: "cm-activeLine" }), ZQ = /* @__PURE__ */ $n.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.docChanged || n.selectionSet) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let e = -1, t = [];
    for (let r of n.state.selection.ranges) {
      let i = n.lineBlockAt(r.head);
      i.from > e && (t.push(RQ.range(i.from)), e = i.from);
    }
    return Ue.set(t);
  }
}, {
  decorations: (n) => n.decorations
});
class mi extends Or {
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(e) {
    return !1;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(e) {
  }
}
mi.prototype.elementClass = "";
mi.prototype.toDOM = void 0;
mi.prototype.mapMode = bt.TrackBefore;
mi.prototype.startSide = mi.prototype.endSide = -1;
mi.prototype.point = !0;
let zQ = 0;
class qt {
  /**
  @internal
  */
  constructor(e, t, r, i) {
    this.name = e, this.set = t, this.base = r, this.modified = i, this.id = zQ++;
  }
  toString() {
    let { name: e } = this;
    for (let t of this.modified)
      t.name && (e = `${t.name}(${e})`);
    return e;
  }
  static define(e, t) {
    let r = typeof e == "string" ? e : "?";
    if (e instanceof qt && (t = e), t != null && t.base)
      throw new Error("Can not derive from a modified tag");
    let i = new qt(r, [], null, []);
    if (i.set.push(i), t)
      for (let s of t.set)
        i.set.push(s);
    return i;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier(e) {
    let t = new ha(e);
    return (r) => r.modified.indexOf(t) > -1 ? r : ha.get(r.base || r, r.modified.concat(t).sort((i, s) => i.id - s.id));
  }
}
let FQ = 0;
class ha {
  constructor(e) {
    this.name = e, this.instances = [], this.id = FQ++;
  }
  static get(e, t) {
    if (!t.length)
      return e;
    let r = t[0].instances.find((a) => a.base == e && BQ(t, a.modified));
    if (r)
      return r;
    let i = [], s = new qt(e.name, i, e, t);
    for (let a of t)
      a.instances.push(s);
    let l = LQ(t);
    for (let a of e.set)
      if (!a.modified.length)
        for (let o of l)
          i.push(ha.get(a, o));
    return s;
  }
}
function BQ(n, e) {
  return n.length == e.length && n.every((t, r) => t == e[r]);
}
function LQ(n) {
  let e = [[]];
  for (let t = 0; t < n.length; t++)
    for (let r = 0, i = e.length; r < i; r++)
      e.push(e[r].concat(n[t]));
  return e.sort((t, r) => r.length - t.length);
}
function $i(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n) {
    let r = n[t];
    Array.isArray(r) || (r = [r]);
    for (let i of t.split(" "))
      if (i) {
        let s = [], l = 2, a = i;
        for (let c = 0; ; ) {
          if (a == "..." && c > 0 && c + 3 == i.length) {
            l = 1;
            break;
          }
          let f = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(a);
          if (!f)
            throw new RangeError("Invalid path: " + i);
          if (s.push(f[0] == "*" ? "" : f[0][0] == '"' ? JSON.parse(f[0]) : f[0]), c += f[0].length, c == i.length)
            break;
          let d = i[c++];
          if (c == i.length && d == "!") {
            l = 0;
            break;
          }
          if (d != "/")
            throw new RangeError("Invalid path: " + i);
          a = i.slice(c);
        }
        let o = s.length - 1, u = s[o];
        if (!u)
          throw new RangeError("Invalid path: " + i);
        let h = new ca(r, l, o > 0 ? s.slice(0, o) : null);
        e[u] = h.sort(e[u]);
      }
  }
  return R4.add(e);
}
const R4 = new pe();
class ca {
  constructor(e, t, r, i) {
    this.tags = e, this.mode = t, this.context = r, this.next = i;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(e) {
    return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
ca.empty = new ca([], 2, null);
function Z4(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let s of n)
    if (!Array.isArray(s.tag))
      t[s.tag.id] = s.class;
    else
      for (let l of s.tag)
        t[l.id] = s.class;
  let { scope: r, all: i = null } = e || {};
  return {
    style: (s) => {
      let l = i;
      for (let a of s)
        for (let o of a.set) {
          let u = t[o.id];
          if (u) {
            l = l ? l + " " + u : u;
            break;
          }
        }
      return l;
    },
    scope: r
  };
}
function qQ(n, e) {
  let t = null;
  for (let r of n) {
    let i = r.style(e);
    i && (t = t ? t + " " + i : i);
  }
  return t;
}
function XQ(n, e, t, r = 0, i = n.length) {
  let s = new IQ(r, Array.isArray(e) ? e : [e], t);
  s.highlightRange(n.cursor(), r, i, "", s.highlighters), s.flush(i);
}
class IQ {
  constructor(e, t, r) {
    this.at = e, this.highlighters = t, this.span = r, this.class = "";
  }
  startSpan(e, t) {
    t != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = t);
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class);
  }
  highlightRange(e, t, r, i, s) {
    let { type: l, from: a, to: o } = e;
    if (a >= r || o <= t)
      return;
    l.isTop && (s = this.highlighters.filter((d) => !d.scope || d.scope(l)));
    let u = i, h = NQ(e) || ca.empty, c = qQ(s, h.tags);
    if (c && (u && (u += " "), u += c, h.mode == 1 && (i += (i ? " " : "") + c)), this.startSpan(Math.max(t, a), u), h.opaque)
      return;
    let f = e.tree && e.tree.prop(pe.mounted);
    if (f && f.overlay) {
      let d = e.node.enter(f.overlay[0].from + a, 1), m = this.highlighters.filter((x) => !x.scope || x.scope(f.tree.type)), O = e.firstChild();
      for (let x = 0, b = a; ; x++) {
        let w = x < f.overlay.length ? f.overlay[x] : null, C = w ? w.from + a : o, Z = Math.max(t, b), T = Math.min(r, C);
        if (Z < T && O)
          for (; e.from < T && (this.highlightRange(e, Z, T, i, s), this.startSpan(Math.min(T, e.to), u), !(e.to >= C || !e.nextSibling())); )
            ;
        if (!w || C > r)
          break;
        b = w.to + a, b > t && (this.highlightRange(d.cursor(), Math.max(t, w.from + a), Math.min(r, b), "", m), this.startSpan(Math.min(r, b), u));
      }
      O && e.parent();
    } else if (e.firstChild()) {
      f && (i = "");
      do
        if (!(e.to <= t)) {
          if (e.from >= r)
            break;
          this.highlightRange(e, t, r, i, s), this.startSpan(Math.min(r, e.to), u);
        }
      while (e.nextSibling());
      e.parent();
    }
  }
}
function NQ(n) {
  let e = n.type.prop(R4);
  for (; e && e.context && !n.matchContext(e.context); )
    e = e.next;
  return e || null;
}
const G = qt.define, Cl = G(), ar = G(), Sp = G(ar), Qp = G(ar), or = G(), Al = G(or), au = G(or), gn = G(), Dr = G(gn), pn = G(), mn = G(), E0 = G(), Xi = G(E0), $l = G(), $ = {
  /**
  A comment.
  */
  comment: Cl,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: G(Cl),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: G(Cl),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: G(Cl),
  /**
  Any kind of identifier.
  */
  name: ar,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: G(ar),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: Sp,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: G(Sp),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: Qp,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: G(Qp),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: G(ar),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: G(ar),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: G(ar),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: G(ar),
  /**
  A literal value.
  */
  literal: or,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: Al,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: G(Al),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: G(Al),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: G(Al),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: au,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: G(au),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: G(au),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: G(or),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: G(or),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: G(or),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: G(or),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: G(or),
  /**
  A language keyword.
  */
  keyword: pn,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: G(pn),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: G(pn),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: G(pn),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: G(pn),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: G(pn),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: G(pn),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: G(pn),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: G(pn),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: G(pn),
  /**
  An operator.
  */
  operator: mn,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: G(mn),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: G(mn),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: G(mn),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: G(mn),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: G(mn),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: G(mn),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: G(mn),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: G(mn),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: G(mn),
  /**
  Program or markup punctuation.
  */
  punctuation: E0,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: G(E0),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: Xi,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: G(Xi),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: G(Xi),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: G(Xi),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: G(Xi),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: gn,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: Dr,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: G(Dr),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: G(Dr),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: G(Dr),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: G(Dr),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: G(Dr),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: G(Dr),
  /**
  A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
  */
  contentSeparator: G(gn),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: G(gn),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: G(gn),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: G(gn),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: G(gn),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: G(gn),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: G(gn),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: G(gn),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: G(),
  /**
  Deleted text.
  */
  deleted: G(),
  /**
  Changed text.
  */
  changed: G(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: G(),
  /**
  Metadata or meta-instruction.
  */
  meta: $l,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: G($l),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: G($l),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: G($l),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: qt.defineModifier("definition"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: qt.defineModifier("constant"),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: qt.defineModifier("function"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: qt.defineModifier("standard"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: qt.defineModifier("local"),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: qt.defineModifier("special")
};
for (let n in $) {
  let e = $[n];
  e instanceof qt && (e.name = n);
}
Z4([
  { tag: $.link, class: "tok-link" },
  { tag: $.heading, class: "tok-heading" },
  { tag: $.emphasis, class: "tok-emphasis" },
  { tag: $.strong, class: "tok-strong" },
  { tag: $.keyword, class: "tok-keyword" },
  { tag: $.atom, class: "tok-atom" },
  { tag: $.bool, class: "tok-bool" },
  { tag: $.url, class: "tok-url" },
  { tag: $.labelName, class: "tok-labelName" },
  { tag: $.inserted, class: "tok-inserted" },
  { tag: $.deleted, class: "tok-deleted" },
  { tag: $.literal, class: "tok-literal" },
  { tag: $.string, class: "tok-string" },
  { tag: $.number, class: "tok-number" },
  { tag: [$.regexp, $.escape, $.special($.string)], class: "tok-string2" },
  { tag: $.variableName, class: "tok-variableName" },
  { tag: $.local($.variableName), class: "tok-variableName tok-local" },
  { tag: $.definition($.variableName), class: "tok-variableName tok-definition" },
  { tag: $.special($.variableName), class: "tok-variableName2" },
  { tag: $.definition($.propertyName), class: "tok-propertyName tok-definition" },
  { tag: $.typeName, class: "tok-typeName" },
  { tag: $.namespace, class: "tok-namespace" },
  { tag: $.className, class: "tok-className" },
  { tag: $.macroName, class: "tok-macroName" },
  { tag: $.propertyName, class: "tok-propertyName" },
  { tag: $.operator, class: "tok-operator" },
  { tag: $.comment, class: "tok-comment" },
  { tag: $.meta, class: "tok-meta" },
  { tag: $.invalid, class: "tok-invalid" },
  { tag: $.punctuation, class: "tok-punctuation" }
]);
var ou;
const Zr = /* @__PURE__ */ new pe();
function Gh(n) {
  return oe.define({
    combine: n ? (e) => e.concat(n) : void 0
  });
}
const Hh = /* @__PURE__ */ new pe();
class Yt {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(e, t, r = [], i = "") {
    this.data = e, this.name = i, Pe.prototype.hasOwnProperty("tree") || Object.defineProperty(Pe.prototype, "tree", { get() {
      return ot(this);
    } }), this.parser = t, this.extension = [
      yi.of(this),
      Pe.languageData.of((s, l, a) => {
        let o = Pp(s, l, a), u = o.type.prop(Zr);
        if (!u)
          return [];
        let h = s.facet(u), c = o.type.prop(Hh);
        if (c) {
          let f = o.resolve(l - o.from, a);
          for (let d of c)
            if (d.test(f, s)) {
              let m = s.facet(d.facet);
              return d.type == "replace" ? m : m.concat(h);
            }
        }
        return h;
      })
    ].concat(r);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, t, r = -1) {
    return Pp(e, t, r).type.prop(Zr) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let t = e.facet(yi);
    if ((t == null ? void 0 : t.data) == this.data)
      return [{ from: 0, to: e.doc.length }];
    if (!t || !t.allowsNesting)
      return [];
    let r = [], i = (s, l) => {
      if (s.prop(Zr) == this.data) {
        r.push({ from: l, to: l + s.length });
        return;
      }
      let a = s.prop(pe.mounted);
      if (a) {
        if (a.tree.prop(Zr) == this.data) {
          if (a.overlay)
            for (let o of a.overlay)
              r.push({ from: o.from + l, to: o.to + l });
          else
            r.push({ from: l, to: l + s.length });
          return;
        } else if (a.overlay) {
          let o = r.length;
          if (i(a.tree, a.overlay[0].from + l), r.length > o)
            return;
        }
      }
      for (let o = 0; o < s.children.length; o++) {
        let u = s.children[o];
        u instanceof Ae && i(u, s.positions[o] + l);
      }
    };
    return i(ot(e), 0), r;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
Yt.setState = /* @__PURE__ */ Ie.define();
function Pp(n, e, t) {
  let r = n.facet(yi), i = ot(n).topNode;
  if (!r || r.allowsNesting)
    for (let s = i; s; s = s.enter(e, t, Fe.ExcludeBuffers))
      s.type.isTop && (i = s);
  return i;
}
class gi extends Yt {
  constructor(e, t, r) {
    super(e, t, [], r), this.parser = t;
  }
  /**
  Define a language from a parser.
  */
  static define(e) {
    let t = Gh(e.languageData);
    return new gi(t, e.parser.configure({
      props: [Zr.add((r) => r.isTop ? t : void 0)]
    }), e.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(e, t) {
    return new gi(this.data, this.parser.configure(e), t || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function ot(n) {
  let e = n.field(Yt.state, !1);
  return e ? e.tree : Ae.empty;
}
class VQ {
  /**
  Create an input object for the given document.
  */
  constructor(e) {
    this.doc = e, this.cursorPos = 0, this.string = "", this.cursor = e.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(e) {
    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(e) {
    return this.syncTo(e), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(e, t) {
    let r = this.cursorPos - this.string.length;
    return e < r || t >= this.cursorPos ? this.doc.sliceString(e, t) : this.string.slice(e - r, t - r);
  }
}
let Ii = null;
class Qs {
  constructor(e, t, r = [], i, s, l, a, o) {
    this.parser = e, this.state = t, this.fragments = r, this.tree = i, this.treeLen = s, this.viewport = l, this.skipped = a, this.scheduleOn = o, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(e, t, r) {
    return new Qs(e, t, [], Ae.empty, 0, r, [], null);
  }
  startParse() {
    return this.parser.startParse(new VQ(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(e, t) {
    return t != null && t >= this.state.doc.length && (t = void 0), this.tree != Ae.empty && this.isDone(t ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var r;
      if (typeof e == "number") {
        let i = Date.now() + e;
        e = () => Date.now() > i;
      }
      for (this.parse || (this.parse = this.startParse()), t != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > t) && t < this.state.doc.length && this.parse.stopAt(t); ; ) {
        let i = this.parse.advance();
        if (i)
          if (this.fragments = this.withoutTempSkipped(Un.addTree(i, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (r = this.parse.stoppedAt) !== null && r !== void 0 ? r : this.state.doc.length, this.tree = i, this.parse = null, this.treeLen < (t ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (e())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let e, t;
    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {
      for (; !(t = this.parse.advance()); )
        ;
    }), this.treeLen = e, this.tree = t, this.fragments = this.withoutTempSkipped(Un.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(e) {
    let t = Ii;
    Ii = this;
    try {
      return e();
    } finally {
      Ii = t;
    }
  }
  withoutTempSkipped(e) {
    for (let t; t = this.tempSkipped.pop(); )
      e = Cp(e, t.from, t.to);
    return e;
  }
  /**
  @internal
  */
  changes(e, t) {
    let { fragments: r, tree: i, treeLen: s, viewport: l, skipped: a } = this;
    if (this.takeTree(), !e.empty) {
      let o = [];
      if (e.iterChangedRanges((u, h, c, f) => o.push({ fromA: u, toA: h, fromB: c, toB: f })), r = Un.applyChanges(r, o), i = Ae.empty, s = 0, l = { from: e.mapPos(l.from, -1), to: e.mapPos(l.to, 1) }, this.skipped.length) {
        a = [];
        for (let u of this.skipped) {
          let h = e.mapPos(u.from, 1), c = e.mapPos(u.to, -1);
          h < c && a.push({ from: h, to: c });
        }
      }
    }
    return new Qs(this.parser, t, r, i, s, l, a, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to)
      return !1;
    this.viewport = e;
    let t = this.skipped.length;
    for (let r = 0; r < this.skipped.length; r++) {
      let { from: i, to: s } = this.skipped[r];
      i < e.to && s > e.from && (this.fragments = Cp(this.fragments, i, s), this.skipped.splice(r--, 1));
    }
    return this.skipped.length >= t ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, t) {
    this.skipped.push({ from: e, to: t });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new class extends Fh {
      createParse(t, r, i) {
        let s = i[0].from, l = i[i.length - 1].to;
        return {
          parsedPos: s,
          advance() {
            let o = Ii;
            if (o) {
              for (let u of i)
                o.tempSkipped.push(u);
              e && (o.scheduleOn = o.scheduleOn ? Promise.all([o.scheduleOn, e]) : e);
            }
            return this.parsedPos = l, new Ae(lt.none, [], [], l - s);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length);
    let t = this.fragments;
    return this.treeLen >= e && t.length && t[0].from == 0 && t[0].to >= e;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return Ii;
  }
}
function Cp(n, e, t) {
  return Un.applyChanges(n, [{ fromA: e, toA: t, fromB: e, toB: t }]);
}
class Oi {
  constructor(e) {
    this.context = e, this.tree = e.tree;
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree)
      return this;
    let t = this.context.changes(e.changes, e.state), r = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to);
    return t.work(20, r) || t.takeTree(), new Oi(t);
  }
  static init(e) {
    let t = Math.min(3e3, e.doc.length), r = Qs.create(e.facet(yi).parser, e, { from: 0, to: t });
    return r.work(20, t) || r.takeTree(), new Oi(r);
  }
}
Yt.state = /* @__PURE__ */ Rn.define({
  create: Oi.init,
  update(n, e) {
    for (let t of e.effects)
      if (t.is(Yt.setState))
        return t.value;
    return e.startState.facet(yi) != e.state.facet(yi) ? Oi.init(e.state) : n.apply(e);
  }
});
let z4 = (n) => {
  let e = setTimeout(
    () => n(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(e);
};
typeof requestIdleCallback < "u" && (z4 = (n) => {
  let e = -1, t = setTimeout(
    () => {
      e = requestIdleCallback(n, {
        timeout: 400
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => e < 0 ? clearTimeout(t) : cancelIdleCallback(e);
});
const uu = typeof navigator < "u" && (!((ou = navigator.scheduling) === null || ou === void 0) && ou.isInputPending) ? () => navigator.scheduling.isInputPending() : null, jQ = /* @__PURE__ */ $n.fromClass(class {
  constructor(e) {
    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(e) {
    let t = this.view.state.field(Yt.state).context;
    (t.updateViewport(e.view.viewport) || this.view.viewport.to > t.treeLen) && this.scheduleWork(), (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(t);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: e } = this.view, t = e.field(Yt.state);
    (t.tree != t.context.tree || !t.context.isDone(e.doc.length)) && (this.working = z4(this.work));
  }
  work(e) {
    this.working = null;
    let t = Date.now();
    if (this.chunkEnd < t && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = t + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: r, viewport: { to: i } } = this.view, s = r.field(Yt.state);
    if (s.tree == s.context.tree && s.context.isDone(
      i + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let l = Date.now() + Math.min(this.chunkBudget, 100, e && !uu ? Math.max(25, e.timeRemaining() - 5) : 1e9), a = s.context.treeLen < i && r.doc.length > i + 1e3, o = s.context.work(() => uu && uu() || Date.now() > l, i + (a ? 0 : 1e5));
    this.chunkBudget -= Date.now() - t, (o || this.chunkBudget <= 0) && (s.context.takeTree(), this.view.dispatch({ effects: Yt.setState.of(new Oi(s.context)) })), this.chunkBudget > 0 && !(o && !a) && this.scheduleWork(), this.checkAsyncSchedule(s.context);
  }
  checkAsyncSchedule(e) {
    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((t) => Sn(this.view.state, t)).then(() => this.workScheduled--), e.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), yi = /* @__PURE__ */ oe.define({
  combine(n) {
    return n.length ? n[0] : null;
  },
  enables: (n) => [
    Yt.state,
    jQ,
    he.contentAttributes.compute([n], (e) => {
      let t = e.facet(n);
      return t && t.name ? { "data-language": t.name } : {};
    })
  ]
});
class Ps {
  /**
  Create a language support object.
  */
  constructor(e, t = []) {
    this.language = e, this.support = t, this.extension = [e, t];
  }
}
class fa {
  constructor(e, t, r, i, s, l = void 0) {
    this.name = e, this.alias = t, this.extensions = r, this.filename = i, this.loadFunc = s, this.support = l, this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */
  load() {
    return this.loading || (this.loading = this.loadFunc().then((e) => this.support = e, (e) => {
      throw this.loading = null, e;
    }));
  }
  /**
  Create a language description.
  */
  static of(e) {
    let { load: t, support: r } = e;
    if (!t) {
      if (!r)
        throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
      t = () => Promise.resolve(r);
    }
    return new fa(e.name, (e.alias || []).concat(e.name).map((i) => i.toLowerCase()), e.extensions || [], e.filename, t, r);
  }
  /**
  Look for a language in the given array of descriptions that
  matches the filename. Will first match
  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
  and return the first language that matches.
  */
  static matchFilename(e, t) {
    for (let i of e)
      if (i.filename && i.filename.test(t))
        return i;
    let r = /\.([^.]+)$/.exec(t);
    if (r) {
      for (let i of e)
        if (i.extensions.indexOf(r[1]) > -1)
          return i;
    }
    return null;
  }
  /**
  Look for a language whose name or alias matches the the given
  name (case-insensitively). If `fuzzy` is true, and no direct
  matchs is found, this'll also search for a language whose name
  or alias occurs in the string (for names shorter than three
  characters, only when surrounded by non-word characters).
  */
  static matchLanguageName(e, t, r = !0) {
    t = t.toLowerCase();
    for (let i of e)
      if (i.alias.some((s) => s == t))
        return i;
    if (r)
      for (let i of e)
        for (let s of i.alias) {
          let l = t.indexOf(s);
          if (l > -1 && (s.length > 2 || !/\w/.test(t[l - 1]) && !/\w/.test(t[l + s.length])))
            return i;
        }
    return null;
  }
}
const _Q = /* @__PURE__ */ oe.define(), _s = /* @__PURE__ */ oe.define({
  combine: (n) => {
    if (!n.length)
      return "  ";
    let e = n[0];
    if (!e || /\S/.test(e) || Array.from(e).some((t) => t != e[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(n[0]));
    return e;
  }
});
function da(n) {
  let e = n.facet(_s);
  return e.charCodeAt(0) == 9 ? n.tabSize * e.length : e.length;
}
function pa(n, e) {
  let t = "", r = n.tabSize, i = n.facet(_s)[0];
  if (i == "	") {
    for (; e >= r; )
      t += "	", e -= r;
    i = " ";
  }
  for (let s = 0; s < e; s++)
    t += i;
  return t;
}
function F4(n, e) {
  n instanceof Pe && (n = new Kh(n));
  for (let r of n.state.facet(_Q)) {
    let i = r(n, e);
    if (i !== void 0)
      return i;
  }
  let t = ot(n.state);
  return t.length >= e ? UQ(n, t, e) : null;
}
class Kh {
  /**
  Create an indent context.
  */
  constructor(e, t = {}) {
    this.state = e, this.options = t, this.unit = da(e);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(e, t = 1) {
    let r = this.state.doc.lineAt(e), { simulateBreak: i, simulateDoubleBreak: s } = this.options;
    return i != null && i >= r.from && i <= r.to ? s && i == e ? { text: "", from: e } : (t < 0 ? i < e : i <= e) ? { text: r.text.slice(i - r.from), from: i } : { text: r.text.slice(0, i - r.from), from: r.from } : r;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(e, t = 1) {
    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
      return "";
    let { text: r, from: i } = this.lineAt(e, t);
    return r.slice(e - i, Math.min(r.length, e + 100 - i));
  }
  /**
  Find the column for the given position.
  */
  column(e, t = 1) {
    let { text: r, from: i } = this.lineAt(e, t), s = this.countColumn(r, e - i), l = this.options.overrideIndentation ? this.options.overrideIndentation(i) : -1;
    return l > -1 && (s += l - this.countColumn(r, r.search(/\S|$/))), s;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(e, t = e.length) {
    return Kn(e, this.state.tabSize, t);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(e, t = 1) {
    let { text: r, from: i } = this.lineAt(e, t), s = this.options.overrideIndentation;
    if (s) {
      let l = s(i);
      if (l > -1)
        return l;
    }
    return this.countColumn(r, r.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const Us = /* @__PURE__ */ new pe();
function UQ(n, e, t) {
  let r = e.resolveStack(t), i = e.resolveInner(t, -1).resolve(t, 0).enterUnfinishedNodesBefore(t);
  if (i != r.node) {
    let s = [];
    for (let l = i; l && !(l.from == r.node.from && l.type == r.node.type); l = l.parent)
      s.push(l);
    for (let l = s.length - 1; l >= 0; l--)
      r = { node: s[l], next: r };
  }
  return B4(r, n, t);
}
function B4(n, e, t) {
  for (let r = n; r; r = r.next) {
    let i = YQ(r.node);
    if (i)
      return i(Jh.create(e, t, r));
  }
  return 0;
}
function WQ(n) {
  return n.pos == n.options.simulateBreak && n.options.simulateDoubleBreak;
}
function YQ(n) {
  let e = n.type.prop(Us);
  if (e)
    return e;
  let t = n.firstChild, r;
  if (t && (r = t.type.prop(pe.closedBy))) {
    let i = n.lastChild, s = i && r.indexOf(i.name) > -1;
    return (l) => L4(l, !0, 1, void 0, s && !WQ(l) ? i.from : void 0);
  }
  return n.parent == null ? GQ : null;
}
function GQ() {
  return 0;
}
class Jh extends Kh {
  constructor(e, t, r) {
    super(e.state, e.options), this.base = e, this.pos = t, this.context = r;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(e, t, r) {
    return new Jh(e, t, r);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(e) {
    let t = this.state.doc.lineAt(e.from);
    for (; ; ) {
      let r = e.resolve(t.from);
      for (; r.parent && r.parent.from == r.from; )
        r = r.parent;
      if (HQ(r, e))
        break;
      t = this.state.doc.lineAt(r.from);
    }
    return this.lineIndent(t.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return B4(this.context.next, this.base, this.pos);
  }
}
function HQ(n, e) {
  for (let t = e; t; t = t.parent)
    if (n == t)
      return !0;
  return !1;
}
function KQ(n) {
  let e = n.node, t = e.childAfter(e.from), r = e.lastChild;
  if (!t)
    return null;
  let i = n.options.simulateBreak, s = n.state.doc.lineAt(t.from), l = i == null || i <= s.from ? s.to : Math.min(s.to, i);
  for (let a = t.to; ; ) {
    let o = e.childAfter(a);
    if (!o || o == r)
      return null;
    if (!o.type.isSkipped) {
      if (o.from >= l)
        return null;
      let u = /^ */.exec(s.text.slice(t.to - s.from))[0].length;
      return { from: t.from, to: t.to + u };
    }
    a = o.to;
  }
}
function JQ({ closing: n, align: e = !0, units: t = 1 }) {
  return (r) => L4(r, e, t, n);
}
function L4(n, e, t, r, i) {
  let s = n.textAfter, l = s.match(/^\s*/)[0].length, a = r && s.slice(l, l + r.length) == r || i == n.pos + l, o = e ? KQ(n) : null;
  return o ? a ? n.column(o.from) : n.column(o.to) : n.baseIndent + (a ? 0 : n.unit * t);
}
const eP = (n) => n.baseIndent;
function Nl({ except: n, units: e = 1 } = {}) {
  return (t) => {
    let r = n && n.test(t.textAfter);
    return t.baseIndent + (r ? 0 : e * t.unit);
  };
}
const tP = 200;
function nP() {
  return Pe.transactionFilter.of((n) => {
    if (!n.docChanged || !n.isUserEvent("input.type") && !n.isUserEvent("input.complete"))
      return n;
    let e = n.startState.languageDataAt("indentOnInput", n.startState.selection.main.head);
    if (!e.length)
      return n;
    let t = n.newDoc, { head: r } = n.newSelection.main, i = t.lineAt(r);
    if (r > i.from + tP)
      return n;
    let s = t.sliceString(i.from, r);
    if (!e.some((u) => u.test(s)))
      return n;
    let { state: l } = n, a = -1, o = [];
    for (let { head: u } of l.selection.ranges) {
      let h = l.doc.lineAt(u);
      if (h.from == a)
        continue;
      a = h.from;
      let c = F4(l, h.from);
      if (c == null)
        continue;
      let f = /^\s*/.exec(h.text)[0], d = pa(l, c);
      f != d && o.push({ from: h.from, to: h.from + f.length, insert: d });
    }
    return o.length ? [n, { changes: o, sequential: !0 }] : n;
  });
}
const rP = /* @__PURE__ */ oe.define(), Ws = /* @__PURE__ */ new pe();
function q4(n) {
  let e = n.firstChild, t = n.lastChild;
  return e && e.to < t.from ? { from: e.to, to: t.type.isError ? n.to : t.from } : null;
}
class qa {
  constructor(e, t) {
    this.specs = e;
    let r;
    function i(a) {
      let o = yr.newName();
      return (r || (r = /* @__PURE__ */ Object.create(null)))["." + o] = a, o;
    }
    const s = typeof t.all == "string" ? t.all : t.all ? i(t.all) : void 0, l = t.scope;
    this.scope = l instanceof Yt ? (a) => a.prop(Zr) == l.data : l ? (a) => a == l : void 0, this.style = Z4(e.map((a) => ({
      tag: a.tag,
      class: a.class || i(Object.assign({}, a, { tag: null }))
    })), {
      all: s
    }).style, this.module = r ? new yr(r) : null, this.themeType = t.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, t) {
    return new qa(e, t || {});
  }
}
const R0 = /* @__PURE__ */ oe.define(), X4 = /* @__PURE__ */ oe.define({
  combine(n) {
    return n.length ? [n[0]] : null;
  }
});
function hu(n) {
  let e = n.facet(R0);
  return e.length ? e : n.facet(X4);
}
function iP(n, e) {
  let t = [lP], r;
  return n instanceof qa && (n.module && t.push(he.styleModule.of(n.module)), r = n.themeType), e != null && e.fallback ? t.push(X4.of(n)) : r ? t.push(R0.computeN([he.darkTheme], (i) => i.facet(he.darkTheme) == (r == "dark") ? [n] : [])) : t.push(R0.of(n)), t;
}
class sP {
  constructor(e) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = ot(e.state), this.decorations = this.buildDeco(e, hu(e.state)), this.decoratedTo = e.viewport.to;
  }
  update(e) {
    let t = ot(e.state), r = hu(e.state), i = r != hu(e.startState), { viewport: s } = e.view, l = e.changes.mapPos(this.decoratedTo, 1);
    t.length < s.to && !i && t.type == this.tree.type && l >= s.to ? (this.decorations = this.decorations.map(e.changes), this.decoratedTo = l) : (t != this.tree || e.viewportChanged || i) && (this.tree = t, this.decorations = this.buildDeco(e.view, r), this.decoratedTo = s.to);
  }
  buildDeco(e, t) {
    if (!t || !this.tree.length)
      return Ue.none;
    let r = new ys();
    for (let { from: i, to: s } of e.visibleRanges)
      XQ(this.tree, t, (l, a, o) => {
        r.add(l, a, this.markCache[o] || (this.markCache[o] = Ue.mark({ class: o })));
      }, i, s);
    return r.finish();
  }
}
const lP = /* @__PURE__ */ Ai.high(/* @__PURE__ */ $n.fromClass(sP, {
  decorations: (n) => n.decorations
})), aP = /* @__PURE__ */ new pe(), oP = /* @__PURE__ */ Object.create(null), Ap = [lt.none], $p = [], Dp = /* @__PURE__ */ Object.create(null), uP = /* @__PURE__ */ Object.create(null);
for (let [n, e] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  uP[n] = /* @__PURE__ */ hP(oP, e);
function cu(n, e) {
  $p.indexOf(n) > -1 || ($p.push(n), console.warn(e));
}
function hP(n, e) {
  let t = [];
  for (let a of e.split(" ")) {
    let o = [];
    for (let u of a.split(".")) {
      let h = n[u] || $[u];
      h ? typeof h == "function" ? o.length ? o = o.map(h) : cu(u, `Modifier ${u} used at start of tag`) : o.length ? cu(u, `Tag ${u} used as modifier`) : o = Array.isArray(h) ? h : [h] : cu(u, `Unknown highlighting tag ${u}`);
    }
    for (let u of o)
      t.push(u);
  }
  if (!t.length)
    return 0;
  let r = e.replace(/ /g, "_"), i = r + " " + t.map((a) => a.id), s = Dp[i];
  if (s)
    return s.id;
  let l = Dp[i] = lt.define({
    id: Ap.length,
    name: r,
    props: [$i({ [r]: t })]
  });
  return Ap.push(l), l.id;
}
Je.RTL, Je.LTR;
const Z0 = /* @__PURE__ */ nr.define(), cP = /* @__PURE__ */ nr.define(), fP = /* @__PURE__ */ oe.define(), I4 = /* @__PURE__ */ oe.define({
  combine(n) {
    return TO(n, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (e, t) => t
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (e, t) => (r, i) => e(r, i) || t(r, i)
    });
  }
}), N4 = /* @__PURE__ */ Rn.define({
  create() {
    return Qn.empty;
  },
  update(n, e) {
    let t = e.state.facet(I4), r = e.annotation(Z0);
    if (r) {
      let o = At.fromTransaction(e, r.selection), u = r.side, h = u == 0 ? n.undone : n.done;
      return o ? h = ma(h, h.length, t.minDepth, o) : h = _4(h, e.startState.selection), new Qn(u == 0 ? r.rest : h, u == 0 ? h : r.rest);
    }
    let i = e.annotation(cP);
    if ((i == "full" || i == "before") && (n = n.isolate()), e.annotation(Ke.addToHistory) === !1)
      return e.changes.empty ? n : n.addMapping(e.changes.desc);
    let s = At.fromTransaction(e), l = e.annotation(Ke.time), a = e.annotation(Ke.userEvent);
    return s ? n = n.addChanges(s, l, a, t, e) : e.selection && (n = n.addSelection(e.startState.selection, l, a, t.newGroupDelay)), (i == "full" || i == "after") && (n = n.isolate()), n;
  },
  toJSON(n) {
    return { done: n.done.map((e) => e.toJSON()), undone: n.undone.map((e) => e.toJSON()) };
  },
  fromJSON(n) {
    return new Qn(n.done.map(At.fromJSON), n.undone.map(At.fromJSON));
  }
});
function dP(n = {}) {
  return [
    N4,
    I4.of(n),
    he.domEventHandlers({
      beforeinput(e, t) {
        let r = e.inputType == "historyUndo" ? V4 : e.inputType == "historyRedo" ? z0 : null;
        return r ? (e.preventDefault(), r(t)) : !1;
      }
    })
  ];
}
function Xa(n, e) {
  return function({ state: t, dispatch: r }) {
    if (!e && t.readOnly)
      return !1;
    let i = t.field(N4, !1);
    if (!i)
      return !1;
    let s = i.pop(n, t, e);
    return s ? (r(s), !0) : !1;
  };
}
const V4 = /* @__PURE__ */ Xa(0, !1), z0 = /* @__PURE__ */ Xa(1, !1), pP = /* @__PURE__ */ Xa(0, !0), mP = /* @__PURE__ */ Xa(1, !0);
class At {
  constructor(e, t, r, i, s) {
    this.changes = e, this.effects = t, this.mapped = r, this.startSelection = i, this.selectionsAfter = s;
  }
  setSelAfter(e) {
    return new At(this.changes, this.effects, this.mapped, this.startSelection, e);
  }
  toJSON() {
    var e, t, r;
    return {
      changes: (e = this.changes) === null || e === void 0 ? void 0 : e.toJSON(),
      mapped: (t = this.mapped) === null || t === void 0 ? void 0 : t.toJSON(),
      startSelection: (r = this.startSelection) === null || r === void 0 ? void 0 : r.toJSON(),
      selectionsAfter: this.selectionsAfter.map((i) => i.toJSON())
    };
  }
  static fromJSON(e) {
    return new At(e.changes && it.fromJSON(e.changes), [], e.mapped && Pn.fromJSON(e.mapped), e.startSelection && _.fromJSON(e.startSelection), e.selectionsAfter.map(_.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(e, t) {
    let r = Gt;
    for (let i of e.startState.facet(fP)) {
      let s = i(e);
      s.length && (r = r.concat(s));
    }
    return !r.length && e.changes.empty ? null : new At(e.changes.invert(e.startState.doc), r, void 0, t || e.startState.selection, Gt);
  }
  static selection(e) {
    return new At(void 0, Gt, void 0, void 0, e);
  }
}
function ma(n, e, t, r) {
  let i = e + 1 > t + 20 ? e - t - 1 : 0, s = n.slice(i, e);
  return s.push(r), s;
}
function gP(n, e) {
  let t = [], r = !1;
  return n.iterChangedRanges((i, s) => t.push(i, s)), e.iterChangedRanges((i, s, l, a) => {
    for (let o = 0; o < t.length; ) {
      let u = t[o++], h = t[o++];
      a >= u && l <= h && (r = !0);
    }
  }), r;
}
function OP(n, e) {
  return n.ranges.length == e.ranges.length && n.ranges.filter((t, r) => t.empty != e.ranges[r].empty).length === 0;
}
function j4(n, e) {
  return n.length ? e.length ? n.concat(e) : n : e;
}
const Gt = [], yP = 200;
function _4(n, e) {
  if (n.length) {
    let t = n[n.length - 1], r = t.selectionsAfter.slice(Math.max(0, t.selectionsAfter.length - yP));
    return r.length && r[r.length - 1].eq(e) ? n : (r.push(e), ma(n, n.length - 1, 1e9, t.setSelAfter(r)));
  } else
    return [At.selection([e])];
}
function bP(n) {
  let e = n[n.length - 1], t = n.slice();
  return t[n.length - 1] = e.setSelAfter(e.selectionsAfter.slice(0, e.selectionsAfter.length - 1)), t;
}
function fu(n, e) {
  if (!n.length)
    return n;
  let t = n.length, r = Gt;
  for (; t; ) {
    let i = xP(n[t - 1], e, r);
    if (i.changes && !i.changes.empty || i.effects.length) {
      let s = n.slice(0, t);
      return s[t - 1] = i, s;
    } else
      e = i.mapped, t--, r = i.selectionsAfter;
  }
  return r.length ? [At.selection(r)] : Gt;
}
function xP(n, e, t) {
  let r = j4(n.selectionsAfter.length ? n.selectionsAfter.map((a) => a.map(e)) : Gt, t);
  if (!n.changes)
    return At.selection(r);
  let i = n.changes.map(e), s = e.mapDesc(n.changes, !0), l = n.mapped ? n.mapped.composeDesc(s) : s;
  return new At(i, Ie.mapEffects(n.effects, e), l, n.startSelection.map(s), r);
}
const vP = /^(input\.type|delete)($|\.)/;
class Qn {
  constructor(e, t, r = 0, i = void 0) {
    this.done = e, this.undone = t, this.prevTime = r, this.prevUserEvent = i;
  }
  isolate() {
    return this.prevTime ? new Qn(this.done, this.undone) : this;
  }
  addChanges(e, t, r, i, s) {
    let l = this.done, a = l[l.length - 1];
    return a && a.changes && !a.changes.empty && e.changes && (!r || vP.test(r)) && (!a.selectionsAfter.length && t - this.prevTime < i.newGroupDelay && i.joinToEvent(s, gP(a.changes, e.changes)) || // For compose (but not compose.start) events, always join with previous event
    r == "input.type.compose") ? l = ma(l, l.length - 1, i.minDepth, new At(e.changes.compose(a.changes), j4(Ie.mapEffects(e.effects, a.changes), a.effects), a.mapped, a.startSelection, Gt)) : l = ma(l, l.length, i.minDepth, e), new Qn(l, Gt, t, r);
  }
  addSelection(e, t, r, i) {
    let s = this.done.length ? this.done[this.done.length - 1].selectionsAfter : Gt;
    return s.length > 0 && t - this.prevTime < i && r == this.prevUserEvent && r && /^select($|\.)/.test(r) && OP(s[s.length - 1], e) ? this : new Qn(_4(this.done, e), this.undone, t, r);
  }
  addMapping(e) {
    return new Qn(fu(this.done, e), fu(this.undone, e), this.prevTime, this.prevUserEvent);
  }
  pop(e, t, r) {
    let i = e == 0 ? this.done : this.undone;
    if (i.length == 0)
      return null;
    let s = i[i.length - 1], l = s.selectionsAfter[0] || t.selection;
    if (r && s.selectionsAfter.length)
      return t.update({
        selection: s.selectionsAfter[s.selectionsAfter.length - 1],
        annotations: Z0.of({ side: e, rest: bP(i), selection: l }),
        userEvent: e == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (s.changes) {
      let a = i.length == 1 ? Gt : i.slice(0, i.length - 1);
      return s.mapped && (a = fu(a, s.mapped)), t.update({
        changes: s.changes,
        selection: s.startSelection,
        effects: s.effects,
        annotations: Z0.of({ side: e, rest: a, selection: l }),
        filter: !1,
        userEvent: e == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
Qn.empty = /* @__PURE__ */ new Qn(Gt, Gt);
const wP = [
  { key: "Mod-z", run: V4, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: z0, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: z0, preventDefault: !0 },
  { key: "Mod-u", run: pP, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: mP, preventDefault: !0 }
];
function ec(n, e) {
  return _.create(n.ranges.map(e), n.mainIndex);
}
function Vr(n, e) {
  return n.update({ selection: e, scrollIntoView: !0, userEvent: "select" });
}
function rr({ state: n, dispatch: e }, t) {
  let r = ec(n.selection, t);
  return r.eq(n.selection, !0) ? !1 : (e(Vr(n, r)), !0);
}
function Ia(n, e) {
  return _.cursor(e ? n.to : n.from);
}
function U4(n, e) {
  return rr(n, (t) => t.empty ? n.moveByChar(t, e) : Ia(t, e));
}
function nn(n) {
  return n.textDirectionAt(n.state.selection.main.head) == Je.LTR;
}
const W4 = (n) => U4(n, !nn(n)), Y4 = (n) => U4(n, nn(n));
function G4(n, e) {
  return rr(n, (t) => t.empty ? n.moveByGroup(t, e) : Ia(t, e));
}
const kP = (n) => G4(n, !nn(n)), SP = (n) => G4(n, nn(n));
function H4(n, e) {
  return rr(n, (t) => {
    if (!t.empty)
      return Ia(t, e);
    let r = n.moveVertically(t, e);
    return r.head != t.head ? r : n.moveToLineBoundary(t, e);
  });
}
const K4 = (n) => H4(n, !1), J4 = (n) => H4(n, !0);
function e2(n) {
  let e = n.scrollDOM.clientHeight < n.scrollDOM.scrollHeight - 2, t = 0, r = 0, i;
  if (e) {
    for (let s of n.state.facet(he.scrollMargins)) {
      let l = s(n);
      l != null && l.top && (t = Math.max(l == null ? void 0 : l.top, t)), l != null && l.bottom && (r = Math.max(l == null ? void 0 : l.bottom, r));
    }
    i = n.scrollDOM.clientHeight - t - r;
  } else
    i = (n.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: t,
    marginBottom: r,
    selfScroll: e,
    height: Math.max(n.defaultLineHeight, i - 5)
  };
}
function t2(n, e) {
  let t = e2(n), { state: r } = n, i = ec(r.selection, (l) => l.empty ? n.moveVertically(l, e, t.height) : Ia(l, e));
  if (i.eq(r.selection))
    return !1;
  let s;
  if (t.selfScroll) {
    let l = n.coordsAtPos(r.selection.main.head), a = n.scrollDOM.getBoundingClientRect(), o = a.top + t.marginTop, u = a.bottom - t.marginBottom;
    l && l.top > o && l.bottom < u && (s = he.scrollIntoView(i.main.head, { y: "start", yMargin: l.top - o }));
  }
  return n.dispatch(Vr(r, i), { effects: s }), !0;
}
const Tp = (n) => t2(n, !1), F0 = (n) => t2(n, !0);
function Sr(n, e, t) {
  let r = n.lineBlockAt(e.head), i = n.moveToLineBoundary(e, t);
  if (i.head == e.head && i.head != (t ? r.to : r.from) && (i = n.moveToLineBoundary(e, t, !1)), !t && i.head == r.from && r.length) {
    let s = /^\s*/.exec(n.state.sliceDoc(r.from, Math.min(r.from + 100, r.to)))[0].length;
    s && e.head != r.from + s && (i = _.cursor(r.from + s));
  }
  return i;
}
const QP = (n) => rr(n, (e) => Sr(n, e, !0)), PP = (n) => rr(n, (e) => Sr(n, e, !1)), CP = (n) => rr(n, (e) => Sr(n, e, !nn(n))), AP = (n) => rr(n, (e) => Sr(n, e, nn(n))), $P = (n) => rr(n, (e) => _.cursor(n.lineBlockAt(e.head).from, 1)), DP = (n) => rr(n, (e) => _.cursor(n.lineBlockAt(e.head).to, -1));
function Zn(n, e) {
  let t = ec(n.state.selection, (r) => {
    let i = e(r);
    return _.range(r.anchor, i.head, i.goalColumn, i.bidiLevel || void 0);
  });
  return t.eq(n.state.selection) ? !1 : (n.dispatch(Vr(n.state, t)), !0);
}
function n2(n, e) {
  return Zn(n, (t) => n.moveByChar(t, e));
}
const r2 = (n) => n2(n, !nn(n)), i2 = (n) => n2(n, nn(n));
function s2(n, e) {
  return Zn(n, (t) => n.moveByGroup(t, e));
}
const TP = (n) => s2(n, !nn(n)), MP = (n) => s2(n, nn(n));
function l2(n, e) {
  return Zn(n, (t) => n.moveVertically(t, e));
}
const a2 = (n) => l2(n, !1), o2 = (n) => l2(n, !0);
function u2(n, e) {
  return Zn(n, (t) => n.moveVertically(t, e, e2(n).height));
}
const Mp = (n) => u2(n, !1), Ep = (n) => u2(n, !0), EP = (n) => Zn(n, (e) => Sr(n, e, !0)), RP = (n) => Zn(n, (e) => Sr(n, e, !1)), ZP = (n) => Zn(n, (e) => Sr(n, e, !nn(n))), zP = (n) => Zn(n, (e) => Sr(n, e, nn(n))), FP = (n) => Zn(n, (e) => _.cursor(n.lineBlockAt(e.head).from)), BP = (n) => Zn(n, (e) => _.cursor(n.lineBlockAt(e.head).to)), Rp = ({ state: n, dispatch: e }) => (e(Vr(n, { anchor: 0 })), !0), Zp = ({ state: n, dispatch: e }) => (e(Vr(n, { anchor: n.doc.length })), !0), zp = ({ state: n, dispatch: e }) => (e(Vr(n, { anchor: n.selection.main.anchor, head: 0 })), !0), Fp = ({ state: n, dispatch: e }) => (e(Vr(n, { anchor: n.selection.main.anchor, head: n.doc.length })), !0), LP = ({ state: n, dispatch: e }) => (e(n.update({ selection: { anchor: 0, head: n.doc.length }, userEvent: "select" })), !0);
function Ys(n, e) {
  if (n.state.readOnly)
    return !1;
  let t = "delete.selection", { state: r } = n, i = r.changeByRange((s) => {
    let { from: l, to: a } = s;
    if (l == a) {
      let o = e(s);
      o < l ? (t = "delete.backward", o = Dl(n, o, !1)) : o > l && (t = "delete.forward", o = Dl(n, o, !0)), l = Math.min(l, o), a = Math.max(a, o);
    } else
      l = Dl(n, l, !1), a = Dl(n, a, !0);
    return l == a ? { range: s } : { changes: { from: l, to: a }, range: _.cursor(l, l < s.head ? -1 : 1) };
  });
  return i.changes.empty ? !1 : (n.dispatch(r.update(i, {
    scrollIntoView: !0,
    userEvent: t,
    effects: t == "delete.selection" ? he.announce.of(r.phrase("Selection deleted")) : void 0
  })), !0);
}
function Dl(n, e, t) {
  if (n instanceof he)
    for (let r of n.state.facet(he.atomicRanges).map((i) => i(n)))
      r.between(e, e, (i, s) => {
        i < e && s > e && (e = t ? s : i);
      });
  return e;
}
const h2 = (n, e, t) => Ys(n, (r) => {
  let i = r.from, { state: s } = n, l = s.doc.lineAt(i), a, o;
  if (t && !e && i > l.from && i < l.from + 200 && !/[^ \t]/.test(a = l.text.slice(0, i - l.from))) {
    if (a[a.length - 1] == "	")
      return i - 1;
    let u = Kn(a, s.tabSize), h = u % da(s) || da(s);
    for (let c = 0; c < h && a[a.length - 1 - c] == " "; c++)
      i--;
    o = i;
  } else
    o = vt(l.text, i - l.from, e, e) + l.from, o == i && l.number != (e ? s.doc.lines : 1) ? o += e ? 1 : -1 : !e && /[\ufe00-\ufe0f]/.test(l.text.slice(o - l.from, i - l.from)) && (o = vt(l.text, o - l.from, !1, !1) + l.from);
  return o;
}), B0 = (n) => h2(n, !1, !0), c2 = (n) => h2(n, !0, !1), f2 = (n, e) => Ys(n, (t) => {
  let r = t.head, { state: i } = n, s = i.doc.lineAt(r), l = i.charCategorizer(r);
  for (let a = null; ; ) {
    if (r == (e ? s.to : s.from)) {
      r == t.head && s.number != (e ? i.doc.lines : 1) && (r += e ? 1 : -1);
      break;
    }
    let o = vt(s.text, r - s.from, e) + s.from, u = s.text.slice(Math.min(r, o) - s.from, Math.max(r, o) - s.from), h = l(u);
    if (a != null && h != a)
      break;
    (u != " " || r != t.head) && (a = h), r = o;
  }
  return r;
}), d2 = (n) => f2(n, !1), qP = (n) => f2(n, !0), XP = (n) => Ys(n, (e) => {
  let t = n.lineBlockAt(e.head).to;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), IP = (n) => Ys(n, (e) => {
  let t = n.moveToLineBoundary(e, !1).head;
  return e.head > t ? t : Math.max(0, e.head - 1);
}), NP = (n) => Ys(n, (e) => {
  let t = n.moveToLineBoundary(e, !0).head;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), VP = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((r) => ({
    changes: { from: r.from, to: r.to, insert: ye.of(["", ""]) },
    range: _.cursor(r.from)
  }));
  return e(n.update(t, { scrollIntoView: !0, userEvent: "input" })), !0;
}, jP = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((r) => {
    if (!r.empty || r.from == 0 || r.from == n.doc.length)
      return { range: r };
    let i = r.from, s = n.doc.lineAt(i), l = i == s.from ? i - 1 : vt(s.text, i - s.from, !1) + s.from, a = i == s.to ? i + 1 : vt(s.text, i - s.from, !0) + s.from;
    return {
      changes: { from: l, to: a, insert: n.doc.slice(i, a).append(n.doc.slice(l, i)) },
      range: _.cursor(a)
    };
  });
  return t.changes.empty ? !1 : (e(n.update(t, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function p2(n) {
  let e = [], t = -1;
  for (let r of n.selection.ranges) {
    let i = n.doc.lineAt(r.from), s = n.doc.lineAt(r.to);
    if (!r.empty && r.to == s.from && (s = n.doc.lineAt(r.to - 1)), t >= i.number) {
      let l = e[e.length - 1];
      l.to = s.to, l.ranges.push(r);
    } else
      e.push({ from: i.from, to: s.to, ranges: [r] });
    t = s.number + 1;
  }
  return e;
}
function m2(n, e, t) {
  if (n.readOnly)
    return !1;
  let r = [], i = [];
  for (let s of p2(n)) {
    if (t ? s.to == n.doc.length : s.from == 0)
      continue;
    let l = n.doc.lineAt(t ? s.to + 1 : s.from - 1), a = l.length + 1;
    if (t) {
      r.push({ from: s.to, to: l.to }, { from: s.from, insert: l.text + n.lineBreak });
      for (let o of s.ranges)
        i.push(_.range(Math.min(n.doc.length, o.anchor + a), Math.min(n.doc.length, o.head + a)));
    } else {
      r.push({ from: l.from, to: s.from }, { from: s.to, insert: n.lineBreak + l.text });
      for (let o of s.ranges)
        i.push(_.range(o.anchor - a, o.head - a));
    }
  }
  return r.length ? (e(n.update({
    changes: r,
    scrollIntoView: !0,
    selection: _.create(i, n.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const Bp = ({ state: n, dispatch: e }) => m2(n, e, !1), Lp = ({ state: n, dispatch: e }) => m2(n, e, !0);
function g2(n, e, t) {
  if (n.readOnly)
    return !1;
  let r = [];
  for (let i of p2(n))
    t ? r.push({ from: i.from, insert: n.doc.slice(i.from, i.to) + n.lineBreak }) : r.push({ from: i.to, insert: n.lineBreak + n.doc.slice(i.from, i.to) });
  return e(n.update({ changes: r, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const _P = ({ state: n, dispatch: e }) => g2(n, e, !1), UP = ({ state: n, dispatch: e }) => g2(n, e, !0);
function WP(n, e) {
  if (/\(\)|\[\]|\{\}/.test(n.sliceDoc(e - 1, e + 1)))
    return { from: e, to: e };
  let t = ot(n).resolveInner(e), r = t.childBefore(e), i = t.childAfter(e), s;
  return r && i && r.to <= e && i.from >= e && (s = r.type.prop(pe.closedBy)) && s.indexOf(i.name) > -1 && n.doc.lineAt(r.to).from == n.doc.lineAt(i.from).from && !/\S/.test(n.sliceDoc(r.to, i.from)) ? { from: r.to, to: i.from } : null;
}
const qp = /* @__PURE__ */ YP(!1);
function YP(n) {
  return ({ state: e, dispatch: t }) => {
    if (e.readOnly)
      return !1;
    let r = e.changeByRange((i) => {
      let { from: s, to: l } = i, a = e.doc.lineAt(s), o = !n && s == l && WP(e, s);
      n && (s = l = (l <= a.to ? a : e.doc.lineAt(l)).to);
      let u = new Kh(e, { simulateBreak: s, simulateDoubleBreak: !!o }), h = F4(u, s);
      for (h == null && (h = Kn(/^\s*/.exec(e.doc.lineAt(s).text)[0], e.tabSize)); l < a.to && /\s/.test(a.text[l - a.from]); )
        l++;
      o ? { from: s, to: l } = o : s > a.from && s < a.from + 100 && !/\S/.test(a.text.slice(0, s)) && (s = a.from);
      let c = ["", pa(e, h)];
      return o && c.push(pa(e, u.lineIndent(a.from, -1))), {
        changes: { from: s, to: l, insert: ye.of(c) },
        range: _.cursor(s + 1 + c[1].length)
      };
    });
    return t(e.update(r, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function O2(n, e) {
  let t = -1;
  return n.changeByRange((r) => {
    let i = [];
    for (let l = r.from; l <= r.to; ) {
      let a = n.doc.lineAt(l);
      a.number > t && (r.empty || r.to > a.from) && (e(a, i, r), t = a.number), l = a.to + 1;
    }
    let s = n.changes(i);
    return {
      changes: i,
      range: _.range(s.mapPos(r.anchor, 1), s.mapPos(r.head, 1))
    };
  });
}
const GP = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(O2(n, (t, r) => {
  r.push({ from: t.from, insert: n.facet(_s) });
}), { userEvent: "input.indent" })), !0), HP = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(O2(n, (t, r) => {
  let i = /^\s*/.exec(t.text)[0];
  if (!i)
    return;
  let s = Kn(i, n.tabSize), l = 0, a = pa(n, Math.max(0, s - da(n)));
  for (; l < i.length && l < a.length && i.charCodeAt(l) == a.charCodeAt(l); )
    l++;
  r.push({ from: t.from + l, to: t.from + i.length, insert: a.slice(l) });
}), { userEvent: "delete.dedent" })), !0), KP = [
  { key: "Ctrl-b", run: W4, shift: r2, preventDefault: !0 },
  { key: "Ctrl-f", run: Y4, shift: i2 },
  { key: "Ctrl-p", run: K4, shift: a2 },
  { key: "Ctrl-n", run: J4, shift: o2 },
  { key: "Ctrl-a", run: $P, shift: FP },
  { key: "Ctrl-e", run: DP, shift: BP },
  { key: "Ctrl-d", run: c2 },
  { key: "Ctrl-h", run: B0 },
  { key: "Ctrl-k", run: XP },
  { key: "Ctrl-Alt-h", run: d2 },
  { key: "Ctrl-o", run: VP },
  { key: "Ctrl-t", run: jP },
  { key: "Ctrl-v", run: F0 }
], JP = /* @__PURE__ */ [
  { key: "ArrowLeft", run: W4, shift: r2, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: kP, shift: TP, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: CP, shift: ZP, preventDefault: !0 },
  { key: "ArrowRight", run: Y4, shift: i2, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: SP, shift: MP, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: AP, shift: zP, preventDefault: !0 },
  { key: "ArrowUp", run: K4, shift: a2, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: Rp, shift: zp },
  { mac: "Ctrl-ArrowUp", run: Tp, shift: Mp },
  { key: "ArrowDown", run: J4, shift: o2, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: Zp, shift: Fp },
  { mac: "Ctrl-ArrowDown", run: F0, shift: Ep },
  { key: "PageUp", run: Tp, shift: Mp },
  { key: "PageDown", run: F0, shift: Ep },
  { key: "Home", run: PP, shift: RP, preventDefault: !0 },
  { key: "Mod-Home", run: Rp, shift: zp },
  { key: "End", run: QP, shift: EP, preventDefault: !0 },
  { key: "Mod-End", run: Zp, shift: Fp },
  { key: "Enter", run: qp, shift: qp },
  { key: "Mod-a", run: LP },
  { key: "Backspace", run: B0, shift: B0 },
  { key: "Delete", run: c2 },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: d2 },
  { key: "Mod-Delete", mac: "Alt-Delete", run: qP },
  { mac: "Mod-Backspace", run: IP },
  { mac: "Mod-Delete", run: NP }
].concat(/* @__PURE__ */ KP.map((n) => ({ mac: n.key, run: n.run, shift: n.shift }))), eC = { key: "Tab", run: GP, shift: HP };
class tC {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(e, t, r, i) {
    this.state = e, this.pos = t, this.explicit = r, this.view = i, this.abortListeners = [], this.abortOnDocChange = !1;
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(e) {
    let t = ot(this.state).resolveInner(this.pos, -1);
    for (; t && e.indexOf(t.name) < 0; )
      t = t.parent;
    return t ? {
      from: t.from,
      to: this.pos,
      text: this.state.sliceDoc(t.from, this.pos),
      type: t.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(e) {
    let t = this.state.doc.lineAt(this.pos), r = Math.max(t.from, this.pos - 250), i = t.text.slice(r - t.from, this.pos - t.from), s = i.search(nC(e));
    return s < 0 ? null : { from: r + s, to: this.pos, text: i.slice(s) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  
  By default, running queries will not be aborted for regular
  typing or backspacing, on the assumption that they are likely to
  return a result with a
  [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
  allows the result to be used after all. Passing `onDocChange:
  true` will cause this query to be aborted for any document
  change.
  */
  addEventListener(e, t, r) {
    e == "abort" && this.abortListeners && (this.abortListeners.push(t), r && r.onDocChange && (this.abortOnDocChange = !0));
  }
}
function nC(n, e) {
  var t;
  let { source: r } = n, i = r[r.length - 1] != "$";
  return i ? new RegExp(`(?:${r})${i ? "$" : ""}`, (t = n.flags) !== null && t !== void 0 ? t : n.ignoreCase ? "i" : "") : n;
}
const y2 = /* @__PURE__ */ new class extends Or {
}();
y2.startSide = 1;
y2.endSide = -1;
class ga {
  static create(e, t, r, i, s) {
    let l = i + (i << 8) + e + (t << 4) | 0;
    return new ga(e, t, r, l, s, [], []);
  }
  constructor(e, t, r, i, s, l, a) {
    this.type = e, this.value = t, this.from = r, this.hash = i, this.end = s, this.children = l, this.positions = a, this.hashProp = [[pe.contextHash, i]];
  }
  addChild(e, t) {
    e.prop(pe.contextHash) != this.hash && (e = new Ae(e.type, e.children, e.positions, e.length, this.hashProp)), this.children.push(e), this.positions.push(t);
  }
  toTree(e, t = this.end) {
    let r = this.children.length - 1;
    return r >= 0 && (t = Math.max(t, this.positions[r] + this.children[r].length + this.from)), new Ae(e.types[this.type], this.children, this.positions, t - this.from).balance({
      makeTree: (i, s, l) => new Ae(lt.none, i, s, l, this.hashProp)
    });
  }
}
var U;
(function(n) {
  n[n.Document = 1] = "Document", n[n.CodeBlock = 2] = "CodeBlock", n[n.FencedCode = 3] = "FencedCode", n[n.Blockquote = 4] = "Blockquote", n[n.HorizontalRule = 5] = "HorizontalRule", n[n.BulletList = 6] = "BulletList", n[n.OrderedList = 7] = "OrderedList", n[n.ListItem = 8] = "ListItem", n[n.ATXHeading1 = 9] = "ATXHeading1", n[n.ATXHeading2 = 10] = "ATXHeading2", n[n.ATXHeading3 = 11] = "ATXHeading3", n[n.ATXHeading4 = 12] = "ATXHeading4", n[n.ATXHeading5 = 13] = "ATXHeading5", n[n.ATXHeading6 = 14] = "ATXHeading6", n[n.SetextHeading1 = 15] = "SetextHeading1", n[n.SetextHeading2 = 16] = "SetextHeading2", n[n.HTMLBlock = 17] = "HTMLBlock", n[n.LinkReference = 18] = "LinkReference", n[n.Paragraph = 19] = "Paragraph", n[n.CommentBlock = 20] = "CommentBlock", n[n.ProcessingInstructionBlock = 21] = "ProcessingInstructionBlock", n[n.Escape = 22] = "Escape", n[n.Entity = 23] = "Entity", n[n.HardBreak = 24] = "HardBreak", n[n.Emphasis = 25] = "Emphasis", n[n.StrongEmphasis = 26] = "StrongEmphasis", n[n.Link = 27] = "Link", n[n.Image = 28] = "Image", n[n.InlineCode = 29] = "InlineCode", n[n.HTMLTag = 30] = "HTMLTag", n[n.Comment = 31] = "Comment", n[n.ProcessingInstruction = 32] = "ProcessingInstruction", n[n.Autolink = 33] = "Autolink", n[n.HeaderMark = 34] = "HeaderMark", n[n.QuoteMark = 35] = "QuoteMark", n[n.ListMark = 36] = "ListMark", n[n.LinkMark = 37] = "LinkMark", n[n.EmphasisMark = 38] = "EmphasisMark", n[n.CodeMark = 39] = "CodeMark", n[n.CodeText = 40] = "CodeText", n[n.CodeInfo = 41] = "CodeInfo", n[n.LinkTitle = 42] = "LinkTitle", n[n.LinkLabel = 43] = "LinkLabel", n[n.URL = 44] = "URL";
})(U || (U = {}));
class rC {
  /**
  @internal
  */
  constructor(e, t) {
    this.start = e, this.content = t, this.marks = [], this.parsers = [];
  }
}
class iC {
  constructor() {
    this.text = "", this.baseIndent = 0, this.basePos = 0, this.depth = 0, this.markers = [], this.pos = 0, this.indent = 0, this.next = -1;
  }
  /**
  @internal
  */
  forward() {
    this.basePos > this.pos && this.forwardInner();
  }
  /**
  @internal
  */
  forwardInner() {
    let e = this.skipSpace(this.basePos);
    this.indent = this.countIndent(e, this.pos, this.indent), this.pos = e, this.next = e == this.text.length ? -1 : this.text.charCodeAt(e);
  }
  /**
  Skip whitespace after the given position, return the position of
  the next non-space character or the end of the line if there's
  only space after `from`.
  */
  skipSpace(e) {
    return os(this.text, e);
  }
  /**
  @internal
  */
  reset(e) {
    for (this.text = e, this.baseIndent = this.basePos = this.pos = this.indent = 0, this.forwardInner(), this.depth = 1; this.markers.length; )
      this.markers.pop();
  }
  /**
  Move the line's base position forward to the given position.
  This should only be called by composite [block
  parsers](#BlockParser.parse) or [markup skipping
  functions](#NodeSpec.composite).
  */
  moveBase(e) {
    this.basePos = e, this.baseIndent = this.countIndent(e, this.pos, this.indent);
  }
  /**
  Move the line's base position forward to the given _column_.
  */
  moveBaseColumn(e) {
    this.baseIndent = e, this.basePos = this.findColumn(e);
  }
  /**
  Store a composite-block-level marker. Should be called from
  [markup skipping functions](#NodeSpec.composite) when they
  consume any non-whitespace characters.
  */
  addMarker(e) {
    this.markers.push(e);
  }
  /**
  Find the column position at `to`, optionally starting at a given
  position and column.
  */
  countIndent(e, t = 0, r = 0) {
    for (let i = t; i < e; i++)
      r += this.text.charCodeAt(i) == 9 ? 4 - r % 4 : 1;
    return r;
  }
  /**
  Find the position corresponding to the given column.
  */
  findColumn(e) {
    let t = 0;
    for (let r = 0; t < this.text.length && r < e; t++)
      r += this.text.charCodeAt(t) == 9 ? 4 - r % 4 : 1;
    return t;
  }
  /**
  @internal
  */
  scrub() {
    if (!this.baseIndent)
      return this.text;
    let e = "";
    for (let t = 0; t < this.basePos; t++)
      e += " ";
    return e + this.text.slice(this.basePos);
  }
}
function Xp(n, e, t) {
  if (t.pos == t.text.length || n != e.block && t.indent >= e.stack[t.depth + 1].value + t.baseIndent)
    return !0;
  if (t.indent >= t.baseIndent + 4)
    return !1;
  let r = (n.type == U.OrderedList ? rc : nc)(t, e, !1);
  return r > 0 && (n.type != U.BulletList || tc(t, e, !1) < 0) && t.text.charCodeAt(t.pos + r - 1) == n.value;
}
const b2 = {
  [U.Blockquote](n, e, t) {
    return t.next != 62 ? !1 : (t.markers.push(ke(U.QuoteMark, e.lineStart + t.pos, e.lineStart + t.pos + 1)), t.moveBase(t.pos + (rn(t.text.charCodeAt(t.pos + 1)) ? 2 : 1)), n.end = e.lineStart + t.text.length, !0);
  },
  [U.ListItem](n, e, t) {
    return t.indent < t.baseIndent + n.value && t.next > -1 ? !1 : (t.moveBaseColumn(t.baseIndent + n.value), !0);
  },
  [U.OrderedList]: Xp,
  [U.BulletList]: Xp,
  [U.Document]() {
    return !0;
  }
};
function rn(n) {
  return n == 32 || n == 9 || n == 10 || n == 13;
}
function os(n, e = 0) {
  for (; e < n.length && rn(n.charCodeAt(e)); )
    e++;
  return e;
}
function Ip(n, e, t) {
  for (; e > t && rn(n.charCodeAt(e - 1)); )
    e--;
  return e;
}
function x2(n) {
  if (n.next != 96 && n.next != 126)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == n.next; )
    e++;
  if (e < n.pos + 3)
    return -1;
  if (n.next == 96) {
    for (let t = e; t < n.text.length; t++)
      if (n.text.charCodeAt(t) == 96)
        return -1;
  }
  return e;
}
function v2(n) {
  return n.next != 62 ? -1 : n.text.charCodeAt(n.pos + 1) == 32 ? 2 : 1;
}
function tc(n, e, t) {
  if (n.next != 42 && n.next != 45 && n.next != 95)
    return -1;
  let r = 1;
  for (let i = n.pos + 1; i < n.text.length; i++) {
    let s = n.text.charCodeAt(i);
    if (s == n.next)
      r++;
    else if (!rn(s))
      return -1;
  }
  return t && n.next == 45 && S2(n) > -1 && n.depth == e.stack.length && e.parser.leafBlockParsers.indexOf(A2.SetextHeading) > -1 || r < 3 ? -1 : 1;
}
function w2(n, e) {
  for (let t = n.stack.length - 1; t >= 0; t--)
    if (n.stack[t].type == e)
      return !0;
  return !1;
}
function nc(n, e, t) {
  return (n.next == 45 || n.next == 43 || n.next == 42) && (n.pos == n.text.length - 1 || rn(n.text.charCodeAt(n.pos + 1))) && (!t || w2(e, U.BulletList) || n.skipSpace(n.pos + 2) < n.text.length) ? 1 : -1;
}
function rc(n, e, t) {
  let r = n.pos, i = n.next;
  for (; i >= 48 && i <= 57; ) {
    r++;
    if (r == n.text.length)
      return -1;
    i = n.text.charCodeAt(r);
  }
  return r == n.pos || r > n.pos + 9 || i != 46 && i != 41 || r < n.text.length - 1 && !rn(n.text.charCodeAt(r + 1)) || t && !w2(e, U.OrderedList) && (n.skipSpace(r + 1) == n.text.length || r > n.pos + 1 || n.next != 49) ? -1 : r + 1 - n.pos;
}
function k2(n) {
  if (n.next != 35)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == 35; )
    e++;
  if (e < n.text.length && n.text.charCodeAt(e) != 32)
    return -1;
  let t = e - n.pos;
  return t > 6 ? -1 : t;
}
function S2(n) {
  if (n.next != 45 && n.next != 61 || n.indent >= n.baseIndent + 4)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == n.next; )
    e++;
  let t = e;
  for (; e < n.text.length && rn(n.text.charCodeAt(e)); )
    e++;
  return e == n.text.length ? t : -1;
}
const L0 = /^[ \t]*$/, Q2 = /-->/, P2 = /\?>/, q0 = [
  [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
  [/^\s*<!--/, Q2],
  [/^\s*<\?/, P2],
  [/^\s*<![A-Z]/, />/],
  [/^\s*<!\[CDATA\[/, /\]\]>/],
  [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, L0],
  [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, L0]
];
function C2(n, e, t) {
  if (n.next != 60)
    return -1;
  let r = n.text.slice(n.pos);
  for (let i = 0, s = q0.length - (t ? 1 : 0); i < s; i++)
    if (q0[i][0].test(r))
      return i;
  return -1;
}
function Np(n, e) {
  let t = n.countIndent(e, n.pos, n.indent), r = n.countIndent(n.skipSpace(e), e, t);
  return r >= t + 5 ? t + 1 : r;
}
function Tr(n, e, t) {
  let r = n.length - 1;
  r >= 0 && n[r].to == e && n[r].type == U.CodeText ? n[r].to = t : n.push(ke(U.CodeText, e, t));
}
const Tl = {
  LinkReference: void 0,
  IndentedCode(n, e) {
    let t = e.baseIndent + 4;
    if (e.indent < t)
      return !1;
    let r = e.findColumn(t), i = n.lineStart + r, s = n.lineStart + e.text.length, l = [], a = [];
    for (Tr(l, i, s); n.nextLine() && e.depth >= n.stack.length; )
      if (e.pos == e.text.length) {
        Tr(a, n.lineStart - 1, n.lineStart);
        for (let o of e.markers)
          a.push(o);
      } else {
        if (e.indent < t)
          break;
        {
          if (a.length) {
            for (let u of a)
              u.type == U.CodeText ? Tr(l, u.from, u.to) : l.push(u);
            a = [];
          }
          Tr(l, n.lineStart - 1, n.lineStart);
          for (let u of e.markers)
            l.push(u);
          s = n.lineStart + e.text.length;
          let o = n.lineStart + e.findColumn(e.baseIndent + 4);
          o < s && Tr(l, o, s);
        }
      }
    return a.length && (a = a.filter((o) => o.type != U.CodeText), a.length && (e.markers = a.concat(e.markers))), n.addNode(n.buffer.writeElements(l, -i).finish(U.CodeBlock, s - i), i), !0;
  },
  FencedCode(n, e) {
    let t = x2(e);
    if (t < 0)
      return !1;
    let r = n.lineStart + e.pos, i = e.next, s = t - e.pos, l = e.skipSpace(t), a = Ip(e.text, e.text.length, l), o = [ke(U.CodeMark, r, r + s)];
    l < a && o.push(ke(U.CodeInfo, n.lineStart + l, n.lineStart + a));
    for (let u = !0; n.nextLine() && e.depth >= n.stack.length; u = !1) {
      let h = e.pos;
      if (e.indent - e.baseIndent < 4)
        for (; h < e.text.length && e.text.charCodeAt(h) == i; )
          h++;
      if (h - e.pos >= s && e.skipSpace(h) == e.text.length) {
        for (let c of e.markers)
          o.push(c);
        o.push(ke(U.CodeMark, n.lineStart + e.pos, n.lineStart + h)), n.nextLine();
        break;
      } else {
        u || Tr(o, n.lineStart - 1, n.lineStart);
        for (let d of e.markers)
          o.push(d);
        let c = n.lineStart + e.basePos, f = n.lineStart + e.text.length;
        c < f && Tr(o, c, f);
      }
    }
    return n.addNode(n.buffer.writeElements(o, -r).finish(U.FencedCode, n.prevLineEnd() - r), r), !0;
  },
  Blockquote(n, e) {
    let t = v2(e);
    return t < 0 ? !1 : (n.startContext(U.Blockquote, e.pos), n.addNode(U.QuoteMark, n.lineStart + e.pos, n.lineStart + e.pos + 1), e.moveBase(e.pos + t), null);
  },
  HorizontalRule(n, e) {
    if (tc(e, n, !1) < 0)
      return !1;
    let t = n.lineStart + e.pos;
    return n.nextLine(), n.addNode(U.HorizontalRule, t), !0;
  },
  BulletList(n, e) {
    let t = nc(e, n, !1);
    if (t < 0)
      return !1;
    n.block.type != U.BulletList && n.startContext(U.BulletList, e.basePos, e.next);
    let r = Np(e, e.pos + 1);
    return n.startContext(U.ListItem, e.basePos, r - e.baseIndent), n.addNode(U.ListMark, n.lineStart + e.pos, n.lineStart + e.pos + t), e.moveBaseColumn(r), null;
  },
  OrderedList(n, e) {
    let t = rc(e, n, !1);
    if (t < 0)
      return !1;
    n.block.type != U.OrderedList && n.startContext(U.OrderedList, e.basePos, e.text.charCodeAt(e.pos + t - 1));
    let r = Np(e, e.pos + t);
    return n.startContext(U.ListItem, e.basePos, r - e.baseIndent), n.addNode(U.ListMark, n.lineStart + e.pos, n.lineStart + e.pos + t), e.moveBaseColumn(r), null;
  },
  ATXHeading(n, e) {
    let t = k2(e);
    if (t < 0)
      return !1;
    let r = e.pos, i = n.lineStart + r, s = Ip(e.text, e.text.length, r), l = s;
    for (; l > r && e.text.charCodeAt(l - 1) == e.next; )
      l--;
    (l == s || l == r || !rn(e.text.charCodeAt(l - 1))) && (l = e.text.length);
    let a = n.buffer.write(U.HeaderMark, 0, t).writeElements(n.parser.parseInline(e.text.slice(r + t + 1, l), i + t + 1), -i);
    l < e.text.length && a.write(U.HeaderMark, l - r, s - r);
    let o = a.finish(U.ATXHeading1 - 1 + t, e.text.length - r);
    return n.nextLine(), n.addNode(o, i), !0;
  },
  HTMLBlock(n, e) {
    let t = C2(e, n, !1);
    if (t < 0)
      return !1;
    let r = n.lineStart + e.pos, i = q0[t][1], s = [], l = i != L0;
    for (; !i.test(e.text) && n.nextLine(); ) {
      if (e.depth < n.stack.length) {
        l = !1;
        break;
      }
      for (let u of e.markers)
        s.push(u);
    }
    l && n.nextLine();
    let a = i == Q2 ? U.CommentBlock : i == P2 ? U.ProcessingInstructionBlock : U.HTMLBlock, o = n.prevLineEnd();
    return n.addNode(n.buffer.writeElements(s, -r).finish(a, o - r), r), !0;
  },
  SetextHeading: void 0
  // Specifies relative precedence for block-continue function
};
class sC {
  constructor(e) {
    this.stage = 0, this.elts = [], this.pos = 0, this.start = e.start, this.advance(e.content);
  }
  nextLine(e, t, r) {
    if (this.stage == -1)
      return !1;
    let i = r.content + `
` + t.scrub(), s = this.advance(i);
    return s > -1 && s < i.length ? this.complete(e, r, s) : !1;
  }
  finish(e, t) {
    return (this.stage == 2 || this.stage == 3) && os(t.content, this.pos) == t.content.length ? this.complete(e, t, t.content.length) : !1;
  }
  complete(e, t, r) {
    return e.addLeafElement(t, ke(U.LinkReference, this.start, this.start + r, this.elts)), !0;
  }
  nextStage(e) {
    return e ? (this.pos = e.to - this.start, this.elts.push(e), this.stage++, !0) : (e === !1 && (this.stage = -1), !1);
  }
  advance(e) {
    for (; ; ) {
      if (this.stage == -1)
        return -1;
      if (this.stage == 0) {
        if (!this.nextStage(F2(e, this.pos, this.start, !0)))
          return -1;
        if (e.charCodeAt(this.pos) != 58)
          return this.stage = -1;
        this.elts.push(ke(U.LinkMark, this.pos + this.start, this.pos + this.start + 1)), this.pos++;
      } else if (this.stage == 1) {
        if (!this.nextStage(Z2(e, os(e, this.pos), this.start)))
          return -1;
      } else if (this.stage == 2) {
        let t = os(e, this.pos), r = 0;
        if (t > this.pos) {
          let i = z2(e, t, this.start);
          if (i) {
            let s = du(e, i.to - this.start);
            s > 0 && (this.nextStage(i), r = s);
          }
        }
        return r || (r = du(e, this.pos)), r > 0 && r < e.length ? r : -1;
      } else
        return du(e, this.pos);
    }
  }
}
function du(n, e) {
  for (; e < n.length; e++) {
    let t = n.charCodeAt(e);
    if (t == 10)
      break;
    if (!rn(t))
      return -1;
  }
  return e;
}
class lC {
  nextLine(e, t, r) {
    let i = t.depth < e.stack.length ? -1 : S2(t), s = t.next;
    if (i < 0)
      return !1;
    let l = ke(U.HeaderMark, e.lineStart + t.pos, e.lineStart + i);
    return e.nextLine(), e.addLeafElement(r, ke(s == 61 ? U.SetextHeading1 : U.SetextHeading2, r.start, e.prevLineEnd(), [
      ...e.parser.parseInline(r.content, r.start),
      l
    ])), !0;
  }
  finish() {
    return !1;
  }
}
const A2 = {
  LinkReference(n, e) {
    return e.content.charCodeAt(0) == 91 ? new sC(e) : null;
  },
  SetextHeading() {
    return new lC();
  }
}, aC = [
  (n, e) => k2(e) >= 0,
  (n, e) => x2(e) >= 0,
  (n, e) => v2(e) >= 0,
  (n, e) => nc(e, n, !0) >= 0,
  (n, e) => rc(e, n, !0) >= 0,
  (n, e) => tc(e, n, !0) >= 0,
  (n, e) => C2(e, n, !0) >= 0
], oC = { text: "", end: 0 };
class uC {
  /**
  @internal
  */
  constructor(e, t, r, i) {
    this.parser = e, this.input = t, this.ranges = i, this.line = new iC(), this.atEnd = !1, this.reusePlaceholders = /* @__PURE__ */ new Map(), this.stoppedAt = null, this.rangeI = 0, this.to = i[i.length - 1].to, this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = i[0].from, this.block = ga.create(U.Document, 0, this.lineStart, 0, 0), this.stack = [this.block], this.fragments = r.length ? new dC(r, t) : null, this.readLine();
  }
  get parsedPos() {
    return this.absoluteLineStart;
  }
  advance() {
    if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
      return this.finish();
    let { line: e } = this;
    for (; ; ) {
      for (let r = 0; ; ) {
        let i = e.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
        for (; r < e.markers.length && (!i || e.markers[r].from < i.end); ) {
          let s = e.markers[r++];
          this.addNode(s.type, s.from, s.to);
        }
        if (!i)
          break;
        this.finishContext();
      }
      if (e.pos < e.text.length)
        break;
      if (!this.nextLine())
        return this.finish();
    }
    if (this.fragments && this.reuseFragment(e.basePos))
      return null;
    e: for (; ; ) {
      for (let r of this.parser.blockParsers)
        if (r) {
          let i = r(this, e);
          if (i != !1) {
            if (i == !0)
              return null;
            e.forward();
            continue e;
          }
        }
      break;
    }
    let t = new rC(this.lineStart + e.pos, e.text.slice(e.pos));
    for (let r of this.parser.leafBlockParsers)
      if (r) {
        let i = r(this, t);
        i && t.parsers.push(i);
      }
    e: for (; this.nextLine() && e.pos != e.text.length; ) {
      if (e.indent < e.baseIndent + 4) {
        for (let r of this.parser.endLeafBlock)
          if (r(this, e, t))
            break e;
      }
      for (let r of t.parsers)
        if (r.nextLine(this, e, t))
          return null;
      t.content += `
` + e.scrub();
      for (let r of e.markers)
        t.marks.push(r);
    }
    return this.finishLeaf(t), null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  reuseFragment(e) {
    if (!this.fragments.moveTo(this.absoluteLineStart + e, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
      return !1;
    let t = this.fragments.takeNodes(this);
    return t ? (this.absoluteLineStart += t, this.lineStart = B2(this.absoluteLineStart, this.ranges), this.moveRangeI(), this.absoluteLineStart < this.to ? (this.lineStart++, this.absoluteLineStart++, this.readLine()) : (this.atEnd = !0, this.readLine()), !0) : !1;
  }
  /**
  The number of parent blocks surrounding the current block.
  */
  get depth() {
    return this.stack.length;
  }
  /**
  Get the type of the parent block at the given depth. When no
  depth is passed, return the type of the innermost parent.
  */
  parentType(e = this.depth - 1) {
    return this.parser.nodeSet.types[this.stack[e].type];
  }
  /**
  Move to the next input line. This should only be called by
  (non-composite) [block parsers](#BlockParser.parse) that consume
  the line directly, or leaf block parser
  [`nextLine`](#LeafBlockParser.nextLine) methods when they
  consume the current line (and return true).
  */
  nextLine() {
    return this.lineStart += this.line.text.length, this.absoluteLineEnd >= this.to ? (this.absoluteLineStart = this.absoluteLineEnd, this.atEnd = !0, this.readLine(), !1) : (this.lineStart++, this.absoluteLineStart = this.absoluteLineEnd + 1, this.moveRangeI(), this.readLine(), !0);
  }
  /**
  Retrieve the text of the line after the current one, without
  actually moving the context's current line forward.
  */
  peekLine() {
    return this.scanLine(this.absoluteLineEnd + 1).text;
  }
  moveRangeI() {
    for (; this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to; )
      this.rangeI++, this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
  }
  /**
  @internal
  Collect the text for the next line.
  */
  scanLine(e) {
    let t = oC;
    if (t.end = e, e >= this.to)
      t.text = "";
    else if (t.text = this.lineChunkAt(e), t.end += t.text.length, this.ranges.length > 1) {
      let r = this.absoluteLineStart, i = this.rangeI;
      for (; this.ranges[i].to < t.end; ) {
        i++;
        let s = this.ranges[i].from, l = this.lineChunkAt(s);
        t.end = s + l.length, t.text = t.text.slice(0, this.ranges[i - 1].to - r) + l, r = t.end - t.text.length;
      }
    }
    return t;
  }
  /**
  @internal
  Populate this.line with the content of the next line. Skip
  leading characters covered by composite blocks.
  */
  readLine() {
    let { line: e } = this, { text: t, end: r } = this.scanLine(this.absoluteLineStart);
    for (this.absoluteLineEnd = r, e.reset(t); e.depth < this.stack.length; e.depth++) {
      let i = this.stack[e.depth], s = this.parser.skipContextMarkup[i.type];
      if (!s)
        throw new Error("Unhandled block context " + U[i.type]);
      if (!s(i, this, e))
        break;
      e.forward();
    }
  }
  lineChunkAt(e) {
    let t = this.input.chunk(e), r;
    if (this.input.lineChunks)
      r = t == `
` ? "" : t;
    else {
      let i = t.indexOf(`
`);
      r = i < 0 ? t : t.slice(0, i);
    }
    return e + r.length > this.to ? r.slice(0, this.to - e) : r;
  }
  /**
  The end position of the previous line.
  */
  prevLineEnd() {
    return this.atEnd ? this.lineStart : this.lineStart - 1;
  }
  /**
  @internal
  */
  startContext(e, t, r = 0) {
    this.block = ga.create(e, r, this.lineStart + t, this.block.hash, this.lineStart + this.line.text.length), this.stack.push(this.block);
  }
  /**
  Start a composite block. Should only be called from [block
  parser functions](#BlockParser.parse) that return null.
  */
  startComposite(e, t, r = 0) {
    this.startContext(this.parser.getNodeType(e), t, r);
  }
  /**
  @internal
  */
  addNode(e, t, r) {
    typeof e == "number" && (e = new Ae(this.parser.nodeSet.types[e], bi, bi, (r ?? this.prevLineEnd()) - t)), this.block.addChild(e, t - this.block.from);
  }
  /**
  Add a block element. Can be called by [block
  parsers](#BlockParser.parse).
  */
  addElement(e) {
    this.block.addChild(e.toTree(this.parser.nodeSet), e.from - this.block.from);
  }
  /**
  Add a block element from a [leaf parser](#LeafBlockParser). This
  makes sure any extra composite block markup (such as blockquote
  markers) inside the block are also added to the syntax tree.
  */
  addLeafElement(e, t) {
    this.addNode(this.buffer.writeElements(N0(t.children, e.marks), -t.from).finish(t.type, t.to - t.from), t.from);
  }
  /**
  @internal
  */
  finishContext() {
    let e = this.stack.pop(), t = this.stack[this.stack.length - 1];
    t.addChild(e.toTree(this.parser.nodeSet), e.from - t.from), this.block = t;
  }
  finish() {
    for (; this.stack.length > 1; )
      this.finishContext();
    return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
  }
  addGaps(e) {
    return this.ranges.length > 1 ? $2(this.ranges, 0, e.topNode, this.ranges[0].from, this.reusePlaceholders) : e;
  }
  /**
  @internal
  */
  finishLeaf(e) {
    for (let r of e.parsers)
      if (r.finish(this, e))
        return;
    let t = N0(this.parser.parseInline(e.content, e.start), e.marks);
    this.addNode(this.buffer.writeElements(t, -e.start).finish(U.Paragraph, e.content.length), e.start);
  }
  elt(e, t, r, i) {
    return typeof e == "string" ? ke(this.parser.getNodeType(e), t, r, i) : new M2(e, t);
  }
  /**
  @internal
  */
  get buffer() {
    return new T2(this.parser.nodeSet);
  }
}
function $2(n, e, t, r, i) {
  let s = n[e].to, l = [], a = [], o = t.from + r;
  function u(h, c) {
    for (; c ? h >= s : h > s; ) {
      let f = n[e + 1].from - s;
      r += f, h += f, e++, s = n[e].to;
    }
  }
  for (let h = t.firstChild; h; h = h.nextSibling) {
    u(h.from + r, !0);
    let c = h.from + r, f, d = i.get(h.tree);
    d ? f = d : h.to + r > s ? (f = $2(n, e, h, r, i), u(h.to + r, !1)) : f = h.toTree(), l.push(f), a.push(c - o);
  }
  return u(t.to + r, !1), new Ae(t.type, l, a, t.to + r - o, t.tree ? t.tree.propValues : void 0);
}
class Na extends Fh {
  /**
  @internal
  */
  constructor(e, t, r, i, s, l, a, o, u) {
    super(), this.nodeSet = e, this.blockParsers = t, this.leafBlockParsers = r, this.blockNames = i, this.endLeafBlock = s, this.skipContextMarkup = l, this.inlineParsers = a, this.inlineNames = o, this.wrappers = u, this.nodeTypes = /* @__PURE__ */ Object.create(null);
    for (let h of e.types)
      this.nodeTypes[h.name] = h.id;
  }
  createParse(e, t, r) {
    let i = new uC(this, e, t, r);
    for (let s of this.wrappers)
      i = s(i, e, t, r);
    return i;
  }
  /**
  Reconfigure the parser.
  */
  configure(e) {
    let t = X0(e);
    if (!t)
      return this;
    let { nodeSet: r, skipContextMarkup: i } = this, s = this.blockParsers.slice(), l = this.leafBlockParsers.slice(), a = this.blockNames.slice(), o = this.inlineParsers.slice(), u = this.inlineNames.slice(), h = this.endLeafBlock.slice(), c = this.wrappers;
    if (Ni(t.defineNodes)) {
      i = Object.assign({}, i);
      let f = r.types.slice(), d;
      for (let m of t.defineNodes) {
        let { name: O, block: x, composite: b, style: w } = typeof m == "string" ? { name: m } : m;
        if (f.some((T) => T.name == O))
          continue;
        b && (i[f.length] = (T, S, E) => b(S, E, T.value));
        let C = f.length, Z = b ? ["Block", "BlockContext"] : x ? C >= U.ATXHeading1 && C <= U.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"] : void 0;
        f.push(lt.define({
          id: C,
          name: O,
          props: Z && [[pe.group, Z]]
        })), w && (d || (d = {}), Array.isArray(w) || w instanceof qt ? d[O] = w : Object.assign(d, w));
      }
      r = new Xs(f), d && (r = r.extend($i(d)));
    }
    if (Ni(t.props) && (r = r.extend(...t.props)), Ni(t.remove))
      for (let f of t.remove) {
        let d = this.blockNames.indexOf(f), m = this.inlineNames.indexOf(f);
        d > -1 && (s[d] = l[d] = void 0), m > -1 && (o[m] = void 0);
      }
    if (Ni(t.parseBlock))
      for (let f of t.parseBlock) {
        let d = a.indexOf(f.name);
        if (d > -1)
          s[d] = f.parse, l[d] = f.leaf;
        else {
          let m = f.before ? Ml(a, f.before) : f.after ? Ml(a, f.after) + 1 : a.length - 1;
          s.splice(m, 0, f.parse), l.splice(m, 0, f.leaf), a.splice(m, 0, f.name);
        }
        f.endLeaf && h.push(f.endLeaf);
      }
    if (Ni(t.parseInline))
      for (let f of t.parseInline) {
        let d = u.indexOf(f.name);
        if (d > -1)
          o[d] = f.parse;
        else {
          let m = f.before ? Ml(u, f.before) : f.after ? Ml(u, f.after) + 1 : u.length - 1;
          o.splice(m, 0, f.parse), u.splice(m, 0, f.name);
        }
      }
    return t.wrap && (c = c.concat(t.wrap)), new Na(r, s, l, a, h, i, o, u, c);
  }
  /**
  @internal
  */
  getNodeType(e) {
    let t = this.nodeTypes[e];
    if (t == null)
      throw new RangeError(`Unknown node type '${e}'`);
    return t;
  }
  /**
  Parse the given piece of inline text at the given offset,
  returning an array of [`Element`](#Element) objects representing
  the inline content.
  */
  parseInline(e, t) {
    let r = new cC(this, e, t);
    e: for (let i = t; i < r.end; ) {
      let s = r.char(i);
      for (let l of this.inlineParsers)
        if (l) {
          let a = l(r, s, i);
          if (a >= 0) {
            i = a;
            continue e;
          }
        }
      i++;
    }
    return r.resolveMarkers(0);
  }
}
function Ni(n) {
  return n != null && n.length > 0;
}
function X0(n) {
  if (!Array.isArray(n))
    return n;
  if (n.length == 0)
    return null;
  let e = X0(n[0]);
  if (n.length == 1)
    return e;
  let t = X0(n.slice(1));
  if (!t || !e)
    return e || t;
  let r = (l, a) => (l || bi).concat(a || bi), i = e.wrap, s = t.wrap;
  return {
    props: r(e.props, t.props),
    defineNodes: r(e.defineNodes, t.defineNodes),
    parseBlock: r(e.parseBlock, t.parseBlock),
    parseInline: r(e.parseInline, t.parseInline),
    remove: r(e.remove, t.remove),
    wrap: i ? s ? (l, a, o, u) => i(s(l, a, o, u), a, o, u) : i : s
  };
}
function Ml(n, e) {
  let t = n.indexOf(e);
  if (t < 0)
    throw new RangeError(`Position specified relative to unknown parser ${e}`);
  return t;
}
let D2 = [lt.none];
for (let n = 1, e; e = U[n]; n++)
  D2[n] = lt.define({
    id: n,
    name: e,
    props: n >= U.Escape ? [] : [[pe.group, n in b2 ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
    top: e == "Document"
  });
const bi = [];
class T2 {
  constructor(e) {
    this.nodeSet = e, this.content = [], this.nodes = [];
  }
  write(e, t, r, i = 0) {
    return this.content.push(e, t, r, 4 + i * 4), this;
  }
  writeElements(e, t = 0) {
    for (let r of e)
      r.writeTo(this, t);
    return this;
  }
  finish(e, t) {
    return Ae.build({
      buffer: this.content,
      nodeSet: this.nodeSet,
      reused: this.nodes,
      topID: e,
      length: t
    });
  }
}
let Cs = class {
  /**
  @internal
  */
  constructor(e, t, r, i = bi) {
    this.type = e, this.from = t, this.to = r, this.children = i;
  }
  /**
  @internal
  */
  writeTo(e, t) {
    let r = e.content.length;
    e.writeElements(this.children, t), e.content.push(this.type, this.from + t, this.to + t, e.content.length + 4 - r);
  }
  /**
  @internal
  */
  toTree(e) {
    return new T2(e).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
  }
};
class M2 {
  constructor(e, t) {
    this.tree = e, this.from = t;
  }
  get to() {
    return this.from + this.tree.length;
  }
  get type() {
    return this.tree.type.id;
  }
  get children() {
    return bi;
  }
  writeTo(e, t) {
    e.nodes.push(this.tree), e.content.push(e.nodes.length - 1, this.from + t, this.to + t, -1);
  }
  toTree() {
    return this.tree;
  }
}
function ke(n, e, t, r) {
  return new Cs(n, e, t, r);
}
const E2 = { resolve: "Emphasis", mark: "EmphasisMark" }, R2 = { resolve: "Emphasis", mark: "EmphasisMark" }, ei = {}, I0 = {};
class jt {
  constructor(e, t, r, i) {
    this.type = e, this.from = t, this.to = r, this.side = i;
  }
}
const Vp = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
let As = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
try {
  As = new RegExp("[\\p{S}|\\p{P}]", "u");
} catch {
}
const pu = {
  Escape(n, e, t) {
    if (e != 92 || t == n.end - 1)
      return -1;
    let r = n.char(t + 1);
    for (let i = 0; i < Vp.length; i++)
      if (Vp.charCodeAt(i) == r)
        return n.append(ke(U.Escape, t, t + 2));
    return -1;
  },
  Entity(n, e, t) {
    if (e != 38)
      return -1;
    let r = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(n.slice(t + 1, t + 31));
    return r ? n.append(ke(U.Entity, t, t + 1 + r[0].length)) : -1;
  },
  InlineCode(n, e, t) {
    if (e != 96 || t && n.char(t - 1) == 96)
      return -1;
    let r = t + 1;
    for (; r < n.end && n.char(r) == 96; )
      r++;
    let i = r - t, s = 0;
    for (; r < n.end; r++)
      if (n.char(r) == 96) {
        if (s++, s == i && n.char(r + 1) != 96)
          return n.append(ke(U.InlineCode, t, r + 1, [
            ke(U.CodeMark, t, t + i),
            ke(U.CodeMark, r + 1 - i, r + 1)
          ]));
      } else
        s = 0;
    return -1;
  },
  HTMLTag(n, e, t) {
    if (e != 60 || t == n.end - 1)
      return -1;
    let r = n.slice(t + 1, n.end), i = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(r);
    if (i)
      return n.append(ke(U.Autolink, t, t + 1 + i[0].length, [
        ke(U.LinkMark, t, t + 1),
        // url[0] includes the closing bracket, so exclude it from this slice
        ke(U.URL, t + 1, t + i[0].length),
        ke(U.LinkMark, t + i[0].length, t + 1 + i[0].length)
      ]));
    let s = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(r);
    if (s)
      return n.append(ke(U.Comment, t, t + 1 + s[0].length));
    let l = /^\?[^]*?\?>/.exec(r);
    if (l)
      return n.append(ke(U.ProcessingInstruction, t, t + 1 + l[0].length));
    let a = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(r);
    return a ? n.append(ke(U.HTMLTag, t, t + 1 + a[0].length)) : -1;
  },
  Emphasis(n, e, t) {
    if (e != 95 && e != 42)
      return -1;
    let r = t + 1;
    for (; n.char(r) == e; )
      r++;
    let i = n.slice(t - 1, t), s = n.slice(r, r + 1), l = As.test(i), a = As.test(s), o = /\s|^$/.test(i), u = /\s|^$/.test(s), h = !u && (!a || o || l), c = !o && (!l || u || a), f = h && (e == 42 || !c || l), d = c && (e == 42 || !h || a);
    return n.append(new jt(e == 95 ? E2 : R2, t, r, (f ? 1 : 0) | (d ? 2 : 0)));
  },
  HardBreak(n, e, t) {
    if (e == 92 && n.char(t + 1) == 10)
      return n.append(ke(U.HardBreak, t, t + 2));
    if (e == 32) {
      let r = t + 1;
      for (; n.char(r) == 32; )
        r++;
      if (n.char(r) == 10 && r >= t + 2)
        return n.append(ke(U.HardBreak, t, r + 1));
    }
    return -1;
  },
  Link(n, e, t) {
    return e == 91 ? n.append(new jt(
      ei,
      t,
      t + 1,
      1
      /* Mark.Open */
    )) : -1;
  },
  Image(n, e, t) {
    return e == 33 && n.char(t + 1) == 91 ? n.append(new jt(
      I0,
      t,
      t + 2,
      1
      /* Mark.Open */
    )) : -1;
  },
  LinkEnd(n, e, t) {
    if (e != 93)
      return -1;
    for (let r = n.parts.length - 1; r >= 0; r--) {
      let i = n.parts[r];
      if (i instanceof jt && (i.type == ei || i.type == I0)) {
        if (!i.side || n.skipSpace(i.to) == t && !/[(\[]/.test(n.slice(t + 1, t + 2)))
          return n.parts[r] = null, -1;
        let s = n.takeContent(r), l = n.parts[r] = hC(n, s, i.type == ei ? U.Link : U.Image, i.from, t + 1);
        if (i.type == ei)
          for (let a = 0; a < r; a++) {
            let o = n.parts[a];
            o instanceof jt && o.type == ei && (o.side = 0);
          }
        return l.to;
      }
    }
    return -1;
  }
};
function hC(n, e, t, r, i) {
  let { text: s } = n, l = n.char(i), a = i;
  if (e.unshift(ke(U.LinkMark, r, r + (t == U.Image ? 2 : 1))), e.push(ke(U.LinkMark, i - 1, i)), l == 40) {
    let o = n.skipSpace(i + 1), u = Z2(s, o - n.offset, n.offset), h;
    u && (o = n.skipSpace(u.to), o != u.to && (h = z2(s, o - n.offset, n.offset), h && (o = n.skipSpace(h.to)))), n.char(o) == 41 && (e.push(ke(U.LinkMark, i, i + 1)), a = o + 1, u && e.push(u), h && e.push(h), e.push(ke(U.LinkMark, o, a)));
  } else if (l == 91) {
    let o = F2(s, i - n.offset, n.offset, !1);
    o && (e.push(o), a = o.to);
  }
  return ke(t, r, a, e);
}
function Z2(n, e, t) {
  if (n.charCodeAt(e) == 60) {
    for (let i = e + 1; i < n.length; i++) {
      let s = n.charCodeAt(i);
      if (s == 62)
        return ke(U.URL, e + t, i + 1 + t);
      if (s == 60 || s == 10)
        return !1;
    }
    return null;
  } else {
    let i = 0, s = e;
    for (let l = !1; s < n.length; s++) {
      let a = n.charCodeAt(s);
      if (rn(a))
        break;
      if (l)
        l = !1;
      else if (a == 40)
        i++;
      else if (a == 41) {
        if (!i)
          break;
        i--;
      } else a == 92 && (l = !0);
    }
    return s > e ? ke(U.URL, e + t, s + t) : s == n.length ? null : !1;
  }
}
function z2(n, e, t) {
  let r = n.charCodeAt(e);
  if (r != 39 && r != 34 && r != 40)
    return !1;
  let i = r == 40 ? 41 : r;
  for (let s = e + 1, l = !1; s < n.length; s++) {
    let a = n.charCodeAt(s);
    if (l)
      l = !1;
    else {
      if (a == i)
        return ke(U.LinkTitle, e + t, s + 1 + t);
      a == 92 && (l = !0);
    }
  }
  return null;
}
function F2(n, e, t, r) {
  for (let i = !1, s = e + 1, l = Math.min(n.length, s + 999); s < l; s++) {
    let a = n.charCodeAt(s);
    if (i)
      i = !1;
    else {
      if (a == 93)
        return r ? !1 : ke(U.LinkLabel, e + t, s + 1 + t);
      if (r && !rn(a) && (r = !1), a == 91)
        return !1;
      a == 92 && (i = !0);
    }
  }
  return null;
}
class cC {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.parser = e, this.text = t, this.offset = r, this.parts = [];
  }
  /**
  Get the character code at the given (document-relative)
  position.
  */
  char(e) {
    return e >= this.end ? -1 : this.text.charCodeAt(e - this.offset);
  }
  /**
  The position of the end of this inline section.
  */
  get end() {
    return this.offset + this.text.length;
  }
  /**
  Get a substring of this inline section. Again uses
  document-relative positions.
  */
  slice(e, t) {
    return this.text.slice(e - this.offset, t - this.offset);
  }
  /**
  @internal
  */
  append(e) {
    return this.parts.push(e), e.to;
  }
  /**
  Add a [delimiter](#DelimiterType) at this given position. `open`
  and `close` indicate whether this delimiter is opening, closing,
  or both. Returns the end of the delimiter, for convenient
  returning from [parse functions](#InlineParser.parse).
  */
  addDelimiter(e, t, r, i, s) {
    return this.append(new jt(e, t, r, (i ? 1 : 0) | (s ? 2 : 0)));
  }
  /**
  Returns true when there is an unmatched link or image opening
  token before the current position.
  */
  get hasOpenLink() {
    for (let e = this.parts.length - 1; e >= 0; e--) {
      let t = this.parts[e];
      if (t instanceof jt && (t.type == ei || t.type == I0))
        return !0;
    }
    return !1;
  }
  /**
  Add an inline element. Returns the end of the element.
  */
  addElement(e) {
    return this.append(e);
  }
  /**
  Resolve markers between this.parts.length and from, wrapping matched markers in the
  appropriate node and updating the content of this.parts. @internal
  */
  resolveMarkers(e) {
    for (let r = e; r < this.parts.length; r++) {
      let i = this.parts[r];
      if (!(i instanceof jt && i.type.resolve && i.side & 2))
        continue;
      let s = i.type == E2 || i.type == R2, l = i.to - i.from, a, o = r - 1;
      for (; o >= e; o--) {
        let O = this.parts[o];
        if (O instanceof jt && O.side & 1 && O.type == i.type && // Ignore emphasis delimiters where the character count doesn't match
        !(s && (i.side & 1 || O.side & 2) && (O.to - O.from + l) % 3 == 0 && ((O.to - O.from) % 3 || l % 3))) {
          a = O;
          break;
        }
      }
      if (!a)
        continue;
      let u = i.type.resolve, h = [], c = a.from, f = i.to;
      if (s) {
        let O = Math.min(2, a.to - a.from, l);
        c = a.to - O, f = i.from + O, u = O == 1 ? "Emphasis" : "StrongEmphasis";
      }
      a.type.mark && h.push(this.elt(a.type.mark, c, a.to));
      for (let O = o + 1; O < r; O++)
        this.parts[O] instanceof Cs && h.push(this.parts[O]), this.parts[O] = null;
      i.type.mark && h.push(this.elt(i.type.mark, i.from, f));
      let d = this.elt(u, c, f, h);
      this.parts[o] = s && a.from != c ? new jt(a.type, a.from, c, a.side) : null, (this.parts[r] = s && i.to != f ? new jt(i.type, f, i.to, i.side) : null) ? this.parts.splice(r, 0, d) : this.parts[r] = d;
    }
    let t = [];
    for (let r = e; r < this.parts.length; r++) {
      let i = this.parts[r];
      i instanceof Cs && t.push(i);
    }
    return t;
  }
  /**
  Find an opening delimiter of the given type. Returns `null` if
  no delimiter is found, or an index that can be passed to
  [`takeContent`](#InlineContext.takeContent) otherwise.
  */
  findOpeningDelimiter(e) {
    for (let t = this.parts.length - 1; t >= 0; t--) {
      let r = this.parts[t];
      if (r instanceof jt && r.type == e)
        return t;
    }
    return null;
  }
  /**
  Remove all inline elements and delimiters starting from the
  given index (which you should get from
  [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
  resolve delimiters inside of them, and return them as an array
  of elements.
  */
  takeContent(e) {
    let t = this.resolveMarkers(e);
    return this.parts.length = e, t;
  }
  /**
  Skip space after the given (document) position, returning either
  the position of the next non-space character or the end of the
  section.
  */
  skipSpace(e) {
    return os(this.text, e - this.offset) + this.offset;
  }
  elt(e, t, r, i) {
    return typeof e == "string" ? ke(this.parser.getNodeType(e), t, r, i) : new M2(e, t);
  }
}
function N0(n, e) {
  if (!e.length)
    return n;
  if (!n.length)
    return e;
  let t = n.slice(), r = 0;
  for (let i of e) {
    for (; r < t.length && t[r].to < i.to; )
      r++;
    if (r < t.length && t[r].from < i.from) {
      let s = t[r];
      s instanceof Cs && (t[r] = new Cs(s.type, s.from, s.to, N0(s.children, [i])));
    } else
      t.splice(r++, 0, i);
  }
  return t;
}
const fC = [U.CodeBlock, U.ListItem, U.OrderedList, U.BulletList];
let dC = class {
  constructor(e, t) {
    this.fragments = e, this.input = t, this.i = 0, this.fragment = null, this.fragmentEnd = -1, this.cursor = null, e.length && (this.fragment = e[this.i++]);
  }
  nextFragment() {
    this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null, this.cursor = null, this.fragmentEnd = -1;
  }
  moveTo(e, t) {
    for (; this.fragment && this.fragment.to <= e; )
      this.nextFragment();
    if (!this.fragment || this.fragment.from > (e ? e - 1 : 0))
      return !1;
    if (this.fragmentEnd < 0) {
      let s = this.fragment.to;
      for (; s > 0 && this.input.read(s - 1, s) != `
`; )
        s--;
      this.fragmentEnd = s ? s - 1 : 0;
    }
    let r = this.cursor;
    r || (r = this.cursor = this.fragment.tree.cursor(), r.firstChild());
    let i = e + this.fragment.offset;
    for (; r.to <= i; )
      if (!r.parent())
        return !1;
    for (; ; ) {
      if (r.from >= i)
        return this.fragment.from <= t;
      if (!r.childAfter(i))
        return !1;
    }
  }
  matches(e) {
    let t = this.cursor.tree;
    return t && t.prop(pe.contextHash) == e;
  }
  takeNodes(e) {
    let t = this.cursor, r = this.fragment.offset, i = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0), s = e.absoluteLineStart, l = s, a = e.block.children.length, o = l, u = a;
    for (; ; ) {
      if (t.to - r > i) {
        if (t.type.isAnonymous && t.firstChild())
          continue;
        break;
      }
      let h = B2(t.from - r, e.ranges);
      if (t.to - r <= e.ranges[e.rangeI].to)
        e.addNode(t.tree, h);
      else {
        let c = new Ae(e.parser.nodeSet.types[U.Paragraph], [], [], 0, e.block.hashProp);
        e.reusePlaceholders.set(c, t.tree), e.addNode(c, h);
      }
      if (t.type.is("Block") && (fC.indexOf(t.type.id) < 0 ? (l = t.to - r, a = e.block.children.length) : (l = o, a = u, o = t.to - r, u = e.block.children.length)), !t.nextSibling())
        break;
    }
    for (; e.block.children.length > a; )
      e.block.children.pop(), e.block.positions.pop();
    return l - s;
  }
};
function B2(n, e) {
  let t = n;
  for (let r = 1; r < e.length; r++) {
    let i = e[r - 1].to, s = e[r].from;
    i < n && (t -= s - i);
  }
  return t;
}
const pC = $i({
  "Blockquote/...": $.quote,
  HorizontalRule: $.contentSeparator,
  "ATXHeading1/... SetextHeading1/...": $.heading1,
  "ATXHeading2/... SetextHeading2/...": $.heading2,
  "ATXHeading3/...": $.heading3,
  "ATXHeading4/...": $.heading4,
  "ATXHeading5/...": $.heading5,
  "ATXHeading6/...": $.heading6,
  "Comment CommentBlock": $.comment,
  Escape: $.escape,
  Entity: $.character,
  "Emphasis/...": $.emphasis,
  "StrongEmphasis/...": $.strong,
  "Link/... Image/...": $.link,
  "OrderedList/... BulletList/...": $.list,
  "BlockQuote/...": $.quote,
  "InlineCode CodeText": $.monospace,
  "URL Autolink": $.url,
  "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": $.processingInstruction,
  "CodeInfo LinkLabel": $.labelName,
  LinkTitle: $.string,
  Paragraph: $.content
}), mC = new Na(new Xs(D2).extend(pC), Object.keys(Tl).map((n) => Tl[n]), Object.keys(Tl).map((n) => A2[n]), Object.keys(Tl), aC, b2, Object.keys(pu).map((n) => pu[n]), Object.keys(pu), []);
function gC(n, e, t) {
  let r = [];
  for (let i = n.firstChild, s = e; ; i = i.nextSibling) {
    let l = i ? i.from : t;
    if (l > s && r.push({ from: s, to: l }), !i)
      break;
    s = i.to;
  }
  return r;
}
function OC(n) {
  let { codeParser: e, htmlParser: t } = n;
  return { wrap: dO((i, s) => {
    let l = i.type.id;
    if (e && (l == U.CodeBlock || l == U.FencedCode)) {
      let a = "";
      if (l == U.FencedCode) {
        let u = i.node.getChild(U.CodeInfo);
        u && (a = s.read(u.from, u.to));
      }
      let o = e(a);
      if (o)
        return { parser: o, overlay: (u) => u.type.id == U.CodeText };
    } else if (t && (l == U.HTMLBlock || l == U.HTMLTag))
      return { parser: t, overlay: gC(i.node, i.from, i.to) };
    return null;
  }) };
}
const yC = { resolve: "Strikethrough", mark: "StrikethroughMark" }, bC = {
  defineNodes: [{
    name: "Strikethrough",
    style: { "Strikethrough/...": $.strikethrough }
  }, {
    name: "StrikethroughMark",
    style: $.processingInstruction
  }],
  parseInline: [{
    name: "Strikethrough",
    parse(n, e, t) {
      if (e != 126 || n.char(t + 1) != 126 || n.char(t + 2) == 126)
        return -1;
      let r = n.slice(t - 1, t), i = n.slice(t + 2, t + 3), s = /\s|^$/.test(r), l = /\s|^$/.test(i), a = As.test(r), o = As.test(i);
      return n.addDelimiter(yC, t, t + 2, !l && (!o || s || a), !s && (!a || l || o));
    },
    after: "Emphasis"
  }]
};
function us(n, e, t = 0, r, i = 0) {
  let s = 0, l = !0, a = -1, o = -1, u = !1, h = () => {
    r.push(n.elt("TableCell", i + a, i + o, n.parser.parseInline(e.slice(a, o), i + a)));
  };
  for (let c = t; c < e.length; c++) {
    let f = e.charCodeAt(c);
    f == 124 && !u ? ((!l || a > -1) && s++, l = !1, r && (a > -1 && h(), r.push(n.elt("TableDelimiter", c + i, c + i + 1))), a = o = -1) : (u || f != 32 && f != 9) && (a < 0 && (a = c), o = c + 1), u = !u && f == 92;
  }
  return a > -1 && (s++, r && h()), s;
}
function jp(n, e) {
  for (let t = e; t < n.length; t++) {
    let r = n.charCodeAt(t);
    if (r == 124)
      return !0;
    r == 92 && t++;
  }
  return !1;
}
const L2 = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
class _p {
  constructor() {
    this.rows = null;
  }
  nextLine(e, t, r) {
    if (this.rows == null) {
      this.rows = !1;
      let i;
      if ((t.next == 45 || t.next == 58 || t.next == 124) && L2.test(i = t.text.slice(t.pos))) {
        let s = [];
        us(e, r.content, 0, s, r.start) == us(e, i, t.pos) && (this.rows = [
          e.elt("TableHeader", r.start, r.start + r.content.length, s),
          e.elt("TableDelimiter", e.lineStart + t.pos, e.lineStart + t.text.length)
        ]);
      }
    } else if (this.rows) {
      let i = [];
      us(e, t.text, t.pos, i, e.lineStart), this.rows.push(e.elt("TableRow", e.lineStart + t.pos, e.lineStart + t.text.length, i));
    }
    return !1;
  }
  finish(e, t) {
    return this.rows ? (e.addLeafElement(t, e.elt("Table", t.start, t.start + t.content.length, this.rows)), !0) : !1;
  }
}
const xC = {
  defineNodes: [
    { name: "Table", block: !0 },
    { name: "TableHeader", style: { "TableHeader/...": $.heading } },
    "TableRow",
    { name: "TableCell", style: $.content },
    { name: "TableDelimiter", style: $.processingInstruction }
  ],
  parseBlock: [{
    name: "Table",
    leaf(n, e) {
      return jp(e.content, 0) ? new _p() : null;
    },
    endLeaf(n, e, t) {
      if (t.parsers.some((i) => i instanceof _p) || !jp(e.text, e.basePos))
        return !1;
      let r = n.peekLine();
      return L2.test(r) && us(n, e.text, e.basePos) == us(n, r, e.basePos);
    },
    before: "SetextHeading"
  }]
};
class vC {
  nextLine() {
    return !1;
  }
  finish(e, t) {
    return e.addLeafElement(t, e.elt("Task", t.start, t.start + t.content.length, [
      e.elt("TaskMarker", t.start, t.start + 3),
      ...e.parser.parseInline(t.content.slice(3), t.start + 3)
    ])), !0;
  }
}
const wC = {
  defineNodes: [
    { name: "Task", block: !0, style: $.list },
    { name: "TaskMarker", style: $.atom }
  ],
  parseBlock: [{
    name: "TaskList",
    leaf(n, e) {
      return /^\[[ xX]\][ \t]/.test(e.content) && n.parentType().name == "ListItem" ? new vC() : null;
    },
    after: "SetextHeading"
  }]
}, Up = /(www\.)|(https?:\/\/)|([\w.+-]{1,100}@)|(mailto:|xmpp:)/gy, Wp = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy, kC = /[\w-]+\.[\w-]+($|\/)/, Yp = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy, Gp = /\/[a-zA-Z\d@.]+/gy;
function Hp(n, e, t, r) {
  let i = 0;
  for (let s = e; s < t; s++)
    n[s] == r && i++;
  return i;
}
function SC(n, e) {
  Wp.lastIndex = e;
  let t = Wp.exec(n);
  if (!t || kC.exec(t[0])[0].indexOf("_") > -1)
    return -1;
  let r = e + t[0].length;
  for (; ; ) {
    let i = n[r - 1], s;
    if (/[?!.,:*_~]/.test(i) || i == ")" && Hp(n, e, r, ")") > Hp(n, e, r, "("))
      r--;
    else if (i == ";" && (s = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(n.slice(e, r))))
      r = e + s.index;
    else
      break;
  }
  return r;
}
function Kp(n, e) {
  Yp.lastIndex = e;
  let t = Yp.exec(n);
  if (!t)
    return -1;
  let r = t[0][t[0].length - 1];
  return r == "_" || r == "-" ? -1 : e + t[0].length - (r == "." ? 1 : 0);
}
const QC = {
  parseInline: [{
    name: "Autolink",
    parse(n, e, t) {
      let r = t - n.offset;
      if (r && /\w/.test(n.text[r - 1]))
        return -1;
      Up.lastIndex = r;
      let i = Up.exec(n.text), s = -1;
      if (!i)
        return -1;
      if (i[1] || i[2]) {
        if (s = SC(n.text, r + i[0].length), s > -1 && n.hasOpenLink) {
          let l = /([^\[\]]|\[[^\]]*\])*/.exec(n.text.slice(r, s));
          s = r + l[0].length;
        }
      } else i[3] ? s = Kp(n.text, r) : (s = Kp(n.text, r + i[0].length), s > -1 && i[0] == "xmpp:" && (Gp.lastIndex = s, i = Gp.exec(n.text), i && (s = i.index + i[0].length)));
      return s < 0 ? -1 : (n.addElement(n.elt("URL", t, s + n.offset)), s + n.offset);
    }
  }]
}, PC = [xC, wC, bC, QC];
function q2(n, e, t) {
  return (r, i, s) => {
    if (i != n || r.char(s + 1) == n)
      return -1;
    let l = [r.elt(t, s, s + 1)];
    for (let a = s + 1; a < r.end; a++) {
      let o = r.char(a);
      if (o == n)
        return r.addElement(r.elt(e, s, a + 1, l.concat(r.elt(t, a, a + 1))));
      if (o == 92 && l.push(r.elt("Escape", a, a++ + 2)), rn(o))
        break;
    }
    return -1;
  };
}
const CC = {
  defineNodes: [
    { name: "Superscript", style: $.special($.content) },
    { name: "SuperscriptMark", style: $.processingInstruction }
  ],
  parseInline: [{
    name: "Superscript",
    parse: q2(94, "Superscript", "SuperscriptMark")
  }]
}, AC = {
  defineNodes: [
    { name: "Subscript", style: $.special($.content) },
    { name: "SubscriptMark", style: $.processingInstruction }
  ],
  parseInline: [{
    name: "Subscript",
    parse: q2(126, "Subscript", "SubscriptMark")
  }]
}, $C = {
  defineNodes: [{ name: "Emoji", style: $.character }],
  parseInline: [{
    name: "Emoji",
    parse(n, e, t) {
      let r;
      return e != 58 || !(r = /^[a-zA-Z_0-9]+:/.exec(n.slice(t + 1, n.end))) ? -1 : n.addElement(n.elt("Emoji", t, t + 1 + r[0].length));
    }
  }]
};
class Oa {
  /**
  @internal
  */
  constructor(e, t, r, i, s, l, a, o, u, h = 0, c) {
    this.p = e, this.stack = t, this.state = r, this.reducePos = i, this.pos = s, this.score = l, this.buffer = a, this.bufferBase = o, this.curContext = u, this.lookAhead = h, this.parent = c;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((e, t) => t % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(e, t, r = 0) {
    let i = e.parser.context;
    return new Oa(e, [], t, r, r, 0, [], 0, i ? new Jp(i, i.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(e, t) {
    this.stack.push(this.state, t, this.bufferBase + this.buffer.length), this.state = e;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(e) {
    var t;
    let r = e >> 19, i = e & 65535, { parser: s } = this.p, l = this.reducePos < this.pos - 25;
    l && this.setLookAhead(this.pos);
    let a = s.dynamicPrecedence(i);
    if (a && (this.score += a), r == 0) {
      this.pushState(s.getGoto(this.state, i, !0), this.reducePos), i < s.minRepeatTerm && this.storeNode(i, this.reducePos, this.reducePos, l ? 8 : 4, !0), this.reduceContext(i, this.reducePos);
      return;
    }
    let o = this.stack.length - (r - 1) * 3 - (e & 262144 ? 6 : 0), u = o ? this.stack[o - 2] : this.p.ranges[0].from, h = this.reducePos - u;
    h >= 2e3 && !(!((t = this.p.parser.nodeSet.types[i]) === null || t === void 0) && t.isAnonymous) && (u == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = h) : this.p.lastBigReductionSize < h && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = u, this.p.lastBigReductionSize = h));
    let c = o ? this.stack[o - 1] : 0, f = this.bufferBase + this.buffer.length - c;
    if (i < s.minRepeatTerm || e & 131072) {
      let d = s.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(i, u, d, f + 4, !0);
    }
    if (e & 262144)
      this.state = this.stack[o];
    else {
      let d = this.stack[o - 3];
      this.state = s.getGoto(d, i, !0);
    }
    for (; this.stack.length > o; )
      this.stack.pop();
    this.reduceContext(i, u);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(e, t, r, i = 4, s = !1) {
    if (e == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let l = this, a = this.buffer.length;
      if (a == 0 && l.parent && (a = l.bufferBase - l.parent.bufferBase, l = l.parent), a > 0 && l.buffer[a - 4] == 0 && l.buffer[a - 1] > -1) {
        if (t == r)
          return;
        if (l.buffer[a - 2] >= t) {
          l.buffer[a - 2] = r;
          return;
        }
      }
    }
    if (!s || this.pos == r)
      this.buffer.push(e, t, r, i);
    else {
      let l = this.buffer.length;
      if (l > 0 && this.buffer[l - 4] != 0) {
        let a = !1;
        for (let o = l; o > 0 && this.buffer[o - 2] > r; o -= 4)
          if (this.buffer[o - 1] >= 0) {
            a = !0;
            break;
          }
        if (a)
          for (; l > 0 && this.buffer[l - 2] > r; )
            this.buffer[l] = this.buffer[l - 4], this.buffer[l + 1] = this.buffer[l - 3], this.buffer[l + 2] = this.buffer[l - 2], this.buffer[l + 3] = this.buffer[l - 1], l -= 4, i > 4 && (i -= 4);
      }
      this.buffer[l] = e, this.buffer[l + 1] = t, this.buffer[l + 2] = r, this.buffer[l + 3] = i;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(e, t, r, i) {
    if (e & 131072)
      this.pushState(e & 65535, this.pos);
    else if (e & 262144)
      this.pos = i, this.shiftContext(t, r), t <= this.p.parser.maxNode && this.buffer.push(t, r, i, 4);
    else {
      let s = e, { parser: l } = this.p;
      (i > this.pos || t <= l.maxNode) && (this.pos = i, l.stateFlag(
        s,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = i)), this.pushState(s, r), this.shiftContext(t, r), t <= l.maxNode && this.buffer.push(t, r, i, 4);
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(e, t, r, i) {
    e & 65536 ? this.reduce(e) : this.shift(e, t, r, i);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(e, t) {
    let r = this.p.reused.length - 1;
    (r < 0 || this.p.reused[r] != e) && (this.p.reused.push(e), r++);
    let i = this.pos;
    this.reducePos = this.pos = i + e.length, this.pushState(t, i), this.buffer.push(
      r,
      i,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, e, this, this.p.stream.reset(this.pos - e.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let e = this, t = e.buffer.length;
    for (; t > 0 && e.buffer[t - 2] > e.reducePos; )
      t -= 4;
    let r = e.buffer.slice(t), i = e.bufferBase + t;
    for (; e && i == e.bufferBase; )
      e = e.parent;
    return new Oa(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, r, i, this.curContext, this.lookAhead, e);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(e, t) {
    let r = e <= this.p.parser.maxNode;
    r && this.storeNode(e, this.pos, t, 4), this.storeNode(0, this.pos, t, r ? 8 : 4), this.pos = this.reducePos = t, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(e) {
    for (let t = new DC(this); ; ) {
      let r = this.p.parser.stateSlot(
        t.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(t.state, e);
      if (r == 0)
        return !1;
      if (!(r & 65536))
        return !0;
      t.reduce(r);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(e) {
    if (this.stack.length >= 300)
      return [];
    let t = this.p.parser.nextStates(this.state);
    if (t.length > 8 || this.stack.length >= 120) {
      let i = [];
      for (let s = 0, l; s < t.length; s += 2)
        (l = t[s + 1]) != this.state && this.p.parser.hasAction(l, e) && i.push(t[s], l);
      if (this.stack.length < 120)
        for (let s = 0; i.length < 8 && s < t.length; s += 2) {
          let l = t[s + 1];
          i.some((a, o) => o & 1 && a == l) || i.push(t[s], l);
        }
      t = i;
    }
    let r = [];
    for (let i = 0; i < t.length && r.length < 4; i += 2) {
      let s = t[i + 1];
      if (s == this.state)
        continue;
      let l = this.split();
      l.pushState(s, this.pos), l.storeNode(0, l.pos, l.pos, 4, !0), l.shiftContext(t[i], this.pos), l.reducePos = this.pos, l.score -= 200, r.push(l);
    }
    return r;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: e } = this.p, t = e.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if (!(t & 65536))
      return !1;
    if (!e.validAction(this.state, t)) {
      let r = t >> 19, i = t & 65535, s = this.stack.length - r * 3;
      if (s < 0 || e.getGoto(this.stack[s], i, !1) < 0) {
        let l = this.findForcedReduction();
        if (l == null)
          return !1;
        t = l;
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(t), !0;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: e } = this.p, t = [], r = (i, s) => {
      if (!t.includes(i))
        return t.push(i), e.allActions(i, (l) => {
          if (!(l & 393216)) if (l & 65536) {
            let a = (l >> 19) - s;
            if (a > 1) {
              let o = l & 65535, u = this.stack.length - a * 3;
              if (u >= 0 && e.getGoto(this.stack[u], o, !1) >= 0)
                return a << 19 | 65536 | o;
            }
          } else {
            let a = r(l, s + 1);
            if (a != null)
              return a;
          }
        });
    };
    return r(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return !1;
    let { parser: e } = this.p;
    return e.data[e.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !e.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(e) {
    if (this.state != e.state || this.stack.length != e.stack.length)
      return !1;
    for (let t = 0; t < this.stack.length; t += 3)
      if (this.stack[t] != e.stack[t])
        return !1;
    return !0;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(e) {
    return this.p.parser.dialect.flags[e];
  }
  shiftContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  reduceContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  /**
  @internal
  */
  emitContext() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(e) {
    if (e != this.curContext.context) {
      let t = new Jp(this.curContext.tracker, e);
      t.hash != this.curContext.hash && this.emitContext(), this.curContext = t;
    }
  }
  /**
  @internal
  */
  setLookAhead(e) {
    e > this.lookAhead && (this.emitLookAhead(), this.lookAhead = e);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class Jp {
  constructor(e, t) {
    this.tracker = e, this.context = t, this.hash = e.strict ? e.hash(t) : 0;
  }
}
class DC {
  constructor(e) {
    this.start = e, this.state = e.state, this.stack = e.stack, this.base = this.stack.length;
  }
  reduce(e) {
    let t = e & 65535, r = e >> 19;
    r == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (r - 1) * 3;
    let i = this.start.p.parser.getGoto(this.stack[this.base - 3], t, !0);
    this.state = i;
  }
}
class ya {
  constructor(e, t, r) {
    this.stack = e, this.pos = t, this.index = r, this.buffer = e.buffer, this.index == 0 && this.maybeNext();
  }
  static create(e, t = e.bufferBase + e.buffer.length) {
    return new ya(e, t, t - e.bufferBase);
  }
  maybeNext() {
    let e = this.stack.parent;
    e != null && (this.index = this.stack.bufferBase - e.bufferBase, this.stack = e, this.buffer = e.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new ya(this.stack, this.pos, this.index);
  }
}
function Ki(n, e = Uint16Array) {
  if (typeof n != "string")
    return n;
  let t = null;
  for (let r = 0, i = 0; r < n.length; ) {
    let s = 0;
    for (; ; ) {
      let l = n.charCodeAt(r++), a = !1;
      if (l == 126) {
        s = 65535;
        break;
      }
      l >= 92 && l--, l >= 34 && l--;
      let o = l - 32;
      if (o >= 46 && (o -= 46, a = !0), s += o, a)
        break;
      s *= 46;
    }
    t ? t[i++] = s : t = new e(s);
  }
  return t;
}
class Vl {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const em = new Vl();
class TC {
  /**
  @internal
  */
  constructor(e, t) {
    this.input = e, this.ranges = t, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = em, this.rangeIndex = 0, this.pos = this.chunkPos = t[0].from, this.range = t[0], this.end = t[t.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(e, t) {
    let r = this.range, i = this.rangeIndex, s = this.pos + e;
    for (; s < r.from; ) {
      if (!i)
        return null;
      let l = this.ranges[--i];
      s -= r.from - l.to, r = l;
    }
    for (; t < 0 ? s > r.to : s >= r.to; ) {
      if (i == this.ranges.length - 1)
        return null;
      let l = this.ranges[++i];
      s += l.from - r.to, r = l;
    }
    return s;
  }
  /**
  @internal
  */
  clipPos(e) {
    if (e >= this.range.from && e < this.range.to)
      return e;
    for (let t of this.ranges)
      if (t.to > e)
        return Math.max(e, t.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(e) {
    let t = this.chunkOff + e, r, i;
    if (t >= 0 && t < this.chunk.length)
      r = this.pos + e, i = this.chunk.charCodeAt(t);
    else {
      let s = this.resolveOffset(e, 1);
      if (s == null)
        return -1;
      if (r = s, r >= this.chunk2Pos && r < this.chunk2Pos + this.chunk2.length)
        i = this.chunk2.charCodeAt(r - this.chunk2Pos);
      else {
        let l = this.rangeIndex, a = this.range;
        for (; a.to <= r; )
          a = this.ranges[++l];
        this.chunk2 = this.input.chunk(this.chunk2Pos = r), r + this.chunk2.length > a.to && (this.chunk2 = this.chunk2.slice(0, a.to - r)), i = this.chunk2.charCodeAt(0);
      }
    }
    return r >= this.token.lookAhead && (this.token.lookAhead = r + 1), i;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(e, t = 0) {
    let r = t ? this.resolveOffset(t, -1) : this.pos;
    if (r == null || r < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = e, this.token.end = r;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(e, t) {
    this.token.value = e, this.token.end = t;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: e, chunkPos: t } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = e, this.chunk2Pos = t, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let e = this.input.chunk(this.pos), t = this.pos + e.length;
      this.chunk = t > this.range.to ? e.slice(0, this.range.to - this.pos) : e, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(e = 1) {
    for (this.chunkOff += e; this.pos + e >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      e -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += e, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(e, t) {
    if (t ? (this.token = t, t.start = e, t.lookAhead = e + 1, t.value = t.extended = -1) : this.token = em, this.pos != e) {
      if (this.pos = e, e == this.end)
        return this.setDone(), this;
      for (; e < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; e >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      e >= this.chunkPos && e < this.chunkPos + this.chunk.length ? this.chunkOff = e - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(e, t) {
    if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(e - this.chunkPos, t - this.chunkPos);
    if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos);
    if (e >= this.range.from && t <= this.range.to)
      return this.input.read(e, t);
    let r = "";
    for (let i of this.ranges) {
      if (i.from >= t)
        break;
      i.to > e && (r += this.input.read(Math.max(i.from, e), Math.min(i.to, t)));
    }
    return r;
  }
}
class oi {
  constructor(e, t) {
    this.data = e, this.id = t;
  }
  token(e, t) {
    let { parser: r } = t.p;
    X2(this.data, e, t, this.id, r.data, r.tokenPrecTable);
  }
}
oi.prototype.contextual = oi.prototype.fallback = oi.prototype.extend = !1;
class ba {
  constructor(e, t, r) {
    this.precTable = t, this.elseToken = r, this.data = typeof e == "string" ? Ki(e) : e;
  }
  token(e, t) {
    let r = e.pos, i = 0;
    for (; ; ) {
      let s = e.next < 0, l = e.resolveOffset(1, 1);
      if (X2(this.data, e, t, 0, this.data, this.precTable), e.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (s || i++, l == null)
        break;
      e.reset(l, e.token);
    }
    i && (e.reset(r, e.token), e.acceptToken(this.elseToken, i));
  }
}
ba.prototype.contextual = oi.prototype.fallback = oi.prototype.extend = !1;
class sn {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(e, t = {}) {
    this.token = e, this.contextual = !!t.contextual, this.fallback = !!t.fallback, this.extend = !!t.extend;
  }
}
function X2(n, e, t, r, i, s) {
  let l = 0, a = 1 << r, { dialect: o } = t.p.parser;
  e: for (; a & n[l]; ) {
    let u = n[l + 1];
    for (let d = l + 3; d < u; d += 2)
      if ((n[d + 1] & a) > 0) {
        let m = n[d];
        if (o.allows(m) && (e.token.value == -1 || e.token.value == m || MC(m, e.token.value, i, s))) {
          e.acceptToken(m);
          break;
        }
      }
    let h = e.next, c = 0, f = n[l + 2];
    if (e.next < 0 && f > c && n[u + f * 3 - 3] == 65535) {
      l = n[u + f * 3 - 1];
      continue e;
    }
    for (; c < f; ) {
      let d = c + f >> 1, m = u + d + (d << 1), O = n[m], x = n[m + 1] || 65536;
      if (h < O)
        f = d;
      else if (h >= x)
        c = d + 1;
      else {
        l = n[m + 2], e.advance();
        continue e;
      }
    }
    break;
  }
}
function tm(n, e, t) {
  for (let r = e, i; (i = n[r]) != 65535; r++)
    if (i == t)
      return r - e;
  return -1;
}
function MC(n, e, t, r) {
  let i = tm(t, r, e);
  return i < 0 || tm(t, r, n) < i;
}
const Rt = typeof process < "u" && process.env && /\bparse\b/.test(process.env.LOG);
let mu = null;
function nm(n, e, t) {
  let r = n.cursor(Fe.IncludeAnonymous);
  for (r.moveTo(e); ; )
    if (!(t < 0 ? r.childBefore(e) : r.childAfter(e)))
      for (; ; ) {
        if ((t < 0 ? r.to < e : r.from > e) && !r.type.isError)
          return t < 0 ? Math.max(0, Math.min(
            r.to - 1,
            e - 25
            /* Lookahead.Margin */
          )) : Math.min(n.length, Math.max(
            r.from + 1,
            e + 25
            /* Lookahead.Margin */
          ));
        if (t < 0 ? r.prevSibling() : r.nextSibling())
          break;
        if (!r.parent())
          return t < 0 ? 0 : n.length;
      }
}
class EC {
  constructor(e, t) {
    this.fragments = e, this.nodeSet = t, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let e = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (e) {
      for (this.safeFrom = e.openStart ? nm(e.tree, e.from + e.offset, 1) - e.offset : e.from, this.safeTo = e.openEnd ? nm(e.tree, e.to + e.offset, -1) - e.offset : e.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(e.tree), this.start.push(-e.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(e) {
    if (e < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= e; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let t = this.trees.length - 1;
      if (t < 0)
        return this.nextFragment(), null;
      let r = this.trees[t], i = this.index[t];
      if (i == r.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let s = r.children[i], l = this.start[t] + r.positions[i];
      if (l > e)
        return this.nextStart = l, null;
      if (s instanceof Ae) {
        if (l == e) {
          if (l < this.safeFrom)
            return null;
          let a = l + s.length;
          if (a <= this.safeTo) {
            let o = s.prop(pe.lookAhead);
            if (!o || a + o < this.fragment.to)
              return s;
          }
        }
        this.index[t]++, l + s.length >= Math.max(this.safeFrom, e) && (this.trees.push(s), this.start.push(l), this.index.push(0));
      } else
        this.index[t]++, this.nextStart = l + s.length;
    }
  }
}
class RC {
  constructor(e, t) {
    this.stream = t, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = e.tokenizers.map((r) => new Vl());
  }
  getActions(e) {
    let t = 0, r = null, { parser: i } = e.p, { tokenizers: s } = i, l = i.stateSlot(
      e.state,
      3
      /* ParseState.TokenizerMask */
    ), a = e.curContext ? e.curContext.hash : 0, o = 0;
    for (let u = 0; u < s.length; u++) {
      if (!(1 << u & l))
        continue;
      let h = s[u], c = this.tokens[u];
      if (!(r && !h.fallback) && ((h.contextual || c.start != e.pos || c.mask != l || c.context != a) && (this.updateCachedToken(c, h, e), c.mask = l, c.context = a), c.lookAhead > c.end + 25 && (o = Math.max(c.lookAhead, o)), c.value != 0)) {
        let f = t;
        if (c.extended > -1 && (t = this.addActions(e, c.extended, c.end, t)), t = this.addActions(e, c.value, c.end, t), !h.extend && (r = c, t > f))
          break;
      }
    }
    for (; this.actions.length > t; )
      this.actions.pop();
    return o && e.setLookAhead(o), !r && e.pos == this.stream.end && (r = new Vl(), r.value = e.p.parser.eofTerm, r.start = r.end = e.pos, t = this.addActions(e, r.value, r.end, t)), this.mainToken = r, this.actions;
  }
  getMainToken(e) {
    if (this.mainToken)
      return this.mainToken;
    let t = new Vl(), { pos: r, p: i } = e;
    return t.start = r, t.end = Math.min(r + 1, i.stream.end), t.value = r == i.stream.end ? i.parser.eofTerm : 0, t;
  }
  updateCachedToken(e, t, r) {
    let i = this.stream.clipPos(r.pos);
    if (t.token(this.stream.reset(i, e), r), e.value > -1) {
      let { parser: s } = r.p;
      for (let l = 0; l < s.specialized.length; l++)
        if (s.specialized[l] == e.value) {
          let a = s.specializers[l](this.stream.read(e.start, e.end), r);
          if (a >= 0 && r.p.parser.dialect.allows(a >> 1)) {
            a & 1 ? e.extended = a >> 1 : e.value = a >> 1;
            break;
          }
        }
    } else
      e.value = 0, e.end = this.stream.clipPos(i + 1);
  }
  putAction(e, t, r, i) {
    for (let s = 0; s < i; s += 3)
      if (this.actions[s] == e)
        return i;
    return this.actions[i++] = e, this.actions[i++] = t, this.actions[i++] = r, i;
  }
  addActions(e, t, r, i) {
    let { state: s } = e, { parser: l } = e.p, { data: a } = l;
    for (let o = 0; o < 2; o++)
      for (let u = l.stateSlot(
        s,
        o ? 2 : 1
        /* ParseState.Actions */
      ); ; u += 3) {
        if (a[u] == 65535)
          if (a[u + 1] == 1)
            u = In(a, u + 2);
          else {
            i == 0 && a[u + 1] == 2 && (i = this.putAction(In(a, u + 2), t, r, i));
            break;
          }
        a[u] == t && (i = this.putAction(In(a, u + 1), t, r, i));
      }
    return i;
  }
}
class ZC {
  constructor(e, t, r, i) {
    this.parser = e, this.input = t, this.ranges = i, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new TC(t, i), this.tokens = new RC(e, this.stream), this.topTerm = e.top[1];
    let { from: s } = i[0];
    this.stacks = [Oa.start(this, e.top[0], s)], this.fragments = r.length && this.stream.end - s > e.bufferLength * 4 ? new EC(r, e.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let e = this.stacks, t = this.minStackPos, r = this.stacks = [], i, s;
    if (this.bigReductionCount > 300 && e.length == 1) {
      let [l] = e;
      for (; l.forceReduce() && l.stack.length && l.stack[l.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let l = 0; l < e.length; l++) {
      let a = e[l];
      for (; ; ) {
        if (this.tokens.mainToken = null, a.pos > t)
          r.push(a);
        else {
          if (this.advanceStack(a, r, e))
            continue;
          {
            i || (i = [], s = []), i.push(a);
            let o = this.tokens.getMainToken(a);
            s.push(o.value, o.end);
          }
        }
        break;
      }
    }
    if (!r.length) {
      let l = i && FC(i);
      if (l)
        return Rt && console.log("Finish with " + this.stackID(l)), this.stackToTree(l);
      if (this.parser.strict)
        throw Rt && i && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + t);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && i) {
      let l = this.stoppedAt != null && i[0].pos > this.stoppedAt ? i[0] : this.runRecovery(i, s, r);
      if (l)
        return Rt && console.log("Force-finish " + this.stackID(l)), this.stackToTree(l.forceAll());
    }
    if (this.recovering) {
      let l = this.recovering == 1 ? 1 : this.recovering * 3;
      if (r.length > l)
        for (r.sort((a, o) => o.score - a.score); r.length > l; )
          r.pop();
      r.some((a) => a.reducePos > t) && this.recovering--;
    } else if (r.length > 1) {
      e: for (let l = 0; l < r.length - 1; l++) {
        let a = r[l];
        for (let o = l + 1; o < r.length; o++) {
          let u = r[o];
          if (a.sameState(u) || a.buffer.length > 500 && u.buffer.length > 500)
            if ((a.score - u.score || a.buffer.length - u.buffer.length) > 0)
              r.splice(o--, 1);
            else {
              r.splice(l--, 1);
              continue e;
            }
        }
      }
      r.length > 12 && r.splice(
        12,
        r.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = r[0].pos;
    for (let l = 1; l < r.length; l++)
      r[l].pos < this.minStackPos && (this.minStackPos = r[l].pos);
    return null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(e, t, r) {
    let i = e.pos, { parser: s } = this, l = Rt ? this.stackID(e) + " -> " : "";
    if (this.stoppedAt != null && i > this.stoppedAt)
      return e.forceReduce() ? e : null;
    if (this.fragments) {
      let u = e.curContext && e.curContext.tracker.strict, h = u ? e.curContext.hash : 0;
      for (let c = this.fragments.nodeAt(i); c; ) {
        let f = this.parser.nodeSet.types[c.type.id] == c.type ? s.getGoto(e.state, c.type.id) : -1;
        if (f > -1 && c.length && (!u || (c.prop(pe.contextHash) || 0) == h))
          return e.useNode(c, f), Rt && console.log(l + this.stackID(e) + ` (via reuse of ${s.getName(c.type.id)})`), !0;
        if (!(c instanceof Ae) || c.children.length == 0 || c.positions[0] > 0)
          break;
        let d = c.children[0];
        if (d instanceof Ae && c.positions[0] == 0)
          c = d;
        else
          break;
      }
    }
    let a = s.stateSlot(
      e.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (a > 0)
      return e.reduce(a), Rt && console.log(l + this.stackID(e) + ` (via always-reduce ${s.getName(
        a & 65535
        /* Action.ValueMask */
      )})`), !0;
    if (e.stack.length >= 8400)
      for (; e.stack.length > 6e3 && e.forceReduce(); )
        ;
    let o = this.tokens.getActions(e);
    for (let u = 0; u < o.length; ) {
      let h = o[u++], c = o[u++], f = o[u++], d = u == o.length || !r, m = d ? e : e.split(), O = this.tokens.mainToken;
      if (m.apply(h, c, O ? O.start : m.pos, f), Rt && console.log(l + this.stackID(m) + ` (via ${h & 65536 ? `reduce of ${s.getName(
        h & 65535
        /* Action.ValueMask */
      )}` : "shift"} for ${s.getName(c)} @ ${i}${m == e ? "" : ", split"})`), d)
        return !0;
      m.pos > i ? t.push(m) : r.push(m);
    }
    return !1;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(e, t) {
    let r = e.pos;
    for (; ; ) {
      if (!this.advanceStack(e, null, null))
        return !1;
      if (e.pos > r)
        return rm(e, t), !0;
    }
  }
  runRecovery(e, t, r) {
    let i = null, s = !1;
    for (let l = 0; l < e.length; l++) {
      let a = e[l], o = t[l << 1], u = t[(l << 1) + 1], h = Rt ? this.stackID(a) + " -> " : "";
      if (a.deadEnd && (s || (s = !0, a.restart(), Rt && console.log(h + this.stackID(a) + " (restarted)"), this.advanceFully(a, r))))
        continue;
      let c = a.split(), f = h;
      for (let d = 0; c.forceReduce() && d < 10 && (Rt && console.log(f + this.stackID(c) + " (via force-reduce)"), !this.advanceFully(c, r)); d++)
        Rt && (f = this.stackID(c) + " -> ");
      for (let d of a.recoverByInsert(o))
        Rt && console.log(h + this.stackID(d) + " (via recover-insert)"), this.advanceFully(d, r);
      this.stream.end > a.pos ? (u == a.pos && (u++, o = 0), a.recoverByDelete(o, u), Rt && console.log(h + this.stackID(a) + ` (via recover-delete ${this.parser.getName(o)})`), rm(a, r)) : (!i || i.score < a.score) && (i = a);
    }
    return i;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(e) {
    return e.close(), Ae.build({
      buffer: ya.create(e),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: e.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(e) {
    let t = (mu || (mu = /* @__PURE__ */ new WeakMap())).get(e);
    return t || mu.set(e, t = String.fromCodePoint(this.nextStackID++)), t + e;
  }
}
function rm(n, e) {
  for (let t = 0; t < e.length; t++) {
    let r = e[t];
    if (r.pos == n.pos && r.sameState(n)) {
      e[t].score < n.score && (e[t] = n);
      return;
    }
  }
  e.push(n);
}
class zC {
  constructor(e, t, r) {
    this.source = e, this.flags = t, this.disabled = r;
  }
  allows(e) {
    return !this.disabled || this.disabled[e] == 0;
  }
}
const gu = (n) => n;
class I2 {
  /**
  Define a context tracker.
  */
  constructor(e) {
    this.start = e.start, this.shift = e.shift || gu, this.reduce = e.reduce || gu, this.reuse = e.reuse || gu, this.hash = e.hash || (() => 0), this.strict = e.strict !== !1;
  }
}
class xi extends Fh {
  /**
  @internal
  */
  constructor(e) {
    if (super(), this.wrappers = [], e.version != 14)
      throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);
    let t = e.nodeNames.split(" ");
    this.minRepeatTerm = t.length;
    for (let a = 0; a < e.repeatNodeCount; a++)
      t.push("");
    let r = Object.keys(e.topRules).map((a) => e.topRules[a][1]), i = [];
    for (let a = 0; a < t.length; a++)
      i.push([]);
    function s(a, o, u) {
      i[a].push([o, o.deserialize(String(u))]);
    }
    if (e.nodeProps)
      for (let a of e.nodeProps) {
        let o = a[0];
        typeof o == "string" && (o = pe[o]);
        for (let u = 1; u < a.length; ) {
          let h = a[u++];
          if (h >= 0)
            s(h, o, a[u++]);
          else {
            let c = a[u + -h];
            for (let f = -h; f > 0; f--)
              s(a[u++], o, c);
            u++;
          }
        }
      }
    this.nodeSet = new Xs(t.map((a, o) => lt.define({
      name: o >= this.minRepeatTerm ? void 0 : a,
      id: o,
      props: i[o],
      top: r.indexOf(o) > -1,
      error: o == 0,
      skipped: e.skippedNodes && e.skippedNodes.indexOf(o) > -1
    }))), e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)), this.strict = !1, this.bufferLength = oO;
    let l = Ki(e.tokenData);
    this.context = e.context, this.specializerSpecs = e.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let a = 0; a < this.specializerSpecs.length; a++)
      this.specialized[a] = this.specializerSpecs[a].term;
    this.specializers = this.specializerSpecs.map(im), this.states = Ki(e.states, Uint32Array), this.data = Ki(e.stateData), this.goto = Ki(e.goto), this.maxTerm = e.maxTerm, this.tokenizers = e.tokenizers.map((a) => typeof a == "number" ? new oi(l, a) : a), this.topRules = e.topRules, this.dialects = e.dialects || {}, this.dynamicPrecedences = e.dynamicPrecedences || null, this.tokenPrecTable = e.tokenPrec, this.termNames = e.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(e, t, r) {
    let i = new ZC(this, e, t, r);
    for (let s of this.wrappers)
      i = s(i, e, t, r);
    return i;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(e, t, r = !1) {
    let i = this.goto;
    if (t >= i[0])
      return -1;
    for (let s = i[t + 1]; ; ) {
      let l = i[s++], a = l & 1, o = i[s++];
      if (a && r)
        return o;
      for (let u = s + (l >> 1); s < u; s++)
        if (i[s] == e)
          return o;
      if (a)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(e, t) {
    let r = this.data;
    for (let i = 0; i < 2; i++)
      for (let s = this.stateSlot(
        e,
        i ? 2 : 1
        /* ParseState.Actions */
      ), l; ; s += 3) {
        if ((l = r[s]) == 65535)
          if (r[s + 1] == 1)
            l = r[s = In(r, s + 2)];
          else {
            if (r[s + 1] == 2)
              return In(r, s + 2);
            break;
          }
        if (l == t || l == 0)
          return In(r, s + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(e, t) {
    return this.states[e * 6 + t];
  }
  /**
  @internal
  */
  stateFlag(e, t) {
    return (this.stateSlot(
      e,
      0
      /* ParseState.Flags */
    ) & t) > 0;
  }
  /**
  @internal
  */
  validAction(e, t) {
    return !!this.allActions(e, (r) => r == t ? !0 : null);
  }
  /**
  @internal
  */
  allActions(e, t) {
    let r = this.stateSlot(
      e,
      4
      /* ParseState.DefaultReduce */
    ), i = r ? t(r) : void 0;
    for (let s = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); i == null; s += 3) {
      if (this.data[s] == 65535)
        if (this.data[s + 1] == 1)
          s = In(this.data, s + 2);
        else
          break;
      i = t(In(this.data, s + 1));
    }
    return i;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(e) {
    let t = [];
    for (let r = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); ; r += 3) {
      if (this.data[r] == 65535)
        if (this.data[r + 1] == 1)
          r = In(this.data, r + 2);
        else
          break;
      if (!(this.data[r + 2] & 1)) {
        let i = this.data[r + 1];
        t.some((s, l) => l & 1 && s == i) || t.push(this.data[r], i);
      }
    }
    return t;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(e) {
    let t = Object.assign(Object.create(xi.prototype), this);
    if (e.props && (t.nodeSet = this.nodeSet.extend(...e.props)), e.top) {
      let r = this.topRules[e.top];
      if (!r)
        throw new RangeError(`Invalid top rule name ${e.top}`);
      t.top = r;
    }
    return e.tokenizers && (t.tokenizers = this.tokenizers.map((r) => {
      let i = e.tokenizers.find((s) => s.from == r);
      return i ? i.to : r;
    })), e.specializers && (t.specializers = this.specializers.slice(), t.specializerSpecs = this.specializerSpecs.map((r, i) => {
      let s = e.specializers.find((a) => a.from == r.external);
      if (!s)
        return r;
      let l = Object.assign(Object.assign({}, r), { external: s.to });
      return t.specializers[i] = im(l), l;
    })), e.contextTracker && (t.context = e.contextTracker), e.dialect && (t.dialect = this.parseDialect(e.dialect)), e.strict != null && (t.strict = e.strict), e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)), e.bufferLength != null && (t.bufferLength = e.bufferLength), t;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(e) {
    return this.termNames ? this.termNames[e] : String(e <= this.maxNode && this.nodeSet.types[e].name || e);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(e) {
    let t = this.dynamicPrecedences;
    return t == null ? 0 : t[e] || 0;
  }
  /**
  @internal
  */
  parseDialect(e) {
    let t = Object.keys(this.dialects), r = t.map(() => !1);
    if (e)
      for (let s of e.split(" ")) {
        let l = t.indexOf(s);
        l >= 0 && (r[l] = !0);
      }
    let i = null;
    for (let s = 0; s < t.length; s++)
      if (!r[s])
        for (let l = this.dialects[t[s]], a; (a = this.data[l++]) != 65535; )
          (i || (i = new Uint8Array(this.maxTerm + 1)))[a] = 1;
    return new zC(e, r, i);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(e) {
    return new xi(e);
  }
}
function In(n, e) {
  return n[e] | n[e + 1] << 16;
}
function FC(n) {
  let e = null;
  for (let t of n) {
    let r = t.p.stoppedAt;
    (t.pos == t.p.stream.end || r != null && t.pos > r) && t.p.parser.stateFlag(
      t.state,
      2
      /* StateFlag.Accepting */
    ) && (!e || e.score < t.score) && (e = t);
  }
  return e;
}
function im(n) {
  if (n.external) {
    let e = n.extend ? 1 : 0;
    return (t, r) => n.external(t, r) << 1 | e;
  }
  return n.get;
}
const BC = 54, LC = 1, qC = 55, XC = 2, IC = 56, NC = 3, sm = 4, VC = 5, xa = 6, N2 = 7, V2 = 8, j2 = 9, _2 = 10, jC = 11, _C = 12, UC = 13, Ou = 57, WC = 14, lm = 58, U2 = 20, YC = 22, W2 = 23, GC = 24, V0 = 26, Y2 = 27, HC = 28, KC = 31, JC = 34, eA = 36, tA = 37, nA = 0, rA = 1, iA = {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  command: !0,
  embed: !0,
  frame: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0,
  menuitem: !0
}, sA = {
  dd: !0,
  li: !0,
  optgroup: !0,
  option: !0,
  p: !0,
  rp: !0,
  rt: !0,
  tbody: !0,
  td: !0,
  tfoot: !0,
  th: !0,
  tr: !0
}, am = {
  dd: { dd: !0, dt: !0 },
  dt: { dd: !0, dt: !0 },
  li: { li: !0 },
  option: { option: !0, optgroup: !0 },
  optgroup: { optgroup: !0 },
  p: {
    address: !0,
    article: !0,
    aside: !0,
    blockquote: !0,
    dir: !0,
    div: !0,
    dl: !0,
    fieldset: !0,
    footer: !0,
    form: !0,
    h1: !0,
    h2: !0,
    h3: !0,
    h4: !0,
    h5: !0,
    h6: !0,
    header: !0,
    hgroup: !0,
    hr: !0,
    menu: !0,
    nav: !0,
    ol: !0,
    p: !0,
    pre: !0,
    section: !0,
    table: !0,
    ul: !0
  },
  rp: { rp: !0, rt: !0 },
  rt: { rp: !0, rt: !0 },
  tbody: { tbody: !0, tfoot: !0 },
  td: { td: !0, th: !0 },
  tfoot: { tbody: !0 },
  th: { td: !0, th: !0 },
  thead: { tbody: !0, tfoot: !0 },
  tr: { tr: !0 }
};
function lA(n) {
  return n == 45 || n == 46 || n == 58 || n >= 65 && n <= 90 || n == 95 || n >= 97 && n <= 122 || n >= 161;
}
function G2(n) {
  return n == 9 || n == 10 || n == 13 || n == 32;
}
let om = null, um = null, hm = 0;
function j0(n, e) {
  let t = n.pos + e;
  if (hm == t && um == n) return om;
  let r = n.peek(e);
  for (; G2(r); ) r = n.peek(++e);
  let i = "";
  for (; lA(r); )
    i += String.fromCharCode(r), r = n.peek(++e);
  return um = n, hm = t, om = i ? i.toLowerCase() : r == aA || r == oA ? void 0 : null;
}
const H2 = 60, va = 62, ic = 47, aA = 63, oA = 33, uA = 45;
function cm(n, e) {
  this.name = n, this.parent = e;
}
const hA = [xa, _2, N2, V2, j2], cA = new I2({
  start: null,
  shift(n, e, t, r) {
    return hA.indexOf(e) > -1 ? new cm(j0(r, 1) || "", n) : n;
  },
  reduce(n, e) {
    return e == U2 && n ? n.parent : n;
  },
  reuse(n, e, t, r) {
    let i = e.type.id;
    return i == xa || i == eA ? new cm(j0(r, 1) || "", n) : n;
  },
  strict: !1
}), fA = new sn((n, e) => {
  if (n.next != H2) {
    n.next < 0 && e.context && n.acceptToken(Ou);
    return;
  }
  n.advance();
  let t = n.next == ic;
  t && n.advance();
  let r = j0(n, 0);
  if (r === void 0) return;
  if (!r) return n.acceptToken(t ? WC : xa);
  let i = e.context ? e.context.name : null;
  if (t) {
    if (r == i) return n.acceptToken(jC);
    if (i && sA[i]) return n.acceptToken(Ou, -2);
    if (e.dialectEnabled(nA)) return n.acceptToken(_C);
    for (let s = e.context; s; s = s.parent) if (s.name == r) return;
    n.acceptToken(UC);
  } else {
    if (r == "script") return n.acceptToken(N2);
    if (r == "style") return n.acceptToken(V2);
    if (r == "textarea") return n.acceptToken(j2);
    if (iA.hasOwnProperty(r)) return n.acceptToken(_2);
    i && am[i] && am[i][r] ? n.acceptToken(Ou, -1) : n.acceptToken(xa);
  }
}, { contextual: !0 }), dA = new sn((n) => {
  for (let e = 0, t = 0; ; t++) {
    if (n.next < 0) {
      t && n.acceptToken(lm);
      break;
    }
    if (n.next == uA)
      e++;
    else if (n.next == va && e >= 2) {
      t >= 3 && n.acceptToken(lm, -2);
      break;
    } else
      e = 0;
    n.advance();
  }
});
function pA(n) {
  for (; n; n = n.parent)
    if (n.name == "svg" || n.name == "math") return !0;
  return !1;
}
const mA = new sn((n, e) => {
  if (n.next == ic && n.peek(1) == va) {
    let t = e.dialectEnabled(rA) || pA(e.context);
    n.acceptToken(t ? VC : sm, 2);
  } else n.next == va && n.acceptToken(sm, 1);
});
function sc(n, e, t) {
  let r = 2 + n.length;
  return new sn((i) => {
    for (let s = 0, l = 0, a = 0; ; a++) {
      if (i.next < 0) {
        a && i.acceptToken(e);
        break;
      }
      if (s == 0 && i.next == H2 || s == 1 && i.next == ic || s >= 2 && s < r && i.next == n.charCodeAt(s - 2))
        s++, l++;
      else if ((s == 2 || s == r) && G2(i.next))
        l++;
      else if (s == r && i.next == va) {
        a > l ? i.acceptToken(e, -l) : i.acceptToken(t, -(l - 2));
        break;
      } else if ((i.next == 10 || i.next == 13) && a) {
        i.acceptToken(e, 1);
        break;
      } else
        s = l = 0;
      i.advance();
    }
  });
}
const gA = sc("script", BC, LC), OA = sc("style", qC, XC), yA = sc("textarea", IC, NC), bA = $i({
  "Text RawText": $.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": $.angleBracket,
  TagName: $.tagName,
  "MismatchedCloseTag/TagName": [$.tagName, $.invalid],
  AttributeName: $.attributeName,
  "AttributeValue UnquotedAttributeValue": $.attributeValue,
  Is: $.definitionOperator,
  "EntityReference CharacterReference": $.character,
  Comment: $.blockComment,
  ProcessingInst: $.processingInstruction,
  DoctypeDecl: $.documentMeta
}), xA = xi.deserialize({
  version: 14,
  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
  stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
  nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 67,
  context: cA,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
    ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
    ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"],
    ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]
  ],
  propSources: [bA],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
  tokenizers: [gA, OA, yA, mA, fA, dA, 0, 1, 2, 3, 4, 5],
  topRules: { Document: [0, 15] },
  dialects: { noMatch: 0, selfClosing: 509 },
  tokenPrec: 511
});
function K2(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let r of n.getChildren(W2)) {
    let i = r.getChild(GC), s = r.getChild(V0) || r.getChild(Y2);
    i && (t[e.read(i.from, i.to)] = s ? s.type.id == V0 ? e.read(s.from + 1, s.to - 1) : e.read(s.from, s.to) : "");
  }
  return t;
}
function fm(n, e) {
  let t = n.getChild(YC);
  return t ? e.read(t.from, t.to) : " ";
}
function yu(n, e, t) {
  let r;
  for (let i of t)
    if (!i.attrs || i.attrs(r || (r = K2(n.node.parent.firstChild, e))))
      return { parser: i.parser };
  return null;
}
function J2(n = [], e = []) {
  let t = [], r = [], i = [], s = [];
  for (let a of n)
    (a.tag == "script" ? t : a.tag == "style" ? r : a.tag == "textarea" ? i : s).push(a);
  let l = e.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let a of e) (l[a.name] || (l[a.name] = [])).push(a);
  return dO((a, o) => {
    let u = a.type.id;
    if (u == HC) return yu(a, o, t);
    if (u == KC) return yu(a, o, r);
    if (u == JC) return yu(a, o, i);
    if (u == U2 && s.length) {
      let h = a.node, c = h.firstChild, f = c && fm(c, o), d;
      if (f) {
        for (let m of s)
          if (m.tag == f && (!m.attrs || m.attrs(d || (d = K2(c, o))))) {
            let O = h.lastChild, x = O.type.id == tA ? O.from : h.to;
            if (x > c.to)
              return { parser: m.parser, overlay: [{ from: c.to, to: x }] };
          }
      }
    }
    if (l && u == W2) {
      let h = a.node, c;
      if (c = h.firstChild) {
        let f = l[o.read(c.from, c.to)];
        if (f) for (let d of f) {
          if (d.tagName && d.tagName != fm(h.parent, o)) continue;
          let m = h.lastChild;
          if (m.type.id == V0) {
            let O = m.from + 1, x = m.lastChild, b = m.to - (x && x.isError ? 0 : 1);
            if (b > O) return { parser: d.parser, overlay: [{ from: O, to: b }] };
          } else if (m.type.id == Y2)
            return { parser: d.parser, overlay: [{ from: m.from, to: m.to }] };
        }
      }
    }
    return null;
  });
}
const vA = 100, dm = 1, wA = 101, kA = 102, pm = 2, e5 = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], SA = 58, QA = 40, t5 = 95, PA = 91, jl = 45, CA = 46, AA = 35, $A = 37, DA = 38, TA = 92, MA = 10;
function $s(n) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n >= 161;
}
function n5(n) {
  return n >= 48 && n <= 57;
}
const EA = new sn((n, e) => {
  for (let t = !1, r = 0, i = 0; ; i++) {
    let { next: s } = n;
    if ($s(s) || s == jl || s == t5 || t && n5(s))
      !t && (s != jl || i > 0) && (t = !0), r === i && s == jl && r++, n.advance();
    else if (s == TA && n.peek(1) != MA)
      n.advance(), n.next > -1 && n.advance(), t = !0;
    else {
      t && n.acceptToken(s == QA ? wA : r == 2 && e.canShift(pm) ? pm : kA);
      break;
    }
  }
}), RA = new sn((n) => {
  if (e5.includes(n.peek(-1))) {
    let { next: e } = n;
    ($s(e) || e == t5 || e == AA || e == CA || e == PA || e == SA && $s(n.peek(1)) || e == jl || e == DA) && n.acceptToken(vA);
  }
}), ZA = new sn((n) => {
  if (!e5.includes(n.peek(-1))) {
    let { next: e } = n;
    if (e == $A && (n.advance(), n.acceptToken(dm)), $s(e)) {
      do
        n.advance();
      while ($s(n.next) || n5(n.next));
      n.acceptToken(dm);
    }
  }
}), zA = $i({
  "AtKeyword import charset namespace keyframes media supports": $.definitionKeyword,
  "from to selector": $.keyword,
  NamespaceName: $.namespace,
  KeyframeName: $.labelName,
  KeyframeRangeName: $.operatorKeyword,
  TagName: $.tagName,
  ClassName: $.className,
  PseudoClassName: $.constant($.className),
  IdName: $.labelName,
  "FeatureName PropertyName": $.propertyName,
  AttributeName: $.attributeName,
  NumberLiteral: $.number,
  KeywordQuery: $.keyword,
  UnaryQueryOp: $.operatorKeyword,
  "CallTag ValueName": $.atom,
  VariableName: $.variableName,
  Callee: $.operatorKeyword,
  Unit: $.unit,
  "UniversalSelector NestingSelector": $.definitionOperator,
  MatchOp: $.compareOperator,
  "ChildOp SiblingOp, LogicOp": $.logicOperator,
  BinOp: $.arithmeticOperator,
  Important: $.modifier,
  Comment: $.blockComment,
  ColorLiteral: $.color,
  "ParenthesizedContent StringLiteral": $.string,
  ":": $.punctuation,
  "PseudoOp #": $.derefOperator,
  "; ,": $.separator,
  "( )": $.paren,
  "[ ]": $.squareBracket,
  "{ }": $.brace
}), FA = { __proto__: null, lang: 34, "nth-child": 34, "nth-last-child": 34, "nth-of-type": 34, "nth-last-of-type": 34, dir: 34, "host-context": 34, url: 62, "url-prefix": 62, domain: 62, regexp: 62, selector: 140 }, BA = { __proto__: null, "@import": 120, "@media": 144, "@charset": 148, "@namespace": 152, "@keyframes": 158, "@supports": 170 }, LA = { __proto__: null, not: 134, only: 134 }, qA = xi.deserialize({
  version: 14,
  states: ":jQYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#CiO$qQ[O'#DUO$vQ[O'#DXOOQP'#En'#EnO${QdO'#DhO%jQ[O'#DuO${QdO'#DwO%{Q[O'#DyO&WQ[O'#D|O&`Q[O'#ESO&nQ[O'#EUOOQS'#Em'#EmOOQS'#EX'#EXQYQ[OOO&uQXO'#CdO'jQWO'#DdO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@])C@]OOQP'#Ch'#ChOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E]O({QWO,58{O)TQ[O,59TO$qQ[O,59pO$vQ[O,59sO(aQ[O,59vO(aQ[O,59xO(aQ[O,59yO)`Q[O'#DcOOQS,58{,58{OOQP'#Cl'#ClOOQO'#DS'#DSOOQP,59T,59TO)gQWO,59TO)lQWO,59TOOQP'#DW'#DWOOQP,59p,59pOOQO'#DY'#DYO)qQ`O,59sOOQS'#Cq'#CqO${QdO'#CrO)yQvO'#CtO+ZQtO,5:SOOQO'#Cy'#CyO)lQWO'#CxO+oQWO'#CzO+tQ[O'#DPOOQS'#Ep'#EpOOQO'#Dk'#DkO+|Q[O'#DrO,[QWO'#EtO&`Q[O'#DpO,jQWO'#DsOOQO'#Eu'#EuO)OQWO,5:aO,oQpO,5:cOOQS'#D{'#D{O,wQWO,5:eO,|Q[O,5:eOOQO'#EO'#EOO-UQWO,5:hO-ZQWO,5:nO-cQWO,5:pOOQS-E8V-E8VO-kQdO,5:OO-{Q[O'#E_O.YQWO,5;_O.YQWO,5;_POOO'#EW'#EWP.eO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO/[QXO,5:wOOQO-E8Z-E8ZOOQS1G.g1G.gOOQP1G.o1G.oO)gQWO1G.oO)lQWO1G.oOOQP1G/[1G/[O/iQ`O1G/_O0SQXO1G/bO0jQXO1G/dO1QQXO1G/eO1hQWO,59}O1mQ[O'#DTO1tQdO'#CpOOQP1G/_1G/_O${QdO1G/_O1{QpO,59^OOQS,59`,59`O${QdO,59bO2TQWO1G/nOOQS,59d,59dO2YQ!bO,59fOOQS'#DQ'#DQOOQS'#EZ'#EZO2eQ[O,59kOOQS,59k,59kO2mQWO'#DkO2xQWO,5:WO2}QWO,5:^O&`Q[O,5:YO&`Q[O'#E`O3VQWO,5;`O3bQWO,5:[O(aQ[O,5:_OOQS1G/{1G/{OOQS1G/}1G/}OOQS1G0P1G0PO3sQWO1G0PO3xQdO'#EPOOQS1G0S1G0SOOQS1G0Y1G0YOOQS1G0[1G0[O4TQtO1G/jOOQO1G/j1G/jOOQO,5:y,5:yO4kQ[O,5:yOOQO-E8]-E8]O4xQWO1G0yPOOO-E8U-E8UPOOO1G.e1G.eOOQP7+$Z7+$ZOOQP7+$y7+$yO${QdO7+$yOOQS1G/i1G/iO5TQXO'#ErO5[QWO,59oO5aQtO'#EYO6XQdO'#EoO6cQWO,59[O6hQpO7+$yOOQS1G.x1G.xOOQS1G.|1G.|OOQS7+%Y7+%YOOQS1G/Q1G/QO6pQWO1G/QOOQS-E8X-E8XOOQS1G/V1G/VO${QdO1G/rOOQO1G/x1G/xOOQO1G/t1G/tO6uQWO,5:zOOQO-E8^-E8^O7TQXO1G/yOOQS7+%k7+%kO7[QYO'#CtOOQO'#ER'#ERO7gQ`O'#EQOOQO'#EQ'#EQO7rQWO'#EaO7zQdO,5:kOOQS,5:k,5:kO8VQtO'#E^O${QdO'#E^O9WQdO7+%UOOQO7+%U7+%UOOQO1G0e1G0eO9kQpO<<HeO9sQWO,5;^OOQP1G/Z1G/ZOOQS-E8W-E8WO${QdO'#E[O9{QWO,5;ZOOQT1G.v1G.vOOQP<<He<<HeOOQS7+$l7+$lO:TQdO7+%^OOQO7+%e7+%eOOQO,5:l,5:lO3{QdO'#EbO7rQWO,5:{OOQS,5:{,5:{OOQS-E8_-E8_OOQS1G0V1G0VO:[QtO,5:xOOQS-E8[-E8[OOQO<<Hp<<HpOOQPAN>PAN>PO;]QdO,5:vOOQO-E8Y-E8YOOQO<<Hx<<HxOOQO,5:|,5:|OOQO-E8`-E8`OOQS1G0g1G0g",
  stateData: ";o~O#[OS#]QQ~OUYOXYOZTO^VO_VOrXOyWO!]aO!^ZO!j[O!l]O!n^O!q_O!w`O#YRO~OQfOUYOXYOZTO^VO_VOrXOyWO!]aO!^ZO!j[O!l]O!n^O!q_O!w`O#YeO~O#V#gP~P!ZO#]jO~O#YlO~OZnO^qO_qOrsOuoOyrO!PtO!SvO#WuO~O!UwO~P#pOa}O#XzO#YyO~O#Y!OO~O#Y!QO~OQ![Oc!TOg![Oi![Oo!YOr!ZO#X!WO#Y!SO#e!UO~Oc!^O!e!`O!h!aO#Y!]O!U#hP~Oi!fOo!YO#Y!eO~Oi!hO#Y!hO~Oc!^O!e!`O!h!aO#Y!]O~O!Z#hP~P%jOZWX^WX^!XX_WXrWXuWXyWX!PWX!SWX!UWX#WWX~O^!mO~O!Z!nO#V#gX!T#gX~O#V#gX!T#gX~P!ZO#^!qO#_!qO#`!sO~OUYOXYOZTO^VO_VOrXOyWO#YRO~OuoO!UwO~Oa!zO#XzO#YyO~O!T#gP~P!ZOc#RO~Oc#SO~Oq#TO}#UO~OP#WOchXkhX!ZhX!ehX!hhX#YhXbhXQhXghXihXohXrhXuhX!YhX#VhX#XhX#ehXqhX!ThX~Oc!^Ok#XO!e!`O!h!aO#Y!]O!Z#hP~Oc#[O~Oq#`O#Y#]O~Oc!^O!e!`O!h!aO#Y#aO~Ou#eO!c#dO!U#hX!Z#hX~Oc#hO~Ok#XO!Z#jO~O!Z#kO~Oi#lOo!YO~O!U#mO~O!UwO!c#dO~O!UwO!Z#pO~O!Y#rO!Z!Wa#V!Wa!T!Wa~P${O!Z#RX#V#RX!T#RX~P!ZO!Z!nO#V#ga!T#ga~O#^!qO#_!qO#`#xO~OZnO^qO_qOrsOyrO!PtO!SvO#WuO~Ou#Pa!U#Pab#Pa~P.pOq#zO}#{O~OZnO^qO_qOrsOyrO~Ou!Oi!P!Oi!S!Oi!U!Oi#W!Oib!Oi~P/qOu!Qi!P!Qi!S!Qi!U!Qi#W!Qib!Qi~P/qOu!Ri!P!Ri!S!Ri!U!Ri#W!Rib!Ri~P/qO!T#|O~Ob#fP~P(aOb#cP~P${Ob$TOk#XO~O!Z$VO~Ob$WOi$XOp$XO~Oq$ZO#Y#]O~O^!aXb!_X!c!_X~O^$[O~Ob$]O!c#dO~Ou#eO!U#ha!Z#ha~O!c#dOu!da!U!da!Z!dab!da~O!Z$bO~O!T$iO#Y$dO#e$cO~Ok#XOu$kO!Y$mO!Z!Wi#V!Wi!T!Wi~P${O!Z#Ra#V#Ra!T#Ra~P!ZO!Z!nO#V#gi!T#gi~Ob#fX~P#pOb$qO~Ok#XOQ!|Xb!|Xc!|Xg!|Xi!|Xo!|Xr!|Xu!|X#X!|X#Y!|X#e!|X~Ou$sOb#cX~P${Ob$uO~Ok#XOq$vO~Ob$wO~O!c#dOu#Sa!U#Sa!Z#Sa~Ob$yO~P.pOP#WOuhX!UhX~O#e$cOu!tX!U!tX~Ou${O!UwO~O!T%PO#Y$dO#e$cO~Ok#XOQ#QXc#QXg#QXi#QXo#QXr#QXu#QX!Y#QX!Z#QX#V#QX#X#QX#Y#QX#e#QX!T#QX~Ou$kO!Y%SO!Z!Wq#V!Wq!T!Wq~P${Ok#XOq%TO~OuoOb#fa~Ou$sOb#ca~Ob%WO~P${Ok#XOQ#Qac#Qag#Qai#Qao#Qar#Qau#Qa!Y#Qa!Z#Qa#V#Qa#X#Qa#Y#Qa#e#Qa!T#Qa~Ob#Oau#Oa~P${O#[p#]#ek!S#e~",
  goto: "-g#jPPP#kP#nP#w$WP#wP$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+Z+v+yP,o,r,x-RRkQ_bOPdhw!n#tkYOPdhotuvw!n#R#h#tkSOPdhotuvw!n#R#h#tQmTR!tnQ{VR!xqQ!x}Q#Z!XR#y!zq![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%Up![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%UU$f#m$h${R$z$eq!XZ]!T!m#S#U#X#q#{$Q$[$k$l$s$x%Up![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%UQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#y!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ$}$gR%Z$|SgPwQ!phQ#s!nR$n#tZfPhw!n#ta!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$g#m$hR%X${V$e#m$h${Q!rjR#w!rQdOShPwU!ldh#tR#t!nQ$Q#SU$r$Q$x%UQ$x$[R%U$sQ#_!ZR$Y#_Q$t$QR%V$tQpUS!vp$pR$p#}Q$l#qR%R$lQ!ogS#u!o#vR#v!pQ#f!_R$`#fQ$h#mR%O$hQ$|$gR%Y$|_cOPdhw!n#t^UOPdhw!n#tQ!uoQ!}tQ#OuQ#PvQ#}#RR$a#hR$R#SQ!VZQ!d]Q#V!TQ#q!m[$P#S$Q$[$s$x%UQ$S#UQ$U#XS$j#q$lQ$o#{R%Q$kR$O#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$^#dR$_#e",
  nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector . ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
  maxTerm: 117,
  nodeProps: [
    ["isolate", -2, 3, 25, ""],
    ["openedBy", 18, "(", 33, "[", 51, "{"],
    ["closedBy", 19, ")", 34, "]", 52, "}"]
  ],
  propSources: [zA],
  skippedNodes: [0, 3, 88],
  repeatNodeCount: 11,
  tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSp`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#[~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#[~p`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUp`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Up`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUp`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Up`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUp`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Up`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUp`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Up`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!Y[p`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOi~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYyQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYp`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYp`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYg[p`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYg[p`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYp`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYg[p`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYp`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSg[p`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS}Sp`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSc^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOb~n9{UUQkWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWkW!SQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUp`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYp`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYp`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUp`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUp`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[p`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSu^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWkWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VUZQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTkWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSp`#]~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU^QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S_Qp`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Z^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS}SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!PQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!PQp`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[!]Qp`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSr^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSq^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUp`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!cQp`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!UUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!T^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!SQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
  tokenizers: [RA, ZA, EA, 1, 2, 3, 4, new ba("m~RRYZ[z{a~~g~aO#_~~dP!P!Qg~lO#`~~", 28, 106)],
  topRules: { StyleSheet: [0, 4], Styles: [1, 87] },
  specialized: [{ term: 101, get: (n) => FA[n] || -1 }, { term: 59, get: (n) => BA[n] || -1 }, { term: 102, get: (n) => LA[n] || -1 }],
  tokenPrec: 1219
});
let bu = null;
function xu() {
  if (!bu && typeof document == "object" && document.body) {
    let { style: n } = document.body, e = [], t = /* @__PURE__ */ new Set();
    for (let r in n)
      r != "cssText" && r != "cssFloat" && typeof n[r] == "string" && (/[A-Z]/.test(r) && (r = r.replace(/[A-Z]/g, (i) => "-" + i.toLowerCase())), t.has(r) || (e.push(r), t.add(r)));
    bu = e.sort().map((r) => ({ type: "property", label: r, apply: r + ": " }));
  }
  return bu || [];
}
const mm = /* @__PURE__ */ [
  "active",
  "after",
  "any-link",
  "autofill",
  "backdrop",
  "before",
  "checked",
  "cue",
  "default",
  "defined",
  "disabled",
  "empty",
  "enabled",
  "file-selector-button",
  "first",
  "first-child",
  "first-letter",
  "first-line",
  "first-of-type",
  "focus",
  "focus-visible",
  "focus-within",
  "fullscreen",
  "has",
  "host",
  "host-context",
  "hover",
  "in-range",
  "indeterminate",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "marker",
  "modal",
  "not",
  "nth-child",
  "nth-last-child",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "part",
  "placeholder",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "selection",
  "slotted",
  "target",
  "target-text",
  "valid",
  "visited",
  "where"
].map((n) => ({ type: "class", label: n })), gm = /* @__PURE__ */ [
  "above",
  "absolute",
  "activeborder",
  "additive",
  "activecaption",
  "after-white-space",
  "ahead",
  "alias",
  "all",
  "all-scroll",
  "alphabetic",
  "alternate",
  "always",
  "antialiased",
  "appworkspace",
  "asterisks",
  "attr",
  "auto",
  "auto-flow",
  "avoid",
  "avoid-column",
  "avoid-page",
  "avoid-region",
  "axis-pan",
  "background",
  "backwards",
  "baseline",
  "below",
  "bidi-override",
  "blink",
  "block",
  "block-axis",
  "bold",
  "bolder",
  "border",
  "border-box",
  "both",
  "bottom",
  "break",
  "break-all",
  "break-word",
  "bullets",
  "button",
  "button-bevel",
  "buttonface",
  "buttonhighlight",
  "buttonshadow",
  "buttontext",
  "calc",
  "capitalize",
  "caps-lock-indicator",
  "caption",
  "captiontext",
  "caret",
  "cell",
  "center",
  "checkbox",
  "circle",
  "cjk-decimal",
  "clear",
  "clip",
  "close-quote",
  "col-resize",
  "collapse",
  "color",
  "color-burn",
  "color-dodge",
  "column",
  "column-reverse",
  "compact",
  "condensed",
  "contain",
  "content",
  "contents",
  "content-box",
  "context-menu",
  "continuous",
  "copy",
  "counter",
  "counters",
  "cover",
  "crop",
  "cross",
  "crosshair",
  "currentcolor",
  "cursive",
  "cyclic",
  "darken",
  "dashed",
  "decimal",
  "decimal-leading-zero",
  "default",
  "default-button",
  "dense",
  "destination-atop",
  "destination-in",
  "destination-out",
  "destination-over",
  "difference",
  "disc",
  "discard",
  "disclosure-closed",
  "disclosure-open",
  "document",
  "dot-dash",
  "dot-dot-dash",
  "dotted",
  "double",
  "down",
  "e-resize",
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "element",
  "ellipse",
  "ellipsis",
  "embed",
  "end",
  "ethiopic-abegede-gez",
  "ethiopic-halehame-aa-er",
  "ethiopic-halehame-gez",
  "ew-resize",
  "exclusion",
  "expanded",
  "extends",
  "extra-condensed",
  "extra-expanded",
  "fantasy",
  "fast",
  "fill",
  "fill-box",
  "fixed",
  "flat",
  "flex",
  "flex-end",
  "flex-start",
  "footnotes",
  "forwards",
  "from",
  "geometricPrecision",
  "graytext",
  "grid",
  "groove",
  "hand",
  "hard-light",
  "help",
  "hidden",
  "hide",
  "higher",
  "highlight",
  "highlighttext",
  "horizontal",
  "hsl",
  "hsla",
  "hue",
  "icon",
  "ignore",
  "inactiveborder",
  "inactivecaption",
  "inactivecaptiontext",
  "infinite",
  "infobackground",
  "infotext",
  "inherit",
  "initial",
  "inline",
  "inline-axis",
  "inline-block",
  "inline-flex",
  "inline-grid",
  "inline-table",
  "inset",
  "inside",
  "intrinsic",
  "invert",
  "italic",
  "justify",
  "keep-all",
  "landscape",
  "large",
  "larger",
  "left",
  "level",
  "lighter",
  "lighten",
  "line-through",
  "linear",
  "linear-gradient",
  "lines",
  "list-item",
  "listbox",
  "listitem",
  "local",
  "logical",
  "loud",
  "lower",
  "lower-hexadecimal",
  "lower-latin",
  "lower-norwegian",
  "lowercase",
  "ltr",
  "luminosity",
  "manipulation",
  "match",
  "matrix",
  "matrix3d",
  "medium",
  "menu",
  "menutext",
  "message-box",
  "middle",
  "min-intrinsic",
  "mix",
  "monospace",
  "move",
  "multiple",
  "multiple_mask_images",
  "multiply",
  "n-resize",
  "narrower",
  "ne-resize",
  "nesw-resize",
  "no-close-quote",
  "no-drop",
  "no-open-quote",
  "no-repeat",
  "none",
  "normal",
  "not-allowed",
  "nowrap",
  "ns-resize",
  "numbers",
  "numeric",
  "nw-resize",
  "nwse-resize",
  "oblique",
  "opacity",
  "open-quote",
  "optimizeLegibility",
  "optimizeSpeed",
  "outset",
  "outside",
  "outside-shape",
  "overlay",
  "overline",
  "padding",
  "padding-box",
  "painted",
  "page",
  "paused",
  "perspective",
  "pinch-zoom",
  "plus-darker",
  "plus-lighter",
  "pointer",
  "polygon",
  "portrait",
  "pre",
  "pre-line",
  "pre-wrap",
  "preserve-3d",
  "progress",
  "push-button",
  "radial-gradient",
  "radio",
  "read-only",
  "read-write",
  "read-write-plaintext-only",
  "rectangle",
  "region",
  "relative",
  "repeat",
  "repeating-linear-gradient",
  "repeating-radial-gradient",
  "repeat-x",
  "repeat-y",
  "reset",
  "reverse",
  "rgb",
  "rgba",
  "ridge",
  "right",
  "rotate",
  "rotate3d",
  "rotateX",
  "rotateY",
  "rotateZ",
  "round",
  "row",
  "row-resize",
  "row-reverse",
  "rtl",
  "run-in",
  "running",
  "s-resize",
  "sans-serif",
  "saturation",
  "scale",
  "scale3d",
  "scaleX",
  "scaleY",
  "scaleZ",
  "screen",
  "scroll",
  "scrollbar",
  "scroll-position",
  "se-resize",
  "self-start",
  "self-end",
  "semi-condensed",
  "semi-expanded",
  "separate",
  "serif",
  "show",
  "single",
  "skew",
  "skewX",
  "skewY",
  "skip-white-space",
  "slide",
  "slider-horizontal",
  "slider-vertical",
  "sliderthumb-horizontal",
  "sliderthumb-vertical",
  "slow",
  "small",
  "small-caps",
  "small-caption",
  "smaller",
  "soft-light",
  "solid",
  "source-atop",
  "source-in",
  "source-out",
  "source-over",
  "space",
  "space-around",
  "space-between",
  "space-evenly",
  "spell-out",
  "square",
  "start",
  "static",
  "status-bar",
  "stretch",
  "stroke",
  "stroke-box",
  "sub",
  "subpixel-antialiased",
  "svg_masks",
  "super",
  "sw-resize",
  "symbolic",
  "symbols",
  "system-ui",
  "table",
  "table-caption",
  "table-cell",
  "table-column",
  "table-column-group",
  "table-footer-group",
  "table-header-group",
  "table-row",
  "table-row-group",
  "text",
  "text-bottom",
  "text-top",
  "textarea",
  "textfield",
  "thick",
  "thin",
  "threeddarkshadow",
  "threedface",
  "threedhighlight",
  "threedlightshadow",
  "threedshadow",
  "to",
  "top",
  "transform",
  "translate",
  "translate3d",
  "translateX",
  "translateY",
  "translateZ",
  "transparent",
  "ultra-condensed",
  "ultra-expanded",
  "underline",
  "unidirectional-pan",
  "unset",
  "up",
  "upper-latin",
  "uppercase",
  "url",
  "var",
  "vertical",
  "vertical-text",
  "view-box",
  "visible",
  "visibleFill",
  "visiblePainted",
  "visibleStroke",
  "visual",
  "w-resize",
  "wait",
  "wave",
  "wider",
  "window",
  "windowframe",
  "windowtext",
  "words",
  "wrap",
  "wrap-reverse",
  "x-large",
  "x-small",
  "xor",
  "xx-large",
  "xx-small"
].map((n) => ({ type: "keyword", label: n })).concat(/* @__PURE__ */ [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "grey",
  "green",
  "greenyellow",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
].map((n) => ({ type: "constant", label: n }))), XA = /* @__PURE__ */ [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "b",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "figcaption",
  "figure",
  "footer",
  "form",
  "header",
  "hgroup",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "meter",
  "nav",
  "ol",
  "output",
  "p",
  "pre",
  "ruby",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "tr",
  "u",
  "ul"
].map((n) => ({ type: "type", label: n })), IA = /* @__PURE__ */ [
  "@charset",
  "@color-profile",
  "@container",
  "@counter-style",
  "@font-face",
  "@font-feature-values",
  "@font-palette-values",
  "@import",
  "@keyframes",
  "@layer",
  "@media",
  "@namespace",
  "@page",
  "@position-try",
  "@property",
  "@scope",
  "@starting-style",
  "@supports",
  "@view-transition"
].map((n) => ({ type: "keyword", label: n })), qn = /^(\w[\w-]*|-\w[\w-]*|)$/, NA = /^-(-[\w-]*)?$/;
function VA(n, e) {
  var t;
  if ((n.name == "(" || n.type.isError) && (n = n.parent || n), n.name != "ArgList")
    return !1;
  let r = (t = n.parent) === null || t === void 0 ? void 0 : t.firstChild;
  return (r == null ? void 0 : r.name) != "Callee" ? !1 : e.sliceString(r.from, r.to) == "var";
}
const Om = /* @__PURE__ */ new fO(), jA = ["Declaration"];
function _A(n) {
  for (let e = n; ; ) {
    if (e.type.isTop)
      return e;
    if (!(e = e.parent))
      return n;
  }
}
function r5(n, e, t) {
  if (e.to - e.from > 4096) {
    let r = Om.get(e);
    if (r)
      return r;
    let i = [], s = /* @__PURE__ */ new Set(), l = e.cursor(Fe.IncludeAnonymous);
    if (l.firstChild())
      do
        for (let a of r5(n, l.node, t))
          s.has(a.label) || (s.add(a.label), i.push(a));
      while (l.nextSibling());
    return Om.set(e, i), i;
  } else {
    let r = [], i = /* @__PURE__ */ new Set();
    return e.cursor().iterate((s) => {
      var l;
      if (t(s) && s.matchContext(jA) && ((l = s.node.nextSibling) === null || l === void 0 ? void 0 : l.name) == ":") {
        let a = n.sliceString(s.from, s.to);
        i.has(a) || (i.add(a), r.push({ label: a, type: "variable" }));
      }
    }), r;
  }
}
const UA = (n) => (e) => {
  let { state: t, pos: r } = e, i = ot(t).resolveInner(r, -1), s = i.type.isError && i.from == i.to - 1 && t.doc.sliceString(i.from, i.to) == "-";
  if (i.name == "PropertyName" || (s || i.name == "TagName") && /^(Block|Styles)$/.test(i.resolve(i.to).name))
    return { from: i.from, options: xu(), validFor: qn };
  if (i.name == "ValueName")
    return { from: i.from, options: gm, validFor: qn };
  if (i.name == "PseudoClassName")
    return { from: i.from, options: mm, validFor: qn };
  if (n(i) || (e.explicit || s) && VA(i, t.doc))
    return {
      from: n(i) || s ? i.from : r,
      options: r5(t.doc, _A(i), n),
      validFor: NA
    };
  if (i.name == "TagName") {
    for (let { parent: o } = i; o; o = o.parent)
      if (o.name == "Block")
        return { from: i.from, options: xu(), validFor: qn };
    return { from: i.from, options: XA, validFor: qn };
  }
  if (i.name == "AtKeyword")
    return { from: i.from, options: IA, validFor: qn };
  if (!e.explicit)
    return null;
  let l = i.resolve(r), a = l.childBefore(r);
  return a && a.name == ":" && l.name == "PseudoClassSelector" ? { from: r, options: mm, validFor: qn } : a && a.name == ":" && l.name == "Declaration" || l.name == "ArgList" ? { from: r, options: gm, validFor: qn } : l.name == "Block" || l.name == "Styles" ? { from: r, options: xu(), validFor: qn } : null;
}, WA = /* @__PURE__ */ UA((n) => n.name == "VariableName"), wa = /* @__PURE__ */ gi.define({
  name: "css",
  parser: /* @__PURE__ */ qA.configure({
    props: [
      /* @__PURE__ */ Us.add({
        Declaration: /* @__PURE__ */ Nl()
      }),
      /* @__PURE__ */ Ws.add({
        "Block KeyframeList": q4
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*\}$/,
    wordChars: "-"
  }
});
function YA() {
  return new Ps(wa, wa.data.of({ autocomplete: WA }));
}
const GA = 314, HA = 315, ym = 1, KA = 2, JA = 3, e$ = 4, t$ = 316, n$ = 318, r$ = 319, i$ = 5, s$ = 6, l$ = 0, _0 = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], i5 = 125, a$ = 59, U0 = 47, o$ = 42, u$ = 43, h$ = 45, c$ = 60, f$ = 44, d$ = 63, p$ = 46, m$ = 91, g$ = new I2({
  start: !1,
  shift(n, e) {
    return e == i$ || e == s$ || e == n$ ? n : e == r$;
  },
  strict: !1
}), O$ = new sn((n, e) => {
  let { next: t } = n;
  (t == i5 || t == -1 || e.context) && n.acceptToken(t$);
}, { contextual: !0, fallback: !0 }), y$ = new sn((n, e) => {
  let { next: t } = n, r;
  _0.indexOf(t) > -1 || t == U0 && ((r = n.peek(1)) == U0 || r == o$) || t != i5 && t != a$ && t != -1 && !e.context && n.acceptToken(GA);
}, { contextual: !0 }), b$ = new sn((n, e) => {
  n.next == m$ && !e.context && n.acceptToken(HA);
}, { contextual: !0 }), x$ = new sn((n, e) => {
  let { next: t } = n;
  if (t == u$ || t == h$) {
    if (n.advance(), t == n.next) {
      n.advance();
      let r = !e.context && e.canShift(ym);
      n.acceptToken(r ? ym : KA);
    }
  } else t == d$ && n.peek(1) == p$ && (n.advance(), n.advance(), (n.next < 48 || n.next > 57) && n.acceptToken(JA));
}, { contextual: !0 });
function vu(n, e) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n == 95 || n >= 192 || !e && n >= 48 && n <= 57;
}
const v$ = new sn((n, e) => {
  if (n.next != c$ || !e.dialectEnabled(l$) || (n.advance(), n.next == U0)) return;
  let t = 0;
  for (; _0.indexOf(n.next) > -1; )
    n.advance(), t++;
  if (vu(n.next, !0)) {
    for (n.advance(), t++; vu(n.next, !1); )
      n.advance(), t++;
    for (; _0.indexOf(n.next) > -1; )
      n.advance(), t++;
    if (n.next == f$) return;
    for (let r = 0; ; r++) {
      if (r == 7) {
        if (!vu(n.next, !0)) return;
        break;
      }
      if (n.next != "extends".charCodeAt(r)) break;
      n.advance(), t++;
    }
  }
  n.acceptToken(e$, -t);
}), w$ = $i({
  "get set async static": $.modifier,
  "for while do if else switch try catch finally return throw break continue default case": $.controlKeyword,
  "in of await yield void typeof delete instanceof": $.operatorKeyword,
  "let var const using function class extends": $.definitionKeyword,
  "import export from": $.moduleKeyword,
  "with debugger as new": $.keyword,
  TemplateString: $.special($.string),
  super: $.atom,
  BooleanLiteral: $.bool,
  this: $.self,
  null: $.null,
  Star: $.modifier,
  VariableName: $.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": $.function($.variableName),
  VariableDefinition: $.definition($.variableName),
  Label: $.labelName,
  PropertyName: $.propertyName,
  PrivatePropertyName: $.special($.propertyName),
  "CallExpression/MemberExpression/PropertyName": $.function($.propertyName),
  "FunctionDeclaration/VariableDefinition": $.function($.definition($.variableName)),
  "ClassDeclaration/VariableDefinition": $.definition($.className),
  "NewExpression/VariableName": $.className,
  PropertyDefinition: $.definition($.propertyName),
  PrivatePropertyDefinition: $.definition($.special($.propertyName)),
  UpdateOp: $.updateOperator,
  "LineComment Hashbang": $.lineComment,
  BlockComment: $.blockComment,
  Number: $.number,
  String: $.string,
  Escape: $.escape,
  ArithOp: $.arithmeticOperator,
  LogicOp: $.logicOperator,
  BitOp: $.bitwiseOperator,
  CompareOp: $.compareOperator,
  RegExp: $.regexp,
  Equals: $.definitionOperator,
  Arrow: $.function($.punctuation),
  ": Spread": $.punctuation,
  "( )": $.paren,
  "[ ]": $.squareBracket,
  "{ }": $.brace,
  "InterpolationStart InterpolationEnd": $.special($.brace),
  ".": $.derefOperator,
  ", ;": $.separator,
  "@": $.meta,
  TypeName: $.typeName,
  TypeDefinition: $.definition($.typeName),
  "type enum interface implements namespace module declare": $.definitionKeyword,
  "abstract global Privacy readonly override": $.modifier,
  "is keyof unique infer asserts": $.operatorKeyword,
  JSXAttributeValue: $.attributeValue,
  JSXText: $.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": $.angleBracket,
  "JSXIdentifier JSXNameSpacedName": $.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": $.attributeName,
  "JSXBuiltin/JSXIdentifier": $.standard($.tagName)
}), k$ = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, const: 52, extends: 56, this: 60, true: 68, false: 68, null: 80, void: 84, typeof: 88, super: 104, new: 138, delete: 150, yield: 159, await: 163, class: 168, public: 231, private: 231, protected: 231, readonly: 233, instanceof: 252, satisfies: 255, in: 256, import: 290, keyof: 347, unique: 351, infer: 357, asserts: 393, is: 395, abstract: 415, implements: 417, type: 419, let: 422, var: 424, using: 427, interface: 433, enum: 437, namespace: 443, module: 445, declare: 449, global: 453, for: 472, of: 481, while: 484, with: 488, do: 492, if: 496, else: 498, switch: 502, case: 508, try: 514, catch: 518, finally: 522, return: 526, throw: 530, break: 534, continue: 538, debugger: 542 }, S$ = { __proto__: null, async: 125, get: 127, set: 129, declare: 191, public: 193, private: 193, protected: 193, static: 195, abstract: 197, override: 199, readonly: 205, accessor: 207, new: 399 }, Q$ = { __proto__: null, "<": 189 }, P$ = xi.deserialize({
  version: 14,
  states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#D_O.QQlO'#DeO.bQlO'#DpO%[QlO'#DxO0fQlO'#EQOOQ!0Lf'#EY'#EYO1PQ`O'#EVOOQO'#En'#EnOOQO'#Ij'#IjO1XQ`O'#GrO1dQ`O'#EmO1iQ`O'#EmO3hQ!0MxO'#JpO6[Q!0MxO'#JqO6uQ`O'#F[O6zQ,UO'#FsOOQ!0Lf'#Fe'#FeO7VO7dO'#FeO7eQMhO'#F{O9UQ`O'#FzOOQ!0Lf'#Jq'#JqOOQ!0Lb'#Jp'#JpO9ZQ`O'#GvOOQ['#K]'#K]O9fQ`O'#IWO9kQ!0LrO'#IXOOQ['#J^'#J^OOQ['#I]'#I]Q`QlOOQ`QlOOO9sQ!L^O'#DtO9zQlO'#D|O:RQlO'#EOO9aQ`O'#GrO:YQMhO'#CoO:hQ`O'#ElO:sQ`O'#EwO:xQMhO'#FdO;gQ`O'#GrOOQO'#K^'#K^O;lQ`O'#K^O;zQ`O'#GzO;zQ`O'#G{O;zQ`O'#G}O9aQ`O'#HQO<qQ`O'#HTO>YQ`O'#CeO>jQ`O'#HaO>rQ`O'#HgO>rQ`O'#HiO`QlO'#HkO>rQ`O'#HmO>rQ`O'#HpO>wQ`O'#HvO>|Q!0LsO'#H|O%[QlO'#IOO?XQ!0LsO'#IQO?dQ!0LsO'#ISO9kQ!0LrO'#IUO?oQ!0MxO'#CiO@qQpO'#DjQOQ`OOO%[QlO'#EOOAXQ`O'#ERO:YQMhO'#ElOAdQ`O'#ElOAoQ!bO'#FdOOQ['#Cg'#CgOOQ!0Lb'#Do'#DoOOQ!0Lb'#Jt'#JtO%[QlO'#JtOOQO'#Jw'#JwOOQO'#If'#IfOBoQpO'#EeOOQ!0Lb'#Ed'#EdOOQ!0Lb'#J{'#J{OCkQ!0MSO'#EeOCuQpO'#EUOOQO'#Jv'#JvODZQpO'#JwOEhQpO'#EUOCuQpO'#EePEuO&2DjO'#CbPOOO)CD{)CD{OOOO'#I^'#I^OFQO#tO,59UOOQ!0Lh,59U,59UOOOO'#I_'#I_OF`O&jO,59UOFnQ!L^O'#DaOOOO'#Ia'#IaOFuO#@ItO,59yOOQ!0Lf,59y,59yOGTQlO'#IbOGhQ`O'#JrOIgQ!fO'#JrO+}QlO'#JrOInQ`O,5:POJUQ`O'#EnOJcQ`O'#KROJnQ`O'#KQOJnQ`O'#KQOJvQ`O,5;[OJ{Q`O'#KPOOQ!0Ln,5:[,5:[OKSQlO,5:[OMQQ!0MxO,5:dOMqQ`O,5:lON[Q!0LrO'#KOONcQ`O'#J}O9ZQ`O'#J}ONwQ`O'#J}O! PQ`O,5;ZO! UQ`O'#J}O!#ZQ!fO'#JqOOQ!0Lh'#Ci'#CiO%[QlO'#EQO!#yQ!fO,5:qOOQS'#Jx'#JxOOQO-E<h-E<hO9aQ`O,5=^O!$aQ`O,5=^O!$fQlO,5;XO!&iQMhO'#EiO!(SQ`O,5;XO!(XQlO'#DwO!(cQpO,5;bO!(kQpO,5;bO%[QlO,5;bOOQ['#FS'#FSOOQ['#FU'#FUO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cOOQ['#FY'#FYO!(yQlO,5;sOOQ!0Lf,5;x,5;xOOQ!0Lf,5;y,5;yOOQ!0Lf,5;{,5;{O%[QlO'#InO!*|Q!0LrO,5<hO%[QlO,5;cO!&iQMhO,5;cO!+kQMhO,5;cO!-]QMhO'#E[O%[QlO,5;vOOQ!0Lf,5;z,5;zO!-dQ,UO'#FiO!.aQ,UO'#KVO!-{Q,UO'#KVO!.hQ,UO'#KVOOQO'#KV'#KVO!.|Q,UO,5<ROOOW,5<_,5<_O!/_QlO'#FuOOOW'#Im'#ImO7VO7dO,5<PO!/fQ,UO'#FwOOQ!0Lf,5<P,5<PO!0VQ$IUO'#CwOOQ!0Lh'#C{'#C{O!0jO#@ItO'#DPO!1WQMjO,5<dO!1_Q`O,5<gO!2zQ(CWO'#GWO!3XQ`O'#GXO!3^Q`O'#GXO!4|Q(CWO'#G]O!6RQpO'#GaOOQO'#Gm'#GmO!+rQMhO'#GlOOQO'#Go'#GoO!+rQMhO'#GnO!6tQ$IUO'#JjOOQ!0Lh'#Jj'#JjO!7OQ`O'#JiO!7^Q`O'#JhO!7fQ`O'#CuOOQ!0Lh'#Cy'#CyO!7qQ`O'#C{OOQ!0Lh'#DT'#DTOOQ!0Lh'#DV'#DVO1SQ`O'#DXO!+rQMhO'#GOO!+rQMhO'#GQO!7vQ`O'#GSO!7{Q`O'#GTO!3^Q`O'#GZO!+rQMhO'#G`O;zQ`O'#JiO!8QQ`O'#EoO!8oQ`O,5<fOOQ!0Lb'#Cr'#CrO!8wQ`O'#EpO!9qQpO'#EqOOQ!0Lb'#KP'#KPO!9xQ!0LrO'#K_O9kQ!0LrO,5=bO`QlO,5>rOOQ['#Jf'#JfOOQ[,5>s,5>sOOQ[-E<Z-E<ZO!;wQ!0MxO,5:`O!9lQpO,5:^O!>bQ!0MxO,5:hO%[QlO,5:hO!@xQ!0MxO,5:jOOQO,5@x,5@xO!AiQMhO,5=^O!AwQ!0LrO'#JgO9UQ`O'#JgO!BYQ!0LrO,59ZO!BeQpO,59ZO!BmQMhO,59ZO:YQMhO,59ZO!BxQ`O,5;XO!CQQ`O'#H`O!CfQ`O'#KbO%[QlO,5;|O!9lQpO,5<OO!CnQ`O,5=yO!CsQ`O,5=yO!CxQ`O,5=yO9kQ!0LrO,5=yO;zQ`O,5=iOOQO'#Cw'#CwO!DWQpO,5=fO!D`QMhO,5=gO!DkQ`O,5=iO!DpQ!bO,5=lO!DxQ`O'#K^O>wQ`O'#HVO9aQ`O'#HXO!D}Q`O'#HXO:YQMhO'#HZO!ESQ`O'#HZOOQ[,5=o,5=oO!EXQ`O'#H[O!EjQ`O'#CoO!EoQ`O,59PO!EyQ`O,59PO!HOQlO,59POOQ[,59P,59PO!H`Q!0LrO,59PO%[QlO,59PO!JkQlO'#HcOOQ['#Hd'#HdOOQ['#He'#HeO`QlO,5={O!KRQ`O,5={O`QlO,5>RO`QlO,5>TO!KWQ`O,5>VO`QlO,5>XO!K]Q`O,5>[O!KbQlO,5>bOOQ[,5>h,5>hO%[QlO,5>hO9kQ!0LrO,5>jOOQ[,5>l,5>lO# lQ`O,5>lOOQ[,5>n,5>nO# lQ`O,5>nOOQ[,5>p,5>pO#!YQpO'#D]O%[QlO'#JtO#!{QpO'#JtO##VQpO'#DkO##hQpO'#DkO#%yQlO'#DkO#&QQ`O'#JsO#&YQ`O,5:UO#&_Q`O'#ErO#&mQ`O'#KSO#&uQ`O,5;]O#&zQpO'#DkO#'XQpO'#ETOOQ!0Lf,5:m,5:mO%[QlO,5:mO#'`Q`O,5:mO>wQ`O,5;WO!BeQpO,5;WO!BmQMhO,5;WO:YQMhO,5;WO#'hQ`O,5@`O#'mQ07dO,5:qOOQO-E<d-E<dO#(sQ!0MSO,5;POCuQpO,5:pO#(}QpO,5:pOCuQpO,5;PO!BYQ!0LrO,5:pOOQ!0Lb'#Eh'#EhOOQO,5;P,5;PO%[QlO,5;PO#)[Q!0LrO,5;PO#)gQ!0LrO,5;PO!BeQpO,5:pOOQO,5;V,5;VO#)uQ!0LrO,5;PPOOO'#I['#I[P#*ZO&2DjO,58|POOO,58|,58|OOOO-E<[-E<[OOQ!0Lh1G.p1G.pOOOO-E<]-E<]OOOO,59{,59{O#*fQ!bO,59{OOOO-E<_-E<_OOQ!0Lf1G/e1G/eO#*kQ!fO,5>|O+}QlO,5>|OOQO,5?S,5?SO#*uQlO'#IbOOQO-E<`-E<`O#+SQ`O,5@^O#+[Q!fO,5@^O#+cQ`O,5@lOOQ!0Lf1G/k1G/kO%[QlO,5@mO#+kQ`O'#IhOOQO-E<f-E<fO#+cQ`O,5@lOOQ!0Lb1G0v1G0vOOQ!0Ln1G/v1G/vOOQ!0Ln1G0W1G0WO%[QlO,5@jO#,PQ!0LrO,5@jO#,bQ!0LrO,5@jO#,iQ`O,5@iO9ZQ`O,5@iO#,qQ`O,5@iO#-PQ`O'#IkO#,iQ`O,5@iOOQ!0Lb1G0u1G0uO!(cQpO,5:sO!(nQpO,5:sOOQS,5:u,5:uO#-qQdO,5:uO#-yQMhO1G2xO9aQ`O1G2xOOQ!0Lf1G0s1G0sO#.XQ!0MxO1G0sO#/^Q!0MvO,5;TOOQ!0Lh'#GV'#GVO#/zQ!0MzO'#JjO!$fQlO1G0sO#2VQ!fO'#JuO%[QlO'#JuO#2aQ`O,5:cOOQ!0Lh'#D]'#D]OOQ!0Lf1G0|1G0|O%[QlO1G0|OOQ!0Lf1G1e1G1eO#2fQ`O1G0|O#4zQ!0MxO1G0}O#5RQ!0MxO1G0}O#7iQ!0MxO1G0}O#7pQ!0MxO1G0}O#:WQ!0MxO1G0}O#<nQ!0MxO1G0}O#<uQ!0MxO1G0}O#<|Q!0MxO1G0}O#?dQ!0MxO1G0}O#?kQ!0MxO1G0}O#AxQ?MtO'#CiO#CsQ?MtO1G1_O#CzQ?MtO'#JqO#D_Q!0MxO,5?YOOQ!0Lb-E<l-E<lO#FlQ!0MxO1G0}O#GiQ!0MzO1G0}OOQ!0Lf1G0}1G0}O#HlQMjO'#JzO#HvQ`O,5:vO#H{Q!0MxO1G1bO#IoQ,UO,5<VO#IwQ,UO,5<WO#JPQ,UO'#FnO#JhQ`O'#FmOOQO'#KW'#KWOOQO'#Il'#IlO#JmQ,UO1G1mOOQ!0Lf1G1m1G1mOOOW1G1x1G1xO#KOQ?MtO'#JpO#KYQ`O,5<aO!(yQlO,5<aOOOW-E<k-E<kOOQ!0Lf1G1k1G1kO#K_QpO'#KVOOQ!0Lf,5<c,5<cO#KgQpO,5<cO#KlQMhO'#DROOOO'#I`'#I`O#KsO#@ItO,59kOOQ!0Lh,59k,59kO%[QlO1G2OO!7{Q`O'#IpO#LOQ`O,5<yOOQ!0Lh,5<v,5<vO!+rQMhO'#IsO#LlQMjO,5=WO!+rQMhO'#IuO#M_QMjO,5=YO!&iQMhO,5=[OOQO1G2R1G2RO#MiQ!dO'#CrO#M|Q(CWO'#EpO$ RQpO'#GaO$ iQ!dO,5<rO$ pQ`O'#KYO9ZQ`O'#KYO$!OQ`O,5<tO!+rQMhO,5<sO$!TQ`O'#GYO$!fQ`O,5<sO$!kQ!dO'#GVO$!xQ!dO'#KZO$#SQ`O'#KZO!&iQMhO'#KZO$#XQ`O,5<wO$#^QlO'#JtO$#hQpO'#GbO##hQpO'#GbO$#yQ`O'#GfO!3^Q`O'#GjO$$OQ!0LrO'#IrO$$ZQpO,5<{OOQ!0Lp,5<{,5<{O$$bQpO'#GbO$$oQpO'#GcO$%QQpO'#GcO$%VQMjO,5=WO$%gQMjO,5=YOOQ!0Lh,5=],5=]O!+rQMhO,5@TO!+rQMhO,5@TO$%wQ`O'#IwO$&VQ`O,5@SO$&_Q`O,59aOOQ!0Lh,59g,59gO$'UQ$IYO,59sOOQ!0Lh'#Jn'#JnO$'wQMjO,5<jO$(jQMjO,5<lO@iQ`O,5<nOOQ!0Lh,5<o,5<oO$(tQ`O,5<uO$(yQMjO,5<zO$)ZQ`O,5@TO$)iQ`O'#J}O!$fQlO1G2QO$)nQ`O1G2QO9ZQ`O'#KQO9ZQ`O'#ErO%[QlO'#ErO9ZQ`O'#IyO$)sQ!0LrO,5@yOOQ[1G2|1G2|OOQ[1G4^1G4^OOQ!0Lf1G/z1G/zOOQ!0Lf1G/x1G/xO$+uQ!0MxO1G0SOOQ[1G2x1G2xO!&iQMhO1G2xO%[QlO1G2xO#-|Q`O1G2xO$-yQMhO'#EiOOQ!0Lb,5@R,5@RO$.WQ!0LrO,5@ROOQ[1G.u1G.uO!BYQ!0LrO1G.uO!BeQpO1G.uO!BmQMhO1G.uO$.iQ`O1G0sO$.nQ`O'#CiO$.yQ`O'#KcO$/RQ`O,5=zO$/WQ`O'#KcO$/]Q`O'#KcO$/kQ`O'#JPO$/yQ`O,5@|O$0RQ!fO1G1hOOQ!0Lf1G1j1G1jO9aQ`O1G3eO@iQ`O1G3eO$0YQ`O1G3eO$0_Q`O1G3eOOQ[1G3e1G3eO!DkQ`O1G3TO!&iQMhO1G3QO$0dQ`O1G3QOOQ[1G3R1G3RO!&iQMhO1G3RO$0iQ`O1G3RO$0qQpO'#HPOOQ[1G3T1G3TO!5|QpO'#I{O!DpQ!bO1G3WOOQ[1G3W1G3WOOQ[,5=q,5=qO$0yQMhO,5=sO9aQ`O,5=sO$#yQ`O,5=uO9UQ`O,5=uO!BeQpO,5=uO!BmQMhO,5=uO:YQMhO,5=uO$1XQ`O'#KaO$1dQ`O,5=vOOQ[1G.k1G.kO$1iQ!0LrO1G.kO@iQ`O1G.kO$1tQ`O1G.kO9kQ!0LrO1G.kO$3|Q!fO,5AOO$4ZQ`O,5AOO9ZQ`O,5AOO$4fQlO,5=}O$4mQ`O,5=}OOQ[1G3g1G3gO`QlO1G3gOOQ[1G3m1G3mOOQ[1G3o1G3oO>rQ`O1G3qO$4rQlO1G3sO$8vQlO'#HrOOQ[1G3v1G3vO$9TQ`O'#HxO>wQ`O'#HzOOQ[1G3|1G3|O$9]QlO1G3|O9kQ!0LrO1G4SOOQ[1G4U1G4UOOQ!0Lb'#G^'#G^O9kQ!0LrO1G4WO9kQ!0LrO1G4YO$=dQ`O,5@`O!(yQlO,5;^O9ZQ`O,5;^O>wQ`O,5:VO!(yQlO,5:VO!BeQpO,5:VO$=iQ?MtO,5:VOOQO,5;^,5;^O$=sQpO'#IcO$>ZQ`O,5@_OOQ!0Lf1G/p1G/pO$>cQpO'#IiO$>mQ`O,5@nOOQ!0Lb1G0w1G0wO##hQpO,5:VOOQO'#Ie'#IeO$>uQpO,5:oOOQ!0Ln,5:o,5:oO#'cQ`O1G0XOOQ!0Lf1G0X1G0XO%[QlO1G0XOOQ!0Lf1G0r1G0rO>wQ`O1G0rO!BeQpO1G0rO!BmQMhO1G0rOOQ!0Lb1G5z1G5zO!BYQ!0LrO1G0[OOQO1G0k1G0kO%[QlO1G0kO$>|Q!0LrO1G0kO$?XQ!0LrO1G0kO!BeQpO1G0[OCuQpO1G0[O$?gQ!0LrO1G0kOOQO1G0[1G0[O$?{Q!0MxO1G0kPOOO-E<Y-E<YPOOO1G.h1G.hOOOO1G/g1G/gO$@VQ!bO,5<hO$@_Q!fO1G4hOOQO1G4n1G4nO%[QlO,5>|O$@iQ`O1G5xO$@qQ`O1G6WO$@yQ!fO1G6XO9ZQ`O,5?SO$ATQ!0MxO1G6UO%[QlO1G6UO$AeQ!0LrO1G6UO$AvQ`O1G6TO$AvQ`O1G6TO9ZQ`O1G6TO$BOQ`O,5?VO9ZQ`O,5?VOOQO,5?V,5?VO$BdQ`O,5?VO$)iQ`O,5?VOOQO-E<i-E<iOOQS1G0_1G0_OOQS1G0a1G0aO#-tQ`O1G0aOOQ[7+(d7+(dO!&iQMhO7+(dO%[QlO7+(dO$BrQ`O7+(dO$B}QMhO7+(dO$C]Q!0MzO,5=WO$EhQ!0MzO,5=YO$GsQ!0MzO,5=WO$JUQ!0MzO,5=YO$LgQ!0MzO,59sO$NlQ!0MzO,5<jO%!wQ!0MzO,5<lO%%SQ!0MzO,5<zOOQ!0Lf7+&_7+&_O%'eQ!0MxO7+&_O%(XQlO'#IdO%(fQ`O,5@aO%(nQ!fO,5@aOOQ!0Lf1G/}1G/}O%(xQ`O7+&hOOQ!0Lf7+&h7+&hO%(}Q?MtO,5:dO%[QlO7+&yO%)XQ?MtO,5:`O%)fQ?MtO,5:hO%)pQ?MtO,5:jO%)zQMhO'#IgO%*UQ`O,5@fOOQ!0Lh1G0b1G0bOOQO1G1q1G1qOOQO1G1r1G1rO%*^Q!jO,5<YO!(yQlO,5<XOOQO-E<j-E<jOOQ!0Lf7+'X7+'XOOOW7+'d7+'dOOOW1G1{1G1{O%*iQ`O1G1{OOQ!0Lf1G1}1G1}OOOO,59m,59mO%*nQ!dO,59mOOOO-E<^-E<^OOQ!0Lh1G/V1G/VO%*uQ!0MxO7+'jOOQ!0Lh,5?[,5?[O%+iQMhO1G2eP%+pQ`O'#IpPOQ!0Lh-E<n-E<nO%,^QMjO,5?_OOQ!0Lh-E<q-E<qO%-PQMjO,5?aOOQ!0Lh-E<s-E<sO%-ZQ!dO1G2vO%-bQ!dO'#CrO%-xQMhO'#KQO$#^QlO'#JtOOQ!0Lh1G2^1G2^O%.PQ`O'#IoO%.eQ`O,5@tO%.eQ`O,5@tO%.mQ`O,5@tO%.xQ`O,5@tOOQO1G2`1G2`O%/WQMjO1G2_O!+rQMhO1G2_O%/hQ(CWO'#IqO%/uQ`O,5@uO!&iQMhO,5@uO%/}Q!dO,5@uOOQ!0Lh1G2c1G2cO%2_Q!fO'#CiO%2iQ`O,5=OOOQ!0Lb,5<|,5<|O%2qQpO,5<|OOQ!0Lb,5<},5<}OCfQ`O,5<|O%2|QpO,5<|OOQ!0Lb,5=Q,5=QO$)iQ`O,5=UOOQO,5?^,5?^OOQO-E<p-E<pOOQ!0Lp1G2g1G2gO##hQpO,5<|O$#^QlO,5=OO%3[Q`O,5<}O%3gQpO,5<}O!+rQMhO'#IsO%4aQMjO1G2rO!+rQMhO'#IuO%5SQMjO1G2tO%5^QMjO1G5oO%5hQMjO1G5oOOQO,5?c,5?cOOQO-E<u-E<uOOQO1G.{1G.{O!9lQpO,59uO%[QlO,59uOOQ!0Lh,5<i,5<iO%5uQ`O1G2YO!+rQMhO1G2aO!+rQMhO1G5oO!+rQMhO1G5oO%5zQ!0MxO7+'lOOQ!0Lf7+'l7+'lO!$fQlO7+'lO%6nQ`O,5;^OOQ!0Lb,5?e,5?eOOQ!0Lb-E<w-E<wO%6sQ!dO'#K[O#'cQ`O7+(dO4UQ!fO7+(dO$BuQ`O7+(dO%6}Q!0MvO'#CiO%7nQ!0LrO,5=RO%8PQ!0MvO,5=RO%8dQ`O,5=ROOQ!0Lb1G5m1G5mOOQ[7+$a7+$aO!BYQ!0LrO7+$aO!BeQpO7+$aO!$fQlO7+&_O%8lQ`O'#JOO%9TQ`O,5@}OOQO1G3f1G3fO9aQ`O,5@}O%9TQ`O,5@}O%9]Q`O,5@}OOQO,5?k,5?kOOQO-E<}-E<}OOQ!0Lf7+'S7+'SO%9bQ`O7+)PO9kQ!0LrO7+)PO9aQ`O7+)PO@iQ`O7+)POOQ[7+(o7+(oO%9gQ!0MvO7+(lO!&iQMhO7+(lO!DfQ`O7+(mOOQ[7+(m7+(mO!&iQMhO7+(mO%9qQ`O'#K`O%9|Q`O,5=kOOQO,5?g,5?gOOQO-E<y-E<yOOQ[7+(r7+(rO%;`QpO'#HYOOQ[1G3_1G3_O!&iQMhO1G3_O%[QlO1G3_O%;gQ`O1G3_O%;rQMhO1G3_O9kQ!0LrO1G3aO$#yQ`O1G3aO9UQ`O1G3aO!BeQpO1G3aO!BmQMhO1G3aO%<QQ`O'#I}O%<fQ`O,5@{O%<nQpO,5@{OOQ!0Lb1G3b1G3bOOQ[7+$V7+$VO@iQ`O7+$VO9kQ!0LrO7+$VO%<yQ`O7+$VO%[QlO1G6jO%[QlO1G6kO%=OQ!0LrO1G6jO%=YQlO1G3iO%=aQ`O1G3iO%=fQlO1G3iOOQ[7+)R7+)RO9kQ!0LrO7+)]O`QlO7+)_OOQ['#Kf'#KfOOQ['#JQ'#JQO%=mQlO,5>^OOQ[,5>^,5>^O%[QlO'#HsO%=zQ`O'#HuOOQ[,5>d,5>dO9ZQ`O,5>dOOQ[,5>f,5>fOOQ[7+)h7+)hOOQ[7+)n7+)nOOQ[7+)r7+)rOOQ[7+)t7+)tO%>PQpO1G5zO%>kQ?MtO1G0xO%>uQ`O1G0xOOQO1G/q1G/qO%?QQ?MtO1G/qO>wQ`O1G/qO!(yQlO'#DkOOQO,5>},5>}OOQO-E<a-E<aOOQO,5?T,5?TOOQO-E<g-E<gO!BeQpO1G/qOOQO-E<c-E<cOOQ!0Ln1G0Z1G0ZOOQ!0Lf7+%s7+%sO#'cQ`O7+%sOOQ!0Lf7+&^7+&^O>wQ`O7+&^O!BeQpO7+&^OOQO7+%v7+%vO$?{Q!0MxO7+&VOOQO7+&V7+&VO%[QlO7+&VO%?[Q!0LrO7+&VO!BYQ!0LrO7+%vO!BeQpO7+%vO%?gQ!0LrO7+&VO%?uQ!0MxO7++pO%[QlO7++pO%@VQ`O7++oO%@VQ`O7++oOOQO1G4q1G4qO9ZQ`O1G4qO%@_Q`O1G4qOOQS7+%{7+%{O#'cQ`O<<LOO4UQ!fO<<LOO%@mQ`O<<LOOOQ[<<LO<<LOO!&iQMhO<<LOO%[QlO<<LOO%@uQ`O<<LOO%AQQ!0MzO,5?_O%C]Q!0MzO,5?aO%EhQ!0MzO1G2_O%GyQ!0MzO1G2rO%JUQ!0MzO1G2tO%LaQ!fO,5?OO%[QlO,5?OOOQO-E<b-E<bO%LkQ`O1G5{OOQ!0Lf<<JS<<JSO%LsQ?MtO1G0sO%NzQ?MtO1G0}O& RQ?MtO1G0}O&#SQ?MtO1G0}O&#ZQ?MtO1G0}O&%[Q?MtO1G0}O&']Q?MtO1G0}O&'dQ?MtO1G0}O&'kQ?MtO1G0}O&)lQ?MtO1G0}O&)sQ?MtO1G0}O&)zQ!0MxO<<JeO&+rQ?MtO1G0}O&,oQ?MvO1G0}O&-rQ?MvO'#JjO&/xQ?MtO1G1bO&0VQ?MtO1G0SO&0aQMjO,5?ROOQO-E<e-E<eO!(yQlO'#FpOOQO'#KX'#KXOOQO1G1t1G1tO&0kQ`O1G1sO&0pQ?MtO,5?YOOOW7+'g7+'gOOOO1G/X1G/XO&0zQ!dO1G4vOOQ!0Lh7+(P7+(PP!&iQMhO,5?[O!+rQMhO7+(bO&1RQ`O,5?ZO9ZQ`O,5?ZOOQO-E<m-E<mO&1aQ`O1G6`O&1aQ`O1G6`O&1iQ`O1G6`O&1tQMjO7+'yO&2UQ!dO,5?]O&2`Q`O,5?]O!&iQMhO,5?]OOQO-E<o-E<oO&2eQ!dO1G6aO&2oQ`O1G6aO&2wQ`O1G2jO!&iQMhO1G2jOOQ!0Lb1G2h1G2hOOQ!0Lb1G2i1G2iO%2qQpO1G2hO!BeQpO1G2hOCfQ`O1G2hOOQ!0Lb1G2p1G2pO&2|QpO1G2hO&3[Q`O1G2jO$)iQ`O1G2iOCfQ`O1G2iO$#^QlO1G2jO&3dQ`O1G2iO&4WQMjO,5?_OOQ!0Lh-E<r-E<rO&4yQMjO,5?aOOQ!0Lh-E<t-E<tO!+rQMhO7++ZOOQ!0Lh1G/a1G/aO&5TQ`O1G/aOOQ!0Lh7+'t7+'tO&5YQMjO7+'{O&5jQMjO7++ZO&5tQMjO7++ZO&6RQ!0MxO<<KWOOQ!0Lf<<KW<<KWO&6uQ`O1G0xO!&iQMhO'#IxO&6zQ`O,5@vO&8|Q!fO<<LOO!&iQMhO1G2mO&9TQ!0LrO1G2mOOQ[<<G{<<G{O!BYQ!0LrO<<G{O&9fQ!0MxO<<IyOOQ!0Lf<<Iy<<IyOOQO,5?j,5?jO&:YQ`O,5?jO&:_Q`O,5?jOOQO-E<|-E<|O&:mQ`O1G6iO&:mQ`O1G6iO9aQ`O1G6iO@iQ`O<<LkOOQ[<<Lk<<LkO&:uQ`O<<LkO9kQ!0LrO<<LkOOQ[<<LW<<LWO%9gQ!0MvO<<LWOOQ[<<LX<<LXO!DfQ`O<<LXO&:zQpO'#IzO&;VQ`O,5@zO!(yQlO,5@zOOQ[1G3V1G3VOOQO'#I|'#I|O9kQ!0LrO'#I|O&;_QpO,5=tOOQ[,5=t,5=tO&;fQpO'#EeO&;mQpO'#GdO&;rQ`O7+(yO&;wQ`O7+(yOOQ[7+(y7+(yO!&iQMhO7+(yO%[QlO7+(yO&<PQ`O7+(yOOQ[7+({7+({O9kQ!0LrO7+({O$#yQ`O7+({O9UQ`O7+({O!BeQpO7+({O&<[Q`O,5?iOOQO-E<{-E<{OOQO'#H]'#H]O&<gQ`O1G6gO9kQ!0LrO<<GqOOQ[<<Gq<<GqO@iQ`O<<GqO&<oQ`O7+,UO&<tQ`O7+,VO%[QlO7+,UO%[QlO7+,VOOQ[7+)T7+)TO&<yQ`O7+)TO&=OQlO7+)TO&=VQ`O7+)TOOQ[<<Lw<<LwOOQ[<<Ly<<LyOOQ[-E=O-E=OOOQ[1G3x1G3xO&=[Q`O,5>_OOQ[,5>a,5>aO&=aQ`O1G4OO9ZQ`O7+&dO!(yQlO7+&dOOQO7+%]7+%]O&=fQ?MtO1G6XO>wQ`O7+%]OOQ!0Lf<<I_<<I_OOQ!0Lf<<Ix<<IxO>wQ`O<<IxOOQO<<Iq<<IqO$?{Q!0MxO<<IqO%[QlO<<IqOOQO<<Ib<<IbO!BYQ!0LrO<<IbO&=pQ!0LrO<<IqO&={Q!0MxO<= [O&>]Q`O<= ZOOQO7+*]7+*]O9ZQ`O7+*]OOQ[ANAjANAjO&>eQ!fOANAjO!&iQMhOANAjO#'cQ`OANAjO4UQ!fOANAjO&>lQ`OANAjO%[QlOANAjO&>tQ!0MzO7+'yO&AVQ!0MzO,5?_O&CbQ!0MzO,5?aO&EmQ!0MzO7+'{O&HOQ!fO1G4jO&HYQ?MtO7+&_O&J^Q?MvO,5=WO&LeQ?MvO,5=YO&LuQ?MvO,5=WO&MVQ?MvO,5=YO&MgQ?MvO,59sO' mQ?MvO,5<jO'#pQ?MvO,5<lO'&UQ?MvO,5<zO''zQ?MtO7+'jO'(XQ?MtO7+'lO'(fQ`O,5<[OOQO7+'_7+'_OOQ!0Lh7+*b7+*bO'(kQMjO<<K|OOQO1G4u1G4uO'(rQ`O1G4uO'(}Q`O1G4uO')]Q`O7++zO')]Q`O7++zO!&iQMhO1G4wO')eQ!dO1G4wO')oQ`O7++{O')wQ`O7+(UO'*SQ!dO7+(UOOQ!0Lb7+(S7+(SOOQ!0Lb7+(T7+(TO!BeQpO7+(SOCfQ`O7+(SO'*^Q`O7+(UO!&iQMhO7+(UO$)iQ`O7+(TO'*cQ`O7+(UOCfQ`O7+(TO'*kQMjO<<NuOOQ!0Lh7+${7+${O!+rQMhO<<NuO'*uQ!dO,5?dOOQO-E<v-E<vO'+PQ!0MvO7+(XO!&iQMhO7+(XOOQ[AN=gAN=gO9aQ`O1G5UOOQO1G5U1G5UO'+aQ`O1G5UO'+fQ`O7+,TO'+fQ`O7+,TO9kQ!0LrOANBVO@iQ`OANBVOOQ[ANBVANBVOOQ[ANArANArOOQ[ANAsANAsO'+nQ`O,5?fOOQO-E<x-E<xO'+yQ?MtO1G6fOOQO,5?h,5?hOOQO-E<z-E<zOOQ[1G3`1G3`O',TQ`O,5=OOOQ[<<Le<<LeO!&iQMhO<<LeO&;rQ`O<<LeO',YQ`O<<LeO%[QlO<<LeOOQ[<<Lg<<LgO9kQ!0LrO<<LgO$#yQ`O<<LgO9UQ`O<<LgO',bQpO1G5TO',mQ`O7+,ROOQ[AN=]AN=]O9kQ!0LrOAN=]OOQ[<= p<= pOOQ[<= q<= qO',uQ`O<= pO',zQ`O<= qOOQ[<<Lo<<LoO'-PQ`O<<LoO'-UQlO<<LoOOQ[1G3y1G3yO>wQ`O7+)jO'-]Q`O<<JOO'-hQ?MtO<<JOOOQO<<Hw<<HwOOQ!0LfAN?dAN?dOOQOAN?]AN?]O$?{Q!0MxOAN?]OOQOAN>|AN>|O%[QlOAN?]OOQO<<Mw<<MwOOQ[G27UG27UO!&iQMhOG27UO#'cQ`OG27UO'-rQ!fOG27UO4UQ!fOG27UO'-yQ`OG27UO'.RQ?MtO<<JeO'.`Q?MvO1G2_O'0UQ?MvO,5?_O'2XQ?MvO,5?aO'4[Q?MvO1G2rO'6_Q?MvO1G2tO'8bQ?MtO<<KWO'8oQ?MtO<<IyOOQO1G1v1G1vO!+rQMhOANAhOOQO7+*a7+*aO'8|Q`O7+*aO'9XQ`O<= fO'9aQ!dO7+*cOOQ!0Lb<<Kp<<KpO$)iQ`O<<KpOCfQ`O<<KpO'9kQ`O<<KpO!&iQMhO<<KpOOQ!0Lb<<Kn<<KnO!BeQpO<<KnO'9vQ!dO<<KpOOQ!0Lb<<Ko<<KoO':QQ`O<<KpO!&iQMhO<<KpO$)iQ`O<<KoO':VQMjOANDaO':aQ!0MvO<<KsOOQO7+*p7+*pO9aQ`O7+*pO':qQ`O<= oOOQ[G27qG27qO9kQ!0LrOG27qO!(yQlO1G5QO':yQ`O7+,QO';RQ`O1G2jO&;rQ`OANBPOOQ[ANBPANBPO!&iQMhOANBPO';WQ`OANBPOOQ[ANBRANBRO9kQ!0LrOANBRO$#yQ`OANBROOQO'#H^'#H^OOQO7+*o7+*oOOQ[G22wG22wOOQ[ANE[ANE[OOQ[ANE]ANE]OOQ[ANBZANBZO';`Q`OANBZOOQ[<<MU<<MUO!(yQlOAN?jOOQOG24wG24wO$?{Q!0MxOG24wO#'cQ`OLD,pOOQ[LD,pLD,pO!&iQMhOLD,pO';eQ!fOLD,pO';lQ?MvO7+'yO'=bQ?MvO,5?_O'?eQ?MvO,5?aO'AhQ?MvO7+'{O'C^QMjOG27SOOQO<<M{<<M{OOQ!0LbANA[ANA[O$)iQ`OANA[OCfQ`OANA[O'CnQ!dOANA[OOQ!0LbANAYANAYO'CuQ`OANA[O!&iQMhOANA[O'DQQ!dOANA[OOQ!0LbANAZANAZOOQO<<N[<<N[OOQ[LD-]LD-]O'D[Q?MtO7+*lOOQO'#Ge'#GeOOQ[G27kG27kO&;rQ`OG27kO!&iQMhOG27kOOQ[G27mG27mO9kQ!0LrOG27mOOQ[G27uG27uO'DfQ?MtOG25UOOQOLD*cLD*cOOQ[!$(![!$(![O#'cQ`O!$(![O!&iQMhO!$(![O'DpQ!0MzOG27SOOQ!0LbG26vG26vO$)iQ`OG26vO'GRQ`OG26vOCfQ`OG26vO'G^Q!dOG26vO!&iQMhOG26vOOQ[LD-VLD-VO&;rQ`OLD-VOOQ[LD-XLD-XOOQ[!)9Ev!)9EvO#'cQ`O!)9EvOOQ!0LbLD,bLD,bO$)iQ`OLD,bOCfQ`OLD,bO'GeQ`OLD,bO'GpQ!dOLD,bOOQ[!$(!q!$(!qOOQ[!.K;b!.K;bO'GwQ?MvOG27SOOQ!0Lb!$( |!$( |O$)iQ`O!$( |OCfQ`O!$( |O'ImQ`O!$( |OOQ!0Lb!)9Eh!)9EhO$)iQ`O!)9EhOCfQ`O!)9EhOOQ!0Lb!.K;S!.K;SO$)iQ`O!.K;SOOQ!0Lb!4/0n!4/0nO!(yQlO'#DxO1PQ`O'#EVO'IxQ!fO'#JpO'JPQ!L^O'#DtO'JWQlO'#D|O'J_Q!fO'#CiO'LuQ!fO'#CiO!(yQlO'#EOO'MVQlO,5;XO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO'#InO( YQ`O,5<hO!(yQlO,5;cO( bQMhO,5;cO(!{QMhO,5;cO!(yQlO,5;vO!&iQMhO'#GlO( bQMhO'#GlO!&iQMhO'#GnO( bQMhO'#GnO1SQ`O'#DXO1SQ`O'#DXO!&iQMhO'#GOO( bQMhO'#GOO!&iQMhO'#GQO( bQMhO'#GQO!&iQMhO'#G`O( bQMhO'#G`O!(yQlO,5:hO(#SQpO'#D]O(#^QpO'#JtO!(yQlO,5@mO'MVQlO1G0sO(#hQ?MtO'#CiO!(yQlO1G2OO!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO(#rQ!dO'#CrO!&iQMhO,5<sO( bQMhO,5<sO'MVQlO1G2QO!(yQlO7+&yO!&iQMhO1G2_O( bQMhO1G2_O!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO!&iQMhO1G2aO( bQMhO1G2aO'MVQlO7+'lO'MVQlO7+&_O!&iQMhOANAhO( bQMhOANAhO($VQ`O'#EmO($[Q`O'#EmO($dQ`O'#F[O($iQ`O'#EwO($nQ`O'#KRO($yQ`O'#KPO(%UQ`O,5;XO(%ZQMjO,5<dO(%bQ`O'#GXO(%gQ`O'#GXO(%lQ`O,5<fO(%tQ`O,5;XO(%|Q?MtO1G1_O(&TQ`O,5<sO(&YQ`O,5<sO(&_Q`O,5<uO(&dQ`O,5<uO(&iQ`O1G2QO(&nQ`O1G0sO(&sQMjO<<K|O(&zQMjO<<K|O7eQMhO'#F{O9UQ`O'#FzOAdQ`O'#ElO!(yQlO,5;sO!3^Q`O'#GXO!3^Q`O'#GXO!3^Q`O'#GZO!3^Q`O'#GZO!+rQMhO7+(bO!+rQMhO7+(bO%-ZQ!dO1G2vO%-ZQ!dO1G2vO!&iQMhO,5=[O!&iQMhO,5=[",
  stateData: "((P~O'zOS'{OSTOS'|RQ~OPYOQYOSfOY!VOaqOdzOeyOj!POnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!swO!vxO!z]O$V|O$miO%g}O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO&U!WO&[!XO&^!YO&`!ZO&b![O&e!]O&k!^O&q!_O&s!`O&u!aO&w!bO&y!cO(RSO(TTO(WUO(_VO(m[O~OWtO~P`OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa!wOq!nO!Q!oO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!xO#U!pO#V!pO#Y!zO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O'|!{O~OP]XR]X[]Xa]Xp]X!O]X!Q]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X'x]X(_]X(p]X(w]X(x]X~O!e%QX~P(qO_!}O(T#PO(U!}O(V#PO~O_#QO(V#PO(W#PO(X#QO~Ov#SO!S#TO(`#TO(a#VO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R;{O(TTO(WUO(_VO(m[O~O!Y#ZO!Z#WO!W(fP!W(tP~P+}O![#cO~P`OPYOQYOSfOd!jOe!iOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(TTO(WUO(_VO(m[O~On#mO!Y#iO!z]O#g#lO#h#iO(R;|O!i(qP~P.iO!j#oO(R#nO~O!v#sO!z]O%g#tO~O#i#uO~O!e#vO#i#uO~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z$_O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa(dX'x(dX'u(dX!i(dX!W(dX!](dX%h(dX!e(dX~P1qO#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX!](eX%h(eX~Oa(eX'x(eX'u(eX!W(eX!i(eXt(eX!e(eX~P4UO#^$eO~O$[$hO$^$gO$e$mO~OSfO!]$nO$h$oO$j$qO~Oh%VOj%cOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R$sO(TTO(WUO(_$uO(w$}O(x%POg([P~O!j%dO~O!Q%gO!]%hO(R%fO~O!e%lO~Oa%mO'x%mO~O!O%qO~P%[O(S!lO~P%[O%m%uO~P%[Oh%VO!j%dO(R%fO(S!lO~Oe%|O!j%dO(R%fO~O#t$RO~O!O&RO!]&OO!j&QO%i&UO(R%fO(S!lO(TTO(WUO`)UP~O!v#sO~O%r&WO!Q)QX!])QX(R)QX~O(R&XO~Oj!PO!s&^O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO~Od&cOe&bO!v&`O%g&aO%z&_O~P<POd&fOeyOj!PO!]&eO!s&^O!vxO!z]O%g}O%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO~Ob&iO#^&lO%i&gO(S!lO~P=UO!j&mO!s&qO~O!j#oO~O!]XO~Oa%mO'v&yO'x%mO~Oa%mO'v&|O'x%mO~Oa%mO'v'OO'x%mO~O'u]X!W]Xt]X!i]X&Y]X!]]X%h]X!e]X~P(qO!`']O!a'UO!b'UO(S!lO(TTO(WUO~Oq'SO!Q'RO!Y'VO(c'QO![(gP![(vP~P@]Ol'`O!]'^O(R%fO~Oe'eO!j%dO(R%fO~O!O&RO!j&QO~Oq!nO!Q!oO!z;wO#R!pO#S!pO#U!pO#V!pO(S!lO(TTO(WUO(c!mO(m!sO~O!`'kO!a'jO!b'jO#T!pO#Y'lO#Z'lO~PAwOa%mOh%VO!e#vO!j%dO'x%mO(p'nO~O!n'rO#^'pO~PCVOq!nO!Q!oO(TTO(WUO(c!mO(m!sO~O!]XOq(kX!Q(kX!`(kX!a(kX!b(kX!z(kX#R(kX#S(kX#T(kX#U(kX#V(kX#Y(kX#Z(kX(S(kX(T(kX(W(kX(c(kX(m(kX~O!a'jO!b'jO(S!lO~PCuO'}'vO(O'vO(P'xO~O_!}O(T'zO(U!}O(V'zO~O_#QO(V'zO(W'zO(X#QO~Ot'|O~P%[Ov#SO!S#TO(`#TO(a(PO~O!Y(RO!W'UX!W'[X!Z'UX!Z'[X~P+}O!Z(TO!W(fX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z(TO!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~O!W(fX~PGpO!W(YO~O!W(sX!Z(sX!e(sX!i(sX(p(sX~O#^(sX#i#bX![(sX~PIsO#^(ZO!W(uX!Z(uX~O!Z([O!W(tX~O!W(_O~O#^$eO~PIsO![(`O~P`OR#zO!O#yO!Q#{O!j#xO(_VOP!la[!lap!la!Z!la!n!la#P!la#l!la#m!la#n!la#o!la#p!la#q!la#r!la#s!la#t!la#u!la#w!la#y!la#z!la(p!la(w!la(x!la~Oa!la'x!la'u!la!W!la!i!lat!la!]!la%h!la!e!la~PKZO!i(aO~O!e#vO#^(bO(p'nO!Z(rXa(rX'x(rX~O!i(rX~PMvO!Q%gO!]%hO!z]O#g(gO#h(fO(R%fO~O!Z(hO!i(qX~O!i(jO~O!Q%gO!]%hO#h(fO(R%fO~OP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O!e#vO!i(eX~P! dOR(lO!O(kO!j#xO#Q$dO!z!ya!Q!ya~O!v!ya%g!ya!]!ya#g!ya#h!ya(R!ya~P!#eO!v(pO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~O#i(vO~O!Y(xO!i(iP~P%[O(c(zO(m[O~O!Q(|O!j#xO(c(zO(m[O~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z$_Oa$pa'x$pa'u$pa!i$pa!W$pa!]$pa%h$pa!e$pa~Oj)bO~P!&iOh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Og(nP~P!+rO!O)gO!e)fO!]$]X$Y$]X$[$]X$^$]X$e$]X~O!e)fO!](yX$Y(yX$[(yX$^(yX$e(yX~O!O)gO~P!-{O!O)gO!](yX$Y(yX$[(yX$^(yX$e(yX~O!])iO$Y)mO$[)hO$^)hO$e)nO~O!Y)qO~P!(yO$[$hO$^$gO$e)uO~Ol$yX!O$yX#Q$yX'w$yX(w$yX(x$yX~OgkXg$yXlkX!ZkX#^kX~P!/qOv)wO(`)xO(a)zO~Ol*TO!O)|O'w)}O(w$}O(x%PO~Og){O~P!0uOg*UO~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q*WO!]*XO!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~O!Y*[O(R*VO!i(|P~P!1dO#i*^O~O!j*_O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R*aO(TTO(WUO(_$uO(w$}O(x%PO~O!Y*dO!W(}P~P!3cOp*pOq!nO!Q*fO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO(c!mO~O![*mO~P!5WO#Q$dOl(^X!O(^X'w(^X(w(^X(x(^X!Z(^X#^(^X~Og(^X#}(^X~P!6YOl*uO#^*tOg(]X!Z(]X~O!Z*vOg([X~Oj%cO(R&XOg([P~Oq*yO~O!j+OO~O(R(tO~On+TO!Q%gO!Y#iO!]%hO!z]O#g#lO#h#iO(R%fO!i(qP~O!e#vO#i+UO~O!Q%gO!Y+WO!Z([O!]%hO(R%fO!W(tP~Oq'YO!Q+YO!Y+XO(TTO(WUO(c(zO~O![(vP~P!9]O!Z+ZOa)RX'x)RX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa!ha!Z!ha'x!ha'u!ha!W!ha!i!hat!ha!]!ha%h!ha!e!ha~P!:TOR#zO!O#yO!Q#{O!j#xO(_VOP!pa[!pap!pa!Z!pa!n!pa#P!pa#l!pa#m!pa#n!pa#o!pa#p!pa#q!pa#r!pa#s!pa#t!pa#u!pa#w!pa#y!pa#z!pa(p!pa(w!pa(x!pa~Oa!pa'x!pa'u!pa!W!pa!i!pat!pa!]!pa%h!pa!e!pa~P!<kOR#zO!O#yO!Q#{O!j#xO(_VOP!ra[!rap!ra!Z!ra!n!ra#P!ra#l!ra#m!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#w!ra#y!ra#z!ra(p!ra(w!ra(x!ra~Oa!ra'x!ra'u!ra!W!ra!i!rat!ra!]!ra%h!ra!e!ra~P!?ROh%VOl+dO!]'^O%h+cO~O!e+fOa(ZX!](ZX'x(ZX!Z(ZX~Oa%mO!]XO'x%mO~Oh%VO!j%dO~Oh%VO!j%dO(R%fO~O!e#vO#i(vO~Ob+qO%i+rO(R+nO(TTO(WUO![)VP~O!Z+sO`)UX~O[+wO~O`+xO~O!]&OO(R%fO(S!lO`)UP~Oh%VO#^+}O~Oh%VOl,QO!]$|O~O!],SO~O!O,UO!]XO~O%m%uO~O!v,ZO~Oe,`O~Ob,aO(R#nO(TTO(WUO![)TP~Oe%|O~O%i!QO(R&XO~P=UO[,fO`,eO~OPYOQYOSfOdzOeyOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!guO!jZO!mYO!nYO!oYO!qvO!vxO!z]O$miO%g}O(TTO(WUO(_VO(m[O~O!]!eO!s!gO$V!kO(R!dO~P!FRO`,eOa%mO'x%mO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa,kOj!OO!swO%k!OO%l!OO%m!OO~P!HkO!j&mO~O&[,qO~O!],sO~O&m,uO&o,vOP&jaQ&jaS&jaY&jaa&jad&jae&jaj&jan&jap&jaq&jar&jax&jaz&ja|&ja!Q&ja!U&ja!V&ja!]&ja!g&ja!j&ja!m&ja!n&ja!o&ja!q&ja!s&ja!v&ja!z&ja$V&ja$m&ja%g&ja%i&ja%k&ja%l&ja%m&ja%p&ja%r&ja%u&ja%v&ja%x&ja&U&ja&[&ja&^&ja&`&ja&b&ja&e&ja&k&ja&q&ja&s&ja&u&ja&w&ja&y&ja'u&ja(R&ja(T&ja(W&ja(_&ja(m&ja![&ja&c&jab&ja&h&ja~O(R,{O~Oh!cX!Z!PX![!PX!e!PX!e!cX!j!cX#^!PX~O!Z!cX![!cX~P# qO!e-QO#^-POh(hX!Z#fX![#fX!e(hX!j(hX~O!Z(hX![(hX~P#!dOh%VO!e-SO!j%dO!Z!_X![!_X~Oq!nO!Q!oO(TTO(WUO(c!mO~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(TTO(WUO(_VO(m[O~O(R<rO~P##yO!Z-WO![(gX~O![-YO~O!e-QO#^-PO!Z#fX![#fX~O!Z-ZO![(vX~O![-]O~O!a-^O!b-^O(S!lO~P##hO![-aO~P'_Ol-dO!]'^O~O!W-iO~Oq!ya!`!ya!a!ya!b!ya#R!ya#S!ya#T!ya#U!ya#V!ya#Y!ya#Z!ya(S!ya(T!ya(W!ya(c!ya(m!ya~P!#eO!n-nO#^-lO~PCVO!a-pO!b-pO(S!lO~PCuOa%mO#^-lO'x%mO~Oa%mO!e#vO#^-lO'x%mO~Oa%mO!e#vO!n-nO#^-lO'x%mO(p'nO~O'}'vO(O'vO(P-uO~Ot-vO~O!W'Ua!Z'Ua~P!:TO!Y-zO!W'UX!Z'UX~P%[O!Z(TO!W(fa~O!W(fa~PGpO!Z([O!W(ta~O!Q%gO!Y.OO!]%hO(R%fO!W'[X!Z'[X~O#^.QO!Z(ra!i(raa(ra'x(ra~O!e#vO~P#,PO!Z(hO!i(qa~O!Q%gO!]%hO#h.UO(R%fO~On.ZO!Q%gO!Y.WO!]%hO!z]O#g.YO#h.WO(R%fO!Z'_X!i'_X~OR._O!j#xO~Oh%VOl.bO!]'^O%h.aO~Oa#ai!Z#ai'x#ai'u#ai!W#ai!i#ait#ai!]#ai%h#ai!e#ai~P!:TOl=|O!O)|O'w)}O(w$}O(x%PO~O#i#]aa#]a#^#]a'x#]a!Z#]a!i#]a!]#]a!W#]a~P#.{O#i(^XP(^XR(^X[(^Xa(^Xp(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X'x(^X(_(^X(p(^X!i(^X!W(^X'u(^Xt(^X!](^X%h(^X!e(^X~P!6YO!Z.oO!i(iX~P!:TO!i.rO~O!W.tO~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kia#kip#ki!Z#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#l#ki~P#2kO#l$OO~P#2kOP$[OR#zOp$aO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO[#kia#ki!Z#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#p#ki~P#5YO#p$QO~P#5YOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO(_VOa#ki!Z#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#u#ki~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO(_VO(x#}Oa#ki!Z#ki#y#ki#z#ki'x#ki(p#ki(w#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#w$UO~P#:_O#w#ki~P#:_O#u$SO~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO(_VO(w#|O(x#}Oa#ki!Z#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#y#ki~P#=TO#y$WO~P#=TOP]XR]X[]Xp]X!O]X!Q]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X!Z]X![]X~O#}]X~P#?rOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO#y<XO#z<YO(_VO(p$YO(w#|O(x#}O~O#}.vO~P#BPO#Q$dO#^<`O$P<`O#}(eX![(eX~P! dOa'ba!Z'ba'x'ba'u'ba!i'ba!W'bat'ba!]'ba%h'ba!e'ba~P!:TO[#kia#kip#ki!Z#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO(w#ki(x#ki~P#EROl=|O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P#ERO!Z.zOg(nX~P!0uOg.|O~Oa$Oi!Z$Oi'x$Oi'u$Oi!W$Oi!i$Oit$Oi!]$Oi%h$Oi!e$Oi~P!:TO$[.}O$^.}O~O$[/OO$^/OO~O!e)fO#^/PO!]$bX$Y$bX$[$bX$^$bX$e$bX~O!Y/QO~O!])iO$Y/SO$[)hO$^)hO$e/TO~O!Z<ZO![(dX~P#BPO![/UO~O!e)fO$e(yX~O$e/WO~Ot/XO~P!&iOv)wO(`)xO(a/[O~O!Q/_O~O(w$}Ol%`a!O%`a'w%`a(x%`a!Z%`a#^%`a~Og%`a#}%`a~P#LTO(x%POl%ba!O%ba'w%ba(w%ba!Z%ba#^%ba~Og%ba#}%ba~P#LvO!ZfX!efX!ifX!i$yX(pfX~P!/qO!Y/hO!Z([O(R/gO!W(tP!W(}P~P!1dOp*pO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO~Oq<oO!Q/iO!Y+XO![*mO(c<nO![(vP~P#NaO!i/jO~P#.{O!Z/kO!e#vO(p'nO!i(|X~O!i/pO~O!Q%gO!Y*[O!]%hO(R%fO!i(|P~O#i/rO~O!W$yX!Z$yX!e%QX~P!/qO!Z/sO!W(}X~P#.{O!e/uO~O!W/wO~OnkO(R/xO~P.iOh%VOp/}O!e#vO!j%dO(p'nO~O!e+fO~Oa%mO!Z0RO'x%mO~O![0TO~P!5WO!a0UO!b0UO(S!lO~P##hOq!nO!Q0VO(TTO(WUO(c!mO~O#Y0XO~Og%`a!Z%`a#^%`a#}%`a~P!0uOg%ba!Z%ba#^%ba#}%ba~P!0uOj%cO(R&XOg'kX!Z'kX~O!Z*vOg([a~Og0bO~OR0cO!O0cO!Q0dO#Q$dOl{a'w{a(w{a(x{a!Z{a#^{a~Og{a#}{a~P$&dO!O)|O'w)}Ol$ra(w$ra(x$ra!Z$ra#^$ra~Og$ra#}$ra~P$'`O!O)|O'w)}Ol$ta(w$ta(x$ta!Z$ta#^$ta~Og$ta#}$ta~P$(RO#i0gO~Og%Sa!Z%Sa#^%Sa#}%Sa~P!0uOl0iO#^0hOg(]a!Z(]a~O!e#vO~O#i0lO~O!Z+ZOa)Ra'x)Ra~OR#zO!O#yO!Q#{O!j#xO(_VOP!pi[!pip!pi!Z!pi!n!pi#P!pi#l!pi#m!pi#n!pi#o!pi#p!pi#q!pi#r!pi#s!pi#t!pi#u!pi#w!pi#y!pi#z!pi(p!pi(w!pi(x!pi~Oa!pi'x!pi'u!pi!W!pi!i!pit!pi!]!pi%h!pi!e!pi~P$*OOh%VOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~On0vO%[0wO(R0tO~P$,fO!e+fOa(Za!](Za'x(Za!Z(Za~O#i0|O~O[]X!ZfX![fX~O!Z0}O![)VX~O![1PO~O[1QO~Ob1SO(R+nO(TTO(WUO~O!]&OO(R%fO`'sX!Z'sX~O!Z+sO`)Ua~O!i1VO~P!:TO[1YO~O`1ZO~O#^1^O~Ol1aO!]$|O~O(c(zO![)SP~Oh%VOl1jO!]1gO%h1iO~O[1tO!Z1rO![)TX~O![1uO~O`1wOa%mO'x%mO~O(R#nO(TTO(WUO~O#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O#t1zO&Y1{Oa(eX~P$2PO#^$eO#t1zO&Y1{O~Oa1}O~P%[Oa2PO~O&c2SOP&aiQ&aiS&aiY&aia&aid&aie&aij&ain&aip&aiq&air&aix&aiz&ai|&ai!Q&ai!U&ai!V&ai!]&ai!g&ai!j&ai!m&ai!n&ai!o&ai!q&ai!s&ai!v&ai!z&ai$V&ai$m&ai%g&ai%i&ai%k&ai%l&ai%m&ai%p&ai%r&ai%u&ai%v&ai%x&ai&U&ai&[&ai&^&ai&`&ai&b&ai&e&ai&k&ai&q&ai&s&ai&u&ai&w&ai&y&ai'u&ai(R&ai(T&ai(W&ai(_&ai(m&ai![&aib&ai&h&ai~Ob2YO![2WO&h2XO~P`O!]XO!j2[O~O&o,vOP&jiQ&jiS&jiY&jia&jid&jie&jij&jin&jip&jiq&jir&jix&jiz&ji|&ji!Q&ji!U&ji!V&ji!]&ji!g&ji!j&ji!m&ji!n&ji!o&ji!q&ji!s&ji!v&ji!z&ji$V&ji$m&ji%g&ji%i&ji%k&ji%l&ji%m&ji%p&ji%r&ji%u&ji%v&ji%x&ji&U&ji&[&ji&^&ji&`&ji&b&ji&e&ji&k&ji&q&ji&s&ji&u&ji&w&ji&y&ji'u&ji(R&ji(T&ji(W&ji(_&ji(m&ji![&ji&c&jib&ji&h&ji~O!W2bO~O!Z!_a![!_a~P#BPOq!nO!Q!oO!Y2hO(c!mO!Z'VX!['VX~P@]O!Z-WO![(ga~O!Z']X![']X~P!9]O!Z-ZO![(va~O![2oO~P'_Oa%mO#^2xO'x%mO~Oa%mO!e#vO#^2xO'x%mO~Oa%mO!e#vO!n2|O#^2xO'x%mO(p'nO~Oa%mO'x%mO~P!:TO!Z$_Ot$pa~O!W'Ui!Z'Ui~P!:TO!Z(TO!W(fi~O!Z([O!W(ti~O!W(ui!Z(ui~P!:TO!Z(ri!i(ria(ri'x(ri~P!:TO#^3OO!Z(ri!i(ria(ri'x(ri~O!Z(hO!i(qi~O!Q%gO!]%hO!z]O#g3TO#h3SO(R%fO~O!Q%gO!]%hO#h3SO(R%fO~Ol3[O!]'^O%h3ZO~Oh%VOl3[O!]'^O%h3ZO~O#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`at%`a!]%`a%h%`a!e%`a~P#LTO#i%baP%baR%ba[%baa%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%bat%ba!]%ba%h%ba!e%ba~P#LvO#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!Z%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`a#^%`at%`a!]%`a%h%`a!e%`a~P#.{O#i%baP%baR%ba[%baa%bap%ba!Q%ba!Z%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%ba#^%bat%ba!]%ba%h%ba!e%ba~P#.{O#i{aP{a[{aa{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a'x{a(_{a(p{a!i{a!W{a'u{at{a!]{a%h{a!e{a~P$&dO#i$raP$raR$ra[$raa$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra'x$ra(_$ra(p$ra!i$ra!W$ra'u$rat$ra!]$ra%h$ra!e$ra~P$'`O#i$taP$taR$ta[$taa$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta'x$ta(_$ta(p$ta!i$ta!W$ta'u$tat$ta!]$ta%h$ta!e$ta~P$(RO#i%SaP%SaR%Sa[%Saa%Sap%Sa!Q%Sa!Z%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa'x%Sa(_%Sa(p%Sa!i%Sa!W%Sa'u%Sa#^%Sat%Sa!]%Sa%h%Sa!e%Sa~P#.{Oa#aq!Z#aq'x#aq'u#aq!W#aq!i#aqt#aq!]#aq%h#aq!e#aq~P!:TO!Y3dO!Z'WX!i'WX~P%[O!Z.oO!i(ia~O!Z.oO!i(ia~P!:TO!W3gO~O#}!la![!la~PKZO#}!ha!Z!ha![!ha~P#BPO#}!pa![!pa~P!<kO#}!ra![!ra~P!?ROg'ZX!Z'ZX~P!+rO!Z.zOg(na~OSfO!]3{O$c3|O~O![4QO~Ot4RO~P#.{Oa$lq!Z$lq'x$lq'u$lq!W$lq!i$lqt$lq!]$lq%h$lq!e$lq~P!:TO!W4TO~P!&iO!Q4UO~O!O)|O'w)}O(x%POl'ga(w'ga!Z'ga#^'ga~Og'ga#}'ga~P%+uO!O)|O'w)}Ol'ia(w'ia(x'ia!Z'ia#^'ia~Og'ia#}'ia~P%,hO(p$YO~P#.{O!WfX!W$yX!ZfX!Z$yX!e%QX#^fX~P!/qO(R<xO~P!1dO!Q%gO!Y4XO!]%hO(R%fO!Z'cX!i'cX~O!Z/kO!i(|a~O!Z/kO!e#vO!i(|a~O!Z/kO!e#vO(p'nO!i(|a~Og${i!Z${i#^${i#}${i~P!0uO!Y4aO!W'eX!Z'eX~P!3cO!Z/sO!W(}a~O!Z/sO!W(}a~P#.{OP]XR]X[]Xp]X!O]X!Q]X!W]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!e%XX#t%XX~P%0XO!e#vO#t4fO~Oh%VO!e#vO!j%dO~Oh%VOp4kO!j%dO(p'nO~Op4pO!e#vO(p'nO~Oq!nO!Q4qO(TTO(WUO(c!mO~O(w$}Ol%`i!O%`i'w%`i(x%`i!Z%`i#^%`i~Og%`i#}%`i~P%3xO(x%POl%bi!O%bi'w%bi(w%bi!Z%bi#^%bi~Og%bi#}%bi~P%4kOg(]i!Z(]i~P!0uO#^4wOg(]i!Z(]i~P!0uO!i4zO~Oa$nq!Z$nq'x$nq'u$nq!W$nq!i$nqt$nq!]$nq%h$nq!e$nq~P!:TO!W5QO~O!Z5RO!])OX~P#.{Oa]Xa$yX!]]X!]$yX%]]X'x]X'x$yX!Z]X!Z$yX~P!/qO%]5UOa%Za!]%Za'x%Za!Z%Za~OlmX!OmX'wmX(wmX(xmX~P%7nOn5VO(R#nO~Ob5]O%i5^O(R+nO(TTO(WUO!Z'rX!['rX~O!Z0}O![)Va~O[5bO~O`5cO~Oa%mO'x%mO~P#.{O!Z5kO#^5mO![)SX~O![5nO~Op5tOq!nO!Q*fO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!pO#U!pO#V!pO#Y5sO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O![5rO~P%:ROl5yO!]1gO%h5xO~Oh%VOl5yO!]1gO%h5xO~Ob6QO(R#nO(TTO(WUO!Z'qX!['qX~O!Z1rO![)Ta~O(TTO(WUO(c6SO~O`6WO~O#t6ZO&Y6[O~PMvO!i6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO![6dO&h2XO~P`O!e6fO~O!e6hOh(hi!Z(hi![(hi!e(hi!j(hip(hi(p(hi~O!Z#fi![#fi~P#BPO#^6iO!Z#fi![#fi~O!Z!_i![!_i~P#BPOa%mO#^6rO'x%mO~Oa%mO!e#vO#^6rO'x%mO~O!Z(rq!i(rqa(rq'x(rq~P!:TO!Z(hO!i(qq~O!Q%gO!]%hO#h6yO(R%fO~O!]'^O%h6|O~Ol7QO!]'^O%h6|O~O#i'gaP'gaR'ga['gaa'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga'x'ga(_'ga(p'ga!i'ga!W'ga'u'gat'ga!]'ga%h'ga!e'ga~P%+uO#i'iaP'iaR'ia['iaa'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia'x'ia(_'ia(p'ia!i'ia!W'ia'u'iat'ia!]'ia%h'ia!e'ia~P%,hO#i${iP${iR${i[${ia${ip${i!Q${i!Z${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i'x${i(_${i(p${i!i${i!W${i'u${i#^${it${i!]${i%h${i!e${i~P#.{O#i%`iP%`iR%`i[%`ia%`ip%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i'x%`i(_%`i(p%`i!i%`i!W%`i'u%`it%`i!]%`i%h%`i!e%`i~P%3xO#i%biP%biR%bi[%bia%bip%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi'x%bi(_%bi(p%bi!i%bi!W%bi'u%bit%bi!]%bi%h%bi!e%bi~P%4kO!Z'Wa!i'Wa~P!:TO!Z.oO!i(ii~O#}#ai!Z#ai![#ai~P#BPOP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kip#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#l#ki~P%MQO#l<PO~P%MQOP$[OR#zOp<]O!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO[#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#p#ki~P& YO#p<RO~P& YOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO(_VO#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#u#ki~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO(_VO(x#}O#y#ki#z#ki#}#ki(p#ki(w#ki!Z#ki![#ki~O#w<VO~P&%cO#w#ki~P&%cO#u<TO~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO(_VO(w#|O(x#}O#z#ki#}#ki(p#ki!Z#ki![#ki~O#y#ki~P&'rO#y<XO~P&'rOa#{y!Z#{y'x#{y'u#{y!W#{y!i#{yt#{y!]#{y%h#{y!e#{y~P!:TO[#kip#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki!Z#ki![#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO(w#ki(x#ki~P&*nOl=}O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P&*nO#Q$dOP(^XR(^X[(^Xl(^Xp(^X!O(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X#}(^X'w(^X(_(^X(p(^X(w(^X(x(^X!Z(^X![(^X~O#}$Oi!Z$Oi![$Oi~P#BPO#}!pi![!pi~P$*OOg'Za!Z'Za~P!0uO![7dO~O!Z'ba!['ba~P#BPO!W7eO~P#.{O!e#vO(p'nO!Z'ca!i'ca~O!Z/kO!i(|i~O!Z/kO!e#vO!i(|i~Og${q!Z${q#^${q#}${q~P!0uO!W'ea!Z'ea~P#.{O!e7lO~O!Z/sO!W(}i~P#.{O!Z/sO!W(}i~O!W7oO~Oh%VOp7tO!j%dO(p'nO~O!e#vO#t7vO~Op7yO!e#vO(p'nO~O!O)|O'w)}O(x%POl'ha(w'ha!Z'ha#^'ha~Og'ha#}'ha~P&3oO!O)|O'w)}Ol'ja(w'ja(x'ja!Z'ja#^'ja~Og'ja#}'ja~P&4bO!W7{O~Og$}q!Z$}q#^$}q#}$}q~P!0uOg(]q!Z(]q~P!0uO#^7|Og(]q!Z(]q~P!0uOa$ny!Z$ny'x$ny'u$ny!W$ny!i$nyt$ny!]$ny%h$ny!e$ny~P!:TO!e6hO~O!Z5RO!])Oa~O!]'^OP$SaR$Sa[$Sap$Sa!O$Sa!Q$Sa!Z$Sa!j$Sa!n$Sa#P$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#t$Sa#u$Sa#w$Sa#y$Sa#z$Sa(_$Sa(p$Sa(w$Sa(x$Sa~O%h6|O~P&7SO%]8QOa%Zi!]%Zi'x%Zi!Z%Zi~Oa#ay!Z#ay'x#ay'u#ay!W#ay!i#ayt#ay!]#ay%h#ay!e#ay~P!:TO[8SO~Ob8UO(R+nO(TTO(WUO~O!Z0}O![)Vi~O`8YO~O(c(zO!Z'nX!['nX~O!Z5kO![)Sa~O![8cO~P%:RO(m!sO~P$$oO#Y8dO~O!]1gO~O!]1gO%h8fO~Ol8iO!]1gO%h8fO~O[8nO!Z'qa!['qa~O!Z1rO![)Ti~O!i8rO~O!i8sO~O!i8vO~O!i8vO~P%[Oa8xO~O!e8yO~O!i8zO~O!Z(ui![(ui~P#BPOa%mO#^9SO'x%mO~O!Z(ry!i(rya(ry'x(ry~P!:TO!Z(hO!i(qy~O%h9VO~P&7SO!]'^O%h9VO~O#i${qP${qR${q[${qa${qp${q!Q${q!Z${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q'x${q(_${q(p${q!i${q!W${q'u${q#^${qt${q!]${q%h${q!e${q~P#.{O#i'haP'haR'ha['haa'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha'x'ha(_'ha(p'ha!i'ha!W'ha'u'hat'ha!]'ha%h'ha!e'ha~P&3oO#i'jaP'jaR'ja['jaa'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja'x'ja(_'ja(p'ja!i'ja!W'ja'u'jat'ja!]'ja%h'ja!e'ja~P&4bO#i$}qP$}qR$}q[$}qa$}qp$}q!Q$}q!Z$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q'x$}q(_$}q(p$}q!i$}q!W$}q'u$}q#^$}qt$}q!]$}q%h$}q!e$}q~P#.{O!Z'Wi!i'Wi~P!:TO#}#aq!Z#aq![#aq~P#BPO(w$}OP%`aR%`a[%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a#}%`a(_%`a(p%`a!Z%`a![%`a~Ol%`a!O%`a'w%`a(x%`a~P&HgO(x%POP%baR%ba[%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba#}%ba(_%ba(p%ba!Z%ba![%ba~Ol%ba!O%ba'w%ba(w%ba~P&JnOl=}O!O)|O'w)}O(x%PO~P&HgOl=}O!O)|O'w)}O(w$}O~P&JnOR0cO!O0cO!Q0dO#Q$dOP{a[{al{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a#}{a'w{a(_{a(p{a(w{a(x{a!Z{a![{a~O!O)|O'w)}OP$raR$ra[$ral$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra#}$ra(_$ra(p$ra(w$ra(x$ra!Z$ra![$ra~O!O)|O'w)}OP$taR$ta[$tal$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta#}$ta(_$ta(p$ta(w$ta(x$ta!Z$ta![$ta~Ol=}O!O)|O'w)}O(w$}O(x%PO~OP%SaR%Sa[%Sap%Sa!Q%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa#}%Sa(_%Sa(p%Sa!Z%Sa![%Sa~P'%sO#}$lq!Z$lq![$lq~P#BPO#}$nq!Z$nq![$nq~P#BPO![9dO~O#}9eO~P!0uO!e#vO!Z'ci!i'ci~O!e#vO(p'nO!Z'ci!i'ci~O!Z/kO!i(|q~O!W'ei!Z'ei~P#.{O!Z/sO!W(}q~Op9lO!e#vO(p'nO~O[9nO!W9mO~P#.{O!W9mO~O!e#vO#t9tO~Og(]y!Z(]y~P!0uO!Z'la!]'la~P#.{Oa%Zq!]%Zq'x%Zq!Z%Zq~P#.{O[9yO~O!Z0}O![)Vq~O#^9}O!Z'na!['na~O!Z5kO![)Si~P#BPO!Q:PO~O!]1gO%h:SO~O(TTO(WUO(c:XO~O!Z1rO![)Tq~O!i:[O~O!i:]O~O!i:^O~O!i:^O~P%[O#^:aO!Z#fy![#fy~O!Z#fy![#fy~P#BPO%h:fO~P&7SO!]'^O%h:fO~O#}#{y!Z#{y![#{y~P#BPOP${iR${i[${ip${i!Q${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i#}${i(_${i(p${i!Z${i![${i~P'%sO!O)|O'w)}O(x%POP'gaR'ga['gal'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga#}'ga(_'ga(p'ga(w'ga!Z'ga!['ga~O!O)|O'w)}OP'iaR'ia['ial'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia#}'ia(_'ia(p'ia(w'ia(x'ia!Z'ia!['ia~O(w$}OP%`iR%`i[%`il%`ip%`i!O%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i#}%`i'w%`i(_%`i(p%`i(x%`i!Z%`i![%`i~O(x%POP%biR%bi[%bil%bip%bi!O%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi#}%bi'w%bi(_%bi(p%bi(w%bi!Z%bi![%bi~O#}$ny!Z$ny![$ny~P#BPO#}#ay!Z#ay![#ay~P#BPO!e#vO!Z'cq!i'cq~O!Z/kO!i(|y~O!W'eq!Z'eq~P#.{Op:pO!e#vO(p'nO~O[:tO!W:sO~P#.{O!W:sO~Og(]!R!Z(]!R~P!0uOa%Zy!]%Zy'x%Zy!Z%Zy~P#.{O!Z0}O![)Vy~O!Z5kO![)Sq~O(R:zO~O!]1gO%h:}O~O!i;QO~O%h;VO~P&7SOP${qR${q[${qp${q!Q${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q#}${q(_${q(p${q!Z${q![${q~P'%sO!O)|O'w)}O(x%POP'haR'ha['hal'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha#}'ha(_'ha(p'ha(w'ha!Z'ha!['ha~O!O)|O'w)}OP'jaR'ja['jal'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja#}'ja(_'ja(p'ja(w'ja(x'ja!Z'ja!['ja~OP$}qR$}q[$}qp$}q!Q$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q#}$}q(_$}q(p$}q!Z$}q![$}q~P'%sOg%d!Z!Z%d!Z#^%d!Z#}%d!Z~P!0uO!W;ZO~P#.{Op;[O!e#vO(p'nO~O[;^O!W;ZO~P#.{O!Z'nq!['nq~P#BPO!Z#f!Z![#f!Z~P#BPO#i%d!ZP%d!ZR%d!Z[%d!Za%d!Zp%d!Z!Q%d!Z!Z%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z'x%d!Z(_%d!Z(p%d!Z!i%d!Z!W%d!Z'u%d!Z#^%d!Zt%d!Z!]%d!Z%h%d!Z!e%d!Z~P#.{Op;fO!e#vO(p'nO~O!W;gO~P#.{Op;nO!e#vO(p'nO~O!W;oO~P#.{OP%d!ZR%d!Z[%d!Zp%d!Z!Q%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z#}%d!Z(_%d!Z(p%d!Z!Z%d!Z![%d!Z~P'%sOp;rO!e#vO(p'nO~Ot(dX~P1qO!O%qO~P!(yO(S!lO~P!(yO!WfX!ZfX#^fX~P%0XOP]XR]X[]Xp]X!O]X!Q]X!Z]X!ZfX!j]X!n]X#P]X#Q]X#^]X#^fX#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!efX!i]X!ifX(pfX~P'JlOP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]XO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z<ZO![$pa~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<fO!Q${O!]$|O!g=wO!j$xO#h<lO$V%_O$s<hO$u<jO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Oj)bO~P( bOp!cX(p!cX~P# qOp(hX(p(hX~P#!dO![]X![fX~P'JlO!WfX!W$yX!ZfX!Z$yX#^fX~P!/qO#i<OO~O!e#vO#i<OO~O#^<`O~O#t<SO~O#^<pO!Z(uX![(uX~O#^<`O!Z(sX![(sX~O#i<qO~Og<sO~P!0uO#i<yO~O#i<zO~O!e#vO#i<{O~O!e#vO#i<qO~O#}<|O~P#BPO#i<}O~O#i=OO~O#i=TO~O#i=UO~O#i=VO~O#i=WO~O#}=XO~P!0uO#}=YO~P!0uO#Q#R#S#U#V#Y#g#h#s$m$s$u$x%[%]%g%h%i%p%r%u%v%x%z~'|T#m!V'z(S#nq#l#op!O'{$['{(R$^(c~",
  goto: "$8f)ZPPPPPP)[PP)_P)pP+Q/VPPPP6aPP6wPP<oP@cP@yP@yPPP@yPCRP@yP@yP@yPCVPC[PCyPHsPPPHwPPPPHwKzPPPLQLrPHwPHwPP! QHwPPPHwPHwP!#XHwP!&o!'t!'}P!(q!(u!(q!,SPPPPPPP!,s!'tPP!-T!.uP!2RHwHw!2W!5d!:Q!:Q!>PPPP!>XHwPPPPPPPPPP!AhP!BuPPHw!DWPHwPHwHwHwHwHwPHw!EjP!HtP!KzP!LO!LY!L^!L^P!HqP!Lb!LbP# hP# lHwPHw# r#$wCV@yP@yP@y@yP#&U@y@y#(h@y#+`@y#-l@y@y#.[#0p#0p#0u#1O#0p#1ZPP#0pP@y#1s@y#5r@y@y6aPPP#9wPPP#:b#:bP#:bP#:x#:bPP#;OP#:uP#:u#;c#:u#;}#<T#<W)_#<Z)_P#<b#<b#<bP)_P)_P)_P)_PP)_P#<h#<kP#<k)_P#<oP#<rP)_P)_P)_P)_P)_P)_)_PP#<x#=O#=Z#=a#=g#=m#=s#>R#>X#>c#>i#>s#>y#?Z#?a#@R#@e#@k#@q#AP#Af#CZ#Ci#Cp#E[#Ej#G[#Gj#Gp#Gv#G|#HW#H^#Hd#Hn#IQ#IWPPPPPPPPPPP#I^PPPPPPP#JR#MY#Nr#Ny$ RPPP$&mP$&v$)o$0Y$0]$0`$1_$1b$1i$1qP$1w$1zP$2h$2l$3d$4r$4w$5_PP$5d$5j$5n$5q$5u$5y$6u$7^$7u$7y$7|$8P$8V$8Y$8^$8bR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0u+fQ1S+rQ1y,fQ3W.bQ5V0wQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
  nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 378,
  context: g$,
  nodeProps: [
    ["isolate", -8, 5, 6, 14, 35, 37, 49, 51, 53, ""],
    ["group", -26, 9, 17, 19, 66, 206, 210, 214, 215, 217, 220, 223, 233, 235, 241, 243, 245, 247, 250, 256, 262, 264, 266, 268, 270, 272, 273, "Statement", -34, 13, 14, 30, 33, 34, 40, 49, 52, 53, 55, 60, 68, 70, 74, 78, 80, 82, 83, 108, 109, 118, 119, 135, 138, 140, 141, 142, 143, 144, 146, 147, 166, 168, 170, "Expression", -23, 29, 31, 35, 39, 41, 43, 172, 174, 176, 177, 179, 180, 181, 183, 184, 185, 187, 188, 189, 200, 202, 204, 205, "Type", -3, 86, 101, 107, "ClassItem"],
    ["openedBy", 23, "<", 36, "InterpolationStart", 54, "[", 58, "{", 71, "(", 159, "JSXStartCloseTag"],
    ["closedBy", -2, 24, 167, ">", 38, "InterpolationEnd", 48, "]", 59, "}", 72, ")", 164, "JSXEndTag"]
  ],
  propSources: [w$],
  skippedNodes: [0, 5, 6, 276],
  repeatNodeCount: 37,
  tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Up(X!b'z0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(V#S$h&j'{0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Up(X!b'{0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!n),Q(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(T':f$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(X!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Up(X!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Up(X!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(X!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(X!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(UpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(UpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Up(X!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(m%1l(Up(X!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Up(X!b$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Up(X!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Up(X!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(x+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(W';W$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(UpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!j/.^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!i!Lf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Up(X!b(S%&f#o(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Up(X!b#l(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Up(X!bp+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Z+Jf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Up(X!b!O.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!Y!L^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Up(X!b#m(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(X!b!V7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!V7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!V7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!V7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!V7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(X!b!V7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(X!b!V7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(X!b!V7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(X!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(X!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Up!V7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Up!V7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Up!V7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Up!V7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(UpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(UpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Up(X!b!V7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Up(X!b!V7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Up(X!b!V7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Up(X!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Up(X!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Up(X!b'|0/l!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Up(X!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(X!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(X!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(UpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(UpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Up(X!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!e$b$h&j#})Lv(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#P-<U(Up(X!b$m7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#p(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#q(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#^*!Y$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#i(Cl$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#q(Ch$e#|$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#q(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(p(Ct$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!z$Ip$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!Q0,v$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!W#)l$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Up(X!b(_+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Up(X!b(R,2j$^#t(c$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Up(X!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!]#Hb(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(w+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_![(CdtBr$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!o7`$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Up(X!b'z0/l$[#t(R,2j(c$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Up(X!b'{0/l$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [y$, b$, x$, v$, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, O$, new ba("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOv~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!S~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(a~~", 141, 338), new ba("j~RQYZXz{^~^O(O~~aP!P!Qd~iO(P~~", 25, 321)],
  topRules: { Script: [0, 7], SingleExpression: [1, 274], SingleClassItem: [2, 275] },
  dialects: { jsx: 0, ts: 15091 },
  dynamicPrecedences: { 78: 1, 80: 1, 92: 1, 168: 1, 198: 1 },
  specialized: [{ term: 325, get: (n) => k$[n] || -1 }, { term: 341, get: (n) => S$[n] || -1 }, { term: 93, get: (n) => Q$[n] || -1 }],
  tokenPrec: 15116
});
function bm(n) {
  let e = Object.keys(n).join(""), t = /\w/.test(e);
  return t && (e = e.replace(/\w/g, "")), `[${t ? "\\w" : ""}${e.replace(/[^\w\s]/g, "\\$&")}]`;
}
function C$(n) {
  let e = /* @__PURE__ */ Object.create(null), t = /* @__PURE__ */ Object.create(null);
  for (let { label: i } of n) {
    e[i[0]] = !0;
    for (let s = 1; s < i.length; s++)
      t[i[s]] = !0;
  }
  let r = bm(e) + bm(t) + "*$";
  return [new RegExp("^" + r), new RegExp(r)];
}
function A$(n) {
  let e = n.map((i) => typeof i == "string" ? { label: i } : i), [t, r] = e.every((i) => /^\w+$/.test(i.label)) ? [/\w*$/, /\w+$/] : C$(e);
  return (i) => {
    let s = i.matchBefore(r);
    return s || i.explicit ? { from: s ? s.from : i.pos, options: e, validFor: t } : null;
  };
}
function $$(n, e) {
  return (t) => {
    for (let r = ot(t.state).resolveInner(t.pos, -1); r; r = r.parent) {
      if (n.indexOf(r.name) > -1)
        return null;
      if (r.type.isTop)
        break;
    }
    return e(t);
  };
}
const D$ = /* @__PURE__ */ nr.define(), T$ = /* @__PURE__ */ he.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box",
    whiteSpace: "pre-line"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class M$ {
  constructor(e, t, r, i) {
    this.field = e, this.line = t, this.from = r, this.to = i;
  }
}
class lc {
  constructor(e, t, r) {
    this.field = e, this.from = t, this.to = r;
  }
  map(e) {
    let t = e.mapPos(this.from, -1, bt.TrackDel), r = e.mapPos(this.to, 1, bt.TrackDel);
    return t == null || r == null ? null : new lc(this.field, t, r);
  }
}
class ac {
  constructor(e, t) {
    this.lines = e, this.fieldPositions = t;
  }
  instantiate(e, t) {
    let r = [], i = [t], s = e.doc.lineAt(t), l = /^\s*/.exec(s.text)[0];
    for (let o of this.lines) {
      if (r.length) {
        let u = l, h = /^\t*/.exec(o)[0].length;
        for (let c = 0; c < h; c++)
          u += e.facet(_s);
        i.push(t + u.length - h), o = u + o.slice(h);
      }
      r.push(o), t += o.length + 1;
    }
    let a = this.fieldPositions.map((o) => new lc(o.field, i[o.line] + o.from, i[o.line] + o.to));
    return { text: r, ranges: a };
  }
  static parse(e) {
    let t = [], r = [], i = [], s;
    for (let l of e.split(/\r\n?|\n/)) {
      for (; s = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(l); ) {
        let a = s[1] ? +s[1] : null, o = s[2] || s[3] || "", u = -1, h = o.replace(/\\[{}]/g, (c) => c[1]);
        for (let c = 0; c < t.length; c++)
          (a != null ? t[c].seq == a : h && t[c].name == h) && (u = c);
        if (u < 0) {
          let c = 0;
          for (; c < t.length && (a == null || t[c].seq != null && t[c].seq < a); )
            c++;
          t.splice(c, 0, { seq: a, name: h }), u = c;
          for (let f of i)
            f.field >= u && f.field++;
        }
        i.push(new M$(u, r.length, s.index, s.index + h.length)), l = l.slice(0, s.index) + o + l.slice(s.index + s[0].length);
      }
      l = l.replace(/\\([{}])/g, (a, o, u) => {
        for (let h of i)
          h.line == r.length && h.from > u && (h.from--, h.to--);
        return o;
      }), r.push(l);
    }
    return new ac(r, i);
  }
}
let E$ = /* @__PURE__ */ Ue.widget({ widget: /* @__PURE__ */ new class extends Ba {
  toDOM() {
    let n = document.createElement("span");
    return n.className = "cm-snippetFieldPosition", n;
  }
  ignoreEvent() {
    return !1;
  }
}() }), R$ = /* @__PURE__ */ Ue.mark({ class: "cm-snippetField" });
class Di {
  constructor(e, t) {
    this.ranges = e, this.active = t, this.deco = Ue.set(e.map((r) => (r.from == r.to ? E$ : R$).range(r.from, r.to)));
  }
  map(e) {
    let t = [];
    for (let r of this.ranges) {
      let i = r.map(e);
      if (!i)
        return null;
      t.push(i);
    }
    return new Di(t, this.active);
  }
  selectionInsideField(e) {
    return e.ranges.every((t) => this.ranges.some((r) => r.field == this.active && r.from <= t.from && r.to >= t.to));
  }
}
const Gs = /* @__PURE__ */ Ie.define({
  map(n, e) {
    return n && n.map(e);
  }
}), Z$ = /* @__PURE__ */ Ie.define(), Ds = /* @__PURE__ */ Rn.define({
  create() {
    return null;
  },
  update(n, e) {
    for (let t of e.effects) {
      if (t.is(Gs))
        return t.value;
      if (t.is(Z$) && n)
        return new Di(n.ranges, t.value);
    }
    return n && e.docChanged && (n = n.map(e.changes)), n && e.selection && !n.selectionInsideField(e.selection) && (n = null), n;
  },
  provide: (n) => he.decorations.from(n, (e) => e ? e.deco : Ue.none)
});
function oc(n, e) {
  return _.create(n.filter((t) => t.field == e).map((t) => _.range(t.from, t.to)));
}
function z$(n) {
  let e = ac.parse(n);
  return (t, r, i, s) => {
    let { text: l, ranges: a } = e.instantiate(t.state, i), { main: o } = t.state.selection, u = {
      changes: { from: i, to: s == o.from ? o.to : s, insert: ye.of(l) },
      scrollIntoView: !0,
      annotations: r ? [D$.of(r), Ke.userEvent.of("input.complete")] : void 0
    };
    if (a.length && (u.selection = oc(a, 0)), a.some((h) => h.field > 0)) {
      let h = new Di(a, 0), c = u.effects = [Gs.of(h)];
      t.state.field(Ds, !1) === void 0 && c.push(Ie.appendConfig.of([Ds, X$, I$, T$]));
    }
    t.dispatch(t.state.update(u));
  };
}
function s5(n) {
  return ({ state: e, dispatch: t }) => {
    let r = e.field(Ds, !1);
    if (!r || n < 0 && r.active == 0)
      return !1;
    let i = r.active + n, s = n > 0 && !r.ranges.some((l) => l.field == i + n);
    return t(e.update({
      selection: oc(r.ranges, i),
      effects: Gs.of(s ? null : new Di(r.ranges, i)),
      scrollIntoView: !0
    })), !0;
  };
}
const F$ = ({ state: n, dispatch: e }) => n.field(Ds, !1) ? (e(n.update({ effects: Gs.of(null) })), !0) : !1, B$ = /* @__PURE__ */ s5(1), L$ = /* @__PURE__ */ s5(-1), q$ = [
  { key: "Tab", run: B$, shift: L$ },
  { key: "Escape", run: F$ }
], xm = /* @__PURE__ */ oe.define({
  combine(n) {
    return n.length ? n[0] : q$;
  }
}), X$ = /* @__PURE__ */ Ai.highest(/* @__PURE__ */ Vs.compute([xm], (n) => n.facet(xm)));
function Qt(n, e) {
  return Object.assign(Object.assign({}, e), { apply: z$(n) });
}
const I$ = /* @__PURE__ */ he.domEventHandlers({
  mousedown(n, e) {
    let t = e.state.field(Ds, !1), r;
    if (!t || (r = e.posAtCoords({ x: n.clientX, y: n.clientY })) == null)
      return !1;
    let i = t.ranges.find((s) => s.from <= r && s.to >= r);
    return !i || i.field == t.active ? !1 : (e.dispatch({
      selection: oc(t.ranges, i.field),
      effects: Gs.of(t.ranges.some((s) => s.field > i.field) ? new Di(t.ranges, i.field) : null),
      scrollIntoView: !0
    }), !0);
  }
}), l5 = /* @__PURE__ */ new class extends Or {
}();
l5.startSide = 1;
l5.endSide = -1;
const a5 = [
  /* @__PURE__ */ Qt("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt(`try {
	\${}
} catch (\${error}) {
	\${}
}`, {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt(`if (\${}) {
	\${}
} else {
	\${}
}`, {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt(`class \${name} {
	constructor(\${params}) {
		\${}
	}
}`, {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
], N$ = /* @__PURE__ */ a5.concat([
  /* @__PURE__ */ Qt("interface ${name} {\n	${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Qt("enum ${name} {\n	${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })
]), vm = /* @__PURE__ */ new fO(), o5 = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function Vi(n) {
  return (e, t) => {
    let r = e.node.getChild("VariableDefinition");
    return r && t(r, n), !0;
  };
}
const V$ = ["FunctionDeclaration"], j$ = {
  FunctionDeclaration: /* @__PURE__ */ Vi("function"),
  ClassDeclaration: /* @__PURE__ */ Vi("class"),
  ClassExpression: () => !0,
  EnumDeclaration: /* @__PURE__ */ Vi("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ Vi("type"),
  NamespaceDeclaration: /* @__PURE__ */ Vi("namespace"),
  VariableDefinition(n, e) {
    n.matchContext(V$) || e(n, "variable");
  },
  TypeDefinition(n, e) {
    e(n, "type");
  },
  __proto__: null
};
function u5(n, e) {
  let t = vm.get(e);
  if (t)
    return t;
  let r = [], i = !0;
  function s(l, a) {
    let o = n.sliceString(l.from, l.to);
    r.push({ label: o, type: a });
  }
  return e.cursor(Fe.IncludeAnonymous).iterate((l) => {
    if (i)
      i = !1;
    else if (l.name) {
      let a = j$[l.name];
      if (a && a(l, s) || o5.has(l.name))
        return !1;
    } else if (l.to - l.from > 8192) {
      for (let a of u5(n, l.node))
        r.push(a);
      return !1;
    }
  }), vm.set(e, r), r;
}
const wm = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/, h5 = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  "JSXText",
  "JSXAttributeValue",
  "JSXOpenTag",
  "JSXCloseTag",
  "JSXSelfClosingTag",
  ".",
  "?."
];
function _$(n) {
  let e = ot(n.state).resolveInner(n.pos, -1);
  if (h5.indexOf(e.name) > -1)
    return null;
  let t = e.name == "VariableName" || e.to - e.from < 20 && wm.test(n.state.sliceDoc(e.from, e.to));
  if (!t && !n.explicit)
    return null;
  let r = [];
  for (let i = e; i; i = i.parent)
    o5.has(i.name) && (r = r.concat(u5(n.state.doc, i)));
  return {
    options: r,
    from: t ? e.from : n.pos,
    validFor: wm
  };
}
const Cn = /* @__PURE__ */ gi.define({
  name: "javascript",
  parser: /* @__PURE__ */ P$.configure({
    props: [
      /* @__PURE__ */ Us.add({
        IfStatement: /* @__PURE__ */ Nl({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ Nl({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: eP,
        SwitchBody: (n) => {
          let e = n.textAfter, t = /^\s*\}/.test(e), r = /^\s*(case|default)\b/.test(e);
          return n.baseIndent + (t ? 0 : r ? 1 : 2) * n.unit;
        },
        Block: /* @__PURE__ */ JQ({ closing: "}" }),
        ArrowFunction: (n) => n.baseIndent + n.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ Nl({ except: /^{/ }),
        JSXElement(n) {
          let e = /^\s*<\//.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        JSXEscape(n) {
          let e = /\s*\}/.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        }
      }),
      /* @__PURE__ */ Ws.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": q4,
        BlockComment(n) {
          return { from: n.from + 2, to: n.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
}), c5 = {
  test: (n) => /^JSX/.test(n.name),
  facet: /* @__PURE__ */ Gh({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
}, f5 = /* @__PURE__ */ Cn.configure({ dialect: "ts" }, "typescript"), d5 = /* @__PURE__ */ Cn.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ Hh.add((n) => n.isTop ? [c5] : void 0)]
}), p5 = /* @__PURE__ */ Cn.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ Hh.add((n) => n.isTop ? [c5] : void 0)]
}, "typescript");
let m5 = (n) => ({ label: n, type: "keyword" });
const g5 = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(m5), U$ = /* @__PURE__ */ g5.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(m5));
function W$(n = {}) {
  let e = n.jsx ? n.typescript ? p5 : d5 : n.typescript ? f5 : Cn, t = n.typescript ? N$.concat(U$) : a5.concat(g5);
  return new Ps(e, [
    Cn.data.of({
      autocomplete: $$(h5, A$(t))
    }),
    Cn.data.of({
      autocomplete: _$
    }),
    n.jsx ? H$ : []
  ]);
}
function Y$(n) {
  for (; ; ) {
    if (n.name == "JSXOpenTag" || n.name == "JSXSelfClosingTag" || n.name == "JSXFragmentTag")
      return n;
    if (n.name == "JSXEscape" || !n.parent)
      return null;
    n = n.parent;
  }
}
function km(n, e, t = n.length) {
  for (let r = e == null ? void 0 : e.firstChild; r; r = r.nextSibling)
    if (r.name == "JSXIdentifier" || r.name == "JSXBuiltin" || r.name == "JSXNamespacedName" || r.name == "JSXMemberExpression")
      return n.sliceString(r.from, Math.min(r.to, t));
  return "";
}
const G$ = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), H$ = /* @__PURE__ */ he.inputHandler.of((n, e, t, r, i) => {
  if ((G$ ? n.composing : n.compositionStarted) || n.state.readOnly || e != t || r != ">" && r != "/" || !Cn.isActiveAt(n.state, e, -1))
    return !1;
  let s = i(), { state: l } = s, a = l.changeByRange((o) => {
    var u;
    let { head: h } = o, c = ot(l).resolveInner(h - 1, -1), f;
    if (c.name == "JSXStartTag" && (c = c.parent), !(l.doc.sliceString(h - 1, h) != r || c.name == "JSXAttributeValue" && c.to > h)) {
      if (r == ">" && c.name == "JSXFragmentTag")
        return { range: o, changes: { from: h, insert: "</>" } };
      if (r == "/" && c.name == "JSXStartCloseTag") {
        let d = c.parent, m = d.parent;
        if (m && d.from == h - 2 && ((f = km(l.doc, m.firstChild, h)) || ((u = m.firstChild) === null || u === void 0 ? void 0 : u.name) == "JSXFragmentTag")) {
          let O = `${f}>`;
          return { range: _.cursor(h + O.length, -1), changes: { from: h, insert: O } };
        }
      } else if (r == ">") {
        let d = Y$(c);
        if (d && d.name == "JSXOpenTag" && !/^\/?>|^<\//.test(l.doc.sliceString(h, h + 2)) && (f = km(l.doc, d, h)))
          return { range: o, changes: { from: h, insert: `</${f}>` } };
      }
    }
    return { range: o };
  });
  return a.changes.empty ? !1 : (n.dispatch([
    s,
    l.update(a, { userEvent: "input.complete", scrollIntoView: !0 })
  ]), !0);
}), ji = ["_blank", "_self", "_top", "_parent"], wu = ["ascii", "utf-8", "utf-16", "latin1", "latin1"], ku = ["get", "post", "put", "delete"], Su = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], Zt = ["true", "false"], re = {}, K$ = {
  a: {
    attrs: {
      href: null,
      ping: null,
      type: null,
      media: null,
      target: ji,
      hreflang: null
    }
  },
  abbr: re,
  address: re,
  area: {
    attrs: {
      alt: null,
      coords: null,
      href: null,
      target: null,
      ping: null,
      media: null,
      hreflang: null,
      type: null,
      shape: ["default", "rect", "circle", "poly"]
    }
  },
  article: re,
  aside: re,
  audio: {
    attrs: {
      src: null,
      mediagroup: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["none", "metadata", "auto"],
      autoplay: ["autoplay"],
      loop: ["loop"],
      controls: ["controls"]
    }
  },
  b: re,
  base: { attrs: { href: null, target: ji } },
  bdi: re,
  bdo: re,
  blockquote: { attrs: { cite: null } },
  body: re,
  br: re,
  button: {
    attrs: {
      form: null,
      formaction: null,
      name: null,
      value: null,
      autofocus: ["autofocus"],
      disabled: ["autofocus"],
      formenctype: Su,
      formmethod: ku,
      formnovalidate: ["novalidate"],
      formtarget: ji,
      type: ["submit", "reset", "button"]
    }
  },
  canvas: { attrs: { width: null, height: null } },
  caption: re,
  center: re,
  cite: re,
  code: re,
  col: { attrs: { span: null } },
  colgroup: { attrs: { span: null } },
  command: {
    attrs: {
      type: ["command", "checkbox", "radio"],
      label: null,
      icon: null,
      radiogroup: null,
      command: null,
      title: null,
      disabled: ["disabled"],
      checked: ["checked"]
    }
  },
  data: { attrs: { value: null } },
  datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
  datalist: { attrs: { data: null } },
  dd: re,
  del: { attrs: { cite: null, datetime: null } },
  details: { attrs: { open: ["open"] } },
  dfn: re,
  div: re,
  dl: re,
  dt: re,
  em: re,
  embed: { attrs: { src: null, type: null, width: null, height: null } },
  eventsource: { attrs: { src: null } },
  fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
  figcaption: re,
  figure: re,
  footer: re,
  form: {
    attrs: {
      action: null,
      name: null,
      "accept-charset": wu,
      autocomplete: ["on", "off"],
      enctype: Su,
      method: ku,
      novalidate: ["novalidate"],
      target: ji
    }
  },
  h1: re,
  h2: re,
  h3: re,
  h4: re,
  h5: re,
  h6: re,
  head: {
    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
  },
  header: re,
  hgroup: re,
  hr: re,
  html: {
    attrs: { manifest: null }
  },
  i: re,
  iframe: {
    attrs: {
      src: null,
      srcdoc: null,
      name: null,
      width: null,
      height: null,
      sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
      seamless: ["seamless"]
    }
  },
  img: {
    attrs: {
      alt: null,
      src: null,
      ismap: null,
      usemap: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"]
    }
  },
  input: {
    attrs: {
      alt: null,
      dirname: null,
      form: null,
      formaction: null,
      height: null,
      list: null,
      max: null,
      maxlength: null,
      min: null,
      name: null,
      pattern: null,
      placeholder: null,
      size: null,
      src: null,
      step: null,
      value: null,
      width: null,
      accept: ["audio/*", "video/*", "image/*"],
      autocomplete: ["on", "off"],
      autofocus: ["autofocus"],
      checked: ["checked"],
      disabled: ["disabled"],
      formenctype: Su,
      formmethod: ku,
      formnovalidate: ["novalidate"],
      formtarget: ji,
      multiple: ["multiple"],
      readonly: ["readonly"],
      required: ["required"],
      type: [
        "hidden",
        "text",
        "search",
        "tel",
        "url",
        "email",
        "password",
        "datetime",
        "date",
        "month",
        "week",
        "time",
        "datetime-local",
        "number",
        "range",
        "color",
        "checkbox",
        "radio",
        "file",
        "submit",
        "image",
        "reset",
        "button"
      ]
    }
  },
  ins: { attrs: { cite: null, datetime: null } },
  kbd: re,
  keygen: {
    attrs: {
      challenge: null,
      form: null,
      name: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      keytype: ["RSA"]
    }
  },
  label: { attrs: { for: null, form: null } },
  legend: re,
  li: { attrs: { value: null } },
  link: {
    attrs: {
      href: null,
      type: null,
      hreflang: null,
      media: null,
      sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
    }
  },
  map: { attrs: { name: null } },
  mark: re,
  menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
  meta: {
    attrs: {
      content: null,
      charset: wu,
      name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
      "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
    }
  },
  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
  nav: re,
  noscript: re,
  object: {
    attrs: {
      data: null,
      type: null,
      name: null,
      usemap: null,
      form: null,
      width: null,
      height: null,
      typemustmatch: ["typemustmatch"]
    }
  },
  ol: {
    attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
    children: ["li", "script", "template", "ul", "ol"]
  },
  optgroup: { attrs: { disabled: ["disabled"], label: null } },
  option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
  output: { attrs: { for: null, form: null, name: null } },
  p: re,
  param: { attrs: { name: null, value: null } },
  pre: re,
  progress: { attrs: { value: null, max: null } },
  q: { attrs: { cite: null } },
  rp: re,
  rt: re,
  ruby: re,
  samp: re,
  script: {
    attrs: {
      type: ["text/javascript"],
      src: null,
      async: ["async"],
      defer: ["defer"],
      charset: wu
    }
  },
  section: re,
  select: {
    attrs: {
      form: null,
      name: null,
      size: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      multiple: ["multiple"]
    }
  },
  slot: { attrs: { name: null } },
  small: re,
  source: { attrs: { src: null, type: null, media: null } },
  span: re,
  strong: re,
  style: {
    attrs: {
      type: ["text/css"],
      media: null,
      scoped: null
    }
  },
  sub: re,
  summary: re,
  sup: re,
  table: re,
  tbody: re,
  td: { attrs: { colspan: null, rowspan: null, headers: null } },
  template: re,
  textarea: {
    attrs: {
      dirname: null,
      form: null,
      maxlength: null,
      name: null,
      placeholder: null,
      rows: null,
      cols: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      readonly: ["readonly"],
      required: ["required"],
      wrap: ["soft", "hard"]
    }
  },
  tfoot: re,
  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
  thead: re,
  time: { attrs: { datetime: null } },
  title: re,
  tr: re,
  track: {
    attrs: {
      src: null,
      label: null,
      default: null,
      kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      srclang: null
    }
  },
  ul: { children: ["li", "script", "template", "ul", "ol"] },
  var: re,
  video: {
    attrs: {
      src: null,
      poster: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["auto", "metadata", "none"],
      autoplay: ["autoplay"],
      mediagroup: ["movie"],
      muted: ["muted"],
      controls: ["controls"]
    }
  },
  wbr: re
}, O5 = {
  accesskey: null,
  class: null,
  contenteditable: Zt,
  contextmenu: null,
  dir: ["ltr", "rtl", "auto"],
  draggable: ["true", "false", "auto"],
  dropzone: ["copy", "move", "link", "string:", "file:"],
  hidden: ["hidden"],
  id: null,
  inert: ["inert"],
  itemid: null,
  itemprop: null,
  itemref: null,
  itemscope: ["itemscope"],
  itemtype: null,
  lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
  spellcheck: Zt,
  autocorrect: Zt,
  autocapitalize: Zt,
  style: null,
  tabindex: null,
  title: null,
  translate: ["yes", "no"],
  rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
  role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
  "aria-activedescendant": null,
  "aria-atomic": Zt,
  "aria-autocomplete": ["inline", "list", "both", "none"],
  "aria-busy": Zt,
  "aria-checked": ["true", "false", "mixed", "undefined"],
  "aria-controls": null,
  "aria-describedby": null,
  "aria-disabled": Zt,
  "aria-dropeffect": null,
  "aria-expanded": ["true", "false", "undefined"],
  "aria-flowto": null,
  "aria-grabbed": ["true", "false", "undefined"],
  "aria-haspopup": Zt,
  "aria-hidden": Zt,
  "aria-invalid": ["true", "false", "grammar", "spelling"],
  "aria-label": null,
  "aria-labelledby": null,
  "aria-level": null,
  "aria-live": ["off", "polite", "assertive"],
  "aria-multiline": Zt,
  "aria-multiselectable": Zt,
  "aria-owns": null,
  "aria-posinset": null,
  "aria-pressed": ["true", "false", "mixed", "undefined"],
  "aria-readonly": Zt,
  "aria-relevant": null,
  "aria-required": Zt,
  "aria-selected": ["true", "false", "undefined"],
  "aria-setsize": null,
  "aria-sort": ["ascending", "descending", "none", "other"],
  "aria-valuemax": null,
  "aria-valuemin": null,
  "aria-valuenow": null,
  "aria-valuetext": null
}, y5 = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((n) => "on" + n);
for (let n of y5)
  O5[n] = null;
class Ts {
  constructor(e, t) {
    this.tags = Object.assign(Object.assign({}, K$), e), this.globalAttrs = Object.assign(Object.assign({}, O5), t), this.allTags = Object.keys(this.tags), this.globalAttrNames = Object.keys(this.globalAttrs);
  }
}
Ts.default = /* @__PURE__ */ new Ts();
function vi(n, e, t = n.length) {
  if (!e)
    return "";
  let r = e.firstChild, i = r && r.getChild("TagName");
  return i ? n.sliceString(i.from, Math.min(i.to, t)) : "";
}
function wi(n, e = !1) {
  for (; n; n = n.parent)
    if (n.name == "Element")
      if (e)
        e = !1;
      else
        return n;
  return null;
}
function b5(n, e, t) {
  let r = t.tags[vi(n, wi(e))];
  return (r == null ? void 0 : r.children) || t.allTags;
}
function uc(n, e) {
  let t = [];
  for (let r = wi(e); r && !r.type.isTop; r = wi(r.parent)) {
    let i = vi(n, r);
    if (i && r.lastChild.name == "CloseTag")
      break;
    i && t.indexOf(i) < 0 && (e.name == "EndTag" || e.from >= r.firstChild.to) && t.push(i);
  }
  return t;
}
const x5 = /^[:\-\.\w\u00b7-\uffff]*$/;
function Sm(n, e, t, r, i) {
  let s = /\s*>/.test(n.sliceDoc(i, i + 5)) ? "" : ">", l = wi(t, !0);
  return {
    from: r,
    to: i,
    options: b5(n.doc, l, e).map((a) => ({ label: a, type: "type" })).concat(uc(n.doc, t).map((a, o) => ({
      label: "/" + a,
      apply: "/" + a + s,
      type: "type",
      boost: 99 - o
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function Qm(n, e, t, r) {
  let i = /\s*>/.test(n.sliceDoc(r, r + 5)) ? "" : ">";
  return {
    from: t,
    to: r,
    options: uc(n.doc, e).map((s, l) => ({ label: s, apply: s + i, type: "type", boost: 99 - l })),
    validFor: x5
  };
}
function J$(n, e, t, r) {
  let i = [], s = 0;
  for (let l of b5(n.doc, t, e))
    i.push({ label: "<" + l, type: "type" });
  for (let l of uc(n.doc, t))
    i.push({ label: "</" + l + ">", type: "type", boost: 99 - s++ });
  return { from: r, to: r, options: i, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function eD(n, e, t, r, i) {
  let s = wi(t), l = s ? e.tags[vi(n.doc, s)] : null, a = l && l.attrs ? Object.keys(l.attrs) : [], o = l && l.globalAttrs === !1 ? a : a.length ? a.concat(e.globalAttrNames) : e.globalAttrNames;
  return {
    from: r,
    to: i,
    options: o.map((u) => ({ label: u, type: "property" })),
    validFor: x5
  };
}
function tD(n, e, t, r, i) {
  var s;
  let l = (s = t.parent) === null || s === void 0 ? void 0 : s.getChild("AttributeName"), a = [], o;
  if (l) {
    let u = n.sliceDoc(l.from, l.to), h = e.globalAttrs[u];
    if (!h) {
      let c = wi(t), f = c ? e.tags[vi(n.doc, c)] : null;
      h = (f == null ? void 0 : f.attrs) && f.attrs[u];
    }
    if (h) {
      let c = n.sliceDoc(r, i).toLowerCase(), f = '"', d = '"';
      /^['"]/.test(c) ? (o = c[0] == '"' ? /^[^"]*$/ : /^[^']*$/, f = "", d = n.sliceDoc(i, i + 1) == c[0] ? "" : c[0], c = c.slice(1), r++) : o = /^[^\s<>='"]*$/;
      for (let m of h)
        a.push({ label: m, apply: f + m + d, type: "constant" });
    }
  }
  return { from: r, to: i, options: a, validFor: o };
}
function v5(n, e) {
  let { state: t, pos: r } = e, i = ot(t).resolveInner(r, -1), s = i.resolve(r);
  for (let l = r, a; s == i && (a = i.childBefore(l)); ) {
    let o = a.lastChild;
    if (!o || !o.type.isError || o.from < o.to)
      break;
    s = i = a, l = o.from;
  }
  return i.name == "TagName" ? i.parent && /CloseTag$/.test(i.parent.name) ? Qm(t, i, i.from, r) : Sm(t, n, i, i.from, r) : i.name == "StartTag" ? Sm(t, n, i, r, r) : i.name == "StartCloseTag" || i.name == "IncompleteCloseTag" ? Qm(t, i, r, r) : i.name == "OpenTag" || i.name == "SelfClosingTag" || i.name == "AttributeName" ? eD(t, n, i, i.name == "AttributeName" ? i.from : r, r) : i.name == "Is" || i.name == "AttributeValue" || i.name == "UnquotedAttributeValue" ? tD(t, n, i, i.name == "Is" ? r : i.from, r) : e.explicit && (s.name == "Element" || s.name == "Text" || s.name == "Document") ? J$(t, n, i, r) : null;
}
function nD(n) {
  return v5(Ts.default, n);
}
function rD(n) {
  let { extraTags: e, extraGlobalAttributes: t } = n, r = t || e ? new Ts(e, t) : Ts.default;
  return (i) => v5(r, i);
}
const iD = /* @__PURE__ */ Cn.parser.configure({ top: "SingleExpression" }), w5 = [
  {
    tag: "script",
    attrs: (n) => n.type == "text/typescript" || n.lang == "ts",
    parser: f5.parser
  },
  {
    tag: "script",
    attrs: (n) => n.type == "text/babel" || n.type == "text/jsx",
    parser: d5.parser
  },
  {
    tag: "script",
    attrs: (n) => n.type == "text/typescript-jsx",
    parser: p5.parser
  },
  {
    tag: "script",
    attrs(n) {
      return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(n.type);
    },
    parser: iD
  },
  {
    tag: "script",
    attrs(n) {
      return !n.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(n.type);
    },
    parser: Cn.parser
  },
  {
    tag: "style",
    attrs(n) {
      return (!n.lang || n.lang == "css") && (!n.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(n.type));
    },
    parser: wa.parser
  }
], k5 = /* @__PURE__ */ [
  {
    name: "style",
    parser: /* @__PURE__ */ wa.parser.configure({ top: "Styles" })
  }
].concat(/* @__PURE__ */ y5.map((n) => ({ name: n, parser: Cn.parser }))), S5 = /* @__PURE__ */ gi.define({
  name: "html",
  parser: /* @__PURE__ */ xA.configure({
    props: [
      /* @__PURE__ */ Us.add({
        Element(n) {
          let e = /^(\s*)(<\/)?/.exec(n.textAfter);
          return n.node.to <= n.pos + e[0].length ? n.continue() : n.lineIndent(n.node.from) + (e[2] ? 0 : n.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        },
        Document(n) {
          if (n.pos + /\s*/.exec(n.textAfter)[0].length < n.node.to)
            return n.continue();
          let e = null, t;
          for (let r = n.node; ; ) {
            let i = r.lastChild;
            if (!i || i.name != "Element" || i.to != r.to)
              break;
            e = r = i;
          }
          return e && !((t = e.lastChild) && (t.name == "CloseTag" || t.name == "SelfClosingTag")) ? n.lineIndent(e.from) + n.unit : null;
        }
      }),
      /* @__PURE__ */ Ws.add({
        Element(n) {
          let e = n.firstChild, t = n.lastChild;
          return !e || e.name != "OpenTag" ? null : { from: e.to, to: t.name == "CloseTag" ? t.from : n.to };
        }
      }),
      /* @__PURE__ */ aP.add({
        "OpenTag CloseTag": (n) => n.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/\w+\W$/,
    wordChars: "-._"
  }
}), _l = /* @__PURE__ */ S5.configure({
  wrap: /* @__PURE__ */ J2(w5, k5)
});
function sD(n = {}) {
  let e = "", t;
  n.matchClosingTags === !1 && (e = "noMatch"), n.selfClosingTags === !0 && (e = (e ? e + " " : "") + "selfClosing"), (n.nestedLanguages && n.nestedLanguages.length || n.nestedAttributes && n.nestedAttributes.length) && (t = J2((n.nestedLanguages || []).concat(w5), (n.nestedAttributes || []).concat(k5)));
  let r = t ? S5.configure({ wrap: t, dialect: e }) : e ? _l.configure({ dialect: e }) : _l;
  return new Ps(r, [
    _l.data.of({ autocomplete: rD(n) }),
    n.autoCloseTags !== !1 ? lD : [],
    W$().support,
    YA().support
  ]);
}
const Pm = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" ")), lD = /* @__PURE__ */ he.inputHandler.of((n, e, t, r, i) => {
  if (n.composing || n.state.readOnly || e != t || r != ">" && r != "/" || !_l.isActiveAt(n.state, e, -1))
    return !1;
  let s = i(), { state: l } = s, a = l.changeByRange((o) => {
    var u, h, c;
    let f = l.doc.sliceString(o.from - 1, o.to) == r, { head: d } = o, m = ot(l).resolveInner(d, -1), O;
    if (f && r == ">" && m.name == "EndTag") {
      let x = m.parent;
      if (((h = (u = x.parent) === null || u === void 0 ? void 0 : u.lastChild) === null || h === void 0 ? void 0 : h.name) != "CloseTag" && (O = vi(l.doc, x.parent, d)) && !Pm.has(O)) {
        let b = d + (l.doc.sliceString(d, d + 1) === ">" ? 1 : 0), w = `</${O}>`;
        return { range: o, changes: { from: d, to: b, insert: w } };
      }
    } else if (f && r == "/" && m.name == "IncompleteCloseTag") {
      let x = m.parent;
      if (m.from == d - 2 && ((c = x.lastChild) === null || c === void 0 ? void 0 : c.name) != "CloseTag" && (O = vi(l.doc, x, d)) && !Pm.has(O)) {
        let b = d + (l.doc.sliceString(d, d + 1) === ">" ? 1 : 0), w = `${O}>`;
        return {
          range: _.cursor(d + w.length, -1),
          changes: { from: d, to: b, insert: w }
        };
      }
    }
    return { range: o };
  });
  return a.changes.empty ? !1 : (n.dispatch([
    s,
    l.update(a, {
      userEvent: "input.complete",
      scrollIntoView: !0
    })
  ]), !0);
}), Q5 = /* @__PURE__ */ Gh({ commentTokens: { block: { open: "<!--", close: "-->" } } }), P5 = /* @__PURE__ */ new pe(), C5 = /* @__PURE__ */ mC.configure({
  props: [
    /* @__PURE__ */ Ws.add((n) => !n.is("Block") || n.is("Document") || W0(n) != null || aD(n) ? void 0 : (e, t) => ({ from: t.doc.lineAt(e.from).to, to: e.to })),
    /* @__PURE__ */ P5.add(W0),
    /* @__PURE__ */ Us.add({
      Document: () => null
    }),
    /* @__PURE__ */ Zr.add({
      Document: Q5
    })
  ]
});
function W0(n) {
  let e = /^(?:ATX|Setext)Heading(\d)$/.exec(n.name);
  return e ? +e[1] : void 0;
}
function aD(n) {
  return n.name == "OrderedList" || n.name == "BulletList";
}
function oD(n, e) {
  let t = n;
  for (; ; ) {
    let r = t.nextSibling, i;
    if (!r || (i = W0(r.type)) != null && i <= e)
      break;
    t = r;
  }
  return t.to;
}
const uD = /* @__PURE__ */ rP.of((n, e, t) => {
  for (let r = ot(n).resolveInner(t, -1); r && !(r.from < e); r = r.parent) {
    let i = r.type.prop(P5);
    if (i == null)
      continue;
    let s = oD(r, i);
    if (s > t)
      return { from: t, to: s };
  }
  return null;
});
function hc(n) {
  return new Yt(Q5, n, [uD], "markdown");
}
const hD = /* @__PURE__ */ hc(C5), cD = /* @__PURE__ */ C5.configure([PC, AC, CC, $C, {
  props: [
    /* @__PURE__ */ Ws.add({
      Table: (n, e) => ({ from: e.doc.lineAt(n.from).to, to: n.to })
    })
  ]
}]), cc = /* @__PURE__ */ hc(cD);
function fD(n, e) {
  return (t) => {
    if (t && n) {
      let r = null;
      if (t = /\S*/.exec(t)[0], typeof n == "function" ? r = n(t) : r = fa.matchLanguageName(n, t, !0), r instanceof fa)
        return r.support ? r.support.language.parser : Qs.getSkippingParser(r.load());
      if (r)
        return r.parser;
    }
    return e ? e.parser : null;
  };
}
class Qu {
  constructor(e, t, r, i, s, l, a) {
    this.node = e, this.from = t, this.to = r, this.spaceBefore = i, this.spaceAfter = s, this.type = l, this.item = a;
  }
  blank(e, t = !0) {
    let r = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
    if (e != null) {
      for (; r.length < e; )
        r += " ";
      return r;
    } else {
      for (let i = this.to - this.from - r.length - this.spaceAfter.length; i > 0; i--)
        r += " ";
      return r + (t ? this.spaceAfter : "");
    }
  }
  marker(e, t) {
    let r = this.node.name == "OrderedList" ? String(+$5(this.item, e)[2] + t) : "";
    return this.spaceBefore + r + this.type + this.spaceAfter;
  }
}
function A5(n, e) {
  let t = [], r = [];
  for (let i = n; i; i = i.parent) {
    if (i.name == "FencedCode")
      return r;
    (i.name == "ListItem" || i.name == "Blockquote") && t.push(i);
  }
  for (let i = t.length - 1; i >= 0; i--) {
    let s = t[i], l, a = e.lineAt(s.from), o = s.from - a.from;
    if (s.name == "Blockquote" && (l = /^ *>( ?)/.exec(a.text.slice(o))))
      r.push(new Qu(s, o, o + l[0].length, "", l[1], ">", null));
    else if (s.name == "ListItem" && s.parent.name == "OrderedList" && (l = /^( *)\d+([.)])( *)/.exec(a.text.slice(o)))) {
      let u = l[3], h = l[0].length;
      u.length >= 4 && (u = u.slice(0, u.length - 4), h -= 4), r.push(new Qu(s.parent, o, o + h, l[1], u, l[2], s));
    } else if (s.name == "ListItem" && s.parent.name == "BulletList" && (l = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(a.text.slice(o)))) {
      let u = l[4], h = l[0].length;
      u.length > 4 && (u = u.slice(0, u.length - 4), h -= 4);
      let c = l[2];
      l[3] && (c += l[3].replace(/[xX]/, " ")), r.push(new Qu(s.parent, o, o + h, l[1], u, c, s));
    }
  }
  return r;
}
function $5(n, e) {
  return /^(\s*)(\d+)(?=[.)])/.exec(e.sliceString(n.from, n.from + 10));
}
function Pu(n, e, t, r = 0) {
  for (let i = -1, s = n; ; ) {
    if (s.name == "ListItem") {
      let a = $5(s, e), o = +a[2];
      if (i >= 0) {
        if (o != i + 1)
          return;
        t.push({ from: s.from + a[1].length, to: s.from + a[0].length, insert: String(i + 2 + r) });
      }
      i = o;
    }
    let l = s.nextSibling;
    if (!l)
      break;
    s = l;
  }
}
function fc(n, e) {
  let t = /^[ \t]*/.exec(n)[0].length;
  if (!t || e.facet(_s) != "	")
    return n;
  let r = Kn(n, 4, t), i = "";
  for (let s = r; s > 0; )
    s >= 4 ? (i += "	", s -= 4) : (i += " ", s--);
  return i + n.slice(t);
}
const dD = ({ state: n, dispatch: e }) => {
  let t = ot(n), { doc: r } = n, i = null, s = n.changeByRange((l) => {
    if (!l.empty || !cc.isActiveAt(n, l.from, 0))
      return i = { range: l };
    let a = l.from, o = r.lineAt(a), u = A5(t.resolveInner(a, -1), r);
    for (; u.length && u[u.length - 1].from > a - o.from; )
      u.pop();
    if (!u.length)
      return i = { range: l };
    let h = u[u.length - 1];
    if (h.to - h.spaceAfter.length > a - o.from)
      return i = { range: l };
    let c = a >= h.to - h.spaceAfter.length && !/\S/.test(o.text.slice(h.to));
    if (h.item && c) {
      let x = h.node.firstChild, b = h.node.getChild("ListItem", "ListItem");
      if (x.to >= a || b && b.to < a || o.from > 0 && !/[^\s>]/.test(r.lineAt(o.from - 1).text)) {
        let w = u.length > 1 ? u[u.length - 2] : null, C, Z = "";
        w && w.item ? (C = o.from + w.from, Z = w.marker(r, 1)) : C = o.from + (w ? w.to : 0);
        let T = [{ from: C, to: a, insert: Z }];
        return h.node.name == "OrderedList" && Pu(h.item, r, T, -2), w && w.node.name == "OrderedList" && Pu(w.item, r, T), { range: _.cursor(C + Z.length), changes: T };
      } else {
        let w = Am(u, n, o);
        return {
          range: _.cursor(a + w.length + 1),
          changes: { from: o.from, insert: w + n.lineBreak }
        };
      }
    }
    if (h.node.name == "Blockquote" && c && o.from) {
      let x = r.lineAt(o.from - 1), b = />\s*$/.exec(x.text);
      if (b && b.index == h.from) {
        let w = n.changes([
          { from: x.from + b.index, to: x.to },
          { from: o.from + h.from, to: o.to }
        ]);
        return { range: l.map(w), changes: w };
      }
    }
    let f = [];
    h.node.name == "OrderedList" && Pu(h.item, r, f);
    let d = h.item && h.item.from < o.from, m = "";
    if (!d || /^[\s\d.)\-+*>]*/.exec(o.text)[0].length >= h.to)
      for (let x = 0, b = u.length - 1; x <= b; x++)
        m += x == b && !d ? u[x].marker(r, 1) : u[x].blank(x < b ? Kn(o.text, 4, u[x + 1].from) - m.length : null);
    let O = a;
    for (; O > o.from && /\s/.test(o.text.charAt(O - o.from - 1)); )
      O--;
    return m = fc(m, n), pD(h.node, n.doc) && (m = Am(u, n, o) + n.lineBreak + m), f.push({ from: O, to: a, insert: n.lineBreak + m }), { range: _.cursor(O + m.length + 1), changes: f };
  });
  return i ? !1 : (e(n.update(s, { scrollIntoView: !0, userEvent: "input" })), !0);
};
function Cm(n) {
  return n.name == "QuoteMark" || n.name == "ListMark";
}
function pD(n, e) {
  if (n.name != "OrderedList" && n.name != "BulletList")
    return !1;
  let t = n.firstChild, r = n.getChild("ListItem", "ListItem");
  if (!r)
    return !1;
  let i = e.lineAt(t.to), s = e.lineAt(r.from), l = /^[\s>]*$/.test(i.text);
  return i.number + (l ? 0 : 1) < s.number;
}
function Am(n, e, t) {
  let r = "";
  for (let i = 0, s = n.length - 2; i <= s; i++)
    r += n[i].blank(i < s ? Kn(t.text, 4, Math.min(t.text.length, n[i + 1].from)) - r.length : null, i < s);
  return fc(r, e);
}
function mD(n, e) {
  let t = n.resolveInner(e, -1), r = e;
  Cm(t) && (r = t.from, t = t.parent);
  for (let i; i = t.childBefore(r); )
    if (Cm(i))
      r = i.from;
    else if (i.name == "OrderedList" || i.name == "BulletList")
      t = i.lastChild, r = t.to;
    else
      break;
  return t;
}
const gD = ({ state: n, dispatch: e }) => {
  let t = ot(n), r = null, i = n.changeByRange((s) => {
    let l = s.from, { doc: a } = n;
    if (s.empty && cc.isActiveAt(n, s.from)) {
      let o = a.lineAt(l), u = A5(mD(t, l), a);
      if (u.length) {
        let h = u[u.length - 1], c = h.to - h.spaceAfter.length + (h.spaceAfter ? 1 : 0);
        if (l - o.from > c && !/\S/.test(o.text.slice(c, l - o.from)))
          return {
            range: _.cursor(o.from + c),
            changes: { from: o.from + c, to: l }
          };
        if (l - o.from == c && // Only apply this if we're on the line that has the
        // construct's syntax, or there's only indentation in the
        // target range
        (!h.item || o.from <= h.item.from || !/\S/.test(o.text.slice(0, h.to)))) {
          let f = o.from + h.from;
          if (h.item && h.node.from < h.item.from && /\S/.test(o.text.slice(h.from, h.to))) {
            let d = h.blank(Kn(o.text, 4, h.to) - Kn(o.text, 4, h.from));
            return f == o.from && (d = fc(d, n)), {
              range: _.cursor(f + d.length),
              changes: { from: f, to: o.from + h.to, insert: d }
            };
          }
          if (f < l)
            return { range: _.cursor(f), changes: { from: f, to: l } };
        }
      }
    }
    return r = { range: s };
  });
  return r ? !1 : (e(n.update(i, { scrollIntoView: !0, userEvent: "delete" })), !0);
}, OD = [
  { key: "Enter", run: dD },
  { key: "Backspace", run: gD }
], D5 = /* @__PURE__ */ sD({ matchClosingTags: !1 });
function yD(n = {}) {
  let { codeLanguages: e, defaultCodeLanguage: t, addKeymap: r = !0, base: { parser: i } = hD, completeHTMLTags: s = !0, htmlTagLanguage: l = D5 } = n;
  if (!(i instanceof Na))
    throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
  let a = n.extensions ? [n.extensions] : [], o = [l.support], u;
  t instanceof Ps ? (o.push(t.support), u = t.language) : t && (u = t);
  let h = e || u ? fD(e, u) : void 0;
  a.push(OC({ codeParser: h, htmlParser: l.language.parser })), r && o.push(Ai.high(Vs.of(OD)));
  let c = hc(i.configure(a));
  return s && o.push(c.data.of({ autocomplete: bD })), new Ps(c, o);
}
function bD(n) {
  let { state: e, pos: t } = n, r = /<[:\-\.\w\u00b7-\uffff]*$/.exec(e.sliceDoc(t - 25, t));
  if (!r)
    return null;
  let i = ot(e).resolveInner(t, -1);
  for (; i && !i.type.isTop; ) {
    if (i.name == "CodeBlock" || i.name == "FencedCode" || i.name == "ProcessingInstructionBlock" || i.name == "CommentBlock" || i.name == "Link" || i.name == "Image")
      return null;
    i = i.parent;
  }
  return {
    from: t - r[0].length,
    to: t,
    options: xD(),
    validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
  };
}
let Cu = null;
function xD() {
  if (Cu)
    return Cu;
  let n = nD(new tC(Pe.create({ extensions: D5 }), 0, !0));
  return Cu = n ? n.options : [];
}
const dc = (n) => ({ state: e, dispatch: t }) => {
  const r = n.length;
  if (e.selection.main.empty)
    return !1;
  const s = e.changeByRange((l) => {
    const a = e.sliceDoc(l.from - r, l.from) === n, o = e.sliceDoc(l.to, l.to + r) === n, u = [];
    u.push(
      a ? {
        from: l.from - r,
        to: l.from,
        insert: ye.of([""])
      } : {
        from: l.from,
        insert: ye.of([n])
      }
    ), u.push(
      o ? {
        from: l.to,
        to: l.to + r,
        insert: ye.of([""])
      } : {
        from: l.to,
        insert: ye.of([n])
      }
    );
    const h = a ? -1 * r : r, c = o ? -1 * r : r;
    return {
      changes: u,
      range: _.range(
        l.from + h,
        l.to + c
      )
    };
  });
  return t(
    e.update(s, {
      scrollIntoView: !0,
      annotations: Ke.userEvent.of("input")
    })
  ), !0;
}, vD = dc("_"), wD = dc("**"), kD = dc("`"), SD = [
  // Note: `Mod` refers to `Ctrl` on Linux and Windows and `Cmd` on Mac keyboards
  { key: "Mod-i", run: vD },
  { key: "Mod-b", run: wD },
  // prettier-ignore
  { key: "`", run: kD }
], QD = [
  { key: "Alt-ArrowUp", run: Bp },
  { key: "Ctrl-Shift-ArrowUp", run: Bp },
  { key: "Shift-Alt-ArrowUp", run: _P },
  { key: "Alt-ArrowDown", run: Lp },
  { key: "Ctrl-Shift-ArrowDown", run: Lp },
  { key: "Shift-Alt-ArrowDown", run: UP }
], PD = [
  dP(),
  EQ(),
  CQ(),
  MQ(),
  nP(),
  he.lineWrapping,
  Vs.of([
    ...JP,
    ...wP,
    eC,
    ...QD
  ])
], CD = iP(
  qa.define([
    {
      tag: $.heading1,
      class: "cm-heading-h1"
    },
    {
      tag: $.heading2,
      class: "cm-heading-h2"
    },
    {
      tag: $.heading3,
      class: "cm-heading-h3"
    },
    {
      tag: $.heading4,
      class: "cm-heading-h4"
    },
    {
      tag: $.link,
      class: "cm-link"
    },
    {
      tag: $.emphasis,
      class: "cm-italic"
    },
    {
      tag: $.strong,
      class: "cm-strong"
    },
    {
      tag: $.monospace,
      class: "cm-mono"
    },
    {
      tag: $.content,
      class: "cm-p"
    },
    {
      tag: $.meta,
      class: "cm-meta"
    }
  ]),
  { fallback: !1 }
), $m = [
  PD,
  yD({
    base: cc,
    codeLanguages: [],
    completeHTMLTags: !1,
    addKeymap: !0
  }),
  Vs.of([...SD]),
  CD
], AD = ({
  parentId: n,
  doc: e = "",
  extensions: t = []
}) => {
  const r = document == null ? void 0 : document.getElementById(n);
  if (!r)
    throw new Error(
      `Element with provided id #${n} doesn't exist in the DOM.`
    );
  const i = t.length ? [...$m, ...t] : $m;
  return console.log(
    `Creating new CodeMirror instance inside #${n} with ${t.length} custom extensions`
  ), new he({
    doc: e,
    parent: r,
    extensions: i
  });
};
class $D {
  constructor(e) {
    Yr(this, "editorView");
    Yr(this, "markdownProcessor");
    Yr(this, "_mode");
    // @ts-expect-error : if the elements cannot be created an exception is thrown
    Yr(this, "editElt");
    // @ts-expect-error : if the elements cannot be created an exception is thrown
    Yr(this, "previewElt");
    this._mode = e.mode || "preview", this.loadKatexScript(), this.initializeContainers(e.parentId), this.editorView = AD({
      ...e,
      parentId: e.parentId + "-editor"
    }), this.markdownProcessor = n3().use(a6).use(wb).use(Qb).use(Tx).use(yv).use(_w).use(Cv).use(Lv, { target: "_blank" }).use(ow, { className: "image" }).use(aS), this.updateView();
  }
  get mode() {
    return this._mode;
  }
  async loadKatexScript() {
    const e = await Promise.resolve().then(() => $x);
    globalThis.katex = e, console.log("Imported katex in the global context");
  }
  initializeContainers(e) {
    const t = document.getElementById(e);
    if (!t)
      throw new Error(`Element with id ${e} not found`);
    this.editElt = document.createElement("div"), this.editElt.id = `${e}-editor`, this.editElt.style.height = "100%", this.previewElt = document.createElement("div"), this.previewElt.id = `${e}-preview`, this.previewElt.style.height = "100%", this.previewElt.style.overflow = "auto", t.innerHTML = "", t.append(this.editElt, this.previewElt);
  }
  updateView() {
    this._mode === "edit" ? (this.previewElt.style.display = "none", this.editElt.style.display = "block", this.editorView.focus()) : (this.editElt.style.display = "none", this.previewElt.style.display = "block", this.previewElt.innerHTML = this.html());
  }
  /**
   * Get the rendered HTML of the current markdown content
   */
  html() {
    const e = this.editorView.state.doc.toString();
    try {
      return this.markdownProcessor.processSync(e).toString();
    } catch (t) {
      return console.error(
        "[MarkdownEditor.html()] Error processing markdown:",
        t
      ), `<code>${t.message}</code>`;
    }
  }
  /**
   * Current editor's content as a string
   */
  text() {
    return this.editorView.state.doc.toString();
  }
  /**
   * Get the underlying CodeMirror editor instance
   */
  editor() {
    return this.editorView;
  }
  /**
   * Toggle between `edit` and `preview` modes
   * @returns the new mode after toggle
   */
  togglePreview() {
    return this._mode = this._mode === "edit" ? "preview" : "edit", this.updateView(), this._mode;
  }
}
const DD = {
  theme: "default",
  palette: "default",
  mode: "edit"
};
function TD() {
  const n = new URLSearchParams(window.location.search), e = { ...DD };
  for (const [t, r] of n.entries())
    (t === "theme" || t === "palette") && (e[t] = r);
  return console.log("Loaded theme and palette", e), e;
}
function MD(n = "default") {
  let e = document.getElementById("theme-loader");
  e || (e = document.createElement("link"), e.id = "theme-loader", e.rel = "stylesheet", document.head.appendChild(e));
  const t = `style/themes/${n}.css`;
  e.href = t, e.addEventListener("error", () => {
    console.error("Failed to load theme:", t);
  });
}
function ED(n = "default") {
  let e = document.getElementById("palette-loader");
  e || (e = document.createElement("link"), e.id = "palette-loader", e.rel = "stylesheet", document.head.appendChild(e));
  const t = `style/palettes/${n}.css`;
  e.href = t, e.addEventListener("error", () => {
    console.error("Failed to load palette:", t);
  });
}
const RD = (n, e = "floating-toolbar") => {
  const t = document.createElement("aside");
  t.id = e, t.style.position = "fixed";
  const r = document.createElement("button");
  r.id = "toggle-preview", r.addEventListener("click", () => {
    r.innerText = n.mode, n.togglePreview();
  }), r.innerText = n.mode === "preview" ? "edit" : "preview", t.append(r), document.body.append(t);
}, ZD = `# MARKDOWN THEMABLE EDITOR

## Tech

- [CodeMirror with a few plugins](https://codemirror.net/docs/)
- [Rehype, Remark.. for the markdown to HTML conversion](https://unifiedjs.com/)
- [Vite](https://vite.dev/)

## Features

### (almost) WISIWYG edit mode

The theming (typographic styles, colors..) are automatically applied _during_ the edition _but_.. the **Markdown** syntax tags like (\`#\`, \`##\`, etc..) are _always_ visible with some colored sugar to make them stand out.

![Rendering Screenshot](/rendering-screenshot.png)

### Markdown to HTML with advanced plugins

List of preloaded-plugins:

- [x] GFM (Github Flavored Markdown)
- [x] History (undo any edit with \`Ctrl-Z\`, redo with \`Ctrl-Y\`)
- [x] Automatic slug ids for headings (allow TOC generation)
- [x] Open external links in new window
- [x] Line breaks (force line breaks with single newline \`\\n\`)
- [x] TODO lists (like this one)
- [x] Support for inline (\`$...$\`) and block (\`$$...$$\`) $\\LaTeX$ expressions
- [x] Common keybindings + some more...
- [ ] Drop images for insertion

List of keybindings :

All the of the [standards key maps](https://codemirror.net/docs/ref/#commands.standardKeymap) plus the followings:

- \`Ctrl-b\`: Toggle **bold** selection
- \`Ctrl-i\`: Toggle _italic_ selection
- \`BackQuote\`: Toggle \`code\` selection
- \`Alt-ArrowUp\`, \`Ctrl-Shift-ArrowUp\`: Move line Up
- \`Alt-ArrowDown\`, \`Ctrl-Shift-ArrowDown\`: Move line Down
- \`Shift-Alt-ArrowUp\`: Copy line Up
- \`Shift-Alt-ArrowDown\`: Copy line Down

### Themes

Load a different theme by appending a parameter \`?theme=\` to the editor's URL.

Themes are just CSS files that override the current values of the available CSS variables:

\`\`\`css
/**
 * Root variables for theming.
 * Define global styles for typography, colors, and layout.
 */
:root {
  /* Typography */
  --font-family-serif: serif;
  --font-family-sans: sans-serif;
  --font-family-mono: monospace;
  --font-size-base: 18px;
  --line-height-base: 1.5;
  --line-height-list-item: 1.2;
  --font-weight-base: 400;
  --font-weight-heading: bold;

  /** Define the usages of the font families */
  --font-family-headings: var(--font-family-serif);
  --font-family-content: var(--font-family-serif);

  /* Block margins */
  --heading-margin-top: 1rem;
  --heading-margin-bottom: 0.5rem;
  --paragraph-margin-bottom: 0.8rem;

  /* Colors */
  --color-background-base: #f0f0f0;
  --color-page-background: white;

  --color-text-base: #222;
  --color-headings: black;
  --color-strong: var(--color-headings);
  --color-meta: darkgrey;
  --color-code-background: var(--color-background-base);
  --color-link: #14d1f1;

  /* Layout */
  --page-width: 80%;
  --page-max-width: 800px;
  --page-margin: 2rem;
  --page-padding: 3rem;

  /* CodeMirror Editor */
  --color-selection-background: yellow;
  --codemirror-active-line-background: #00000005;
}
\`\`\`

List of available themes :

- default
- natgeo
- marko
- revisions
- fruity
- recipes
- country
- dracula

### Palettes

Surcharge the theme's default color with a palette.
Load a different palette by appending a parameter \`?palette=\` to the editor's URL.

Palettes are just a subset of all the theme's variables. They contain only the colors definitions:

\`\`\`css
/**
 * Default palette
 */
:root {
  /* Colors */
  --color-background-base: #f0f0f0;
  --color-page-background: white;

  --color-text-base: #222;
  --color-headings: black;
  --color-heading-h1: var(--color-headings);
  --color-heading-h2: var(--color-headings);
  --color-heading-h3: var(--color-headings);
  --color-heading-h4: var(--color-headings);
  --color-heading-h5: var(--color-headings);
  --color-heading-h6: var(--color-headings);

  --color-strong: var(--color-headings);
  --color-meta: darkgrey;
  --color-code-background: var(--color-background-base);
  --color-link: #14d1f1;

  /* CodeMirror Editor */
  --color-selection: yellow;
  --color-active-line: #00000005;
}
\`\`\`
`, { mode: zD, theme: FD, palette: BD } = TD(), LD = () => {
  try {
    MD(FD), ED(BD);
    const n = new $D({ parentId: "page", doc: ZD, mode: zD });
    RD(n);
  } catch (n) {
    console.error(n);
  }
};
LD();
